

 *******************************************************************************
mmtbx/validation/regression/tst_keep_hydrogens.py
from __future__ import absolute_import, division, print_function

# 1yiwH_Tyr-clashOH_Arg54 constructed by Jane
pdb = """
ATOM    415  N   ARG A  54      24.163   6.042   4.912  1.00  8.56           N
ATOM    416  CA  ARG A  54      24.154   7.204   5.783  1.00  7.43           C
ATOM    417  C   ARG A  54      25.587   7.695   6.065  1.00  8.17           C
ATOM    418  O   ARG A  54      26.582   7.006   5.785  1.00  7.99           O
ATOM    419  CB  ARG A  54      23.445   6.888   7.099  1.00  7.83           C
ATOM    420  CG  ARG A  54      21.960   6.614   6.948  1.00  9.29           C
ATOM    421  CD  ARG A  54      21.119   7.876   6.784  1.00 11.64           C
ATOM    422  NE  ARG A  54      19.760   7.560   6.356  1.00 12.47           N
ATOM    423  CZ  ARG A  54      19.322   7.602   5.106  1.00 13.14           C
ATOM    424  NH1 ARG A  54      20.125   7.966   4.106  1.00 14.25           N
ATOM    425  NH2 ARG A  54      18.049   7.296   4.866  1.00 14.31           N
ATOM      0  H   ARG A  54      24.238   5.175   5.406  1.00  8.56           H   new
ATOM      0  HA  ARG A  54      23.605   8.005   5.266  1.00  7.43           H   new
ATOM      0  HB2 ARG A  54      23.924   6.012   7.561  1.00  7.83           H   new
ATOM      0  HB3 ARG A  54      23.583   7.732   7.790  1.00  7.83           H   new
ATOM      0  HG2 ARG A  54      21.803   5.963   6.075  1.00  9.29           H   new
ATOM      0  HG3 ARG A  54      21.606   6.060   7.830  1.00  9.29           H   new
ATOM      0  HD2 ARG A  54      21.087   8.424   7.737  1.00 11.64           H   new
ATOM      0  HD3 ARG A  54      21.592   8.541   6.047  1.00 11.64           H   new
ATOM      0  HE  ARG A  54      19.107   7.290   7.063  1.00 12.47           H   new
ATOM      0 HH11 ARG A  54      21.076   8.213   4.293  1.00 14.25           H   new
ATOM      0 HH12 ARG A  54      19.777   7.992   3.169  1.00 14.25           H   new
ATOM      0 HH21 ARG A  54      17.445   7.041   5.621  1.00 14.31           H   new
ATOM      0 HH22 ARG A  54      17.697   7.321   3.930  1.00 14.31           H   new
ATOM    455  N   TYR A  59      25.004  10.207  12.486  1.00  8.08           N
ATOM    456  CA  TYR A  59      25.033   9.455  13.718  1.00  7.69           C
ATOM    457  C   TYR A  59      25.704  10.209  14.831  1.00  8.15           C
ATOM    458  O   TYR A  59      25.946   9.645  15.894  1.00  8.88           O
ATOM    459  CB  TYR A  59      25.738   8.114  13.502  1.00  6.47           C
ATOM    460  CG  TYR A  59      25.081   7.238  12.459  1.00  7.52           C
ATOM    461  CD1 TYR A  59      25.600   7.151  11.173  1.00  7.62           C
ATOM    462  CD2 TYR A  59      23.944   6.499  12.763  1.00  6.99           C
ATOM    463  CE1 TYR A  59      25.008   6.354  10.215  1.00 10.53           C
ATOM    464  CE2 TYR A  59      23.339   5.696  11.818  1.00  6.39           C
ATOM    465  CZ  TYR A  59      23.871   5.625  10.544  1.00  8.24           C
ATOM    466  OH  TYR A  59      23.274   4.827   9.594  1.00  8.82           O
ATOM      0  H   TYR A  59      25.881  10.214  12.006  1.00  8.08           H   new
ATOM      0  HA  TYR A  59      23.993   9.268  14.023  1.00  7.69           H   new
ATOM      0  HB2 TYR A  59      26.780   8.303  13.204  1.00  6.47           H   new
ATOM      0  HB3 TYR A  59      25.770   7.570  14.458  1.00  6.47           H   new
ATOM      0  HD1 TYR A  59      26.499   7.729  10.914  1.00  7.62           H   new
ATOM      0  HD2 TYR A  59      23.520   6.556  13.776  1.00  6.99           H   new
ATOM      0  HE1 TYR A  59      25.430   6.297   9.200  1.00 10.53           H   new
ATOM      0  HE2 TYR A  59      22.438   5.119  12.075  1.00  6.39           H   new
ATOM      0  HH  TYR A  59      23.201   5.331   8.734  1.00  8.82           H   new
"""

import sys
from libtbx import easy_run
from six.moves import cStringIO as StringIO

def run():
  f=open("tst_keep_hydrogens.pdb", "w")
  f.write(pdb)
  f.close()
  #for keep in range(2):
  for keep in [False,True]:
    print("keep_hydrogens=", str(keep))
    for prog in [
      "phenix.clashscore",
      "phenix.molprobity",
      ]:
      cmd = "%s tst_keep_hydrogens.pdb keep_hydrogens=%s" % (prog, keep)
      print(cmd)
      er = easy_run.fully_buffered(command=cmd)
      std = StringIO()
      er.show_stdout(out=std)
      cs=None
      for line in std.getvalue().splitlines():
        if line.find("clashscore =")>-1:
          cs = float(line.split()[2])
          break
      print('clashscore',cs)
      if cs is None: continue
      if keep: assert cs==44.44, "%s: clashscore is not 44.44 %s" % (prog, cs)
      else: assert cs==0, "%s: clashscore is not 0 %s" % (prog, cs)

if __name__=="__main__":
  args = sys.argv[1:]
  del sys.argv[1:]
  run(*tuple(args))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_model_properties.py

from __future__ import absolute_import, division, print_function
from iotbx.pdb import hierarchy
from mmtbx.monomer_library import pdb_interpretation
from mmtbx.monomer_library import server
from mmtbx.validation import model_properties
import iotbx.pdb
from libtbx.test_utils import show_diff, approx_equal
from libtbx.easy_pickle import loads, dumps
from libtbx.utils import null_out
from six.moves import cStringIO as StringIO

def exercise_1():
  pdb_raw = """\
ATOM   1134  N   LYS A  82       5.933  36.285  21.572  1.00 70.94           N
ATOM   1135  CA  LYS A  82       6.564  37.423  20.931  1.00 76.69           C
ATOM   1136  C   LYS A  82       5.553  38.547  20.756  1.00 78.75           C
ATOM   1137  O   LYS A  82       5.325  39.038  19.654  1.00 86.47           O
ATOM   1138  CB  LYS A  82       7.179  37.024  19.583  1.00 82.32           C
ATOM   1139  CG  LYS A  82       8.190  38.035  19.048  0.00 70.34           C
ATOM   1140  CD  LYS A  82       9.429  38.129  19.944  0.00 67.69           C
ATOM   1141  CE  LYS A  82       9.983  39.545  20.014  0.00 64.44           C
ATOM   1142  NZ  LYS A  82      10.933  39.832  18.908  0.00 61.45           N
ATOM   1143  H   LYS A  82       5.139  36.115  21.291  1.00 85.12           H
ATOM   1144  HA  LYS A  82       7.279  37.749  21.501  1.00 92.03           H
ATOM   1145  HB2 LYS A  82       6.469  36.939  18.928  1.00 98.78           H
ATOM   1146  HB3 LYS A  82       7.636  36.175  19.687  1.00 98.78           H
ATOM   1147  HG2 LYS A  82       8.476  37.762  18.163  0.00 84.41           H
ATOM   1148  HG3 LYS A  82       7.775  38.912  19.011  0.00 84.41           H
ATOM   1149  HD2 LYS A  82       9.193  37.853  20.843  0.00 81.23           H
ATOM   1150  HD3 LYS A  82      10.122  37.551  19.589  0.00 81.23           H
ATOM   1151  HE2 LYS A  82       9.249  40.177  19.952  0.00 77.33           H
ATOM   1152  HE3 LYS A  82      10.453  39.662  20.854  0.00 77.33           H
ATOM   1153  HZ1 LYS A  82      11.237  40.666  18.977  0.00 73.75           H
ATOM   1154  HZ2 LYS A  82      10.523  39.738  18.123  0.00 73.75           H
ATOM   1155  HZ3 LYS A  82      11.621  39.269  18.944  0.00 73.75           H
ATOM   1156  N   LYS A  83       4.936  38.927  21.866  1.00 75.79           N
ATOM   1157  CA  LYS A  83       4.177  40.172  21.966  1.00 82.80           C
ATOM   1158  C   LYS A  83       4.081  40.508  23.460  1.00 86.23           C
ATOM   1159  O   LYS A  83       2.978  40.521  24.017  1.00 79.81           O
ATOM   1160  CB  LYS A  83       2.790  40.044  21.332  1.00 79.16           C
ATOM   1161  CG  LYS A  83       2.038  41.342  21.175  0.00 70.42           C
ATOM   1162  CD  LYS A  83       2.072  41.803  19.735  0.00 66.90           C
ATOM   1163  CE  LYS A  83       1.295  43.089  19.552  0.00 62.46           C
ATOM   1164  NZ  LYS A  83       1.004  43.350  18.118  0.00 60.73           N
ATOM   1165  H   LYS A  83       4.940  38.470  22.594  1.00 90.95           H
ATOM   1166  HA  LYS A  83       4.658  40.885  21.518  1.00 99.36           H
ATOM   1167  HB2 LYS A  83       2.251  39.459  21.887  1.00 95.00           H
ATOM   1168  HB3 LYS A  83       2.890  39.655  20.449  1.00 95.00           H
ATOM   1169  HG2 LYS A  83       1.113  41.213  21.435  0.00 84.51           H
ATOM   1170  HG3 LYS A  83       2.453  42.024  21.726  0.00 84.51           H
ATOM   1171  HD2 LYS A  83       2.992  41.962  19.471  0.00 80.28           H
ATOM   1172  HD3 LYS A  83       1.672  41.123  19.171  0.00 80.28           H
ATOM   1173  HE2 LYS A  83       0.452  43.024  20.027  0.00 74.95           H
ATOM   1174  HE3 LYS A  83       1.818  43.830  19.896  0.00 74.95           H
ATOM   1175  HZ1 LYS A  83       0.521  42.683  17.780  0.00 72.87           H
ATOM   1176  HZ2 LYS A  83       1.764  43.417  17.661  0.00 72.87           H
ATOM   1177  HZ3 LYS A  83       0.548  44.109  18.034  0.00 72.87           H
ATOM   3630  N   ASN A 242      -5.454  -3.027   1.145  0.00 67.69           N
ATOM   3631  CA  ASN A 242      -4.759  -2.535  -0.037  0.00 65.44           C
ATOM   3632  C   ASN A 242      -5.734  -2.397  -1.208  0.00 63.57           C
ATOM   3633  O   ASN A 242      -6.425  -3.357  -1.552  0.00 63.94           O
ATOM   3634  CB  ASN A 242      -3.626  -3.503  -0.392  0.00 63.13           C
ATOM   3635  CG  ASN A 242      -2.802  -3.044  -1.576  0.00 63.58           C
ATOM   3636  OD1 ASN A 242      -2.524  -1.862  -1.731  0.00 65.52           O
ATOM   3637  ND2 ASN A 242      -2.399  -3.988  -2.416  0.00 62.17           N
ATOM   3638  H   ASN A 242      -5.562  -3.880   1.129  0.00 81.22           H
ATOM   3639  HA  ASN A 242      -4.375  -1.665   0.151  0.00 78.53           H
ATOM   3640  HB2 ASN A 242      -3.032  -3.587   0.370  0.00 75.76           H
ATOM   3641  HB3 ASN A 242      -4.007  -4.368  -0.611  0.00 75.76           H
ATOM   3642 HD21 ASN A 242      -1.929  -3.779  -3.104  0.00 74.60           H
ATOM   3643 HD22 ASN A 242      -2.609  -4.810  -2.272  0.00 74.60           H
ATOM      2  CA ALYS A  32      10.574   8.177  11.768  0.40 71.49           C
ATOM      3  CB ALYS A  32       9.197   8.686  12.246  0.40 74.71           C
ATOM      2  CA BLYS A  32      10.574   8.177  11.768  0.40 71.49           C
ATOM      3  CB BLYS A  32       9.197   8.686  12.246  0.40 74.71           C
ATOM      5  CA AVAL A  33      11.708   5.617  14.332  0.50 71.42           C
ATOM      6  CB AVAL A  33      11.101   4.227  14.591  0.50 71.47           C
ATOM      5  CA BVAL A  33      11.708   5.617  14.332  0.40 71.42           C
ATOM      6  CB BVAL A  33      11.101   4.227  14.591  0.40 71.47           C
TER
ATOM      1  N   GLU X  18     -13.959  12.159  -6.598  1.00260.08           N
ATOM      2  CA  GLU X  18     -13.297  13.465  -6.628  1.00269.83           C
ATOM      3  C   GLU X  18     -11.946  13.282  -7.309  1.00269.18           C
ATOM      4  CB  GLU X  18     -13.128  14.035  -5.210  1.00261.96           C
ATOM      5  CG  GLU X  18     -14.455  14.401  -4.522  1.00263.56           C
ATOM      6  CD  GLU X  18     -14.291  15.239  -3.242  1.00264.89           C
ATOM      7  OE1 GLU X  18     -14.172  14.646  -2.143  1.00264.24           O
ATOM      8  OE2 GLU X  18     -14.309  16.498  -3.306  1.00264.37           O1-
HETATM  614  S   SO4 B 101      14.994  20.601  10.862  0.00  7.02           S
HETATM  615  O1  SO4 B 101      14.234  20.194  12.077  0.00  7.69           O
HETATM  616  O2  SO4 B 101      14.048  21.062   9.850  0.00  9.28           O
HETATM  617  O3  SO4 B 101      15.905  21.686  11.261  0.00  8.01           O
HETATM  618  O4  SO4 B 101      15.772  19.454  10.371  0.00  8.18           O
TER
HETATM  122  O   HOH S   1       5.334   8.357   8.032  1.00  0.00           O
HETATM  123  O   HOH S   2       5.396  15.243  10.734  1.00202.95           O
HETATM  124  O   HOH S   3     -25.334  18.357  18.032  0.00 20.00           O
"""
  mon_lib_srv = server.server()
  ener_lib = server.ener_lib()
  pdb_in = iotbx.pdb.input(source_info=None, lines=pdb_raw)
  xrs = pdb_in.xray_structure_simple()
  hierarchy = pdb_in.construct_hierarchy()
  processed_pdb_file = pdb_interpretation.process(
    mon_lib_srv=mon_lib_srv,
    ener_lib=ener_lib,
    raw_records=hierarchy.as_pdb_string(crystal_symmetry=xrs),
    crystal_symmetry=xrs,
    log=null_out())
  hierarchy.atoms().reset_i_seq()
  mstats = model_properties.model_statistics(
    pdb_hierarchy=hierarchy,
    xray_structure=xrs,
    all_chain_proxies=processed_pdb_file.all_chain_proxies,
    ignore_hd=True)
  out = StringIO()
  mstats.show(out=out)
  #print out.getvalue()
  assert not show_diff(out.getvalue(), """\
Overall:
  Number of atoms = 50  (anisotropic = 0)
  B_iso: mean =  96.0  max = 269.8  min =   0.0
  Occupancy: mean = 0.47  max = 1.00  min = 0.00
    warning: 22 atoms with zero occupancy
  69 total B-factor or occupancy problem(s) detected
  Atoms or residues with zero occupancy:
   LYS A  82   CG    occ=0.00
   LYS A  82   CD    occ=0.00
   LYS A  82   CE    occ=0.00
   LYS A  82   NZ    occ=0.00
   LYS A  83   CG    occ=0.00
   LYS A  83   CD    occ=0.00
   LYS A  83   CE    occ=0.00
   LYS A  83   NZ    occ=0.00
   ASN A 242  (all)  occ=0.00
   SO4 B 101  (all)  occ=0.00
   HOH S   3   O     occ=0.00
Macromolecules:
  Number of atoms = 42  (anisotropic = 0)
  B_iso: mean = 108.0  max = 269.8  min =  60.7
  Occupancy: mean = 0.51  max = 1.00  min = 0.00
    warning: 16 atoms with zero occupancy
  59 total B-factor or occupancy problem(s) detected
Ligands:
  Number of atoms = 5  (anisotropic = 0)
  B_iso: mean =   8.0  max =   9.3  min =   7.0
  Occupancy: mean = 0.00  max = 0.00  min = 0.00
    warning: 5 atoms with zero occupancy
  6 total B-factor or occupancy problem(s) detected
Waters:
  Number of atoms = 3  (anisotropic = 0)
  B_iso: mean =  74.3  max = 202.9  min =   0.0
  Occupancy: mean = 0.67  max = 1.00  min = 0.00
    warning: 1 atoms with zero occupancy
  4 total B-factor or occupancy problem(s) detected
(Hydrogen atoms not included in overall counts.)
""")
  assert (len(mstats.all.bad_adps) == 1)
  assert (mstats.all.n_zero_b == 1)
  mstats2 = loads(dumps(mstats))
  out1 = StringIO()
  out2 = StringIO()
  mstats.show(out=out1)
  mstats2.show(out=out2)
  assert (out1.getvalue() == out2.getvalue())
  # now with ignore_hd=False
  mstats3 = model_properties.model_statistics(
    pdb_hierarchy=hierarchy,
    xray_structure=xrs,
    all_chain_proxies=processed_pdb_file.all_chain_proxies,
    ignore_hd=False)
  out2 = StringIO()
  mstats3.show(out=out2)
  assert (out2.getvalue() != out.getvalue())
  assert ("""   LYS A  83   HZ3   occ=0.00""" in out2.getvalue())
  outliers = mstats3.all.as_gui_table_data(include_zoom=True)
  assert (len(outliers) == 86)
  # test with all_chain_proxies undefined
  mstats4 = model_properties.model_statistics(
    pdb_hierarchy=hierarchy,
    xray_structure=xrs,
    all_chain_proxies=None,
    ignore_hd=False)
  outliers = mstats4.all.as_gui_table_data(include_zoom=True)
  assert (len(outliers) == 86)

# corner case: deuterium as ligand (from 3qza)
def exercise_2():
  pdb_raw = """\
ATOM   6407  N   GLY A 388      -0.783   9.368 -16.436  1.00 51.96           N
ATOM   6408  CA  GLY A 388      -0.227   9.888 -15.197  1.00 54.04           C
ATOM   6409  C   GLY A 388      -0.637  11.320 -14.897  1.00 55.86           C
ATOM   6410  O   GLY A 388      -1.728  11.738 -15.347  1.00 56.70           O
ATOM   6411  OXT GLY A 388       0.129  12.024 -14.203  1.00 56.98           O
ATOM   6412  D   GLY A 388      -0.460   9.727 -17.309  1.00 51.44           D
ATOM   6413  HA2 GLY A 388      -0.561   9.258 -14.385  1.00 54.07           H
ATOM   6414  HA3 GLY A 388       0.843   9.835 -15.243  1.00 54.13           H
TER    6415      GLY A 388
HETATM 6416  D   D8U A 401     -12.236 -13.695 -42.992  1.00 15.23           D
HETATM 6417  O   DOD A1001      -4.151  -5.107 -38.592  1.00 13.40           O
HETATM 6418  D1  DOD A1001      -4.760  -5.026 -39.326  1.00 15.45           D
HETATM 6419  D2  DOD A1001      -4.625  -4.741 -37.845  1.00 14.81           D
"""
  mstats = get_mstats(pdb_raw)
  out = StringIO()
  mstats.show(out=out)
  assert ("Ligands:" in out.getvalue())
  assert ("B_iso: mean =  15.2  max =  15.2  min =  15.2" in out.getvalue())

# explicitly specified ligand selection
def exercise_3():
  pdb_raw = """\
ATOM      1  CA  GLY A   1      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      2  CA  GLY A   2      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      3  CA  GLY A   3      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      4  CA  GLY A   4      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      5  CA  GLY A   5      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      6  CA  GLY A   6      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      7  CA  GLY A   7      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      8  CA  GLY A   8      -0.227   9.888 -15.197  1.00 54.04           C
ATOM      9  CA  GLY A   9      -0.227   9.888 -15.197  1.00 54.04           C
ATOM     10  CA  GLY A  10      -0.227   9.888 -15.197  1.00 54.04           C
HETATM   11  N   SEP A  11      -2.112   0.368  -0.991  1.00 20.00      A    N
HETATM   12  CA  SEP A  11      -0.692   0.284  -0.951  1.00 20.00      A    C
HETATM   13  CB  SEP A  11      -0.234   0.166   0.485  1.00 20.00      A    C
HETATM   14  OG  SEP A  11       1.130  -0.184   0.515  1.00 20.00      A    O
HETATM   15  C   SEP A  11      -0.237  -0.930  -1.727  1.00 20.00      A    C
HETATM   16  O   SEP A  11      -0.767  -2.051  -1.509  1.00 20.00      A    O
HETATM   18  P   SEP A  11       1.922  -0.008   1.871  1.00 20.00      A    P
HETATM   19  O1P SEP A  11       2.139   1.462   2.140  1.00 20.00      A    O
HETATM   20  O2P SEP A  11       3.259  -0.703   1.767  1.00 20.00      A    O-1
HETATM   21  O3P SEP A  11       1.127  -0.614   3.002  1.00 20.00      A    O-1
END"""
  mon_lib_srv = server.server()
  ener_lib = server.ener_lib()
  pdb_in = iotbx.pdb.input(source_info=None, lines=pdb_raw)
  xrs = pdb_in.xray_structure_simple()
  hierarchy = pdb_in.construct_hierarchy()
  processed_pdb_file = pdb_interpretation.process(
    mon_lib_srv=mon_lib_srv,
    ener_lib=ener_lib,
    raw_records=hierarchy.as_pdb_string(crystal_symmetry=xrs),
    crystal_symmetry=xrs,
    log=null_out())
  hierarchy.atoms().reset_i_seq()
  ligand_sel = hierarchy.atom_selection_cache().selection("resname SEP")
  mstats = model_properties.model_statistics(
    pdb_hierarchy=hierarchy,
    xray_structure=xrs,
    all_chain_proxies=processed_pdb_file.all_chain_proxies,
    ligand_selection=ligand_sel,
    ignore_hd=True)
  out = StringIO()
  mstats.show(out=out)
  assert (mstats.n_protein == 10)
  assert ("Ligands:" in out.getvalue())
  assert approx_equal(mstats.macromolecules.b_mean, 54.04)
  # now with just the raw selection string
  mstats = model_properties.model_statistics(
    pdb_hierarchy=hierarchy,
    xray_structure=xrs,
    all_chain_proxies=processed_pdb_file.all_chain_proxies,
    ligand_selection="resname SEP",
    ignore_hd=True)
  out = StringIO()
  mstats.show(out=out)
  assert (mstats.n_protein == 10)
  assert ("Ligands:" in out.getvalue())

def get_mstats(pdb_raw):
  mon_lib_srv = server.server()
  ener_lib = server.ener_lib()
  pdb_in = iotbx.pdb.input(source_info=None, lines=pdb_raw)
  xrs = pdb_in.xray_structure_simple()
  hierarchy = pdb_in.construct_hierarchy()
  processed_pdb_file = pdb_interpretation.process(
    mon_lib_srv=mon_lib_srv,
    ener_lib=ener_lib,
    raw_records=hierarchy.as_pdb_string(crystal_symmetry=xrs),
    crystal_symmetry=xrs,
    log=null_out())
  hierarchy.atoms().reset_i_seq()
  mstats = model_properties.model_statistics(
    pdb_hierarchy=hierarchy,
    xray_structure=xrs,
    all_chain_proxies=processed_pdb_file.all_chain_proxies,
    ignore_hd=True)
  return mstats

def test_zero_occupancy():
  pdb_raw = '''\
ATOM    100  N   LYS A  82       5.933  36.285  21.572  0.00 70.94           N
ATOM    101  CA  LYS A  82       6.564  37.423  20.931  1.00 76.69           C
ATOM    102  C   LYS A  82       5.553  38.547  20.756  1.00 78.75           C
ATOM    103  O   LYS A  82       5.325  39.038  19.654  1.00 86.47           O
ATOM    104  CB  LYS A  82       7.179  37.024  19.583  1.00 82.32           C
ATOM    105  CG  LYS A  82       8.190  38.035  19.048  1.00 70.34           C
ATOM    106  CD  LYS A  82       9.429  38.129  19.944  1.00 67.69           C
ATOM    107  CE  LYS A  82       9.983  39.545  20.014  1.00 64.44           C
ATOM    108  NZ  LYS A  82      10.933  39.832  18.908  1.00 61.45           N
ATOM    109  H   LYS A  82       5.139  36.115  21.291  1.00 85.12           H
ATOM    110  HA  LYS A  82       7.279  37.749  21.501  1.00 92.03           H
ATOM    111  HB2 LYS A  82       6.469  36.939  18.928  1.00 98.78           H
ATOM    112  HB3 LYS A  82       7.636  36.175  19.687  1.00 98.78           H
ATOM    113  HG2 LYS A  82       8.476  37.762  18.163  1.00 84.41           H
ATOM    114  HG3 LYS A  82       7.775  38.912  19.011  1.00 84.41           H
ATOM    115  HD2 LYS A  82       9.193  37.853  20.843  1.00 81.23           H
ATOM    116  HD3 LYS A  82      10.122  37.551  19.589  1.00 81.23           H
ATOM    117  HE2 LYS A  82       9.249  40.177  19.952  1.00 77.33           H
ATOM    118  HE3 LYS A  82      10.453  39.662  20.854  1.00 77.33           H
ATOM    119  HZ1 LYS A  82      11.237  40.666  18.977  1.00 73.75           H
ATOM    120  HZ2 LYS A  82      10.523  39.738  18.123  1.00 73.75           H
ATOM    121  HZ3 LYS A  82      11.621  39.269  18.944  1.00 73.75           H
'''
  mstats = get_mstats(pdb_raw)
  assert (mstats.all.n_outliers == 3)           # atom 100 has 0 occupancy
  assert (len(mstats.all.zero_occ) == 1)        # zero occupancy
  assert (len(mstats.all.partial_occ) == 1)     # occupancy < 1
  assert (len(mstats.all.different_occ) == 1)   # occupancies in residue differ
  return True

def test_partial_occupancy():
  pdb_raw = '''\
ATOM    100  N   LYS A  82       5.933  36.285  21.572  1.00 70.94           N
ATOM    101  CA  LYS A  82       6.564  37.423  20.931  1.00 76.69           C
ATOM    102  C   LYS A  82       5.553  38.547  20.756  1.00 78.75           C
ATOM    103  O   LYS A  82       5.325  39.038  19.654  1.00 86.47           O
ATOM    104  CB ALYS A  82       7.179  37.024  19.583  0.40 82.32           C
ATOM    105  CG ALYS A  82       8.190  38.035  19.048  0.40 70.34           C
ATOM    106  CD ALYS A  82       9.429  38.129  19.944  0.40 67.69           C
ATOM    107  CE ALYS A  82       9.983  39.545  20.014  0.40 64.44           C
ATOM    108  NZ ALYS A  82      10.933  39.832  18.908  0.40 61.45           N
ATOM    109  H  ALYS A  82       5.139  36.115  21.291  0.40 85.12           H
ATOM    110  HA ALYS A  82       7.279  37.749  21.501  0.40 92.03           H
ATOM    111  HB2ALYS A  82       6.469  36.939  18.928  0.40 98.78           H
ATOM    112  HB3ALYS A  82       7.636  36.175  19.687  0.40 98.78           H
ATOM    113  HG2ALYS A  82       8.476  37.762  18.163  0.40 84.41           H
ATOM    114  HG3ALYS A  82       7.775  38.912  19.011  0.40 84.41           H
ATOM    115  HD2ALYS A  82       9.193  37.853  20.843  0.40 81.23           H
ATOM    116  HD3ALYS A  82      10.122  37.551  19.589  0.40 81.23           H
ATOM    117  HE2ALYS A  82       9.249  40.177  19.952  0.40 77.33           H
ATOM    118  HE3ALYS A  82      10.453  39.662  20.854  0.40 77.33           H
ATOM    119  HZ1ALYS A  82      11.237  40.666  18.977  0.40 73.75           H
ATOM    120  HZ2ALYS A  82      10.523  39.738  18.123  0.40 73.75           H
ATOM    121  HZ3ALYS A  82      11.621  39.269  18.944  0.40 73.75           H
ATOM    122  CB BLYS A  82       7.179  37.024  19.583  0.60 82.32           C
ATOM    123  CG BLYS A  82       8.190  38.035  19.048  0.60 70.34           C
ATOM    124  CD BLYS A  82       9.429  38.129  19.944  0.60 67.69           C
ATOM    125  CE BLYS A  82       9.983  39.545  20.014  0.60 64.44           C
ATOM    126  NZ BLYS A  82      10.933  39.832  18.908  0.60 61.45           N
ATOM    127  H  BLYS A  82       5.139  36.115  21.291  0.60 85.12           H
ATOM    128  HA BLYS A  82       7.279  37.749  21.501  0.60 92.03           H
ATOM    129  HB2BLYS A  82       6.469  36.939  18.928  0.60 98.78           H
ATOM    130  HB3BLYS A  82       7.636  36.175  19.687  0.60 98.78           H
ATOM    131  HG2BLYS A  82       8.476  37.762  18.163  0.60 84.41           H
ATOM    132  HG3BLYS A  82       7.775  38.912  19.011  0.60 84.41           H
ATOM    133  HD2BLYS A  82       9.193  37.853  20.843  0.60 81.23           H
ATOM    134  HD3BLYS A  82      10.122  37.551  19.589  0.60 81.23           H
ATOM    135  HE2BLYS A  82       9.249  40.177  19.952  0.60 77.33           H
ATOM    136  HE3BLYS A  82      10.453  39.662  20.854  0.60 77.33           H
ATOM    137  HZ1BLYS A  82      11.237  40.666  18.977  0.60 73.75           H
ATOM    138  HZ2BLYS A  82      10.523  39.738  18.123  0.60 73.75           H
ATOM    139  HZ3BLYS A  82      11.621  39.269  18.944  0.50 73.75           H
'''
  mstats = get_mstats(pdb_raw)                 # atom 121, 139 sum < 1
  assert (mstats.all.n_outliers == 3)
  assert (len(mstats.all.partial_occ) == 2)    # occupancy < 1
  assert (len(mstats.all.different_occ) == 1)  # occupancies in residue differ
  return True

if (__name__ == "__main__"):
  exercise_1()
  exercise_2()
  exercise_3()
  test_zero_occupancy()
  test_partial_occupancy()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_molprobity_1.py

from __future__ import absolute_import, division, print_function
from mmtbx.command_line import molprobity
import iotbx.pdb
from scitbx.array_family import flex
from libtbx.test_utils import approx_equal
from libtbx.utils import null_out
from six.moves import cStringIO as StringIO
from six.moves import zip

# derivative of 1yjp, with alternate conformation Asn3 in different rotamer,
# plus Asn2/Gln4 split.  the unit cell 'b' edge has been increased to 6A to
# compensate.
pdb_raw_0 = """\
CRYST1   21.937    6.000   23.477  90.00 107.08  90.00 P 1 21 1
SCALE1      0.045585  0.000000  0.014006        0.00000
SCALE2      0.000000  0.166667  0.000000        0.00000
SCALE3      0.000000  0.000000  0.044560        0.00000
ATOM      1  N   GLY A   1      -9.047   4.634   6.066  1.00 16.37           N
ATOM      2  CA  GLY A   1      -9.040   4.191   4.677  1.00 16.17           C
ATOM      3  C   GLY A   1      -7.991   3.118   4.432  1.00 15.46           C
ATOM      4  O   GLY A   1      -7.507   2.493   5.371  1.00 16.71           O
ATOM      5  H1  GLY A   1      -9.744   5.171   6.203  1.00 16.37           H
ATOM      6  H2  GLY A   1      -9.108   3.927   6.603  1.00 16.37           H
ATOM      7  H3  GLY A   1      -8.294   5.075   6.240  1.00 16.37           H
ATOM      8  HA2 GLY A   1      -9.911   3.831   4.446  1.00 16.17           H
ATOM      9  HA3 GLY A   1      -8.853   4.945   4.096  1.00 16.17           H
ATOM     10  N  AASN A   2      -7.663   2.878   3.168  0.60 14.94           N
ATOM     11  CA AASN A   2      -6.533   2.012   2.845  0.60 14.28           C
ATOM     12  C  AASN A   2      -5.242   2.518   3.452  0.60 12.87           C
ATOM     13  O  AASN A   2      -5.000   3.723   3.505  0.60 12.55           O
ATOM     14  CB AASN A   2      -6.356   1.880   1.341  0.60 15.48           C
ATOM     15  CG AASN A   2      -7.500   1.158   0.693  0.60 13.90           C
ATOM     16  OD1AASN A   2      -8.052   1.622  -0.304  0.60 17.99           O
ATOM     17  ND2AASN A   2      -7.867   0.008   1.252  0.60 11.61           N
ATOM     18  H  AASN A   2      -8.073   3.200   2.484  0.60 15.11           H
ATOM     19  HA AASN A   2      -6.701   1.129   3.209  0.60 13.97           H
ATOM     20  HB2AASN A   2      -6.298   2.766   0.949  0.60 15.07           H
ATOM     21  HB3AASN A   2      -5.544   1.382   1.160  0.60 15.07           H
ATOM     22 HD21AASN A   2      -8.569  -0.402   0.970  0.60 11.52           H
ATOM     23 HD22AASN A   2      -7.404  -0.326   1.894  0.60 11.52           H
ATOM     24  N  BASN A   2      -7.626   2.899   3.175  0.40 15.11           N
ATOM     25  CA BASN A   2      -6.447   2.085   2.893  0.40 13.97           C
ATOM     26  C  BASN A   2      -5.209   2.731   3.488  0.40 13.04           C
ATOM     27  O  BASN A   2      -5.077   3.953   3.479  0.40 11.55           O
ATOM     28  CB BASN A   2      -6.250   1.906   1.394  0.40 15.07           C
ATOM     29  CG BASN A   2      -7.412   1.207   0.741  0.40 13.81           C
ATOM     30  OD1BASN A   2      -7.953   1.683  -0.257  0.40 17.17           O
ATOM     31  ND2BASN A   2      -7.805   0.067   1.298  0.40 11.52           N
ATOM     32  H  BASN A   2      -8.032   3.202   2.480  0.40 15.11           H
ATOM     33  HA BASN A   2      -6.556   1.209   3.295  0.40 13.97           H
ATOM     34  HB2BASN A   2      -6.153   2.778   0.981  0.40 15.07           H
ATOM     35  HB3BASN A   2      -5.454   1.374   1.240  0.40 15.07           H
ATOM     36 HD21BASN A   2      -8.484  -0.355   0.980  0.40 11.52           H
ATOM     37 HD22BASN A   2      -7.381  -0.249   1.976  0.40 11.52           H
ATOM     38  N  AASN A   3      -4.414   1.582   3.898  0.60 12.35           N
ATOM     39  CA AASN A   3      -3.182   1.908   4.599  0.60 11.68           C
ATOM     40  C  AASN A   3      -1.933   1.346   3.923  0.60 11.09           C
ATOM     41  O  AASN A   3      -1.858   0.142   3.653  0.60 10.18           O
ATOM     42  CB AASN A   3      -3.259   1.407   6.050  0.60 11.62           C
ATOM     43  CG AASN A   3      -2.011   1.746   6.852  0.60 13.00           C
ATOM     44  OD1AASN A   3      -1.704   2.921   7.070  0.60 15.44           O
ATOM     45  ND2AASN A   3      -1.287   0.720   7.295  0.60 12.87           N
ATOM     46  H  AASN A   3      -4.547   0.737   3.805  0.60 12.00           H
ATOM     47  HA AASN A   3      -3.078   2.871   4.634  0.60 11.53           H
ATOM     48  HB2AASN A   3      -4.019   1.821   6.488  0.60 12.90           H
ATOM     49  HB3AASN A   3      -3.362   0.442   6.047  0.60 12.90           H
ATOM     50 HD21AASN A   3      -0.573   0.863   7.753  0.60 12.97           H
ATOM     51 HD22AASN A   3      -1.533  -0.086   7.123  0.60 12.97           H
ATOM     52  N  BASN A   3      -4.310   1.908   4.015  0.40 12.00           N
ATOM     53  CA BASN A   3      -3.078   2.406   4.614  0.40 11.53           C
ATOM     54  C  BASN A   3      -1.844   1.661   4.111  0.40 11.70           C
ATOM     55  O  BASN A   3      -1.810   0.428   4.100  0.40 10.95           O
ATOM     56  CB BASN A   3      -3.152   2.335   6.142  0.40 12.90           C
ATOM     57  CG BASN A   3      -4.074   3.380   6.732  0.40 13.32           C
ATOM     58  OD1BASN A   3      -4.367   4.398   6.099  0.40 15.04           O
ATOM     59  ND2BASN A   3      -4.528   3.143   7.958  0.40 12.97           N
ATOM     60  H  BASN A   3      -4.390   1.052   4.038  0.40 12.00           H
ATOM     61  HA BASN A   3      -2.956   3.336   4.370  0.40 11.53           H
ATOM     62  HB2BASN A   3      -3.483   1.461   6.402  0.40 12.90           H
ATOM     63  HB3BASN A   3      -2.265   2.476   6.508  0.40 12.90           H
ATOM     64 HD21BASN A   3      -5.055   3.706   8.338  0.40 12.97           H
ATOM     65 HD22BASN A   3      -4.295   2.426   8.372  0.40 12.97           H
ATOM     66  N  AGLN A   4      -0.970   2.230   3.649  0.60 10.54           N
ATOM     67  CA AGLN A   4       0.385   1.832   3.248  0.60 10.42           C
ATOM     68  C  AGLN A   4       1.438   2.482   4.154  0.60 11.71           C
ATOM     69  O  AGLN A   4       1.592   3.742   4.128  0.60  8.92           O
ATOM     70  CB AGLN A   4       0.671   2.161   1.771  0.60  9.88           C
ATOM     71  CG AGLN A   4       1.921   1.446   1.228  0.60 10.02           C
ATOM     72  CD AGLN A   4       2.481   2.048  -0.057  0.60 12.86           C
ATOM     73  OE1AGLN A   4       2.716   3.260  -0.143  0.60 14.16           O
ATOM     74  NE2AGLN A   4       2.719   1.195  -1.059  0.60  9.04           N
ATOM     75  H  AGLN A   4      -1.078   3.082   3.689  0.60 10.83           H
ATOM     76  HA AGLN A   4       0.472   0.872   3.352  0.60 10.25           H
ATOM     77  HB2AGLN A   4      -0.088   1.885   1.234  0.60  9.74           H
ATOM     78  HB3AGLN A   4       0.810   3.117   1.682  0.60  9.74           H
ATOM     79  HG2AGLN A   4       2.620   1.485   1.899  0.60 10.05           H
ATOM     80  HG3AGLN A   4       1.694   0.521   1.045  0.60 10.05           H
ATOM     81 HE21AGLN A   4       2.557   0.357  -0.958  0.60  8.91           H
ATOM     82 HE22AGLN A   4       3.034   1.485  -1.805  0.60  8.91           H
ATOM     83  N  BGLN A   4      -0.835   2.425   3.699  0.40 10.83           N
ATOM     84  CA BGLN A   4       0.428   1.863   3.233  0.40 10.25           C
ATOM     85  C  BGLN A   4       1.600   2.421   4.037  0.40 10.29           C
ATOM     86  O  BGLN A   4       2.033   3.551   3.826  0.40 10.50           O
ATOM     87  CB BGLN A   4       0.633   2.137   1.738  0.40  9.74           C
ATOM     88  CG BGLN A   4       1.808   1.376   1.129  0.40 10.05           C
ATOM     89  CD BGLN A   4       2.359   2.037  -0.120  0.40 12.79           C
ATOM     90  OE1BGLN A   4       2.503   3.262  -0.175  0.40 15.08           O
ATOM     91  NE2BGLN A   4       2.674   1.228  -1.135  0.40  8.91           N
ATOM     92  H  BGLN A   4      -0.859   3.284   3.680  0.40 10.83           H
ATOM     93  HA BGLN A   4       0.422   0.902   3.357  0.40 10.25           H
ATOM     94  HB2BGLN A   4      -0.169   1.873   1.260  0.40  9.74           H
ATOM     95  HB3BGLN A   4       0.791   3.086   1.615  0.40  9.74           H
ATOM     96  HG2BGLN A   4       2.526   1.323   1.778  0.40 10.05           H
ATOM     97  HG3BGLN A   4       1.513   0.484   0.889  0.40 10.05           H
ATOM     98 HE21BGLN A   4       2.561   0.379  -1.059  0.40  8.91           H
ATOM     99 HE22BGLN A   4       2.990   1.556  -1.865  0.40  8.91           H
ATOM    100  N  AGLN A   5       2.125   1.651   4.991  0.60 10.59           N
ATOM    101  CA AGLN A   5       3.274   2.224   5.659  0.60 11.43           C
ATOM    102  C  AGLN A   5       4.582   1.732   5.073  0.60 11.24           C
ATOM    103  O  AGLN A   5       4.749   0.545   4.827  0.60 11.99           O
ATOM    104  CB AGLN A   5       3.229   2.076   7.170  0.60 12.07           C
ATOM    105  CG AGLN A   5       2.235   3.000   7.859  0.60 10.78           C
ATOM    106  CD AGLN A   5       1.562   2.322   9.034  0.60 12.94           C
ATOM    107  OE1AGLN A   5       1.005   1.233   8.899  0.60 10.72           O
ATOM    108  NE2AGLN A   5       1.621   2.959  10.197  0.60 12.32           N
ATOM    109  H  AGLN A   5       1.948   0.827   5.163  0.60 10.59           H
ATOM    110  HA AGLN A   5       3.279   3.179   5.509  0.60 11.43           H
ATOM    111  HB2AGLN A   5       2.987   1.162   7.384  0.60 12.07           H
ATOM    112  HB3AGLN A   5       4.109   2.273   7.527  0.60 12.07           H
ATOM    113  HG2AGLN A   5       2.702   3.784   8.188  0.60 10.78           H
ATOM    114  HG3AGLN A   5       1.548   3.260   7.225  0.60 10.78           H
ATOM    115 HE21AGLN A   5       2.025   3.716  10.253  0.60 12.32           H
ATOM    116 HE22AGLN A   5       1.255   2.615  10.895  0.60 12.32           H
ATOM    117  N  BGLN A   5       2.125   1.651   4.991  0.40 10.59           N
ATOM    118  CA BGLN A   5       3.274   2.224   5.659  0.40 11.43           C
ATOM    119  C  BGLN A   5       4.582   1.732   5.073  0.40 11.24           C
ATOM    120  O  BGLN A   5       4.749   0.545   4.827  0.40 11.99           O
ATOM    121  CB BGLN A   5       3.229   2.076   7.170  0.40 12.07           C
ATOM    122  CG BGLN A   5       2.235   3.000   7.859  0.40 10.78           C
ATOM    123  CD BGLN A   5       1.562   2.322   9.034  0.40 12.94           C
ATOM    124  OE1BGLN A   5       1.005   1.233   8.899  0.40 10.72           O
ATOM    125  NE2BGLN A   5       1.621   2.959  10.197  0.40 12.32           N
ATOM    126  H  BGLN A   5       1.863   0.873   5.246  0.40 10.59           H
ATOM    127  HA BGLN A   5       3.288   3.182   5.538  0.40 11.43           H
ATOM    128  HB2BGLN A   5       2.987   1.162   7.384  0.40 12.07           H
ATOM    129  HB3BGLN A   5       4.109   2.273   7.527  0.40 12.07           H
ATOM    130  HG2BGLN A   5       2.702   3.784   8.188  0.40 10.78           H
ATOM    131  HG3BGLN A   5       1.548   3.260   7.225  0.40 10.78           H
ATOM    132 HE21BGLN A   5       2.025   3.716  10.253  0.40 12.32           H
ATOM    133 HE22BGLN A   5       1.255   2.615  10.895  0.40 12.32           H
ATOM    134  N   ASN A   6       5.508   2.663   4.851  1.00 11.72           N
ATOM    135  CA  ASN A   6       6.825   2.322   4.325  1.00 12.12           C
ATOM    136  C   ASN A   6       7.854   2.763   5.330  1.00 13.15           C
ATOM    137  O   ASN A   6       8.221   3.937   5.380  1.00 13.93           O
ATOM    138  CB  ASN A   6       7.061   3.013   2.994  1.00 11.96           C
ATOM    139  CG  ASN A   6       5.963   2.732   2.005  1.00 12.58           C
ATOM    140  OD1 ASN A   6       5.799   1.604   1.549  1.00 14.01           O
ATOM    141  ND2 ASN A   6       5.192   3.751   1.679  1.00  9.96           N
ATOM    142  HA  ASN A   6       6.919   1.367   4.193  1.00 12.12           H
ATOM    143  HB2 ASN A   6       7.099   3.972   3.133  1.00 11.96           H
ATOM    144  HB3 ASN A   6       7.896   2.697   2.615  1.00 11.96           H
ATOM    145 HD21 ASN A   6       4.551   3.642   1.116  1.00  9.96           H
ATOM    146 HD22 ASN A   6       5.330   4.524   2.029  1.00  9.96           H
ATOM    147  H  AASN A   6       5.396   3.503   4.998  0.60 11.72           H
ATOM    148  H  BASN A   6       5.396   3.503   4.998  0.40 11.72           H
ATOM    149  N   TYR A   7       8.297   1.822   6.155  1.00 14.62           N
ATOM    150  CA  TYR A   7       9.162   2.146   7.291  1.00 15.04           C
ATOM    151  C   TYR A   7      10.611   2.329   6.888  1.00 15.56           C
ATOM    152  O   TYR A   7      11.046   1.810   5.854  1.00 15.52           O
ATOM    153  CB  TYR A   7       9.056   1.072   8.370  1.00 14.86           C
ATOM    154  CG  TYR A   7       7.657   0.941   8.898  1.00 14.38           C
ATOM    155  CD1 TYR A   7       6.767   0.030   8.334  1.00 15.46           C
ATOM    156  CD2 TYR A   7       7.206   1.753   9.930  1.00 14.37           C
ATOM    157  CE1 TYR A   7       5.476  -0.089   8.802  1.00 13.24           C
ATOM    158  CE2 TYR A   7       5.905   1.644  10.409  1.00 13.84           C
ATOM    159  CZ  TYR A   7       5.049   0.722   9.836  1.00 14.98           C
ATOM    160  OH  TYR A   7       3.767   0.593  10.299  1.00 14.28           O
ATOM    161  OXT TYR A   7      11.361   3.003   7.603  1.00 17.34           O
ATOM    162  H   TYR A   7       8.113   0.985   6.081  1.00 14.62           H
ATOM    163  HA  TYR A   7       8.860   2.981   7.681  1.00 15.04           H
ATOM    164  HB2 TYR A   7       9.319   0.217   7.995  1.00 14.86           H
ATOM    165  HB3 TYR A   7       9.638   1.306   9.110  1.00 14.86           H
ATOM    166  HD1 TYR A   7       7.053  -0.517   7.638  1.00 15.46           H
ATOM    167  HD2 TYR A   7       7.785   2.372  10.313  1.00 14.37           H
ATOM    168  HE1 TYR A   7       4.895  -0.708   8.422  1.00 13.24           H
ATOM    169  HE2 TYR A   7       5.614   2.185  11.107  1.00 13.84           H
ATOM    170  HH  TYR A   7       3.563   1.261  10.764  1.00 14.28           H
TER
HETATM  171  O   HOH S   8      -6.473   5.220   7.122  1.00 22.61           O
HETATM  172  O   HOH S   9      10.427   1.864   3.212  1.00 19.32           O
HETATM  173  O   HOH S  10     -11.288   1.762  -1.464  1.00 16.97           O
HETATM  174  O   HOH S  11      11.803   4.188   9.965  1.00 23.89           O
HETATM  175  O   HOH S  12      13.608   1.315   9.196  1.00 26.08           O
HETATM  176  O   HOH S  13      -2.736   3.452  10.015  1.00 38.68           O
HETATM  177  O   HOH S  14      -1.495   0.667  10.978  1.00 44.24           O
TER
END
"""

# test for corner cases (synthetic data okay)
def exercise_synthetic():
  pdb_in = iotbx.pdb.input(source_info=None, lines=pdb_raw_0)
  xrs = pdb_in.xray_structure_simple()
  fc = abs(xrs.structure_factors(d_min=1.5).f_calc())
  flags = fc.resolution_filter(d_min=1.6).generate_r_free_flags()
  ls = fc.lone_set(other=flags)
  # case 1: no work set in high-res shell
  flags2 = ls.array(data=flex.bool(ls.size(), True))
  flags_all = flags.concatenate(other=flags2)
  mtz_out = fc.as_mtz_dataset(column_root_label="F")
  mtz_out.add_miller_array(flags_all, column_root_label="FreeR_flag")
  mtz_out.mtz_object().write("tst_molprobity_1.mtz")
  open("tst_molprobity_1.pdb", "w").write(pdb_raw_0)
  args = [
    "tst_molprobity_1.pdb",
    "tst_molprobity_1.mtz",
    "--kinemage",
    "--maps",
    "flags.clashscore=False",
    "flags.xtriage=True",
  ]
  result = molprobity.run(args=args,
    ignore_missing_modules=True,
    out=null_out()).validation
  out = StringIO()
  result.show(out=out)
  # case 2: no test set in high-res shell
  flags2 = ls.array(data=flex.bool(ls.size(), False))
  flags_all = flags.concatenate(other=flags2)
  mtz_out = fc.as_mtz_dataset(column_root_label="F")
  mtz_out.add_miller_array(flags_all, column_root_label="FreeR_flag")
  result = molprobity.run(args=args,
    ignore_missing_modules=True,
    out=null_out()).validation
  out = StringIO()
  result.show(out=out)
  # case 3: multi-MODEL structure
  # XXX This is not a very sophisticated test - it only ensures that the
  # program does not crash.  We need a test for expected output...
  hierarchy = pdb_in.construct_hierarchy()
  model2 = hierarchy.only_model().detached_copy()
  hierarchy.append_model(model2)
  hierarchy.models()[0].id = "1"
  hierarchy.models()[1].id = "2"
  open("tst_molprobity_multi_model.pdb", "w").write(hierarchy.as_pdb_string())
  args = [
    "tst_molprobity_multi_model.pdb",
    "tst_molprobity_1.mtz",
    "--kinemage",
    "--maps",
  ]
  result = molprobity.run(args=args,
    ignore_missing_modules=True,
    out=null_out()).validation
  out = StringIO()
  result.show(out=out)
  # test rotamer distributions
  open("tst_molprobity_misc1.pdb", "w").write(pdb_raw_0)
  args = [
    "tst_molprobity_1.pdb",
    "rotamer_library=8000",
  ]
  out = StringIO()
  result = molprobity.run(args=args,
    ignore_missing_modules=True,
    out=null_out()).validation
  result.show(outliers_only=False, out=out)

def exercise_cdl():
  pdb_raw = """
ATOM   1270  N   LEU A 199       6.903  55.119  -0.416  1.00 25.48           N
ATOM   1271  CA  LEU A 199       7.726  56.192  -0.941  1.00 25.93           C
ATOM   1272  C   LEU A 199       6.996  56.972  -2.047  1.00 26.39           C
ATOM   1273  O   LEU A 199       7.020  58.180  -2.064  1.00 25.38           O
ATOM   1274  CB  LEU A 199       9.033  55.633  -1.490  1.00 25.66           C
ATOM   1278  N   ARG A 200       6.361  56.258  -2.980  1.00 27.31           N
ATOM   1279  CA  ARG A 200       5.576  56.913  -3.993  1.00 28.53           C
ATOM   1280  C   ARG A 200       4.520  57.823  -3.397  1.00 27.54           C
ATOM   1281  O   ARG A 200       4.397  58.949  -3.851  1.00 27.50           O
ATOM   1282  CB  ARG A 200       4.933  55.879  -4.899  1.00 30.38           C
ATOM   1289  N   ALA A 201       3.790  57.365  -2.357  1.00 26.90           N
ATOM   1290  CA  ALA A 201       2.764  58.200  -1.713  1.00 26.49           C
ATOM   1291  C   ALA A 201       3.406  59.407  -1.045  1.00 26.59           C
ATOM   1292  O   ALA A 201       2.866  60.516  -1.082  1.00 26.58           O
ATOM   1293  CB  ALA A 201       1.959  57.412  -0.715  1.00 25.11           C
ATOM   1294  N   ARG A 202       4.566  59.205  -0.419  1.00 25.66           N
ATOM   1295  CA  ARG A 202       5.245  60.296   0.240  1.00 26.93           C
ATOM   1296  C   ARG A 202       5.676  61.346  -0.767  1.00 26.93           C
ATOM   1297  O   ARG A 202       5.555  62.541  -0.489  1.00 25.79           O
ATOM   1298  CB  ARG A 202       6.493  59.779   0.996  1.00 28.25           C
ATOM   1305  N   ILE A 203       6.154  60.912  -1.931  1.00 26.99           N
ATOM   1306  CA  ILE A 203       6.611  61.848  -2.965  1.00 27.49           C
ATOM   1307  C   ILE A 203       5.430  62.674  -3.480  1.00 28.29           C
ATOM   1308  O   ILE A 203       5.548  63.905  -3.624  1.00 27.82           O
ATOM   1309  CB  ILE A 203       7.322  61.125  -4.075  1.00 28.09           C
ATOM   1313  N   SER A 204       4.288  62.025  -3.678  1.00 27.96           N
ATOM   1314  CA  SER A 204       3.119  62.736  -4.184  1.00 28.04           C
ATOM   1315  C   SER A 204       2.683  63.793  -3.199  1.00 28.16           C
ATOM   1316  O   SER A 204       2.311  64.910  -3.605  1.00 28.25           O
ATOM   1317  CB  SER A 204       1.962  61.780  -4.504  1.00 27.64           C
"""
  pdb_raw_2 = """\
REMARK   3    GEOSTD + MON.LIB. + CDL v1.2
""" + pdb_raw
  open("tst_molprobity_cdl_1.pdb", "w").write(pdb_raw)
  open("tst_molprobity_cdl_2.pdb", "w").write(pdb_raw_2)
  files = ["tst_molprobity_cdl_1.pdb","tst_molprobity_cdl_2.pdb"]
  rmsds = [0.9019, 0.8769]
  for file_name, rmsd, cdl_expected in zip(files, rmsds, [False, True]):
    result = molprobity.run(args=[file_name, "flags.clashscore=False"],
      ignore_missing_modules=True,
      out=null_out()).validation
    assert approx_equal(result.rms_angles(), rmsd, eps=0.001), rmsd
    if cdl_expected :
      out = StringIO()
      result.show(out=out)
      assert ("Geometry Restraints Library: GeoStd + Monomer Library + CDL v1.2" in out.getvalue())
    else:
      out = StringIO()
      result.show(out=out)
      assert ("CDL" not in out.getvalue())

if (__name__ == "__main__"):
  exercise_cdl()
  exercise_synthetic()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_molprobity_2.py

from __future__ import absolute_import, division, print_function
from mmtbx.command_line import molprobity
import mmtbx.model
import mmtbx.validation.molprobity
from libtbx.easy_pickle import loads, dumps, dump
from libtbx.test_utils import approx_equal
from libtbx.utils import null_out
import libtbx.load_env
from six.moves import cStringIO as StringIO
import os.path as op

# test on protein - we need real model/data for this
def exercise_protein():
  pdb_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/3ifk.pdb",
    test=op.isfile)
  hkl_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/3ifk.mtz",
    test=op.isfile)
  if (pdb_file is None):
    print("phenix_regression not available, skipping.")
    return
  args1 = [
    pdb_file,
    "outliers_only=True",
    "output.prefix=tst_molprobity",
    "--pickle",
    "flags.xtriage=True",
  ]
  result = molprobity.run(args=args1, out=null_out()).validation
  out1 = StringIO()
  result.show(out=out1)
  result = loads(dumps(result))
  out2 = StringIO()
  result.show(out=out2)
  assert (result.nqh_flips.n_outliers == 6)
  assert (not "RNA validation" in out2.getvalue())
  assert (out2.getvalue() == out1.getvalue())
  dump("tst_molprobity.pkl", result)
  mc = result.as_multi_criterion_view()
  assert (result.neutron_stats is None)
  mpscore = result.molprobity_score()
  # percentiles
  out4 = StringIO()
  result.show_summary(out=out4, show_percentiles=True)
  assert ("""  Clashscore            =  49.21 (percentile: 0.3)""" in
          out4.getvalue())
  # misc
  assert approx_equal(result.r_work(), 0.237) # from PDB header
  assert approx_equal(result.r_free(), 0.293) # from PDB header
  assert approx_equal(result.d_min(), 2.03)   # from PDB header
  assert (result.d_max_min() is None)
  assert approx_equal(result.rms_bonds(), 0.02586, 1e-5)
  assert approx_equal(result.rms_angles(), 2.35285, 1e-5)
  assert approx_equal(result.rama_favored(), 96.47059)
  assert (result.cbeta_outliers() == 10)
  assert approx_equal(result.molprobity_score(), 3.39, eps=0.01)
  summary = result.summarize()
  gui_fields = list(summary.iter_molprobity_gui_fields())
  assert (len(gui_fields) == 6)
  #result.show()
  assert (str(mc.data()[2]) == ' A   5  THR  rota,cb,clash')
  import mmtbx.validation.molprobity
  import iotbx.pdb
  pdb_in = iotbx.pdb.input(pdb_file)
  model = mmtbx.model.manager(pdb_in)
  result = mmtbx.validation.molprobity.molprobity(model)
  out3 = StringIO()
  result.show_summary(out=out3)
  assert  """\
  Ramachandran outliers =   1.76 %
                favored =  96.47 %
  Rotamer outliers      =  20.00 %
""" in out3.getvalue()
  # now with data
  args2 = args1 + [ hkl_file, "--maps" ]
  result, cmdline = molprobity.run(args=args2,
    out=null_out(),
    return_input_objects=True)
  out = StringIO()
  result.show(out=out)
  stats = result.get_statistics_for_phenix_gui()
  #print stats
  stats = result.get_polygon_statistics(["r_work","r_free","adp_mean_all",
    "angle_rmsd", "bond_rmsd", "clashscore"])
  #print stats
  assert approx_equal(result.r_work(), 0.2291, eps=0.001)
  assert approx_equal(result.r_free(), 0.2804, eps=0.001)
  assert approx_equal(result.d_min(), 2.0302, eps=0.0001)
  assert approx_equal(result.d_max_min(), [34.546125, 2.0302], eps=0.0001)
  assert approx_equal(result.rms_bonds(), 0.02586, 1e-5)
  assert approx_equal(result.rms_angles(), 2.35285, 1e-5)
  assert approx_equal(result.rama_favored(), 96.47059)
  assert (result.cbeta_outliers() == 10)
  assert approx_equal(result.unit_cell().parameters(),
          (55.285, 58.851, 67.115,90,90,90))
  assert (str(result.space_group_info()) == "P 21 21 21")
  bins = result.fmodel_statistics_by_resolution()
  assert (len(bins) == 10)
  assert approx_equal(result.atoms_to_observations_ratio(), 0.09755,
    eps=0.0001)
  assert approx_equal(result.b_iso_mean(), 31.11739)
  assert op.isfile("tst_molprobity_maps.mtz")
  bins = result.fmodel_statistics_by_resolution()
  #bins.show()
  bin_plot = result.fmodel_statistics_graph_data()
  lg = bin_plot.format_loggraph()
  # fake fmodel_neutron
  fmodel_neutron = cmdline.fmodel.deep_copy()
  result2 = mmtbx.validation.molprobity.molprobity(
    cmdline.model,
    fmodel=cmdline.fmodel,
    fmodel_neutron=fmodel_neutron,
    nuclear=True,
    keep_hydrogens=True)
  stats = result2.get_statistics_for_phenix_gui()
  assert ('R-work (neutron)' in [ label for (label, stat) in stats ])

def exercise_rna():
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/pdb2goz_refmac_tls.ent",
    test=op.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_regression(): input pdb (pdb2goz_refmac_tls.ent) not available")
    return
  result = molprobity.run(args=[regression_pdb], out=null_out()).validation
  assert (result.rna is not None)
  out = StringIO()
  result.show(out=out)
  assert ("2/58 pucker outliers present" in out.getvalue())
  result = loads(dumps(result))
  out2 = StringIO()
  result.show(out=out2)
  assert (out2.getvalue() == out.getvalue())

if (__name__ == "__main__"):
  if (not libtbx.env.has_module(name="probe")):
    print("Skipping tests: probe not configured")
  else :
    exercise_protein()
    exercise_rna()
    print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_molprobity_3.py
from __future__ import absolute_import, division, print_function
from libtbx import easy_run
import libtbx.load_env

pdb_str_1 = """
CRYST1   69.982  108.450  152.761 106.22 101.81  98.32 P 1
ATOM  21640  CA  ILE D 873      30.355 -45.714 -17.058  1.00 37.13           C
ATOM  21641  CB  ILE D 873      29.087 -46.471 -16.558  1.00 37.66           C
ATOM  21642  CG1 ILE D 873      29.392 -47.193 -15.226  1.00 39.39           C
ATOM  21643  CD1 ILE D 873      28.156 -47.608 -14.464  1.00 38.31           C
ATOM  21644  CG2 ILE D 873      28.645 -47.549 -17.518  1.00 37.63           C
ATOM  21645  C   ILE D 873      30.411 -45.513 -18.582  1.00 40.34           C
ATOM  21646  O   ILE D 873      29.507 -44.925 -19.217  1.00 37.47           O
ATOM  21647  N   VAL D 874      31.486 -46.033 -19.167  1.00 46.20           N
ATOM  21648  CA  VAL D 874      31.874 -45.719 -20.545  1.00 53.20           C
ATOM  21649  CB  VAL D 874      33.422 -45.841 -20.767  1.00 47.96           C
ATOM  21650  C   VAL D 874      31.111 -46.672 -21.465  1.00 51.88           C
ATOM  21651  O   VAL D 874      29.913 -46.492 -21.675  1.00 47.01           O
TER   21652      VAL D 874
HETATM21653  O   HOH E   1      25.038 -21.838 -79.915  1.00 30.89           O
HETATM21654  O   HOH E   2      59.047 -10.310 -77.729  1.00 32.39           O
HETATM21655  O   HOH E   3      69.611   0.997 -43.917  1.00 19.06           O
HETATM21656  O   HOH E   4      54.107 -16.143 -62.221  1.00 26.11           O
HETATM21657  O   HOH E   5      13.823 -63.943 -12.236  1.00 22.79           O
HETATM21658  O   HOH E   6      59.530 -22.000 -79.110  1.00 30.64           O
HETATM21659  O   HOH E   7      31.927 -44.110 -81.232  1.00 24.49           O
END
"""

pdb_str_2 = """
CRYST1   69.982  108.450  152.761 106.22 101.81  98.32 P 1
HETATM21659  O   HOH E   7      31.927 -44.110 -81.232  1.00 24.49           O
END
"""

pdb_str_3 = """\
CRYST1    1.000    1.000    1.000  90.00  90.00  90.00 P 1           1
ATOM      1  N   LEU B 111     -22.437  63.276  48.231  1.00 38.59           N
ATOM      2  CA  LEU B 111     -22.866  63.139  46.796  1.00 38.96           C
ATOM      3  C   LEU B 111     -22.155  62.012  46.022  1.00 39.03           C
ATOM      4  O   LEU B 111     -21.022  61.639  46.348  1.00 38.95           O
ATOM      5  CB  LEU B 111     -22.696  64.458  46.041  1.00 38.99           C
ATOM      6  CG  LEU B 111     -23.630  65.621  46.381  1.00 39.42           C
ATOM      7  CD1 LEU B 111     -23.034  66.475  47.484  1.00 39.12           C
ATOM      8  CD2 LEU B 111     -23.909  66.475  45.146  1.00 39.58           C
ATOM      9  N   TYR B 112     -22.844  61.491  44.997  1.00 39.14           N
ATOM     10  CA  TYR B 112     -22.380  60.363  44.173  1.00 39.10           C
ATOM     11  C   TYR B 112     -22.735  60.561  42.692  1.00 39.27           C
ATOM     12  O   TYR B 112     -23.901  60.786  42.361  1.00 39.37           O
ATOM     13  CB  TYR B 112     -23.002  59.035  44.649  1.00 38.91           C
ATOM     14  CG  TYR B 112     -22.527  58.549  46.004  1.00 38.64           C
ATOM     15  CD1 TYR B 112     -23.191  58.926  47.170  1.00 39.16           C
ATOM     16  CD2 TYR B 112     -21.417  57.712  46.121  1.00 38.27           C
ATOM     17  CE1 TYR B 112     -22.756  58.502  48.424  1.00 39.01           C
ATOM     18  CE2 TYR B 112     -20.978  57.269  47.370  1.00 38.32           C
ATOM     19  CZ  TYR B 112     -21.655  57.667  48.518  1.00 38.85           C
ATOM     20  OH  TYR B 112     -21.238  57.244  49.764  1.00 38.58           O
END
"""

def exercise_00(prefix="tst_molprobity_3_exercise_00"):
  for i, pdb_str in enumerate([pdb_str_1, pdb_str_2]):
    of = open("%s.pdb"%prefix, "w")
    print(pdb_str, file=of)
    of.close()
    cmd = " ".join([
      "phenix.fmodel",
      "%s.pdb"%prefix,
      "high_res=10",
      "type=real r_free=0.1 label=F-obs",
      "output.file_name=%s_%d.mtz" % (prefix, i),
      "> %s.zlog"%prefix])
    assert not easy_run.call(cmd)
    cmd = "phenix.molprobity %s.pdb %s_%d.mtz > %s.zlog"%(prefix,prefix,i,prefix)
    assert not easy_run.call(cmd)

def exercise_01(prefix="tst_molprobity_3_exercise_01"):
  of = open("%s.pdb"%prefix, "w")
  print(pdb_str_3, file=of)
  of.close()
  cmd = "phenix.molprobity %s.pdb > %s.zlog"%(prefix,prefix)
  r = easy_run.fully_buffered(cmd)
  assert r.stderr_lines[0]=="Sorry: Crystal symmetry is missing or cannot be extracted."

if (__name__ == "__main__"):
  if libtbx.env.has_module("phenix"):
    exercise_00()
    # exercise_01() disabling because such CRYST1 is working now...
    print("OK")
  else:
    print("Skipped: Requires phenix module")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_molprobity_4.py
from __future__ import absolute_import, division, print_function
from mmtbx.command_line import molprobity

pdb_txt = """\
CRYST1  104.400  104.400  124.250  90.00  90.00 120.00 H 3
SCALE1      0.009579  0.005530  0.000000        0.00000
SCALE2      0.000000  0.011060  0.000000        0.00000
SCALE3      0.000000  0.000000  0.008048        0.00000
ATOM    567  N   TYR    75      20.675  45.830  21.914  1.00 29.26      A    N
ATOM    568  CA  TYR    75      21.642  45.771  20.827  1.00 28.13      A    C
ATOM    569  C   TYR    75      21.877  44.324  20.468  1.00 31.45      A    C
ATOM    570  O   TYR    75      22.331  43.553  21.310  1.00 34.90      A    O
ATOM    571  CB  TYR    75      22.954  46.407  21.219  1.00 29.62      A    C
ATOM    572  CG  TYR    75      23.961  46.389  20.096  1.00 35.61      A    C
ATOM    573  CD1 TYR    75      23.759  47.148  18.949  1.00 36.53      A    C
ATOM    574  CD2 TYR    75      25.102  45.613  20.170  1.00 36.83      A    C
ATOM    575  CE1 TYR    75      24.669  47.150  17.921  1.00 35.23      A    C
ATOM    576  CE2 TYR    75      26.023  45.604  19.139  1.00 44.16      A    C
ATOM    577  CZ  TYR    75      25.801  46.379  18.015  1.00 43.29      A    C
ATOM    578  OH  TYR    75      26.709  46.377  16.975  1.00 52.94      A    O
ATOM    579  N   ASN    76      21.606  43.962  19.226  1.00 33.77      A    N
ATOM    580  CA  ASN    76      22.031  42.666  18.719  1.00 35.78      A    C
ATOM    581  C   ASN    76      21.481  41.532  19.576  1.00 32.53      A    C
ATOM    582  O   ASN    76      22.202  40.610  19.959  1.00 33.59      A    O
ATOM    583  CB  ASN    76      23.558  42.596  18.642  1.00 37.23      A    C
ATOM    584  CG  ASN    76      24.081  42.961  17.278  1.00 45.44      A    C
ATOM    585  OD1 ASN    76      24.351  44.126  16.999  1.00 46.64      A    O
ATOM    586  ND2 ASN    76      24.191  41.966  16.399  1.00 46.66      A    N
ATOM    587  N   GLY    77      20.191  41.620  19.897  1.00 32.36      A    N
ATOM    588  CA  GLY    77      19.529  40.601  20.686  1.00 33.39      A    C
ATOM    589  C   GLY    77      19.785  40.649  22.181  1.00 32.77      A    C
ATOM    590  O   GLY    77      19.179  39.865  22.918  1.00 34.11      A    O
END
"""

def test1(prefix="tst_mp4"):
  """
  Illustrating failure in twin refine tutorial data, discovered 2/26/2018.
  """
  with open("%s.pdb" % prefix, 'w') as f:
    f.write(pdb_txt)
  result = molprobity.run(args=['%s.pdb' % prefix])

if (__name__ == "__main__"):
  test1()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_molprobity_5.py
from __future__ import absolute_import, division, print_function
import mmtbx
import iotbx.pdb
import mmtbx.model
from libtbx.utils import null_out
from mmtbx.validation import molprobity

pdb_str="""
CRYST1   21.937    4.866   23.477  90.00 107.08  90.00 P 1 21 1      2
ORIGX1      1.000000  0.000000  0.000000        0.00000
ORIGX2      0.000000  1.000000  0.000000        0.00000
ORIGX3      0.000000  0.000000  1.000000        0.00000
SCALE1      0.045585  0.000000  0.014006        0.00000
SCALE2      0.000000  0.205508  0.000000        0.00000
SCALE3      0.000000  0.000000  0.044560        0.00000
ATOM      1  N   GLY A   1      -9.009   4.612   6.102  1.00 16.77           N
ATOM      2  CA  GLY A   1      -9.052   4.207   4.651  1.00 16.57           C
ATOM      3  C   GLY A   1      -8.015   3.140   4.419  1.00 16.16           C
ATOM      4  O   GLY A   1      -7.523   2.521   5.381  1.00 16.78           O
ATOM      5  N   ASN A   2      -7.656   2.923   3.155  1.00 15.02           N
ATOM      6  CA  ASN A   2      -6.522   2.038   2.831  1.00 14.10           C
ATOM      7  C   ASN A   2      -5.241   2.537   3.427  1.00 13.13           C
ATOM      8  O   ASN A   2      -4.978   3.742   3.426  1.00 11.91           O
ATOM      9  CB  ASN A   2      -6.346   1.881   1.341  1.00 15.38           C
ATOM     10  CG  ASN A   2      -7.584   1.342   0.692  1.00 14.08           C
ATOM     11  OD1 ASN A   2      -8.025   0.227   1.016  1.00 17.46           O
ATOM     12  ND2 ASN A   2      -8.204   2.155  -0.169  1.00 11.72           N
ATOM     13  N   ASN A   3      -4.438   1.590   3.905  1.00 12.26           N
ATOM     14  CA  ASN A   3      -3.193   1.904   4.589  1.00 11.74           C
ATOM     15  C   ASN A   3      -1.955   1.332   3.895  1.00 11.10           C
ATOM     16  O   ASN A   3      -1.872   0.119   3.648  1.00 10.42           O
ATOM     17  CB  ASN A   3      -3.259   1.378   6.042  1.00 12.15           C
ATOM     18  CG  ASN A   3      -2.006   1.739   6.861  1.00 12.82           C
ATOM     19  OD1 ASN A   3      -1.702   2.925   7.072  1.00 15.05           O
ATOM     20  ND2 ASN A   3      -1.271   0.715   7.306  1.00 13.48           N
ATOM     21  N   GLN A   4      -1.005   2.228   3.598  1.00 10.29           N
ATOM     22  CA  GLN A   4       0.384   1.888   3.199  1.00 10.53           C
ATOM     23  C   GLN A   4       1.435   2.606   4.088  1.00 10.24           C
ATOM     24  O   GLN A   4       1.547   3.843   4.115  1.00  8.86           O
ATOM     25  CB  GLN A   4       0.656   2.148   1.711  1.00  9.80           C
ATOM     26  CG  GLN A   4       1.944   1.458   1.213  1.00 10.25           C
ATOM     27  CD  GLN A   4       2.504   2.044  -0.089  1.00 12.43           C
ATOM     28  OE1 GLN A   4       2.744   3.268  -0.190  1.00 14.62           O
ATOM     29  NE2 GLN A   4       2.750   1.161  -1.091  1.00  9.05           N
ATOM     30  N   GLN A   5       2.154   1.821   4.871  1.00 10.38           N
ATOM     31  CA  GLN A   5       3.270   2.361   5.640  1.00 11.39           C
ATOM     32  C   GLN A   5       4.594   1.768   5.172  1.00 11.52           C
ATOM     33  O   GLN A   5       4.768   0.546   5.054  1.00 12.05           O
ATOM     34  CB  GLN A   5       3.056   2.183   7.147  1.00 11.96           C
ATOM     35  CG  GLN A   5       1.829   2.950   7.647  1.00 10.81           C
ATOM     36  CD  GLN A   5       1.344   2.414   8.954  1.00 13.10           C
ATOM     37  OE1 GLN A   5       0.774   1.325   9.002  1.00 10.65           O
ATOM     38  NE2 GLN A   5       1.549   3.187  10.039  1.00 12.30           N
ATOM     39  N   ASN A   6       5.514   2.664   4.856  1.00 11.99           N
ATOM     40  CA  ASN A   6       6.831   2.310   4.318  1.00 12.30           C
ATOM     41  C   ASN A   6       7.854   2.761   5.324  1.00 13.40           C
ATOM     42  O   ASN A   6       8.219   3.943   5.374  1.00 13.92           O
ATOM     43  CB  ASN A   6       7.065   3.016   2.993  1.00 12.13           C
ATOM     44  CG  ASN A   6       5.961   2.735   2.003  1.00 12.77           C
ATOM     45  OD1 ASN A   6       5.798   1.604   1.551  1.00 14.27           O
ATOM     46  ND2 ASN A   6       5.195   3.747   1.679  1.00 10.07           N
ATOM     47  N   TYR A   7       8.292   1.817   6.147  1.00 14.70           N
ATOM     48  CA  TYR A   7       9.159   2.144   7.299  1.00 15.18           C
ATOM     49  C   TYR A   7      10.603   2.331   6.885  1.00 15.91           C
ATOM     50  O   TYR A   7      11.041   1.811   5.855  1.00 15.76           O
ATOM     51  CB  TYR A   7       9.061   1.065   8.369  1.00 15.35           C
ATOM     52  CG  TYR A   7       7.665   0.929   8.902  1.00 14.45           C
ATOM     53  CD1 TYR A   7       6.771   0.021   8.327  1.00 15.68           C
ATOM     54  CD2 TYR A   7       7.210   1.756   9.920  1.00 14.80           C
ATOM     55  CE1 TYR A   7       5.480  -0.094   8.796  1.00 13.46           C
ATOM     56  CE2 TYR A   7       5.904   1.649  10.416  1.00 14.33           C
ATOM     57  CZ  TYR A   7       5.047   0.729   9.831  1.00 15.09           C
ATOM     58  OH  TYR A   7       3.766   0.589  10.291  1.00 14.39           O
ATOM     59  OXT TYR A   7      11.358   2.999   7.612  1.00 17.49           O
TER      60      TYR A   7
HETATM   61  O   HOH A   8      -6.471   5.227   7.124  1.00 22.62           O
HETATM   62  O   HOH A   9      10.431   1.858   3.216  1.00 19.71           O
HETATM   63  O   HOH A  10     -11.286   1.756  -1.468  1.00 17.08           O
HETATM   64  O   HOH A  11      11.808   4.179   9.970  1.00 23.99           O
HETATM   65  O   HOH A  12      13.605   1.327   9.198  1.00 26.17           O
HETATM   66  O   HOH A  13      -2.749   3.429  10.024  1.00 39.15           O
HETATM   67  O   HOH A  14      -1.500   0.682  10.967  1.00 43.49           O
MASTER      238    0    0    0    0    0    0    6   66    1    0    1
END
"""

def run():
  result = []
  for p in [True, False]:
    for mr in [True, False]:
      pdb_inp = iotbx.pdb.input(source_info=None, lines = pdb_str)
      hierarchy = pdb_inp.construct_hierarchy()
      model = mmtbx.model.manager(model_input=pdb_inp, log=null_out())
      if(p):
        model.process(make_restraints=mr)
      o = molprobity.molprobity(model = model)
      result.append("%8.4f"%o.rms_bonds())
  assert len(list(set(result)))==1

if __name__ == '__main__':
  run()


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_molprobity_arguments.py
from __future__ import absolute_import, division, print_function
from libtbx import easy_run
from libtbx.test_utils import approx_equal

pdb_str = '''
CRYST1   35.050   40.500   42.370  90.00  90.00  90.00 P 21 21 21
ATOM    868  N   THR A  58      12.684  27.992  19.917  1.00  4.88           N
ATOM    869  CA  THR A  58      12.449  29.168  20.750  1.00  5.30           C
ATOM    870  C   THR A  58      12.794  30.387  19.944  1.00  5.18           C
ATOM    871  O   THR A  58      13.829  30.407  19.238  1.00  7.53           O
ATOM    872  CB  THR A  58      13.340  29.099  21.992  1.00  6.13           C
ATOM    873  OG1 THR A  58      13.131  27.860  22.680  1.00  8.07           O
ATOM    874  CG2 THR A  58      13.019  30.214  22.977  1.00  8.02           C
ATOM    875  H   THR A  58      13.565  27.890  19.407  1.00  5.87           H
ATOM    876  HA  THR A  58      11.405  29.177  21.037  1.00  6.36           H
ATOM    877  HB  THR A  58      14.387  29.172  21.714  1.00  7.36           H
ATOM    878  HG1 THR A  58      13.227  27.203  21.983  1.00  9.69           H
ATOM    879 HG21 THR A  58      13.587  30.061  23.889  1.00  9.63           H
ATOM    880 HG22 THR A  58      13.295  31.165  22.548  1.00  9.63           H
ATOM    881 HG23 THR A  58      11.958  30.232  23.192  1.00  9.63           H
HETATM  931  O   HOH A  63      14.819  25.768  21.599  1.00  8.43           O
HETATM  932  H1  HOH A  63      15.358  25.054  22.012  1.00 10.12           H
HETATM  933  H2  HOH A  63      14.452  26.173  22.407  1.00 10.12           H
'''

def run_and_get_clashscore(cmd, out):
  rc = easy_run.fully_buffered(cmd)
  with open(out, 'r') as fo:
    for line in fo.readlines():
      if line.find('clashscore =')>-1:
        return float(line.split()[-1])
      if line.find('Clashscore            =')>-1:
        return float(line.split()[-1])
  assert 0

def run():
  with open('tst_mol_args.pdb', 'w') as fo:
    fo.write(pdb_str)
  for keep_hydrogens in [True, False]:
    for nuclear in [True, False]:
      cmd1 = " ".join([
        "phenix.clashscore tst_mol_args.pdb",
        "keep_hydrogens=%s"%str(keep_hydrogens),
        "nuclear=%s"%str(nuclear),
        ">& tst_molprobity_arguments.zlog1"])
      cmd2 = " ".join([
        "phenix.molprobity tst_mol_args.pdb",
        "keep_hydrogens=%s"%str(keep_hydrogens),
        "pdb_interpretation.use_neutron_distances=%s"%str(nuclear),
        ">& tst_molprobity_arguments.zlog2"])
      cs1=run_and_get_clashscore(cmd=cmd1, out="tst_molprobity_arguments.zlog1")
      cs2=run_and_get_clashscore(cmd=cmd2, out="tst_molprobity_arguments.zlog2")
      if(0):
        print()
        print(cmd1)
        print(cmd2)
        print(cs1, cs2)
        print()
      assert approx_equal(cs1, cs2, 1.e-3)

if __name__=='__main__':
  run()


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_mp_geo.py

from __future__ import absolute_import, division, print_function
from mmtbx.validation.molprobity import mp_geo
from iotbx.data_manager import DataManager
from mmtbx.model import manager
from libtbx.utils import null_out
from iotbx import pdb
from libtbx.test_utils import approx_equal
import time
import json

pdb_str_1 = """
ATOM     60  N   GLU A   9       7.757   9.623  27.829  1.00 12.74           N
ATOM     61  CA  GLU A   9       7.695  10.769  26.927  1.00 12.72           C
ATOM     62  C   GLU A   9       7.351  12.056  27.684  1.00 12.59           C
ATOM     63  O   GLU A   9       6.321  12.134  28.348  1.00 14.32           O
ATOM     64  CB  GLU A   9       6.633  10.459  25.859  1.00 13.52           C
ATOM     65  CG  GLU A   9       6.323  11.587  24.899  1.00 15.93           C
ATOM     66  CD  GLU A   9       7.533  12.006  24.105  1.00 16.48           C
ATOM     67  OE1 GLU A   9       8.059  11.171  23.337  1.00 19.96           O
ATOM     68  OE2 GLU A   9       7.960  13.164  24.257  1.00 18.90           O
ATOM     69  N   ASP A  10       8.216  13.062  27.589  1.00 14.68           N
ATOM     70  CA  ASP A  10       7.992  14.328  28.283  1.00 15.47           C
ATOM     71  C   ASP A  10       6.987  15.255  27.598  1.00 15.82           C
ATOM     72  O   ASP A  10       6.315  16.049  28.258  1.00 15.43           O
ATOM     73  CB  ASP A  10       9.322  15.075  28.453  1.00 16.97           C
ATOM     74  CG AASP A  10       9.139  16.482  28.993  0.50 16.48           C
ATOM     75  CG BASP A  10       9.941  15.472  27.128  0.50 17.05           C
ATOM     76  OD1AASP A  10       9.189  17.442  28.197  0.50 17.34           O
ATOM     77  OD1BASP A  10      11.349  14.573  26.359  0.50 18.03           O
ATOM     78  OD2AASP A  10       8.934  16.630  30.215  0.50 17.88           O
ATOM     79  OD2BASP A  10      10.016  16.689  26.852  0.50 20.20           O
"""

pdb_str_2 = """
ATOM    516  P     C B 115      25.417  97.388  92.531  1.00161.67           P
ATOM    517  OP1   C B 115      25.620  96.786  93.873  1.00161.61           O
ATOM    518  OP2   C B 115      26.429  97.148  91.471  1.00157.52           O
ATOM    519  O5'   C B 115      23.989  96.929  91.981  1.00165.73           O
ATOM    520  C5'   C B 115      22.830  97.049  92.795  1.00166.81           C
ATOM    521  C4'   C B 115      21.568  96.608  92.088  1.00164.72           C
ATOM    522  O4'   C B 115      21.307  97.449  90.932  1.00165.07           O
ATOM    523  C3'   C B 115      21.553  95.203  91.511  1.00161.21           C
ATOM    524  O3'   C B 115      21.376  94.188  92.483  1.00162.42           O
ATOM    525  C2'   C B 115      20.419  95.291  90.500  1.00160.96           C
ATOM    526  O2'   C B 115      19.151  95.246  91.141  1.00163.14           O
ATOM    527  C1'   C B 115      20.634  96.695  89.939  1.00161.73           C
ATOM    528  N1    C B 115      21.449  96.670  88.703  1.00156.58           N
ATOM    529  C2    C B 115      20.847  96.216  87.521  1.00153.43           C
ATOM    530  O2    C B 115      19.660  95.854  87.547  1.00152.48           O
ATOM    531  N3    C B 115      21.572  96.181  86.379  1.00150.07           N
ATOM    532  C4    C B 115      22.845  96.576  86.385  1.00149.02           C
ATOM    533  N4    C B 115      23.520  96.526  85.235  1.00146.94           N
ATOM    534  C5    C B 115      23.484  97.040  87.572  1.00150.48           C
ATOM    535  C6    C B 115      22.758  97.069  88.698  1.00153.67           C
ATOM    547  P  A  A B 116      21.844  92.681  92.170  0.51179.08           P
ATOM    548  OP1A  A B 116      21.573  91.863  93.379  0.51179.56           O
ATOM    549  OP2A  A B 116      23.220  92.732  91.614  0.51177.92           O
ATOM    550  O5'A  A B 116      20.860  92.191  91.014  0.51167.56           O
ATOM    551  C5'A  A B 116      19.551  91.726  91.313  0.51164.82           C
ATOM    552  C4'A  A B 116      18.742  91.493  90.060  0.51155.92           C
ATOM    553  O4'A  A B 116      18.898  92.626  89.165  0.51149.57           O
ATOM    554  C3'A  A B 116      19.141  90.293  89.209  0.51151.37           C
ATOM    555  O3'A  A B 116      18.607  89.067  89.684  0.51153.31           O
ATOM    556  C2'A  A B 116      18.628  90.683  87.831  0.51140.91           C
ATOM    557  O2'A  A B 116      17.227  90.473  87.724  0.51147.22           O
ATOM    558  C1'A  A B 116      18.903  92.185  87.824  0.51133.46           C
ATOM    559  N9 A  A B 116      20.215  92.506  87.229  0.51115.10           N
ATOM    560  C8 A  A B 116      21.352  92.925  87.874  0.51103.22           C
ATOM    561  N7 A  A B 116      22.369  93.136  87.075  0.51 94.11           N
ATOM    562  C5 A  A B 116      21.867  92.833  85.817  0.51 93.20           C
ATOM    563  C6 A  A B 116      22.449  92.855  84.538  0.51 84.33           C
ATOM    564  N6 A  A B 116      23.716  93.210  84.308  0.51 83.97           N
ATOM    565  N1 A  A B 116      21.676  92.496  83.490  0.51 83.45           N
ATOM    566  C2 A  A B 116      20.406  92.141  83.722  0.51 89.16           C
ATOM    567  N3 A  A B 116      19.746  92.081  84.877  0.51100.01           N
ATOM    568  C4 A  A B 116      20.543  92.444  85.897  0.51106.03           C
ATOM    580  P  B  A B 116      21.673  92.654  92.107  0.49176.43           P
ATOM    581  OP1B  A B 116      22.052  91.946  93.355  0.49179.31           O
ATOM    582  OP2B  A B 116      22.589  92.619  90.939  0.49177.26           O
ATOM    583  O5'B  A B 116      20.256  92.106  91.631  0.49166.83           O
ATOM    584  C5'B  A B 116      20.155  90.953  90.811  0.49162.34           C
ATOM    585  C4'B  A B 116      18.753  90.785  90.285  0.49156.23           C
ATOM    586  O4'B  A B 116      18.380  91.954  89.503  0.49153.24           O
ATOM    587  C3'B  A B 116      18.530  89.625  89.328  0.49153.93           C
ATOM    588  O3'B  A B 116      18.398  88.370  89.971  0.49155.29           O
ATOM    589  C2'B  A B 116      17.290  90.074  88.574  0.49152.57           C
ATOM    590  O2'B  A B 116      16.122  89.934  89.370  0.49160.43           O
ATOM    591  C1'B  A B 116      17.592  91.558  88.399  0.49146.63           C
ATOM    592  N9 B  A B 116      18.368  91.795  87.168  0.49131.17           N
ATOM    593  C8 B  A B 116      19.613  92.360  87.046  0.49119.64           C
ATOM    594  N7 B  A B 116      20.046  92.418  85.809  0.49108.75           N
ATOM    595  C5 B  A B 116      19.018  91.847  85.070  0.49102.94           C
ATOM    596  C6 B  A B 116      18.857  91.610  83.694  0.49 95.23           C
ATOM    597  N6 B  A B 116      19.769  91.933  82.774  0.49 88.20           N
ATOM    598  N1 B  A B 116      17.711  91.021  83.287  0.49 91.58           N
ATOM    599  C2 B  A B 116      16.795  90.696  84.207  0.49 93.21           C
ATOM    600  N3 B  A B 116      16.833  90.868  85.525  0.49101.29           N
ATOM    601  C4 B  A B 116      17.982  91.457  85.895  0.49111.07           C
ATOM    613  C4'   G B 117      18.093  86.821  85.795  1.00149.42           C
ATOM    614  O4'   G B 117      18.411  88.142  85.277  1.00150.38           O
ATOM    615  C3'   G B 117      19.188  85.938  85.221  1.00152.20           C
ATOM    616  O3'   G B 117      18.860  84.561  85.207  1.00157.98           O
ATOM    617  C2'   G B 117      19.390  86.537  83.840  1.00148.15           C
ATOM    618  O2'   G B 117      18.348  86.156  82.953  1.00150.85           O
ATOM    619  C1'   G B 117      19.255  88.022  84.148  1.00142.90           C
ATOM    620  N9    G B 117      20.565  88.616  84.472  1.00129.09           N
ATOM    621  C8    G B 117      21.040  88.952  85.716  1.00125.15           C
ATOM    622  N7    G B 117      22.244  89.453  85.691  1.00119.89           N
ATOM    623  C5    G B 117      22.593  89.440  84.347  1.00115.13           C
ATOM    624  C6    G B 117      23.787  89.862  83.702  1.00106.78           C
ATOM    625  O6    G B 117      24.807  90.345  84.211  1.00103.03           O
ATOM    626  N1    G B 117      23.723  89.674  82.323  1.00103.58           N
ATOM    627  C2    G B 117      22.649  89.144  81.651  1.00105.31           C
ATOM    628  N2    G B 117      22.777  89.041  80.320  1.00103.13           N
ATOM    629  N3    G B 117      21.530  88.746  82.240  1.00112.17           N
ATOM    630  C4    G B 117      21.569  88.921  83.580  1.00119.07           C
ATOM    640  P  A  G B 117      19.377  87.681  89.414  0.57155.42           P
ATOM    641  OP1A  G B 117      18.636  86.602  90.115  0.57154.98           O
ATOM    642  OP2A  G B 117      20.818  87.886  89.703  0.57156.38           O
ATOM    643  O5'A  G B 117      19.216  87.435  87.847  0.57148.01           O
ATOM    644  C5'A  G B 117      18.022  86.888  87.300  0.57148.38           C
ATOM    647  P  B  G B 117      19.331  87.141  89.518  0.43155.13           P
ATOM    648  OP1B  G B 117      18.722  85.885  90.026  0.43152.30           O
ATOM    649  OP2B  G B 117      20.734  87.474  89.871  0.43155.64           O
ATOM    650  O5'B  G B 117      19.213  87.135  87.929  0.43147.38           O
ATOM    651  C5'B  G B 117      17.973  86.851  87.299  0.43148.35           C
ATOM    654  P     C B 118      20.023  83.460  85.359  1.00146.31           P
ATOM    655  OP1   C B 118      19.377  82.123  85.410  1.00144.77           O
ATOM    656  OP2   C B 118      20.921  83.881  86.465  1.00146.69           O
ATOM    657  O5'   C B 118      20.835  83.565  83.989  1.00123.79           O
ATOM    658  C5'   C B 118      20.203  83.271  82.751  1.00120.61           C
ATOM    659  C4'   C B 118      20.991  83.775  81.563  1.00114.71           C
ATOM    660  O4'   C B 118      21.385  85.159  81.765  1.00115.11           O
ATOM    661  C3'   C B 118      22.301  83.069  81.260  1.00107.01           C
ATOM    662  O3'   C B 118      22.124  81.826  80.602  1.00104.55           O
ATOM    663  C2'   C B 118      23.035  84.105  80.419  1.00107.93           C
ATOM    664  O2'   C B 118      22.544  84.120  79.087  1.00108.92           O
ATOM    665  C1'   C B 118      22.610  85.406  81.104  1.00111.02           C
ATOM    666  N1    C B 118      23.615  85.886  82.083  1.00107.14           N
ATOM    667  C2    C B 118      24.827  86.373  81.586  1.00106.46           C
ATOM    668  O2    C B 118      25.014  86.373  80.361  1.00109.38           O
ATOM    669  N3    C B 118      25.774  86.826  82.437  1.00103.02           N
ATOM    670  C4    C B 118      25.543  86.811  83.747  1.00103.40           C
ATOM    671  N4    C B 118      26.507  87.269  84.549  1.00103.30           N
ATOM    672  C5    C B 118      24.316  86.326  84.289  1.00103.70           C
ATOM    673  C6    C B 118      23.387  85.879  83.432  1.00104.01           C
"""

def exercise_mp_geo():
  with open('mp_geo.pdb', 'w') as f:
    f.write(pdb_str_1)
  args = ['pdb=mp_geo.pdb',
          'out_file=mp_geo.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  f = open('mp_geo.out', 'r')
  # Strip out newline and carriage return chars to
  # prevent platform-specific errors.
  lines = [i.rstrip('\n\r') for i in f.readlines()]
  assert 'mp_geo.pdb: A:  10: :B:ASP:CG--OD1:1.839:31.054:PROTEIN' in lines
  assert \
    'mp_geo.pdb: A:  10: :B:ASP:OD1-CG-OD2:109.733:5.486:PROTEIN' in lines
  f.close()

  with open('mp_geo.pdb', 'w') as f:
    f.write(pdb_str_2)
  args = ['pdb=mp_geo.pdb',
          'out_file=mp_geo.out',
          'rna_backbone=True']
  mp_geo.run(args)
  f = open('mp_geo.out', 'r')
  lines = [i.rstrip('\n\r') for i in f.readlines()]
  f.close()
  assert lines[0] == \
    ' :1: B: 115: : :  C:__?__:178.072:55.525:76.414:-158.236:-67.172'
  assert lines[1] == \
    ' :1: B: 116: :A:  A:-80.906:172.347:71.412:81.732:-151.720:-70.053'
  assert lines[2] == \
    ' :1: B: 117: :A:  G:-80.508:177.077:61.989:80.676:-149.321:-69.591'
  assert lines[3] == \
    ' :1: B: 118: : :  C:-62.565:164.517:69.624:78.058:__?__:__?__'

def exercise_mp_geo_bonds_angles_json():
  dm = DataManager()
  #print(help(dm))
  dm.process_model_str("1",pdb_str_1)
  model = dm.get_model("1")
  model.set_stop_for_unknowns(False)
  hierarchy = model.get_hierarchy()
  p = manager.get_default_pdb_interpretation_params()
  ##print(dir(p.pdb_interpretation))
  p.pdb_interpretation.allow_polymer_cross_special_position=True
  p.pdb_interpretation.flip_symmetric_amino_acids=False
  p.pdb_interpretation.clash_guard.nonbonded_distance_threshold = None
  p.pdb_interpretation.restraints_library.cdl = True
  model.set_log(log = null_out())
  model.process(make_restraints=True, pdb_interpretation_params=p)
  geometry = model.get_restraints_manager().geometry
  atoms = hierarchy.atoms()
  rc = mp_geo.get_bond_and_angle_outliers(
           pdb_hierarchy=hierarchy,
           xray_structure=model.get_xray_structure(),
           geometry_restraints_manager=geometry,
           use_segids=False,
           outliers_only=False)
  bonds = rc.bonds
  angles = rc.angles
  import pprint
  bonds_json = json.loads(bonds.as_JSON())
  #pprint.pprint(bonds_json)
  assert len(bonds_json['flat_results'])==19, "tst_mp_validate_bonds total number of bonds changed, now: "+str(len(bonds_json['flat_results']))
  assert approx_equal(bonds_json['flat_results'][18]["sigma"], 0.019), "tst_mp_validate_bonds json output last sigma value changed, now: "+str(bonds_json['flat_results'][18]["sigma"])
  assert bonds_json['summary_results'][""]["num_outliers"] == 1, "tst_mp_validate_bonds json summary output total number of outliers changed, now: "+str(bonds_json['summary_results'][""]["num_outliers"])
  assert bonds_json['summary_results'][""]["num_total"]==19, "tst_mp_validate_bonds json summary output total number of bonds changed, now: "+str(bonds_json['summary_results'][""]["num_total"])
  angles_json = json.loads(angles.as_JSON())
  #pprint.pprint(angles_json)
  assert len(angles_json['flat_results'])==24, "tst_mp_validate_bonds total number of angles changed, now: "+str(len(angles_json['flat_results']))
  assert approx_equal(angles_json['flat_results'][23]["sigma"], 2.4), "tst_mp_validate_bonds json output last sigma value changed, now: "+str(angles_json['flat_results'][23]["sigma"])
  assert angles_json['summary_results'][""]["num_outliers"] == 1, "tst_mp_validate_bonds json summary output total number of outliers changed, now: "+str(angles_json['summary_results'][""]["num_outliers"])
  assert angles_json['summary_results'][""]["num_total"]==24, "tst_mp_validate_bonds json summary output total number of angles changed, now: "+str(angles_json['summary_results'][""]["num_total"])
  return bonds_json, angles_json

if (__name__ == "__main__"):
  t0 = time.time()
  exercise_mp_geo()
  exercise_mp_geo_bonds_angles_json()
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_mp_geo_chiral_volume_cases.py
from __future__ import absolute_import, division, print_function
from mmtbx.validation.molprobity import mp_geo
import time
from libtbx.test_utils import approx_equal

def test_normal_val():
  """Regular valine. Chiral centers at CA and CB."""
  pdb_str = """\
ATOM     37  N   VAL A   5      28.260  33.943  11.096  1.00  4.44           N
ATOM     38  CA  VAL A   5      28.605  33.965  12.503  1.00  3.87           C
ATOM     39  C   VAL A   5      28.638  35.461  12.900  1.00  4.93           C
ATOM     40  O   VAL A   5      29.522  36.103  12.320  1.00  6.84           O
ATOM     41  CB  VAL A   5      29.963  33.317  12.814  1.00  2.99           C
ATOM     42  CG1 VAL A   5      30.211  33.394  14.304  1.00  5.28           C
ATOM     43  CG2 VAL A   5      29.957  31.838  12.352  1.00  9.13           C
TER
END
"""
  with open('chiral_volume_validation_cases_val_normal.pdb', 'w') as f:
    f.write(pdb_str)
  args = ['pdb=chiral_volume_validation_cases_val_normal.pdb',
          'out_file=chiral_volume_validation_cases_val_normal.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_cases_val_normal.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  #chiral_volume_validation_cases_val_base.pdb: A:   5: : :VAL:CA:2.628:0.932:PROTEIN
  #chiral_volume_validation_cases_val_base.pdb: A:   5: : :VAL:CB:-2.762:0.664:PROTEIN
  ca_volume = None
  ca_sigma = None
  cb_volume = None
  cb_sigma = None
  for line in lines:
    #print(line)
    chiral_center = line.split(":")[6]
    if chiral_center == "CA":
      ca_volume = float(line.split(":")[7])
      ca_sigma = float(line.split(":")[8])
    elif chiral_center == "CB":
      cb_volume = float(line.split(":")[7])
      cb_sigma = float(line.split(":")[8])
  assert approx_equal(ca_volume, 2.628, eps = 0.01)
  assert approx_equal(ca_sigma, 0.932, eps = 0.01)
  assert approx_equal(cb_volume, -2.762, eps = 0.01)
  assert approx_equal(cb_sigma, 0.664, eps = 0.01)

def test_misnamed_val():
  """Atom positions for CG1 and CG2 have been swapped.
This should create a >20sigma chiral volume outlier at CB.
This is a 'pseudochiral naming error'.
Validation wants to be able to catch these naming errors."""
  pdb_str = """\
ATOM     37  N   VAL A   5      28.260  33.943  11.096  1.00  4.44           N
ATOM     38  CA  VAL A   5      28.605  33.965  12.503  1.00  3.87           C
ATOM     39  C   VAL A   5      28.638  35.461  12.900  1.00  4.93           C
ATOM     40  O   VAL A   5      29.522  36.103  12.320  1.00  6.84           O
ATOM     41  CB  VAL A   5      29.963  33.317  12.814  1.00  2.99           C
ATOM     42  CG1 VAL A   5      29.957  31.838  12.352  1.00  9.13           C
ATOM     43  CG2 VAL A   5      30.211  33.394  14.304  1.00  5.28           C
END
"""
  with open('chiral_volume_validation_cases_val_misnamed.pdb', 'w') as f:
    f.write(pdb_str)
  args = ['pdb=chiral_volume_validation_cases_val_misnamed.pdb',
          'out_file=chiral_volume_validation_cases_val_misnamed.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_cases_val_misnamed.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  #chiral_volume_validation_cases_val_misnamed.pdb: A:   5: : :VAL:CA:2.628:0.932:PROTEIN
  #chiral_volume_validation_cases_val_misnamed.pdb: A:   5: : :VAL:CB:2.762:26.956:PROTEIN
  ca_volume = None
  ca_sigma = None
  cb_volume = None
  cb_sigma = None
  for line in lines:
    #print(line)
    chiral_center = line.split(":")[6]
    if chiral_center == "CA":
      ca_volume = float(line.split(":")[7])
      ca_sigma = float(line.split(":")[8])
    elif chiral_center == "CB":
      cb_volume = float(line.split(":")[7])
      cb_sigma = float(line.split(":")[8])
  assert approx_equal(ca_volume, 2.628, eps = 0.01) #same
  assert approx_equal(ca_sigma, 0.932, eps = 0.01) #same
  assert approx_equal(cb_volume, 2.762, eps = 0.01) #sign change
  assert approx_equal(cb_sigma, 26.956, eps = 0.01) #>20sigma outlier

################################################################################

def test_normal_leu():
  """Regular leucine. Chiral centers at CA and CG"""
  pdb_str = """\
ATOM     60  N   LEU A   8      30.132  40.069  18.642  1.00  9.84           N
ATOM     61  CA  LEU A   8      29.607  41.180  19.467  1.00 14.15           C
ATOM     62  C   LEU A   8      30.075  42.538  18.984  1.00 17.37           C
ATOM     63  O   LEU A   8      29.586  43.570  19.483  1.00 17.01           O
ATOM     64  CB  LEU A   8      29.919  40.890  20.938  1.00 16.63           C
ATOM     65  CG  LEU A   8      29.183  39.722  21.581  1.00 18.88           C
ATOM     66  CD1 LEU A   8      29.308  39.750  23.095  1.00 19.31           C
ATOM     67  CD2 LEU A   8      27.700  39.721  21.228  1.00 18.59           C
TER
END
"""
  with open('chiral_volume_validation_cases_leu_normal.pdb', 'w') as f:
    f.write(pdb_str)
  args = ['pdb=chiral_volume_validation_cases_leu_normal.pdb',
          'out_file=chiral_volume_validation_cases_leu_normal.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_cases_leu_normal.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  #chiral_volume_validation_cases_leu_normal.pdb: A:   8: : :LEU:CA:2.369:0.707:PROTEIN
  #chiral_volume_validation_cases_leu_normal.pdb: A:   8: : :LEU:CG:-2.604:0.070:PROTEIN
  ca_volume = None
  ca_sigma = None
  cg_volume = None
  cg_sigma = None
  for line in lines:
    #print(line)
    chiral_center = line.split(":")[6]
    if chiral_center == "CA":
      ca_volume = float(line.split(":")[7])
      ca_sigma = float(line.split(":")[8])
    elif chiral_center == "CG":
      cg_volume = float(line.split(":")[7])
      cg_sigma = float(line.split(":")[8])
  assert approx_equal(ca_volume, 2.369, eps = 0.01)
  assert approx_equal(ca_sigma, 0.707, eps = 0.01)
  assert approx_equal(cg_volume, -2.604, eps = 0.01)
  assert approx_equal(cg_sigma, 0.070, eps = 0.01)

def test_misnamed_leu():
  """Atom positions for CD1 and CD2 have been swapped.
This should create a >20sigma chiral volume outlier at CG.
This is a 'pseudochiral naming error'.
Validation wants to be able to catch these naming errors."""
  pdb_str = """\
ATOM     60  N   LEU A   8      30.132  40.069  18.642  1.00  9.84           N
ATOM     61  CA  LEU A   8      29.607  41.180  19.467  1.00 14.15           C
ATOM     62  C   LEU A   8      30.075  42.538  18.984  1.00 17.37           C
ATOM     63  O   LEU A   8      29.586  43.570  19.483  1.00 17.01           O
ATOM     64  CB  LEU A   8      29.919  40.890  20.938  1.00 16.63           C
ATOM     65  CG  LEU A   8      29.183  39.722  21.581  1.00 18.88           C
ATOM     66  CD1 LEU A   8      27.700  39.721  21.228  1.00 18.59           C
ATOM     67  CD2 LEU A   8      29.308  39.750  23.095  1.00 19.31           C
END
"""
  with open('chiral_volume_validation_cases_leu_misnamed.pdb', 'w') as f:
    f.write(pdb_str)
  args = ['pdb=chiral_volume_validation_cases_leu_misnamed.pdb',
          'out_file=chiral_volume_validation_cases_leu_misnamed.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_cases_leu_misnamed.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  #chiral_volume_validation_cases_leu_misnamed.pdb: A:   8: : :LEU:CA:2.369:0.707:PROTEIN
  #chiral_volume_validation_cases_leu_misnamed.pdb: A:   8: : :LEU:CG:2.604:25.967:PROTEIN
  ca_volume = None
  ca_sigma = None
  cg_volume = None
  cg_sigma = None
  for line in lines:
    #print(line)
    chiral_center = line.split(":")[6]
    if chiral_center == "CA":
      ca_volume = float(line.split(":")[7])
      ca_sigma = float(line.split(":")[8])
    elif chiral_center == "CG":
      cg_volume = float(line.split(":")[7])
      cg_sigma = float(line.split(":")[8])
  assert approx_equal(ca_volume, 2.369, eps = 0.01) #same
  assert approx_equal(ca_sigma, 0.707, eps = 0.01) #same
  assert approx_equal(cg_volume, 2.604, eps = 0.01) #sign change
  assert approx_equal(cg_sigma, 25.967, eps = 0.01) #>20sigma outlier

################################################################################

def test_normal_sf4():
  """Regular sf4 iron-sulfur cluster. Chiral centers at FEs"""
  pdb_str = """\
HETATM14724 FE1  SF4 E 501       0.575  47.227  37.154  1.00 44.16          FE3+
HETATM14725 FE2  SF4 E 501       1.672  45.200  38.813  1.00 42.81          FE3+
HETATM14726 FE3  SF4 E 501       0.846  44.650  36.268  1.00 41.68          FE3+
HETATM14727 FE4  SF4 E 501      -0.960  45.318  38.094  1.00 49.33          FE3+
HETATM14728  S1  SF4 E 501       0.351  43.431  38.164  1.00 42.06           S
HETATM14729  S2  SF4 E 501      -0.963  46.038  35.912  1.00 42.31           S
HETATM14730  S3  SF4 E 501       0.157  46.850  39.397  1.00 45.58           S
HETATM14731  S4  SF4 E 501       2.547  46.073  36.852  1.00 45.73           S
TER
END
"""
  with open('chiral_volume_validation_cases_sf4_normal.pdb', 'w') as f:
    f.write(pdb_str)
  args = ['pdb=chiral_volume_validation_cases_sf4_normal.pdb',
          'out_file=chiral_volume_validation_cases_sf4_normal.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_cases_sf4_normal.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  #chiral_volume_validation_cases_sf4_normal.pdb: E: 501: : :SF4:FE1:-10.788:1.164:UNK
  #chiral_volume_validation_cases_sf4_normal.pdb: E: 501: : :SF4:FE2:11.095:2.699:UNK
  #chiral_volume_validation_cases_sf4_normal.pdb: E: 501: : :SF4:FE3:-10.559:0.020:UNK
  #chiral_volume_validation_cases_sf4_normal.pdb: E: 501: : :SF4:FE4:10.148:2.036:UNK
  fe1_volume = None
  fe1_sigma = None
  for line in lines:
    #print(line)
    chiral_center = line.split(":")[6]
    if chiral_center == "FE1":
      fe1_volume = float(line.split(":")[7])
      fe1_sigma = float(line.split(":")[8])
  assert approx_equal(fe1_volume, -10.788, eps = 0.01)
  assert approx_equal(fe1_sigma, 1.164, eps = 0.01)

def test_misnamed_sf4():
  """Atom positions for S2 and S3 have been swapped.
This should create a >>>20sigma chiral volume outlier at FE1.
Other FEs are affected but not tested here
This is a 'pseudochiral naming error'.
Validation wants to be able to catch these naming errors."""
  pdb_str = """\
HETATM14724 FE1  SF4 E 501       0.575  47.227  37.154  1.00 44.16          FE3+
HETATM14725 FE2  SF4 E 501       1.672  45.200  38.813  1.00 42.81          FE3+
HETATM14726 FE3  SF4 E 501       0.846  44.650  36.268  1.00 41.68          FE3+
HETATM14727 FE4  SF4 E 501      -0.960  45.318  38.094  1.00 49.33          FE3+
HETATM14728  S1  SF4 E 501       0.351  43.431  38.164  1.00 42.06           S
HETATM14729  S3  SF4 E 501      -0.963  46.038  35.912  1.00 42.31           S
HETATM14730  S2  SF4 E 501       0.157  46.850  39.397  1.00 45.58           S
HETATM14731  S4  SF4 E 501       2.547  46.073  36.852  1.00 45.73           S
END
"""
  with open('chiral_volume_validation_cases_sf4_misnamed.pdb', 'w') as f:
    f.write(pdb_str)
  args = ['pdb=chiral_volume_validation_cases_sf4_misnamed.pdb',
          'out_file=chiral_volume_validation_cases_sf4_misnamed.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_cases_sf4_misnamed.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  #chiral_volume_validation_cases_sf4_misnamed.pdb: E: 501: : :SF4:FE1:10.788:106.712:UNK
  #chiral_volume_validation_cases_sf4_misnamed.pdb: E: 501: : :SF4:FE2:14.425:19.352:UNK
  #chiral_volume_validation_cases_sf4_misnamed.pdb: E: 501: : :SF4:FE3:-14.365:19.049:UNK
  #chiral_volume_validation_cases_sf4_misnamed.pdb: E: 501: : :SF4:FE4:-10.148:103.512:UNK
  fe1_volume = None
  fe1_sigma = None
  for line in lines:
    #print(line)
    chiral_center = line.split(":")[6]
    if chiral_center == "FE1":
      fe1_volume = float(line.split(":")[7])
      fe1_sigma = float(line.split(":")[8])
  assert approx_equal(fe1_volume, 10.788, eps = 0.01) #sign changes
  assert approx_equal(fe1_sigma, 106.712, eps = 0.01) #>>>20 sigma outlier

################################################################################

def exercise():
  test_normal_val()
  test_misnamed_val()
  test_normal_leu()
  test_misnamed_leu()
  test_normal_sf4()
  test_misnamed_sf4()

if (__name__ == "__main__"):
  t0 = time.time()
  exercise()
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_mp_geo_endtoend.py
from __future__ import absolute_import, division, print_function
from mmtbx.validation.molprobity import mp_geo
import time
import libtbx.load_env
import os

def test_size_of_mp_geo_result():
  """This is an end-to-end test of mp_geo.
The sample file contains alternate conformations.
"""
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/2ERL_noH.pdb",
    test=os.path.isfile)
  args = ['pdb='+regression_pdb,
          'out_file=chiral_volume_validation_endtoend.out',
          'outliers_only=False',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_endtoend.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  count_bonds = 0
  count_angles = 0
  count_chirals = 0
  for line in lines:
    geom_identifier = line.split(':')[6]
    if "--" in geom_identifier:
      #2ERL_noH.pdb:  :   1: : :ASP:C--O:1.230:0.071:PROTEIN
      count_bonds += 1
    elif "-" in geom_identifier:
      #2ERL_noH.pdb:  :   1: : :ASP:C-CA-CB:111.672:0.827:PROTEIN
      count_angles += 1
    elif len(geom_identifier) == 2:
      #2ERL_noH.pdb:  :  21: :A:GLU:CA:2.514:0.020:PROTEIN
      count_chirals += 1
  assert count_bonds == 327
  assert count_angles == 442
  assert count_chirals == 49
  assert count_bonds + count_angles + count_chirals == len(lines),"there are lines in mp_geo output that are not bonds, angles, or chirals"

def test_size_of_mp_geo_result_outliers_only():
  """This is an end-to-end test of mp_geo using the outlier_only flag.
The sample file contains alternate conformations.
"""
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/2ERL_noH.pdb",
    test=os.path.isfile)
  args = ['pdb='+regression_pdb,
          'out_file=chiral_volume_validation_endtoend_outliers_only.out',
          'outliers_only=True',
          'bonds_and_angles=True']
  mp_geo.run(args)
  with open('chiral_volume_validation_endtoend_outliers_only.out', 'r') as f:
    lines = [i.rstrip('\n\r') for i in f.readlines()]
  count_bonds = 0
  count_angles = 0
  count_chirals = 0
  for line in lines:
    geom_identifier = line.split(':')[6]
    if "--" in geom_identifier:
      #2ERL_noH.pdb:  :   1: : :ASP:C--O:1.230:0.071:PROTEIN
      count_bonds += 1
    elif "-" in geom_identifier:
      #2ERL_noH.pdb:  :   1: : :ASP:C-CA-CB:111.672:0.827:PROTEIN
      count_angles += 1
    elif len(geom_identifier) == 2:
      #2ERL_noH.pdb:  :  21: :A:GLU:CA:2.514:0.020:PROTEIN
      count_chirals += 1
  assert count_bonds == 7
  assert count_angles == 5
  assert count_chirals == 0
  assert count_bonds + count_angles + count_chirals == len(lines),"there are lines in mp_geo outliers_only output that are not bonds, angles, or chirals"

def exercise():
  test_size_of_mp_geo_result()
  test_size_of_mp_geo_result_outliers_only()

if (__name__ == "__main__"):
  t0 = time.time()
  exercise()
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_mp_validate_bonds.py

from __future__ import absolute_import, division, print_function
from mmtbx.validation.mp_validate_bonds import mp_bonds, mp_angles
from iotbx.data_manager import DataManager
from mmtbx.model import manager
from libtbx.utils import null_out
from libtbx.test_utils import approx_equal
from libtbx.test_utils import convert_pdb_to_cif_for_pdb_str
import time
import json

pdb_str_1 = """
ATOM     60  N   GLU A   9       7.757   9.623  27.829  1.00 12.74           N
ATOM     61  CA  GLU A   9       7.695  10.769  26.927  1.00 12.72           C
ATOM     62  C   GLU A   9       7.351  12.056  27.684  1.00 12.59           C
ATOM     63  O   GLU A   9       6.321  12.134  28.348  1.00 14.32           O
ATOM     64  CB  GLU A   9       6.633  10.459  25.859  1.00 13.52           C
ATOM     65  CG  GLU A   9       6.323  11.587  24.899  1.00 15.93           C
ATOM     66  CD  GLU A   9       7.533  12.006  24.105  1.00 16.48           C
ATOM     67  OE1 GLU A   9       8.059  11.171  23.337  1.00 19.96           O
ATOM     68  OE2 GLU A   9       7.960  13.164  24.257  1.00 18.90           O
ATOM     69  N   ASP A  10       8.216  13.062  27.589  1.00 14.68           N
ATOM     70  CA  ASP A  10       7.992  14.328  28.283  1.00 15.47           C
ATOM     71  C   ASP A  10       6.987  15.255  27.598  1.00 15.82           C
ATOM     72  O   ASP A  10       6.315  16.049  28.258  1.00 15.43           O
ATOM     73  CB  ASP A  10       9.322  15.075  28.453  1.00 16.97           C
ATOM     74  CG AASP A  10       9.139  16.482  28.993  0.50 16.48           C
ATOM     75  CG BASP A  10       9.941  15.472  27.128  0.50 17.05           C
ATOM     76  OD1AASP A  10       9.189  17.442  28.197  0.50 17.34           O
ATOM     77  OD1BASP A  10      11.349  14.573  26.359  0.50 18.03           O
ATOM     78  OD2AASP A  10       8.934  16.630  30.215  0.50 17.88           O
ATOM     79  OD2BASP A  10      10.016  16.689  26.852  0.50 20.20           O
"""

pdb_str_2 = """
ATOM    516  P     C B 115      25.417  97.388  92.531  1.00161.67           P
ATOM    517  OP1   C B 115      25.620  96.786  93.873  1.00161.61           O
ATOM    518  OP2   C B 115      26.429  97.148  91.471  1.00157.52           O
ATOM    519  O5'   C B 115      23.989  96.929  91.981  1.00165.73           O
ATOM    520  C5'   C B 115      22.830  97.049  92.795  1.00166.81           C
ATOM    521  C4'   C B 115      21.568  96.608  92.088  1.00164.72           C
ATOM    522  O4'   C B 115      21.307  97.449  90.932  1.00165.07           O
ATOM    523  C3'   C B 115      21.553  95.203  91.511  1.00161.21           C
ATOM    524  O3'   C B 115      21.376  94.188  92.483  1.00162.42           O
ATOM    525  C2'   C B 115      20.419  95.291  90.500  1.00160.96           C
ATOM    526  O2'   C B 115      19.151  95.246  91.141  1.00163.14           O
ATOM    527  C1'   C B 115      20.634  96.695  89.939  1.00161.73           C
ATOM    528  N1    C B 115      21.449  96.670  88.703  1.00156.58           N
ATOM    529  C2    C B 115      20.847  96.216  87.521  1.00153.43           C
ATOM    530  O2    C B 115      19.660  95.854  87.547  1.00152.48           O
ATOM    531  N3    C B 115      21.572  96.181  86.379  1.00150.07           N
ATOM    532  C4    C B 115      22.845  96.576  86.385  1.00149.02           C
ATOM    533  N4    C B 115      23.520  96.526  85.235  1.00146.94           N
ATOM    534  C5    C B 115      23.484  97.040  87.572  1.00150.48           C
ATOM    535  C6    C B 115      22.758  97.069  88.698  1.00153.67           C
ATOM    547  P  A  A B 116      21.844  92.681  92.170  0.51179.08           P
ATOM    548  OP1A  A B 116      21.573  91.863  93.379  0.51179.56           O
ATOM    549  OP2A  A B 116      23.220  92.732  91.614  0.51177.92           O
ATOM    550  O5'A  A B 116      20.860  92.191  91.014  0.51167.56           O
ATOM    551  C5'A  A B 116      19.551  91.726  91.313  0.51164.82           C
ATOM    552  C4'A  A B 116      18.742  91.493  90.060  0.51155.92           C
ATOM    553  O4'A  A B 116      18.898  92.626  89.165  0.51149.57           O
ATOM    554  C3'A  A B 116      19.141  90.293  89.209  0.51151.37           C
ATOM    555  O3'A  A B 116      18.607  89.067  89.684  0.51153.31           O
ATOM    556  C2'A  A B 116      18.628  90.683  87.831  0.51140.91           C
ATOM    557  O2'A  A B 116      17.227  90.473  87.724  0.51147.22           O
ATOM    558  C1'A  A B 116      18.903  92.185  87.824  0.51133.46           C
ATOM    559  N9 A  A B 116      20.215  92.506  87.229  0.51115.10           N
ATOM    560  C8 A  A B 116      21.352  92.925  87.874  0.51103.22           C
ATOM    561  N7 A  A B 116      22.369  93.136  87.075  0.51 94.11           N
ATOM    562  C5 A  A B 116      21.867  92.833  85.817  0.51 93.20           C
ATOM    563  C6 A  A B 116      22.449  92.855  84.538  0.51 84.33           C
ATOM    564  N6 A  A B 116      23.716  93.210  84.308  0.51 83.97           N
ATOM    565  N1 A  A B 116      21.676  92.496  83.490  0.51 83.45           N
ATOM    566  C2 A  A B 116      20.406  92.141  83.722  0.51 89.16           C
ATOM    567  N3 A  A B 116      19.746  92.081  84.877  0.51100.01           N
ATOM    568  C4 A  A B 116      20.543  92.444  85.897  0.51106.03           C
ATOM    580  P  B  A B 116      21.673  92.654  92.107  0.49176.43           P
ATOM    581  OP1B  A B 116      22.052  91.946  93.355  0.49179.31           O
ATOM    582  OP2B  A B 116      22.589  92.619  90.939  0.49177.26           O
ATOM    583  O5'B  A B 116      20.256  92.106  91.631  0.49166.83           O
ATOM    584  C5'B  A B 116      20.155  90.953  90.811  0.49162.34           C
ATOM    585  C4'B  A B 116      18.753  90.785  90.285  0.49156.23           C
ATOM    586  O4'B  A B 116      18.380  91.954  89.503  0.49153.24           O
ATOM    587  C3'B  A B 116      18.530  89.625  89.328  0.49153.93           C
ATOM    588  O3'B  A B 116      18.398  88.370  89.971  0.49155.29           O
ATOM    589  C2'B  A B 116      17.290  90.074  88.574  0.49152.57           C
ATOM    590  O2'B  A B 116      16.122  89.934  89.370  0.49160.43           O
ATOM    591  C1'B  A B 116      17.592  91.558  88.399  0.49146.63           C
ATOM    592  N9 B  A B 116      18.368  91.795  87.168  0.49131.17           N
ATOM    593  C8 B  A B 116      19.613  92.360  87.046  0.49119.64           C
ATOM    594  N7 B  A B 116      20.046  92.418  85.809  0.49108.75           N
ATOM    595  C5 B  A B 116      19.018  91.847  85.070  0.49102.94           C
ATOM    596  C6 B  A B 116      18.857  91.610  83.694  0.49 95.23           C
ATOM    597  N6 B  A B 116      19.769  91.933  82.774  0.49 88.20           N
ATOM    598  N1 B  A B 116      17.711  91.021  83.287  0.49 91.58           N
ATOM    599  C2 B  A B 116      16.795  90.696  84.207  0.49 93.21           C
ATOM    600  N3 B  A B 116      16.833  90.868  85.525  0.49101.29           N
ATOM    601  C4 B  A B 116      17.982  91.457  85.895  0.49111.07           C
ATOM    613  C4'   G B 117      18.093  86.821  85.795  1.00149.42           C
ATOM    614  O4'   G B 117      18.411  88.142  85.277  1.00150.38           O
ATOM    615  C3'   G B 117      19.188  85.938  85.221  1.00152.20           C
ATOM    616  O3'   G B 117      18.860  84.561  85.207  1.00157.98           O
ATOM    617  C2'   G B 117      19.390  86.537  83.840  1.00148.15           C
ATOM    618  O2'   G B 117      18.348  86.156  82.953  1.00150.85           O
ATOM    619  C1'   G B 117      19.255  88.022  84.148  1.00142.90           C
ATOM    620  N9    G B 117      20.565  88.616  84.472  1.00129.09           N
ATOM    621  C8    G B 117      21.040  88.952  85.716  1.00125.15           C
ATOM    622  N7    G B 117      22.244  89.453  85.691  1.00119.89           N
ATOM    623  C5    G B 117      22.593  89.440  84.347  1.00115.13           C
ATOM    624  C6    G B 117      23.787  89.862  83.702  1.00106.78           C
ATOM    625  O6    G B 117      24.807  90.345  84.211  1.00103.03           O
ATOM    626  N1    G B 117      23.723  89.674  82.323  1.00103.58           N
ATOM    627  C2    G B 117      22.649  89.144  81.651  1.00105.31           C
ATOM    628  N2    G B 117      22.777  89.041  80.320  1.00103.13           N
ATOM    629  N3    G B 117      21.530  88.746  82.240  1.00112.17           N
ATOM    630  C4    G B 117      21.569  88.921  83.580  1.00119.07           C
ATOM    640  P  A  G B 117      19.377  87.681  89.414  0.57155.42           P
ATOM    641  OP1A  G B 117      18.636  86.602  90.115  0.57154.98           O
ATOM    642  OP2A  G B 117      20.818  87.886  89.703  0.57156.38           O
ATOM    643  O5'A  G B 117      19.216  87.435  87.847  0.57148.01           O
ATOM    644  C5'A  G B 117      18.022  86.888  87.300  0.57148.38           C
ATOM    647  P  B  G B 117      19.331  87.141  89.518  0.43155.13           P
ATOM    648  OP1B  G B 117      18.722  85.885  90.026  0.43152.30           O
ATOM    649  OP2B  G B 117      20.734  87.474  89.871  0.43155.64           O
ATOM    650  O5'B  G B 117      19.213  87.135  87.929  0.43147.38           O
ATOM    651  C5'B  G B 117      17.973  86.851  87.299  0.43148.35           C
ATOM    654  P     C B 118      20.023  83.460  85.359  1.00146.31           P
ATOM    655  OP1   C B 118      19.377  82.123  85.410  1.00144.77           O
ATOM    656  OP2   C B 118      20.921  83.881  86.465  1.00146.69           O
ATOM    657  O5'   C B 118      20.835  83.565  83.989  1.00123.79           O
ATOM    658  C5'   C B 118      20.203  83.271  82.751  1.00120.61           C
ATOM    659  C4'   C B 118      20.991  83.775  81.563  1.00114.71           C
ATOM    660  O4'   C B 118      21.385  85.159  81.765  1.00115.11           O
ATOM    661  C3'   C B 118      22.301  83.069  81.260  1.00107.01           C
ATOM    662  O3'   C B 118      22.124  81.826  80.602  1.00104.55           O
ATOM    663  C2'   C B 118      23.035  84.105  80.419  1.00107.93           C
ATOM    664  O2'   C B 118      22.544  84.120  79.087  1.00108.92           O
ATOM    665  C1'   C B 118      22.610  85.406  81.104  1.00111.02           C
ATOM    666  N1    C B 118      23.615  85.886  82.083  1.00107.14           N
ATOM    667  C2    C B 118      24.827  86.373  81.586  1.00106.46           C
ATOM    668  O2    C B 118      25.014  86.373  80.361  1.00109.38           O
ATOM    669  N3    C B 118      25.774  86.826  82.437  1.00103.02           N
ATOM    670  C4    C B 118      25.543  86.811  83.747  1.00103.40           C
ATOM    671  N4    C B 118      26.507  87.269  84.549  1.00103.30           N
ATOM    672  C5    C B 118      24.316  86.326  84.289  1.00103.70           C
ATOM    673  C6    C B 118      23.387  85.879  83.432  1.00104.01           C
"""

def exercise_mp_validate_bonds():
  dm = DataManager()
  #print(help(dm))
  dm.process_model_str("1",pdb_str_1)
  model = dm.get_model("1")
  model.set_stop_for_unknowns(False)
  hierarchy = model.get_hierarchy()
  p = manager.get_default_pdb_interpretation_params()
  ##print(dir(p.pdb_interpretation))
  p.pdb_interpretation.allow_polymer_cross_special_position=True
  p.pdb_interpretation.flip_symmetric_amino_acids=False
  p.pdb_interpretation.clash_guard.nonbonded_distance_threshold = None
  model.set_log(log = null_out())
  model.process(make_restraints=True, pdb_interpretation_params=p)
  geometry = model.get_restraints_manager().geometry
  atoms = hierarchy.atoms()
  bonds = mp_bonds(
    pdb_hierarchy=hierarchy,
    pdb_atoms=atoms,
    geometry_restraints_manager=geometry,
    outliers_only=False)
  angles = mp_angles(
    pdb_hierarchy=hierarchy,
    pdb_atoms=atoms,
    geometry_restraints_manager=geometry,
    outliers_only=False)
  #import pprint
  bonds_json = json.loads(bonds.as_JSON())
  #pprint.pprint(bonds_json)
  assert len(bonds_json['flat_results'])==19, "tst_mp_validate_bonds total number of bonds changed, now: "+str(len(bonds_json['flat_results']))
  assert approx_equal(bonds_json['flat_results'][18]["sigma"], 0.019), "tst_mp_validate_bonds json output last sigma value changed, now: "+str(bonds_json['flat_results'][18]["sigma"])
  assert bonds_json['summary_results'][""]["num_outliers"] == 1, "tst_mp_validate_bonds json summary output total number of outliers changed, now: "+str(bonds_json['summary_results'][""]["num_outliers"])
  assert bonds_json['summary_results'][""]["num_total"]==19, "tst_mp_validate_bonds json summary output total number of bonds changed, now: "+str(bonds_json['summary_results'][""]["num_total"])
  assert bonds_json['summary_results'][""]["num_outliers_too_small"] == 0, "tst_mp_validate_bonds json summary output total number of bonds too small changed, now: "+str(bonds_json['summary_results'][""]["num_outliers_too_small"])
  assert bonds_json['summary_results'][""]["num_outliers_too_large"] == 1, "tst_mp_validate_bonds json summary output total number of bonds too large changed, now: "+str(bonds_json['summary_results'][""]["num_outliers_too_large"])
  angles_json = json.loads(angles.as_JSON())
  #pprint.pprint(angles_json)
  assert len(angles_json['flat_results'])==24, "tst_mp_validate_bonds total number of angles changed, now: "+str(len(angles_json['flat_results']))
  assert approx_equal(angles_json['flat_results'][23]["sigma"], 2.3), "tst_mp_validate_bonds json output last sigma value changed, now: "+str(angles_json['flat_results'][23]["sigma"])
  assert angles_json['summary_results'][""]["num_outliers"] == 1, "tst_mp_validate_bonds json summary output total number of outliers changed, now: "+str(angles_json['summary_results'][""]["num_outliers"])
  assert angles_json['summary_results'][""]["num_total"]==24, "tst_mp_validate_bonds json summary output total number of angles changed, now: "+str(angles_json['summary_results'][""]["num_total"])
  assert angles_json['summary_results'][""]["num_outliers_too_small"]==1, "tst_mp_validate_bonds json summary output total number of angles too small changed, now: "+str(angles_json['summary_results'][""]["num_outliers_too_small"])
  assert angles_json['summary_results'][""]["num_outliers_too_large"]==0, "tst_mp_validate_bonds json summary output total number of angles too large changed, now: "+str(angles_json['summary_results'][""]["num_outliers_too_large"])
  return bonds_json, angles_json

if (__name__ == "__main__"):
  t0 = time.time()
  bonds_dict, angles_dict = exercise_mp_validate_bonds()
  convert_pdb_to_cif_for_pdb_str(locals(), chain_addition="LONGCHAIN", hetatm_name_addition = "", key_str="pdb_", print_new_string = False)
  bonds_dict_cif, angles_dict_cif = exercise_mp_validate_bonds()
  assert bonds_dict['summary_results'] == bonds_dict_cif['summary_results'], "tst_mp_validate_bonds summary results changed between pdb and cif version"
  assert angles_dict['summary_results'] == angles_dict_cif['summary_results'], "tst_mp_validate_bonds summary results changed between pdb and cif version"
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_omegalyze.py
from __future__ import absolute_import, division, print_function
from mmtbx.validation import omegalyze
from libtbx.test_utils import show_diff, approx_equal
from iotbx import pdb
from iotbx.data_manager import DataManager
from libtbx.test_utils import convert_string_to_cif_long
import libtbx.load_env
import os
import json
import time

ref_omegalyze_give_text = """residues:type:omega:conformation:mc_bmax
 A  40  PHE to  A  41  PRO: Pro     : -14.27:Cis     :28.76
 A 206  VAL to  A 207  LEU: non-Pro : 123.05:Twisted :29.35
 A 504  ILE to  A 505  PRO: Pro     :  -0.31:Cis     :27.55
 A 584  ASN to  A 585  LYS: non-Pro : -12.68:Cis     :26.39
 A 603  ILE to  A 604  GLY: non-Pro :-144.84:Twisted :27.51
 B 929  ARG to  B 930  LEU: non-Pro :-136.14:Twisted :26.97
 B1331  LYS to  B1332  ASP: non-Pro : 134.92:Twisted :27.81
 B1474  GLU to  B1475  LYS: non-Pro : -19.25:Cis     :43.95
 B1593  LYS to  B1594  PRO: Pro     :   8.04:Cis     :26.47
SUMMARY: 3 cis prolines out of 77 PRO
SUMMARY: 0 twisted prolines out of 77 PRO
SUMMARY: 2 other cis residues out of 1464 nonPRO
SUMMARY: 4 other twisted residues out of 1464 nonPRO
"""

class omegalyze_test_string():
  #I wrote the regression test to use a class with a custom .write() method as a
  #  proof of principle for learning OOP and to see if I could. Possible because
  #  all my print functions accept an optional writeto= variable.
  def write(self,string):
    self.output += str(string)
  def __init__(self):
    self.output = ""

def exercise_omegalyze():
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/2hr0.pdb",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_omegalyze(): input pdb (2hr0.pdb) not available")
    return
  #-----
  pdb_io = pdb.input(regression_pdb)
  pdbid = os.path.basename(regression_pdb)
  hierarchy = pdb_io.construct_hierarchy()

  text_test = omegalyze_test_string()
  outliers = omegalyze.omegalyze(
    pdb_hierarchy=hierarchy,
    nontrans_only=True,
    out=text_test,
    quiet=False)
  outliers.show_old_output(out=text_test, verbose=True)

  assert not show_diff(text_test.output , ref_omegalyze_give_text)

def exercise_omegalyze_json(test_mmcif=False):
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/2hr0.pdb",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_omegalyze(): input pdb (2hr0.pdb) not available")
    return
  #-----
  dm = DataManager()
  if test_mmcif:
    with open(regression_pdb) as f:
      pdb_2hr0_str = f.read()
    pdb_2hr0_str = convert_string_to_cif_long(pdb_2hr0_str, chain_addition="LONGCHAIN")
    dm.process_model_str("1", pdb_2hr0_str)
    m = dm.get_model("1")
    #print(pdb_2hr0_str)
  else:
    m = dm.get_model(regression_pdb)

  omegalyze_json = omegalyze.omegalyze(pdb_hierarchy=m.get_hierarchy(), nontrans_only=True).as_JSON()
  omjson_dict = json.loads(omegalyze_json)
  #import pprint
  #pprint.pprint(omjson_dict)
  assert len(omjson_dict['flat_results'])==9, "tst_omegalyze json output not returning correct number of nontrans residues, now: "+str(len(omjson_dict['flat_results']))
  assert approx_equal(omjson_dict['flat_results'][0]['omega'], -14.27418253081719), "tst_omegalyze json output first calculated omega dihedral angle not matching previous value, now: "+str(omjson_dict['flat_results'][0]['omega'])
  assert omjson_dict['flat_results'][0]['omega_type']=='Cis', "tst_omegalyze json output first omega_type not matching previous value, now: "+str(omjson_dict['flat_results'][0]['omega_type'])
  assert approx_equal(omjson_dict['flat_results'][0]['highest_mc_b'], 28.76), "tst_omegalyze json output first calculated highest_mc_b not matching previous value, now: "+str(omjson_dict['flat_results'][0]['highest_mc_b'])
  assert approx_equal(omjson_dict['flat_results'][8]['omega'], 8.043663329121266), "tst_omegalyze json output last calculated omega dihedral angle not matching previous value, now: "+str(omjson_dict['flat_results'][8]['omega'])
  assert omjson_dict['flat_results'][8]['omega_type']=='Cis', "tst_omegalyze json output last omega_type not matching previous value, now: "+str(omjson_dict['flat_results'][8]['omega_type'])

  from mmtbx.validation import test_utils
  #assert count(omjson_dict['hierarchical_results'], "PRO")==3, "tst_omegalyze json hierarchical output number of Pro omega outliers changed"
  assert test_utils.count_dict_values(omjson_dict['hierarchical_results'], "Cis")==5, "tst_omegalyze json hierarchical output total number of omega Cis outliers changed to: "+str(test_utils.count_dict_values(omjson_dict['hierarchical_results'], "Cis"))
  assert test_utils.count_dict_values(omjson_dict['hierarchical_results'], "Twisted")==4, "tst_omegalyze json hierarchical output total number of omega Twisted outliers changed to: "+str(test_utils.count_dict_values(omjson_dict['hierarchical_results'], "Twisted"))
  assert omjson_dict['summary_results'][""]['num_cis_proline']==3, "tst_omegalyze json summary results num cis prolines changed to: " + str(omjson_dict['summary_results'][""]['num_cis_proline'])
  return omjson_dict

def run():
  t0 = time.time()
  exercise_omegalyze()
  om_dict = exercise_omegalyze_json()
  om_dict_cif = exercise_omegalyze_json(test_mmcif=True)
  assert om_dict['summary_results'] == om_dict_cif['summary_results'], "tst_omegalyze summary results changed between pdb and cif version"
  print("OK. Time: %8.3f"%(time.time()-t0))

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_rama_z_01.py
from __future__ import absolute_import, division, print_function
import libtbx.load_env
from libtbx import easy_run
from libtbx.test_utils import approx_equal, assert_lines_in_text
import mmtbx.model
from libtbx.utils import null_out
import iotbx.pdb
from mmtbx.validation.rama_z import rama_z
import os

fname = libtbx.env.find_in_repositories(
    relative_path="cctbx_project/mmtbx/regression/pdbs/p9.pdb",
    test=os.path.isfile)

cryst1 = "CRYST1    1.000    1.000    1.000  90.00  90.00  90.00 P 1           1          \n"

def check_function():
  inp = iotbx.pdb.input(fname)
  model = mmtbx.model.manager(model_input=inp)
  zs = rama_z([model], log=null_out())
  z_scores = zs.get_z_scores()
  ss_cont = zs.get_residue_counts()
  # print (z_scores)
  # print (ss_cont)
  expected_z =  {'H': None, 'S': (-0.057428666470734, 0.5840017477579902),
      'L': (-0.3588028726184504, 0.6941226745661744),
      'W': (-0.4019606027769244, 0.6621289642029733)}
  expeted_ss = {'H': 0, 'S': 63, 'L': 71, 'W': 134}
  for k in expected_z:
    if z_scores[k] is not None:
      assert approx_equal( z_scores[k], expected_z[k], eps=1e-5)
      assert approx_equal( ss_cont[k], expeted_ss[k] )
  # check how separate scores translate to whole
  s_score = (z_scores['S'][0] * zs.calibration_values['S'][1] + zs.calibration_values['S'][0]) * ss_cont['S']
  l_score = (z_scores['L'][0] * zs.calibration_values['L'][1] + zs.calibration_values['L'][0]) * ss_cont['L']
  w_score = ((s_score + l_score)/(ss_cont['S']+ss_cont['L']) - zs.calibration_values['W'][0]) / zs.calibration_values['W'][1]
  # print ("reconstructed:", w_score, z_scores['W'][0])
  assert approx_equal(w_score, z_scores['W'][0])

def check_cmd_line():
  cmd = "mmtbx.rama_z %s" % fname
  r = easy_run.fully_buffered(cmd)
  assert r.return_code == 0
  stdout = r.stdout_lines
  # print ("\n".join(stdout))
  assert_lines_in_text("\n".join(stdout), """\
      whole: -0.40 (0.66), residues: 134
      helix:  None (None), residues: 0
      sheet: -0.06 (0.58), residues: 63
      loop : -0.36 (0.69), residues: 71""")

def check_cmd_line_cryst1(prefix="tst_rama_z_01_cryst1"):
  with open(fname, 'r') as f:
    pdbtext = f.read()
  with open(prefix+'.pdb', 'w') as f:
    f.write(cryst1)
    f.write(pdbtext)
  cmd = "mmtbx.rama_z %s" % (prefix+'.pdb')
  r = easy_run.fully_buffered(cmd)
  assert r.return_code == 0
  stdout = r.stdout_lines
  # print ("\n".join(stdout))
  assert_lines_in_text("\n".join(stdout), """\
      whole: -0.40 (0.66), residues: 134
      helix:  None (None), residues: 0
      sheet: -0.06 (0.58), residues: 63
      loop : -0.36 (0.69), residues: 71""")


if __name__ == '__main__':
  check_function()
  check_cmd_line()
  check_cmd_line_cryst1()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_rama_z_02.py
from __future__ import absolute_import, division, print_function
import libtbx.load_env
from libtbx import easy_run
from libtbx.test_utils import assert_lines_in_text
import os

fname = libtbx.env.find_in_repositories(
    relative_path="cctbx_project/mmtbx/regression/pdbs/1ucs_cutted_xyz_rounded.pdb",
    test=os.path.isfile)

def check_cmd_line():
  cmd = "mmtbx.rama_z %s" % fname
  r = easy_run.fully_buffered(cmd)
  stdout = r.stdout_lines
  # stderr = r.stderr_lines
  # print ("\n".join(stdout))
  # print ("\n".join(stderr))
  # assert r.return_code == 0
  assert_lines_in_text("\n".join(stdout), """\
      whole: -7.73 (0.57), residues: 38
      helix: -5.87 (0.32), residues: 6
      sheet:  None (None), residues: 0
      loop : -5.60 (0.49), residues: 32""")

if __name__ == '__main__':
  check_cmd_line()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_ramalyze.py

from __future__ import absolute_import, division, print_function
from libtbx.test_utils import show_diff, approx_equal
import libtbx.load_env
from libtbx.easy_pickle import loads, dumps
from six.moves import cStringIO as StringIO
import os.path
from mmtbx.validation import ramalyze
from mmtbx.rotamer.rotamer_eval import find_rotarama_data_dir
from iotbx.data_manager import DataManager
from libtbx.test_utils import convert_string_to_cif_long

import time
import json

def exercise_ramalyze():
  from mmtbx.rotamer.rotamer_eval import find_rotarama_data_dir
  import iotbx.pdb
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/jcm.pdb",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_ramalyze(): input pdb (jcm.pdb) not available")
    return
  if (find_rotarama_data_dir(optional=True) is None):
    print("Skipping exercise_ramalyze(): rotarama_data directory not available")
    return
  # Exercise 1
  pdb_in = iotbx.pdb.input(file_name=regression_pdb)
  hierarchy = pdb_in.construct_hierarchy()
  pdb_io = iotbx.pdb.input(file_name=regression_pdb)
  hierarchy.atoms().reset_i_seq()
  r = ramalyze.ramalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=True)
  out = StringIO()
  r.show_old_output(out=out)
  output = out.getvalue()
  assert output.count("OUTLIER") == 100
  assert output.count("Favored") == 0
  assert output.count("Allowed") == 0
  assert output.count("General") == 64
  assert output.count("Glycine") == 6
  assert output.count("Trans-proline") == 1
  assert output.count("Cis-proline") == 0
  assert output.count("Pre-proline") == 4
  assert output.count("Isoleucine or valine") == 25
  assert (len(r.outlier_selection()) == 494)
  outlier_ids = set([])
  atoms = hierarchy.atoms()
  for i_seq in r.outlier_selection():
    atom = atoms[i_seq]
    atom_group = atoms[i_seq].parent()
    outlier_ids.add(atom_group.id_str())
  outliers1 = sorted([ o.atom_group_id_str() for o in r.results ])
  outliers2 = sorted(list(outlier_ids))
  assert (outliers1 == outliers2)

  r = ramalyze.ramalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=False)
  for unpickle in [False, True] :
    if unpickle :
      r = loads(dumps(r))
    for outlier in r.results :
      assert (len(outlier.xyz) == 3)
    out = StringIO()
    r.show_old_output(out=out, verbose=False)
    output = out.getvalue()
    assert output.count("OUTLIER") == 100
    assert output.count("Favored") == 463
    assert output.count("Allowed") == 162
    assert output.count("General") == 514
    assert output.count("Glycine") == 39
    assert output.count("Trans-proline") == 23
    assert output.count("Cis-proline") == 0
    assert output.count("Pre-proline") == 21
    assert output.count("Isoleucine or valine") == 128
    numtotal = r.get_phi_psi_residues_count()
    assert r.get_outliers_count_and_fraction()  == (100, 100./numtotal)
    assert r.get_allowed_count_and_fraction()   == (162, 162./numtotal)
    assert r.get_favored_count_and_fraction()   == (463, 463./numtotal)
    assert r.get_general_count_and_fraction()   == (514, 514./numtotal)
    assert r.get_gly_count_and_fraction()       == (39, 39./numtotal)
    assert r.get_trans_pro_count_and_fraction() == (23, 23./numtotal)
    assert r.get_cis_pro_count_and_fraction()   == (0, 0./numtotal)
    assert r.get_prepro_count_and_fraction()    == (21, 21./numtotal)
    assert r.get_ileval_count_and_fraction()    == (128, 128./numtotal)
    #assert numtotal == 75+154+494 #reasons for this math unclear
    assert numtotal == 725
    output_lines = output.splitlines()
    assert len(output_lines) == 725
    selected_lines = []
    for x in [0, 1, 168, 169, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724]:
      selected_lines.append(output_lines[x])
    assert not show_diff("\n".join(selected_lines), """\
 A  15  SER:35.07:-83.26:131.88:Favored:General
 A  16  SER:0.74:-111.53:71.36:Allowed:General
 A 191  ASP:2.66:-42.39:121.87:Favored:Pre-proline
 A 192  PRO:0.31:-39.12:-31.84:Allowed:Trans-proline
 B 368  LYS:56.44:-62.97:-53.28:Favored:General
 B 369  GLU:8.89:-44.36:-45.50:Favored:General
 B 370  LYS:40.00:-50.00:-39.06:Favored:General
 B 371  VAL:68.24:-60.38:-51.85:Favored:Isoleucine or valine
 B 372  LEU:0.02:-61.13:-170.23:OUTLIER:General
 B 373  ARG:0.02:60.09:-80.26:OUTLIER:General
 B 374  ALA:0.13:-37.21:-36.12:Allowed:General
 B 375  LEU:11.84:-89.81:-41.45:Favored:General
 B 376  ASN:84.33:-58.30:-41.39:Favored:General
 B 377  GLU:30.88:-56.79:-21.74:Favored:General""")
    assert (len(r.outlier_selection()) == 494)

  # Exercise 2
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/pdb1jxt.ent",
    test=os.path.isfile)
  pdb_in = iotbx.pdb.input(file_name=regression_pdb)
  hierarchy = pdb_in.construct_hierarchy()
  hierarchy.atoms().reset_i_seq()
  r = ramalyze.ramalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=True)
  out = StringIO()
  r.show_old_output(out=out)
  output = out.getvalue()
  assert output.count("Favored") == 0
  assert output.count("Allowed") == 0
  assert output.count("OUTLIER") == 0
  r = ramalyze.ramalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=False)
  for unpickle in [False, True] :
    if unpickle :
      r = loads(dumps(r))
    out = StringIO()
    r.show_old_output(out=out, verbose=False)
    output = out.getvalue()
    assert output.count("Favored") == 50
    assert output.count("Allowed") == 1
    assert output.count("OUTLIER") == 0
    assert output.count("General") == 29
    assert output.count("Glycine") == 4
    assert output.count("Trans-proline") == 5
    assert output.count("Cis-proline") == 0
    assert output.count("Pre-proline") == 5
    assert output.count("Isoleucine or valine") == 8
    numtotal = r.get_phi_psi_residues_count()
    assert r.get_outliers_count_and_fraction()  == (0, 0./numtotal)
    assert r.get_allowed_count_and_fraction()   == (1, 1./numtotal)
    assert r.get_favored_count_and_fraction()   == (43, 43./numtotal)
    #print r.get_general_count_and_fraction()
    assert r.get_general_count_and_fraction()   == (25, 25./numtotal)
    assert r.get_gly_count_and_fraction()       == (4, 4./numtotal)
    assert r.get_trans_pro_count_and_fraction() == (5, 5./numtotal)
    assert r.get_cis_pro_count_and_fraction()   == (0, 0./numtotal)
    assert r.get_prepro_count_and_fraction()    == (5, 5./numtotal)
    assert r.get_ileval_count_and_fraction()    == (5, 5./numtotal)
    output_lines = output.splitlines()
    assert len(output_lines) == 51
    selected_lines = []
    for x in [0, 1, 5, 6, 7, 8, 9, 47, 48, 49, 50]:
      selected_lines.append(output_lines[x])
    assert not show_diff("\n".join(selected_lines), """\
 A   2 ATHR:33.85:-106.92:144.23:Favored:General
 A   3 ACYS:47.07:-132.54:137.26:Favored:General
 A   7 AILE:98.76:-61.91:-44.35:Favored:Isoleucine or valine
 A   7 BILE:61.50:-56.21:-51.56:Favored:Isoleucine or valine
 A   8 AVAL:23.11:-50.35:-49.64:Favored:Isoleucine or valine
 A   8 BVAL:12.01:-83.20:-12.14:Favored:Isoleucine or valine
 A   8 CVAL:73.11:-61.22:-36.49:Favored:Isoleucine or valine
 A  43 AASP:51.81:-94.64:5.45:Favored:General
 A  43 BASP:56.98:-88.69:-0.12:Favored:General
 A  44  TYR:1.76:-133.10:58.75:Allowed:General
 A  45  ALA:57.37:-86.61:-8.57:Favored:General""")

  # Exercise 3: 2plx excerpt (unusual icode usage)
  import iotbx.pdb
  hierarchy = iotbx.pdb.input(source_info=None, lines="""\
ATOM   1468  N   GLY A 219       3.721  21.322  10.752  1.00 14.12           N
ATOM   1469  CA  GLY A 219       3.586  21.486  12.188  1.00 14.85           C
ATOM   1470  C   GLY A 219       4.462  20.538  12.995  1.00 15.63           C
ATOM   1471  O   GLY A 219       5.513  20.090  12.512  1.00 14.55           O
ATOM   1472  N   CYS A 220       4.036  20.213  14.235  1.00 15.02           N
ATOM   1473  CA  CYS A 220       4.776  19.228  15.068  1.00 15.56           C
ATOM   1474  C   CYS A 220       3.773  18.322  15.741  1.00 14.69           C
ATOM   1475  O   CYS A 220       2.799  18.828  16.338  1.00 15.54           O
ATOM   1476  CB  CYS A 220       5.620  19.906  16.174  1.00 15.72           C
ATOM   1477  SG  CYS A 220       6.762  21.133  15.448  1.00 15.45           S
ATOM   1478  N   ALA A 221A      4.054  17.017  15.707  1.00 14.77           N
ATOM   1479  CA  ALA A 221A      3.274  16.015  16.507  1.00 14.01           C
ATOM   1480  C   ALA A 221A      1.774  15.992  16.099  1.00 14.50           C
ATOM   1481  O   ALA A 221A      0.875  15.575  16.881  1.00 14.46           O
ATOM   1482  CB  ALA A 221A      3.440  16.318  17.935  1.00 12.28           C
ATOM   1483  N   GLN A 221       1.523  16.390  14.848  1.00 14.52           N
ATOM   1484  CA  GLN A 221       0.159  16.391  14.325  1.00 15.19           C
ATOM   1485  C   GLN A 221      -0.229  15.044  13.717  1.00 14.43           C
ATOM   1486  O   GLN A 221       0.641  14.280  13.307  1.00 16.88           O
ATOM   1487  CB  GLN A 221       0.002  17.491  13.272  1.00 16.41           C
ATOM   1488  CG  GLN A 221       0.253  18.906  13.805  1.00 16.52           C
ATOM   1489  CD  GLN A 221      -0.640  19.181  14.995  1.00 17.87           C
ATOM   1490  OE1 GLN A 221      -1.857  19.399  14.826  1.00 13.54           O
ATOM   1491  NE2 GLN A 221      -0.050  19.149  16.228  1.00 16.18           N
ATOM   1492  N   LYS A 222      -1.537  14.773  13.694  1.00 14.34           N
ATOM   1493  CA  LYS A 222      -2.053  13.536  13.125  1.00 15.07           C
ATOM   1494  C   LYS A 222      -1.679  13.455  11.655  1.00 14.88           C
ATOM   1495  O   LYS A 222      -1.856  14.424  10.883  1.00 14.32           O
""").construct_hierarchy()
  r = ramalyze.ramalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=False)
  assert (len(r.results) == 3)

def exercise_favored_regions():
  assert ramalyze.get_favored_regions(0) == [(-99, 119), (-63, -43), (53, 43), (60,-120)]

def exercise_constants():
  #
  # if this test fails, somebody changed ramalyze constants. The same constants
  # are declared also in mmtbx/validation/ramachandran/rama8000_tables.h
  # It is essential to keep both places consistent.
  #
  assert ramalyze.res_types == ["general", "glycine", "cis-proline",
      "trans-proline", "pre-proline", "isoleucine or valine"]
  assert ramalyze.RAMA_GENERAL == 0
  assert ramalyze.RAMA_GLYCINE == 1
  assert ramalyze.RAMA_CISPRO == 2
  assert ramalyze.RAMA_TRANSPRO == 3
  assert ramalyze.RAMA_PREPRO == 4
  assert ramalyze.RAMA_ILE_VAL == 5
  assert ramalyze.RAMALYZE_OUTLIER == 0
  assert ramalyze.RAMALYZE_ALLOWED == 1
  assert ramalyze.RAMALYZE_FAVORED == 2
  assert ramalyze.RAMALYZE_ANY == 3
  assert ramalyze.RAMALYZE_NOT_FAVORED == 4

def exercise_ramalyze_json(test_mmcif=False):
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/jcm.pdb",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_ramalyze(): input pdb (jcm.pdb) not available")
    return
  if (find_rotarama_data_dir(optional=True) is None):
    print("Skipping exercise_ramalyze(): rotarama_data directory not available")
    return
  dm = DataManager()
  if test_mmcif:
    with open(regression_pdb) as f:
      pdb_jcm_str = f.read()
    pdb_jcm_str = convert_string_to_cif_long(pdb_jcm_str, chain_addition="LONGCHAIN")
    dm.process_model_str("1", pdb_jcm_str)
    m = dm.get_model("1")
  else:
    m = dm.get_model(regression_pdb)
  ramalyze_json = ramalyze.ramalyze(pdb_hierarchy=m.get_hierarchy(), outliers_only=True).as_JSON()
  rmjson_dict = json.loads(ramalyze_json)
  #import pprint
  #pprint.pprint(rmjson_dict)
  assert len(rmjson_dict['flat_results'])==100, "tst_ramalyze json output not returning correct number of values"
  assert approx_equal(rmjson_dict['flat_results'][0]['phi'], 50.51521639791719), "tst_ramalyze json output first calculated phi dihedral angle not matching previous value"
  assert approx_equal(rmjson_dict['flat_results'][0]['psi'], -80.04604513007598), "tst_ramalyze json output first calculated psi dihedral angle not matching previous value"
  assert rmjson_dict['flat_results'][0]['rama_type']=='OUTLIER', "tst_ramalyze json output first rama_type not matching previous value"
  assert approx_equal(rmjson_dict['flat_results'][99]['phi'], 60.09378543010022), "tst_ramalyze json output last calculated phi dihedral angle not matching previous value"
  assert approx_equal(rmjson_dict['flat_results'][99]['psi'], -80.26327714086905), "tst_ramalyze json output last calculated psi dihedral angle not matching previous value"
  assert rmjson_dict['flat_results'][99]['rama_type']=='OUTLIER', "tst_ramalyze json output last rama_type not matching previous value"
  from mmtbx.validation import test_utils
  assert test_utils.count_dict_values(rmjson_dict['hierarchical_results'], "OUTLIER")==100, "tst_ramalyze json hierarchical output total number of rama outliers changed"
  assert rmjson_dict['summary_results'][""]['num_allowed'] == 162, "tst_ramalyze json output summary total num_allowed not matching previous value"
  assert rmjson_dict['summary_results'][""]['num_favored'] == 463, "tst_ramalyze json output summary total num_favored not matching previous value"
  assert rmjson_dict['summary_results'][""]['num_outliers'] == 100, "tst_ramalyze json output summary total num_outliers not matching previous value"
  assert rmjson_dict['summary_results'][""]['num_residues'] == 725, "tst_ramalyze json output summary total num_residues not matching previous value"
  return rmjson_dict

if (__name__ == "__main__"):
  t0=time.time()
  exercise_ramalyze()
  exercise_favored_regions()
  exercise_constants()
  rm_dict = exercise_ramalyze_json()
  rm_dict_cif = exercise_ramalyze_json(test_mmcif=True)
  assert rm_dict['summary_results'] == rm_dict_cif['summary_results'], "tst_ramalyze summary results changed between pdb and cif version"
  print("Time: %6.4f"%(time.time()-t0))
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_ramalyze2.py
from __future__ import absolute_import, division, print_function
import time
import mmtbx.model
import iotbx.pdb
from mmtbx.validation import ramalyze

# ------------------------------------------------------------------------------
# Make sure that pdb file with several models produces results for all models
# ------------------------------------------------------------------------------

def exercise():
  pdb_inp = iotbx.pdb.input(lines=pdb_str.split("\n"), source_info=None)
  model = mmtbx.model.manager(
    model_input = pdb_inp)
  pdb_hierarchy = model.get_hierarchy()

  r = ramalyze.ramalyze(
    pdb_hierarchy = pdb_hierarchy,
    outliers_only = False)

  assert (len(r.results) == 3), 'Supposed to fail until fixed. Ramalyze results not available for all models.'

pdb_str = """
CRYST1    1.000    1.000    1.000  90.00  90.00  90.00 P 1           1
ORIGX1      1.000000  0.000000  0.000000        0.00000
ORIGX2      0.000000  1.000000  0.000000        0.00000
ORIGX3      0.000000  0.000000  1.000000        0.00000
SCALE1      1.000000  0.000000  0.000000        0.00000
SCALE2      0.000000  1.000000  0.000000        0.00000
SCALE3      0.000000  0.000000  1.000000        0.00000
MODEL        1
ATOM      1  N   ASN A   1       1.329   0.000   0.000  1.00  1.00           N
ATOM      2  CA  ASN A   1       2.093  -0.001  -1.242  1.00 64.21           C
ATOM      3  C   ASN A   1       1.973  -1.345  -1.954  1.00 21.54           C
ATOM      4  O   ASN A   1       2.071  -1.423  -3.178  1.00 42.13           O
ATOM      5  CB  ASN A   1       3.565   0.309  -0.960  1.00 52.42           C
ATOM      6  CG  ASN A   1       4.305   0.774  -2.199  1.00 64.34           C
ATOM      7  OD1 ASN A   1       4.331   0.081  -3.217  1.00 14.30           O
ATOM      8  ND2 ASN A   1       4.913   1.952  -2.118  1.00 64.45           N
ATOM      9  H1  ASN A   1       1.808   0.001   0.855  1.00 15.23           H
ATOM     10  HA  ASN A   1       1.688   0.769  -1.881  1.00 62.21           H
ATOM     11  HB2 ASN A   1       3.625   1.089  -0.215  1.00  4.30           H
ATOM     12  HB3 ASN A   1       4.049  -0.580  -0.585  1.00 41.42           H
ATOM     13 HD21 ASN A   1       4.851   2.448  -1.276  1.00  0.23           H
ATOM     14 HD22 ASN A   1       5.399   2.276  -2.905  1.00 40.32           H
ATOM     15  N   VAL A   2       1.759  -2.403  -1.177  1.00  2.11           N
ATOM     16  CA  VAL A   2       1.623  -3.744  -1.732  1.00 65.20           C
ATOM     17  C   VAL A   2       0.180  -4.031  -2.128  1.00 74.53           C
ATOM     18  O   VAL A   2      -0.536  -4.748  -1.429  1.00 30.45           O
ATOM     19  CB  VAL A   2       2.092  -4.816  -0.730  1.00 64.25           C
ATOM     20  CG1 VAL A   2       2.069  -6.195  -1.373  1.00 50.44           C
ATOM     21  CG2 VAL A   2       3.483  -4.486  -0.209  1.00 13.30           C
ATOM     22  H   VAL A   2       1.690  -2.278  -0.207  1.00 43.35           H
ATOM     23  HA  VAL A   2       2.247  -3.806  -2.612  1.00 23.21           H
ATOM     24  HB  VAL A   2       1.409  -4.822   0.106  1.00 41.00           H
ATOM     25 HG11 VAL A   2       2.853  -6.803  -0.948  1.00 21.35           H
ATOM     26 HG12 VAL A   2       1.111  -6.660  -1.192  1.00 63.34           H
ATOM     27 HG13 VAL A   2       2.227  -6.098  -2.437  1.00 44.14           H
ATOM     28 HG21 VAL A   2       3.405  -4.080   0.789  1.00 40.14           H
ATOM     29 HG22 VAL A   2       4.082  -5.384  -0.186  1.00 63.31           H
ATOM     30 HG23 VAL A   2       3.948  -3.760  -0.859  1.00  1.55           H
ATOM     31  N   ASP A   3      -0.242  -3.468  -3.255  1.00 10.11           N
ATOM     32  CA  ASP A   3      -1.601  -3.665  -3.746  1.00 41.42           C
ATOM     33  C   ASP A   3      -1.619  -4.643  -4.916  1.00 74.14           C
ATOM     34  O   ASP A   3      -1.696  -4.238  -6.077  1.00 21.55           O
ATOM     35  CB  ASP A   3      -2.210  -2.328  -4.173  1.00 71.21           C
ATOM     36  CG  ASP A   3      -2.287  -1.335  -3.030  1.00 22.40           C
ATOM     37  OD1 ASP A   3      -1.324  -0.559  -2.852  1.00 33.41           O
ATOM     38  OD2 ASP A   3      -3.310  -1.334  -2.314  1.00  4.32           O
ATOM     39  H   ASP A   3       0.376  -2.907  -3.769  1.00 51.30           H
ATOM     40  HA  ASP A   3      -2.189  -4.076  -2.940  1.00 22.31           H
ATOM     41  HB2 ASP A   3      -1.605  -1.898  -4.958  1.00 61.42           H
ATOM     42  HB3 ASP A   3      -3.209  -2.498  -4.546  1.00 71.35           H
TER      43      ASP A   3
ENDMDL
MODEL        2
ATOM      1  N   ASN A   1       1.728  -3.986  -1.323  1.00 51.14           N
ATOM      2  CA  ASN A   1       2.250  -2.656  -1.616  1.00 71.03           C
ATOM      3  C   ASN A   1       1.152  -1.749  -2.162  1.00 53.34           C
ATOM      4  O   ASN A   1       0.899  -1.718  -3.367  1.00 12.41           O
ATOM      5  CB  ASN A   1       3.399  -2.747  -2.622  1.00 42.32           C
ATOM      6  CG  ASN A   1       4.579  -3.531  -2.082  1.00 65.14           C
ATOM      7  OD1 ASN A   1       5.209  -3.132  -1.102  1.00 55.44           O
ATOM      8  ND2 ASN A   1       4.886  -4.654  -2.722  1.00 35.14           N
ATOM      9  H1  ASN A   1       1.721  -4.663  -2.032  1.00 31.13           H
ATOM     10  HA  ASN A   1       2.623  -2.236  -0.694  1.00 54.13           H
ATOM     11  HB2 ASN A   1       3.047  -3.236  -3.519  1.00 11.31           H
ATOM     12  HB3 ASN A   1       3.734  -1.750  -2.868  1.00 63.43           H
ATOM     13 HD21 ASN A   1       4.340  -4.910  -3.495  1.00 24.31           H
ATOM     14 HD22 ASN A   1       5.644  -5.181  -2.393  1.00 73.24           H
ATOM     15  N   VAL A   2       0.502  -1.010  -1.268  1.00 21.51           N
ATOM     16  CA  VAL A   2      -0.568  -0.101  -1.660  1.00  1.25           C
ATOM     17  C   VAL A   2      -1.748  -0.863  -2.251  1.00 51.04           C
ATOM     18  O   VAL A   2      -2.193  -0.573  -3.362  1.00 73.21           O
ATOM     19  CB  VAL A   2      -0.075   0.937  -2.685  1.00 42.21           C
ATOM     20  CG1 VAL A   2      -1.101   2.047  -2.857  1.00 63.03           C
ATOM     21  CG2 VAL A   2       1.272   1.505  -2.262  1.00 55.34           C
ATOM     22  H   VAL A   2       0.749  -1.079  -0.322  1.00 40.21           H
ATOM     23  HA  VAL A   2      -0.898   0.426  -0.776  1.00 74.01           H
ATOM     24  HB  VAL A   2       0.050   0.442  -3.637  1.00 31.22           H
ATOM     25 HG11 VAL A   2      -0.656   2.993  -2.587  1.00  5.23           H
ATOM     26 HG12 VAL A   2      -1.425   2.081  -3.887  1.00 42.51           H
ATOM     27 HG13 VAL A   2      -1.950   1.854  -2.218  1.00 60.04           H
ATOM     28 HG21 VAL A   2       2.045   0.776  -2.452  1.00 73.22           H
ATOM     29 HG22 VAL A   2       1.477   2.403  -2.827  1.00 45.03           H
ATOM     30 HG23 VAL A   2       1.249   1.741  -1.209  1.00 33.20           H
ATOM     31  N   ASP A   3      -2.251  -1.838  -1.502  1.00 61.14           N
ATOM     32  CA  ASP A   3      -3.382  -2.642  -1.952  1.00 25.01           C
ATOM     33  C   ASP A   3      -3.129  -3.202  -3.348  1.00 61.32           C
ATOM     34  O   ASP A   3      -3.762  -2.788  -4.319  1.00 13.41           O
ATOM     35  CB  ASP A   3      -4.662  -1.806  -1.948  1.00 74.23           C
ATOM     36  CG  ASP A   3      -5.117  -1.450  -0.547  1.00 13.13           C
ATOM     37  OD1 ASP A   3      -4.608  -2.061   0.416  1.00 22.02           O
ATOM     38  OD2 ASP A   3      -5.982  -0.559  -0.412  1.00 71.45           O
ATOM     39  H   ASP A   3      -1.852  -2.021  -0.626  1.00 35.24           H
ATOM     40  HA  ASP A   3      -3.498  -3.465  -1.263  1.00 62.12           H
ATOM     41  HB2 ASP A   3      -4.488  -0.890  -2.494  1.00 34.02           H
ATOM     42  HB3 ASP A   3      -5.450  -2.365  -2.432  1.00 51.44           H
TER      43      ASP A   3
ENDMDL
MODEL        3
ATOM      1  N   ASN A   1       0.315  -4.452  -3.331  1.00 42.01           N
ATOM      2  CA  ASN A   1       0.480  -3.854  -2.011  1.00 52.12           C
ATOM      3  C   ASN A   1       0.359  -2.335  -2.083  1.00 54.35           C
ATOM      4  O   ASN A   1       0.991  -1.690  -2.920  1.00 11.31           O
ATOM      5  CB  ASN A   1       1.836  -4.241  -1.419  1.00  2.14           C
ATOM      6  CG  ASN A   1       1.801  -4.332   0.095  1.00 41.02           C
ATOM      7  OD1 ASN A   1       1.394  -3.390   0.775  1.00 22.22           O
ATOM      8  ND2 ASN A   1       2.229  -5.470   0.629  1.00 42.11           N
ATOM      9  H1  ASN A   1       1.058  -4.413  -3.969  1.00 51.24           H
ATOM     10  HA  ASN A   1      -0.304  -4.236  -1.374  1.00 64.13           H
ATOM     11  HB2 ASN A   1       2.132  -5.203  -1.811  1.00 23.01           H
ATOM     12  HB3 ASN A   1       2.570  -3.501  -1.700  1.00  1.32           H
ATOM     13 HD21 ASN A   1       2.539  -6.177   0.025  1.00 24.23           H
ATOM     14 HD22 ASN A   1       2.217  -5.556   1.605  1.00 72.10           H
ATOM     15  N   VAL A   2      -0.458  -1.769  -1.200  1.00 71.03           N
ATOM     16  CA  VAL A   2      -0.661  -0.326  -1.162  1.00 54.31           C
ATOM     17  C   VAL A   2      -1.033   0.213  -2.539  1.00 12.52           C
ATOM     18  O   VAL A   2      -0.225   0.866  -3.200  1.00 73.12           O
ATOM     19  CB  VAL A   2       0.598   0.405  -0.659  1.00 53.34           C
ATOM     20  CG1 VAL A   2       0.336   1.899  -0.539  1.00 60.15           C
ATOM     21  CG2 VAL A   2       1.053  -0.173   0.672  1.00 63.12           C
ATOM     22  H   VAL A   2      -0.935  -2.336  -0.559  1.00  4.15           H
ATOM     23  HA  VAL A   2      -1.470  -0.120  -0.475  1.00 63.43           H
ATOM     24  HB  VAL A   2       1.387   0.258  -1.381  1.00 64.43           H
ATOM     25 HG11 VAL A   2       1.120   2.443  -1.046  1.00 11.14           H
ATOM     26 HG12 VAL A   2      -0.617   2.135  -0.990  1.00  1.10           H
ATOM     27 HG13 VAL A   2       0.321   2.179   0.504  1.00 74.33           H
ATOM     28 HG21 VAL A   2       0.189  -0.445   1.260  1.00 64.44           H
ATOM     29 HG22 VAL A   2       1.659  -1.050   0.495  1.00 23.13           H
ATOM     30 HG23 VAL A   2       1.635   0.564   1.205  1.00 14.11           H
ATOM     31  N   ASP A   3      -2.261  -0.063  -2.964  1.00 42.14           N
ATOM     32  CA  ASP A   3      -2.741   0.396  -4.263  1.00 34.24           C
ATOM     33  C   ASP A   3      -4.199   0.839  -4.177  1.00  5.10           C
ATOM     34  O   ASP A   3      -4.996   0.250  -3.447  1.00  4.24           O
ATOM     35  CB  ASP A   3      -2.593  -0.713  -5.306  1.00 10.31           C
ATOM     36  CG  ASP A   3      -1.146  -0.959  -5.687  1.00 75.20           C
ATOM     37  OD1 ASP A   3      -0.715  -2.131  -5.652  1.00 42.22           O
ATOM     38  OD2 ASP A   3      -0.446   0.019  -6.021  1.00 14.21           O
ATOM     39  H   ASP A   3      -2.859  -0.588  -2.391  1.00 44.52           H
ATOM     40  HA  ASP A   3      -2.138   1.240  -4.560  1.00 13.30           H
ATOM     41  HB2 ASP A   3      -3.002  -1.630  -4.908  1.00 31.01           H
ATOM     42  HB3 ASP A   3      -3.139  -0.436  -6.196  1.00 11.03           H
TER      43      ASP A   3
ENDMDL
END
"""

if (__name__ == "__main__"):
  t0 = time.time()
  exercise()
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_ramalyze_rare.py
from __future__ import absolute_import, division, print_function
from mmtbx.validation import ramalyze
from iotbx.data_manager import DataManager
import time

# ------------------------------------------------------------------------------
# Testing for edge cases in Ramalyze
#  Put more edge cases here if convenient
# ------------------------------------------------------------------------------

#Twisted prolines (omega >30 degrees from planar) should be evaluated as cisPro or TransPro
#  depending on whether omega is closer to cis or trans
#Abundant twisted Pro are likely to be encountered in low-pLDDT AF2 predictions
pdb_str_1 = """
ATOM     88  N   LEU A  13     -24.165 -36.507 -21.753  1.00 55.67           N
ATOM     89  CA  LEU A  13     -24.423 -36.560 -23.221  1.00 55.67           C
ATOM     90  C   LEU A  13     -23.595 -35.472 -23.965  1.00 55.67           C
ATOM     91  CB  LEU A  13     -25.921 -36.323 -23.558  1.00 55.67           C
ATOM     92  O   LEU A  13     -23.431 -34.383 -23.423  1.00 55.67           O
ATOM     93  CG  LEU A  13     -26.799 -37.590 -23.681  1.00 55.67           C
ATOM     94  CD1 LEU A  13     -28.274 -37.188 -23.721  1.00 55.67           C
ATOM     95  CD2 LEU A  13     -26.491 -38.387 -24.949  1.00 55.67           C
ATOM     96  N   PRO A  14     -23.223 -35.648 -25.252  1.00 50.20           N
ATOM     97  CA  PRO A  14     -22.490 -36.757 -25.871  1.00 50.20           C
ATOM     98  C   PRO A  14     -21.129 -36.303 -26.478  1.00 50.20           C
ATOM     99  CB  PRO A  14     -23.437 -37.243 -26.971  1.00 50.20           C
ATOM    100  O   PRO A  14     -20.833 -35.114 -26.574  1.00 50.20           O
ATOM    101  CG  PRO A  14     -24.150 -35.964 -27.431  1.00 50.20           C
ATOM    102  CD  PRO A  14     -23.914 -34.937 -26.316  1.00 50.20           C
ATOM    103  N   GLY A  15     -20.286 -37.252 -26.906  1.00 53.60           N
ATOM    104  CA  GLY A  15     -18.938 -36.976 -27.444  1.00 53.60           C
ATOM    105  C   GLY A  15     -18.873 -36.479 -28.909  1.00 53.60           C
ATOM    106  O   GLY A  15     -19.866 -36.559 -29.634  1.00 53.60           O
ATOM    516  N   SER A  72      24.352  38.834 -48.364  1.00 40.52           N
ATOM    517  CA  SER A  72      25.319  39.477 -47.445  1.00 40.52           C
ATOM    518  C   SER A  72      26.747  39.550 -48.012  1.00 40.52           C
ATOM    519  CB  SER A  72      25.429  38.689 -46.125  1.00 40.52           C
ATOM    520  O   SER A  72      27.107  38.729 -48.855  1.00 40.52           O
ATOM    521  OG  SER A  72      24.180  38.209 -45.657  1.00 40.52           O
ATOM    522  N   PRO A  73      27.603  40.420 -47.444  1.00 48.63           N
ATOM    523  CA  PRO A  73      29.011  40.085 -47.181  1.00 48.63           C
ATOM    524  C   PRO A  73      29.415  40.292 -45.700  1.00 48.63           C
ATOM    525  CB  PRO A  73      29.835  40.954 -48.142  1.00 48.63           C
ATOM    526  O   PRO A  73      28.603  40.711 -44.878  1.00 48.63           O
ATOM    527  CG  PRO A  73      28.848  41.982 -48.704  1.00 48.63           C
ATOM    528  CD  PRO A  73      27.586  41.810 -47.858  1.00 48.63           C
ATOM    529  N   GLY A  74      30.658  39.927 -45.353  1.00 40.95           N
ATOM    530  CA  GLY A  74      31.201  39.925 -43.981  1.00 40.95           C
ATOM    531  C   GLY A  74      32.034  41.164 -43.582  1.00 40.95           C
ATOM    532  O   GLY A  74      32.067  42.142 -44.325  1.00 40.95           O
"""

def exercise_ramalyze():
  dm = DataManager()
  #print(help(dm))
  dm.process_model_str("1",pdb_str_1)
  model = dm.get_model("1")
  hierarchy = model.get_hierarchy()
  r = ramalyze.ramalyze(hierarchy)
  pro14 = r.results[0]
  pro73 = r.results[1]
  assert(pro14.residue_type() == "cis-Pro") #omega= -54.24
  assert(pro73.residue_type() == "trans-Pro") #omega= 138.82

if (__name__ == "__main__"):
  t0 = time.time()
  exercise_ramalyze()
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_restraints.py

from __future__ import absolute_import, division, print_function
from libtbx.utils import null_out
from libtbx import easy_pickle
from six.moves import cStringIO as StringIO

def run_validation(pdb_file, ignore_hd=True):
  from mmtbx.validation import restraints
  import mmtbx.command_line
  cmdline = mmtbx.command_line.load_model_and_data(
    args=[pdb_file],
    master_phil=mmtbx.command_line.generic_simple_input_phil(),
    process_pdb_file=True,
    require_data=False,
    out=null_out())
  validation = restraints.combined(
    pdb_hierarchy=cmdline.pdb_hierarchy,
    xray_structure=cmdline.xray_structure,
    geometry_restraints_manager=cmdline.geometry,
    reverse_sort=True,
    ignore_hd=ignore_hd)
  return validation

def exercise_simple():
  # extracted from 1lyz, with hydrogens from reduce
  pdb_in = """
ATOM      1  N   LYS A   1       3.296   9.888  10.739  1.00  7.00           N
ATOM      2  CA  LYS A   1       2.439  10.217   9.791  1.00  6.00           C
ATOM      3  C   LYS A   1       2.439  11.997   9.160  1.00  6.00           C
ATOM      4  O   LYS A   1       2.637  12.656  10.107  1.00  8.00           O
ATOM      5  CB  LYS A   1       0.659  10.086   8.844  1.00  6.00           C
ATOM      6  CG  LYS A   1       0.198  10.415   8.086  1.00  6.00           C
ATOM      7  CD  LYS A   1      -1.187  10.086   8.212  1.00  6.00           C
ATOM      8  CE  LYS A   1      -2.175  10.086   7.264  1.00  6.00           C
ATOM      9  NZ  LYS A   1      -3.527   9.869   7.288  1.00  7.00           N
ATOM      0  H1  LYS A   1       3.156   9.045  10.986  1.00  7.00           H
ATOM      0  H2  LYS A   1       4.127   9.972  10.431  1.00  7.00           H
ATOM      0  H3  LYS A   1       3.184  10.425  11.440  1.00  7.00           H
ATOM      0  HA  LYS A   1       2.772   9.314   9.912  1.00  6.00           H
ATOM      0  HB2 LYS A   1       0.584   9.128   8.712  1.00  6.00           H
ATOM      0  HB3 LYS A   1       0.046  10.323   9.557  1.00  6.00           H
ATOM      0  HG2 LYS A   1       0.310  11.376   8.015  1.00  6.00           H
ATOM      0  HG3 LYS A   1       0.563  10.027   7.276  1.00  6.00           H
ATOM      0  HD2 LYS A   1      -1.193   9.186   8.573  1.00  6.00           H
ATOM      0  HD3 LYS A   1      -1.516  10.674   8.910  1.00  6.00           H
ATOM      0  HE2 LYS A   1      -2.097  10.964   6.860  1.00  6.00           H
ATOM      0  HE3 LYS A   1      -1.857   9.444   6.610  1.00  6.00           H
ATOM      0  HZ1 LYS A   1      -3.725   9.170   6.774  1.00  7.00           H
ATOM      0  HZ2 LYS A   1      -3.787   9.706   8.123  1.00  7.00           H
ATOM      0  HZ3 LYS A   1      -3.949  10.590   6.982  1.00  7.00           H
ATOM     10  N   VAL A   2       2.637  12.722   7.707  1.00  7.00           N
ATOM     11  CA  VAL A   2       2.307  14.172   7.580  1.00  6.00           C
ATOM     12  C   VAL A   2       0.857  14.041   6.949  1.00  6.00           C
ATOM     13  O   VAL A   2       0.659  13.843   5.875  1.00  8.00           O
ATOM     14  CB  VAL A   2       3.625  14.172   6.759  1.00  6.00           C
ATOM     15  CG1 VAL A   2       3.494  15.491   6.317  1.00  6.00           C
ATOM     16  CG2 VAL A   2       4.746  13.843   7.580  1.00  6.00           C
ATOM      0  H   VAL A   2       2.920  12.338   6.992  1.00  7.00           H
ATOM      0  HA  VAL A   2       2.195  14.925   8.181  1.00  6.00           H
ATOM      0  HB  VAL A   2       3.767  13.528   6.048  1.00  6.00           H
ATOM      0 HG11 VAL A   2       4.250  15.721   5.755  1.00  6.00           H
ATOM      0 HG12 VAL A   2       2.674  15.582   5.808  1.00  6.00           H
ATOM      0 HG13 VAL A   2       3.467  16.087   7.081  1.00  6.00           H
ATOM      0 HG21 VAL A   2       5.554  13.850   7.043  1.00  6.00           H
ATOM      0 HG22 VAL A   2       4.827  14.495   8.294  1.00  6.00           H
ATOM      0 HG23 VAL A   2       4.620  12.960   7.962  1.00  6.00           H
END
"""
  pdb_file = "tst_validate_restraints_simple.pdb"
  with open(pdb_file, "w") as f:
    f.write(pdb_in)
  v1 = run_validation(pdb_file, ignore_hd=True)
  out1 = StringIO()
  v1.show(out=out1)
  assert ("""
                       ----------Chiral volumes----------

atoms                   ideal    model    delta   sigma  residual   deviation
 A   1  LYS  CA
 A   1  LYS  N
 A   1  LYS  C
 A   1  LYS  CB          2.57     1.12     1.45  2.00e-01  5.25e+01   7.2*sigma
""" in "\n".join([ l.rstrip() for l in out1.getvalue().splitlines() ]))
  s = easy_pickle.dumps(v1)
  v1p = easy_pickle.loads(s)
  out1p = StringIO()
  v1p.show(out=out1p)
  assert (out1.getvalue() == out1p.getvalue())
  v2 = run_validation(pdb_file, ignore_hd=False)
  out2 = StringIO()
  v2.show(out=out2)
  assert (out2.getvalue() != out1.getvalue())
  assert ("""\
 A   1  LYS  N
 A   1  LYS  CA
 A   1  LYS  HA        110.00    57.00    53.00  3.00e+00  3.12e+02  17.7*sigma
""" in "\n".join([ l.rstrip() for l in out2.getvalue().splitlines() ]))
  #
  # C-alpha-only model (from 3b5d)
  pdb_raw = """\
CRYST1  115.100   43.700   76.400  90.00 108.10  90.00 C 1 2 1       8
ATOM      1  CA  TYR A   6      -7.551 -11.355 -17.946  1.00148.04           C
ATOM      2  CA  LEU A   7      -8.052  -8.804 -20.730  1.00310.75           C
ATOM      3  CA  GLY A   8     -10.874  -6.691 -19.353  1.00158.95           C
ATOM      4  CA  GLY A   9      -9.359  -7.332 -15.966  1.00217.68           C
ATOM      5  CA  ALA A  10      -5.806  -6.508 -16.946  1.00239.12           C
ATOM      6  CA  ILE A  11      -7.024  -3.514 -18.905  1.00103.16           C
ATOM      7  CA  LEU A  12     -10.023  -2.071 -17.056  1.00230.80           C
ATOM      8  CA  ALA A  13      -7.313  -1.820 -14.420  1.00141.04           C
"""
  pdb_file = "tst_validate_restraints_calpha.pdb"
  with open(pdb_file, "w") as f:
    f.write(pdb_raw)
  v1 = run_validation(pdb_file, ignore_hd=True)

if (__name__ == "__main__"):
  exercise_simple()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_rna_validate.py

from __future__ import absolute_import, division, print_function
import mmtbx.validation.rna_validate
import iotbx.pdb
from mmtbx.validation.rna_validate import rna_validation
from libtbx.easy_pickle import loads, dumps
from libtbx.test_utils import approx_equal
import libtbx.load_env
from six.moves import cStringIO as StringIO
from iotbx.data_manager import DataManager
from libtbx.test_utils import convert_string_to_cif_long
import sys, os
import json
import time
from mmtbx.validation import test_utils


# This actually tests expected output - the remaining tests guard against
# fixed bugs.
def exercise_1(test_mmcif=False):
  # derived from 2goz
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/pdb2goz_refmac_tls.ent",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise: input pdb (pdb2goz_refmac_tls.ent) not available")
    return
  dm = DataManager()
  if test_mmcif:
    with open(regression_pdb) as f:
      pdb_2goz_str = f.read()
    pdb_2goz_str = convert_string_to_cif_long(pdb_2goz_str, chain_addition="LONGCHAIN", hetatm_name_addition = "")
    dm.process_model_str("1", pdb_2goz_str)
    m = dm.get_model("1")
  else:
    m = dm.get_model(regression_pdb)
  rv = rna_validation(m.get_hierarchy())
  assert len(rv.puckers.results) == 2, len(rv.puckers.results)
  assert len(rv.bonds.results) == 4, len(rv.bonds.results)
  assert len(rv.angles.results) == 14, len(rv.angles.results)
  assert len(rv.suites.results) == 5, len(rv.suites.results)
  #assert approx_equal(rv.suites.average_suiteness(), 0.55, eps=0.01)
  pickle_unpickle(rv)
  pdb_in = iotbx.pdb.input(regression_pdb)
  result = mmtbx.validation.rna_validate.rna_validation(
    pdb_hierarchy=pdb_in.construct_hierarchy(),
    geometry_restraints_manager=None,
    params=None)
  pickle_unpickle(result)
  bonds_json = json.loads(rv.bonds.as_JSON())
  angles_json = json.loads(rv.angles.as_JSON())
  puckers_json = json.loads(rv.puckers.as_JSON())
  suites_json = json.loads(rv.suites.as_JSON())
  #import pprint
  #pprint.pprint(puckers_json)
  assert len(bonds_json["flat_results"]) == 4, "tst_rna_validate json output not returning correct number of bond outliers, changed to: "+str(len(bonds_json["flat_results"]))
  assert approx_equal(bonds_json['flat_results'][0]["score"], 4.40664), "tst_rna_validate json output first bond outlier score changed to: "+str(bonds_json['flat_results'][0]["score"])
  assert approx_equal(bonds_json['flat_results'][0]["xyz"][0], -17.61949), "tst_rna_validate json output first bond x changed to: "+str(bonds_json['flat_results'][0]["xyz"][0])
  assert approx_equal(bonds_json['flat_results'][0]["xyz"][1], -2.9325), "tst_rna_validate json output first bond y changed to: "+str(bonds_json['flat_results'][0]["xyz"][1])
  assert approx_equal(bonds_json['flat_results'][0]["xyz"][2], -23.262), "tst_rna_validate json output first bond z changed to: "+str(bonds_json['flat_results'][0]["xyz"][2])
  assert test_utils.count_dict_values(bonds_json['hierarchical_results'], True)==4, "tst_rna_validate json hierarchical output total number of bond outliers changed to: "+str(test_utils.count_dict_values(bonds_json['hierarchical_results'], True))
  assert bonds_json['summary_results']['']["num_outliers_too_large"]==4, "tst_rna_validate json output summary result number of bond outliers too large changed to: "+str(bonds_json['summary_results']['']["num_outliers_too_large"])
  assert len(angles_json["flat_results"]) == 14, "tst_rna_validate json output not returning correct number of angle outliers, changed to: " + str(len(angles_json["flat_results"]))
  assert approx_equal(angles_json['flat_results'][0]["score"], -4.765809), "tst_rna_validate json output first angle outlier score changed to: " + str(angles_json['flat_results'][0]["score"])
  assert approx_equal(angles_json['flat_results'][0]["xyz"][0], -16.161), "tst_rna_validate json output first angle x score changed to: " + str(angles_json['flat_results'][0]["xyz"][0])
  assert approx_equal(angles_json['flat_results'][0]["xyz"][1], -6.863), "tst_rna_validate json output first angle y score changed to: " + str(angles_json['flat_results'][0]["xyz"][1])
  assert approx_equal(angles_json['flat_results'][0]["xyz"][2], -20.773), "tst_rna_validate json output first angle z score changed to: " + str(angles_json['flat_results'][0]["xyz"][2])
  assert test_utils.count_dict_values(angles_json['hierarchical_results'], [1.0, 1.0, 1.0])==14, "tst_rna_validate json hierarchical output number of angle outliers changed to: "+str(test_utils.count_dict_values(angles_json['hierarchical_results'], [1.0, 1.0, 1.0]))
  assert angles_json['summary_results']['']["num_outliers_too_large"]==6, "tst_rna_validate json output summary result number of angle outliers too large changed to: "+str(angles_json['summary_results']['']["num_outliers_too_large"])
  assert len(puckers_json["flat_results"]) == 2, "tst_rna_validate json output not returning correct number of pucker outliers, changed to: " + str(len(puckers_json["flat_results"]))
  assert approx_equal(puckers_json['flat_results'][0]["delta_angle"], 106.454213), "tst_rna_validate json output first pucker outlier delta changed to: " + str(puckers_json['flat_results'][0]["delta_angle"])
  assert test_utils.count_dict_values(puckers_json['hierarchical_results'], " ")==2, "tst_rna_validate json hierarchical output number of pucker outliers changed to: "+str(test_utils.count_dict_values(puckers_json['hierarchical_results'], " "))
  assert puckers_json['summary_results']['']["num_outliers"]==2, "tst_rna_validate json output summary result number of pucker outliers changed to: "+str(puckers_json['summary_results']['']["num_outliers"])
  assert len(suites_json["flat_results"]) == 5, "tst_rna_validate json output not returning correct number of suite outliers, changed to: " + str(len(suites_json["flat_results"]))
  assert suites_json['flat_results'][0]["suiteness"]==0, "tst_rna_validate json output first suite outlier suiteness changed to: " + str(suites_json['flat_results'][0]["suiteness"])
  assert test_utils.count_dict_values(suites_json['hierarchical_results'], "!!")==5, "tst_rna_validate json hierarchical output number of suite outliers changed to: "+str(test_utils.count_dict_values(suites_json['hierarchical_results'], "!!"))
  #assert suites_json['summary_results']['']["num_outliers"]==2, "tst_rna_validate json output summary result number of pucker outliers changed to: "+str(puckers_json['summary_results']['']["num_outliers"])
  return rv

def exercise_pdbvcif(rv, rv_cif):
  bonds_json = json.loads(rv.bonds.as_JSON())
  angles_json = json.loads(rv.angles.as_JSON())
  puckers_json = json.loads(rv.puckers.as_JSON())
  suites_json = json.loads(rv.suites.as_JSON())
  bonds_json_cif = json.loads(rv_cif.bonds.as_JSON())
  angles_json_cif = json.loads(rv_cif.angles.as_JSON())
  puckers_json_cif = json.loads(rv_cif.puckers.as_JSON())
  suites_json_cif = json.loads(rv_cif.suites.as_JSON())
  assert bonds_json['summary_results'] == bonds_json_cif['summary_results'], "tst_rna_validate summary results changed between pdb and cif version"
  assert angles_json['summary_results'] == angles_json_cif['summary_results'], "tst_rna_validate summary results changed between pdb and cif version"
  assert puckers_json['summary_results'] == puckers_json_cif['summary_results'], "tst_rna_validate summary results changed between pdb and cif version"
  assert suites_json['summary_results'] == suites_json_cif['summary_results'], "tst_rna_validate summary results changed between pdb and cif version"

def exercise_2():
  # fragment from 3g8t
  pdb_raw = """\
ATOM   7975  P     G Q 140      10.347 137.422  73.792  1.00118.69           P
ATOM   7976  OP1   G Q 140       9.348 138.439  74.195  1.00118.63           O
ATOM   7977  OP2   G Q 140      11.208 137.681  72.617  1.00118.60           O
ATOM   7978  O5'   G Q 140      11.286 137.083  75.051  1.00119.34           O
ATOM   7979  C5'   G Q 140      11.015 137.599  76.358  1.00120.43           C
ATOM   7980  C4'   G Q 140      11.617 136.733  77.454  1.00121.27           C
ATOM   7981  O4'   G Q 140      11.723 135.361  77.003  1.00121.51           O
ATOM   7982  C3'   G Q 140      13.038 137.080  77.885  1.00121.72           C
ATOM   7983  O3'   G Q 140      13.050 138.143  78.836  1.00122.07           O
ATOM   7984  C2'   G Q 140      13.517 135.770  78.511  1.00121.87           C
ATOM   7985  O2'   G Q 140      13.160 135.640  79.877  1.00121.91           O
ATOM   7986  C1'   G Q 140      12.793 134.717  77.671  1.00121.84           C
ATOM   7987  N9    G Q 140      13.651 134.055  76.684  1.00121.95           N
ATOM   7988  C8    G Q 140      14.226 134.620  75.568  1.00121.96           C
ATOM   7989  N7    G Q 140      14.944 133.787  74.870  1.00121.97           N
ATOM   7990  C5    G Q 140      14.843 132.588  75.563  1.00121.99           C
ATOM   7991  C6    G Q 140      15.412 131.320  75.281  1.00122.03           C
ATOM   7992  O6    G Q 140      16.142 131.004  74.331  1.00121.99           O
ATOM   7993  N1    G Q 140      15.064 130.361  76.235  1.00122.12           N
ATOM   7994  C2    G Q 140      14.264 130.602  77.331  1.00122.14           C
ATOM   7995  N2    G Q 140      14.033 129.557  78.139  1.00122.06           N
ATOM   7996  N3    G Q 140      13.721 131.787  77.604  1.00122.09           N
ATOM   7997  C4    G Q 140      14.050 132.734  76.684  1.00122.00           C
ATOM   7998  P     A Q 141      14.015 139.407  78.645  1.00122.32           P
ATOM   7999  OP1   A Q 141      13.141 140.571  78.383  1.00122.35           O
ATOM   8000  OP2   A Q 141      15.073 139.069  77.665  1.00122.37           O
ATOM   8001  O5'   A Q 141      14.690 139.587  80.088  1.00122.53           O
ATOM   8002  C5'   A Q 141      15.914 138.934  80.438  1.00122.90           C
ATOM   8003  C4'   A Q 141      15.673 137.727  81.331  1.00123.23           C
ATOM   8004  O4'   A Q 141      16.899 137.378  82.025  1.00123.39           O
ATOM   8005  C3'   A Q 141      14.605 137.909  82.412  1.00123.36           C
ATOM   8006  O3'   A Q 141      13.551 136.969  82.215  1.00123.31           O
ATOM   8007  C2'   A Q 141      15.347 137.686  83.732  1.00123.49           C
ATOM   8008  O2'   A Q 141      14.582 136.976  84.689  1.00123.46           O
ATOM   8009  C1'   A Q 141      16.551 136.857  83.291  1.00123.61           C
ATOM   8010  N9    A Q 141      17.714 136.912  84.186  1.00123.79           N
ATOM   8011  C8    A Q 141      17.797 137.531  85.406  1.00123.80           C
ATOM   8012  N7    A Q 141      18.964 137.415  85.992  1.00123.83           N
ATOM   8013  C5    A Q 141      19.706 136.662  85.099  1.00123.90           C
ATOM   8014  C6    A Q 141      21.037 136.187  85.130  1.00123.95           C
ATOM   8015  N6    A Q 141      21.875 136.421  86.146  1.00123.97           N
ATOM   8016  N1    A Q 141      21.476 135.460  84.076  1.00123.93           N
ATOM   8017  C2    A Q 141      20.634 135.225  83.057  1.00123.90           C
ATOM   8018  N3    A Q 141      19.364 135.620  82.917  1.00123.84           N
ATOM   8019  C4    A Q 141      18.953 136.340  83.979  1.00123.84           C
TER    8020        A Q 141
"""
  dm = DataManager()
  #print(help(dm))
  dm.process_model_str("", pdb_raw)
  rv = rna_validation(dm.get_model().get_hierarchy())
  assert len(rv.puckers.results) == 1
  pickle_unpickle(rv)

def exercise_3():
  # derived from 3bbi
  pdb_raw = """\
ATOM      1  O5'A  U A   1      39.826  29.792  61.182  0.50 82.88           O
ATOM      2  O5'B  U A   1      39.852  29.856  60.945  0.50 82.91           O
ATOM      3  C5'A  U A   1      40.022  30.855  62.130  0.50 80.10           C
ATOM      4  C5'B  U A   1      40.079  31.072  61.650  0.50 79.19           C
ATOM      5  C4'A  U A   1      38.772  31.691  62.255  0.50 78.82           C
ATOM      6  C4'B  U A   1      38.796  31.774  62.020  0.50 77.88           C
ATOM      7  O4'A  U A   1      38.856  32.884  61.429  0.50 80.02           O
ATOM      8  O4'B  U A   1      38.669  32.983  61.220  0.50 79.40           O
ATOM      9  C3'A  U A   1      37.538  30.959  61.777  0.50 78.46           C
ATOM     10  C3'B  U A   1      37.499  31.010  61.758  0.50 77.50           C
ATOM     11  O3'A  U A   1      37.037  30.176  62.849  0.50 75.37           O
ATOM     12  O3'B  U A   1      37.158  30.120  62.826  0.50 74.93           O
ATOM     13  C2'A  U A   1      36.641  32.101  61.304  0.50 79.86           C
ATOM     14  C2'B  U A   1      36.483  32.143  61.671  0.50 78.29           C
ATOM     15  O2'A  U A   1      35.961  32.782  62.341  0.50 81.49           O
ATOM     16  O2'B  U A   1      36.053  32.616  62.932  0.50 80.66           O
ATOM     17  C1'A  U A   1      37.673  33.025  60.649  0.50 79.69           C
ATOM     18  C1'B  U A   1      37.299  33.233  60.979  0.50 77.90           C
ATOM     19  N1 A  U A   1      38.048  32.567  59.307  0.50 77.53           N
ATOM     20  N1 B  U A   1      37.046  33.343  59.533  0.50 75.93           N
ATOM     21  C2 A  U A   1      37.329  32.949  58.191  0.50 76.19           C
ATOM     22  C2 B  U A   1      37.795  32.584  58.638  0.50 75.96           C
ATOM     23  O2 A  U A   1      36.364  33.685  58.191  0.50 76.18           O
ATOM     24  O2 B  U A   1      38.754  31.891  58.945  0.50 77.97           O
ATOM     25  N3 A  U A   1      37.803  32.400  57.033  0.50 74.94           N
ATOM     26  N3 B  U A   1      37.376  32.694  57.351  0.50 75.08           N
ATOM     27  C4 A  U A   1      38.865  31.551  56.889  0.50 74.13           C
ATOM     28  C4 B  U A   1      36.340  33.467  56.890  0.50 74.34           C
ATOM     29  O4 A  U A   1      39.163  31.127  55.805  0.50 72.11           O
ATOM     30  O4 B  U A   1      36.162  33.540  55.698  0.50 72.95           O
ATOM     31  C5 A  U A   1      39.560  31.215  58.099  0.50 74.56           C
ATOM     32  C5 B  U A   1      35.632  34.263  57.853  0.50 72.59           C
ATOM     33  C6 A  U A   1      39.134  31.742  59.244  0.50 76.24           C
ATOM     34  C6 B  U A   1      36.006  34.156  59.108  0.50 73.72           C
ATOM     35  P     C A   2      36.230  28.821  62.547  1.00 72.47           P
ATOM     36  OP1   C A   2      35.510  28.509  63.805  1.00 72.07           O
ATOM     37  OP2   C A   2      37.093  27.782  61.920  1.00 67.52           O
ATOM     38  O5'   C A   2      35.141  29.294  61.493  1.00 61.16           O
ATOM     39  C5'   C A   2      34.065  30.126  61.886  1.00 53.00           C
ATOM     40  C4'   C A   2      33.217  30.452  60.692  1.00 54.42           C
ATOM     41  O4'   C A   2      34.058  31.113  59.709  1.00 57.20           O
ATOM     42  C3'   C A   2      32.696  29.239  59.934  1.00 54.16           C
ATOM     43  O3'   C A   2      31.508  28.706  60.508  1.00 49.29           O
ATOM     44  C2'   C A   2      32.447  29.817  58.551  1.00 50.69           C
ATOM     45  O2'   C A   2      31.256  30.569  58.491  1.00 53.09           O
ATOM     46  C1'   C A   2      33.635  30.762  58.406  1.00 51.94           C
ATOM     47  N1    C A   2      34.752  30.152  57.665  1.00 50.45           N
ATOM     48  C2    C A   2      34.662  30.120  56.283  1.00 49.86           C
ATOM     49  O2    C A   2      33.659  30.593  55.738  1.00 50.93           O
ATOM     50  N3    C A   2      35.654  29.571  55.565  1.00 47.16           N
ATOM     51  C4    C A   2      36.709  29.052  56.179  1.00 47.93           C
ATOM     52  N4    C A   2      37.659  28.519  55.412  1.00 47.02           N
ATOM     53  C5    C A   2      36.834  29.060  57.597  1.00 46.21           C
ATOM     54  C6    C A   2      35.840  29.624  58.297  1.00 47.22           C
"""
  dm = DataManager()
  #print(help(dm))
  dm.process_model_str("", pdb_raw)
  rv = rna_validation(dm.get_model().get_hierarchy())
  pickle_unpickle(rv)

def pickle_unpickle(result):
  result2 = loads(dumps(result))
  out1 = StringIO()
  out2 = StringIO()
  result.show(out=out1)
  result2.show(out=out2)
  assert (out1.getvalue() == out2.getvalue())

def run():
  t0 = time.time()
  verbose = "--verbose" in sys.argv[1:]
  rv = exercise_1()
  rv_cif = exercise_1(test_mmcif=True)
  exercise_pdbvcif(rv, rv_cif)
  exercise_2()
  exercise_3()
  print("OK. Time: %8.3f"%(time.time()-t0))

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_rotalyze.py

from __future__ import absolute_import, division, print_function
from mmtbx.rotamer.rotamer_eval import find_rotarama_data_dir
from mmtbx.validation import rotalyze
from iotbx import pdb
from libtbx.test_utils import show_diff, Exception_expected, approx_equal
from libtbx.utils import Sorry
import libtbx.load_env
from libtbx.easy_pickle import loads, dumps
from six.moves import cStringIO as StringIO
from iotbx.data_manager import DataManager
from libtbx.test_utils import convert_string_to_cif_long
import os.path
import json
from six.moves import zip

def exercise_rotalyze():
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/jcm.pdb",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_rotalyze(): input pdb (jcm.pdb) not available")
    return
  if (find_rotarama_data_dir(optional=True) is None):
    print("Skipping exercise_rotalyze(): rotarama_data directory not available")
    return
  pdb_in = pdb.input(file_name=regression_pdb)
  hierarchy = pdb_in.construct_hierarchy()
  pdb_io = pdb.input(file_name=regression_pdb)
  r = rotalyze.rotalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=True)
  out = StringIO()
  r.show_old_output(out=out, verbose=False)
  output = out.getvalue()
  assert output.count("OUTLIER") == 246, output.count("OUTLIER")
  assert output.count(":") == 984, output.count(":")
  output_lines = output.splitlines()
  assert len(output_lines) == 123
  for lines in output_lines:
    assert float(lines[12:15]) <= 1.0

  r = rotalyze.rotalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=False)
  for unpickle in [False, True] :
    if unpickle :
      r = loads(dumps(r))
    out = StringIO()
    r.show_old_output(out=out, verbose=False)
    for outlier in r.results :
      assert (len(outlier.xyz) == 3)
    output = out.getvalue()
    assert output.count("OUTLIER") == 246
    assert output.count(":") == 5144, output.count(":")
    assert output.count("p") == 120
    assert output.count("m") == 324
    assert output.count("t") == 486
    output_lines = output.splitlines()
    #for line in output_lines:
    #  print line
    #STOP()
    assert len(output_lines) == 643
    line_indices = [0,1,2,42,43,168,169,450,587,394,641,642]

#    top500 version
    line_values = [
     " A  14  MET:1.00:3.3:29.2:173.3:287.9::Favored:ptm",
     " A  15  SER:1.00:0.1:229.0::::OUTLIER:OUTLIER",
     " A  16  SER:1.00:4.2:277.9::::Favored:m",
     " A  58  ASN:1.00:2.0:252.4:343.6:::Favored:m-20",
     " A  59  ILE:1.00:2.0:84.2:186.7:::Allowed:pt",
     " A 202  GLU:1.00:0.4:272.7:65.9:287.8::OUTLIER:OUTLIER",
     " A 203  ILE:1.00:5.0:292.9:199.6:::Favored:mt",
     " B 154  THR:1.00:0.1:356.0::::OUTLIER:OUTLIER",
     " B 316  TYR:1.00:5.4:153.7:68.6:::Favored:t80",
     " B  86  ASP:1.00:2.2:321.4:145.1:::Favored:m-20",
     " B 377  GLU:1.00:45.3:311.7:166.2:160.1::Favored:mt-10",
     " B 378  THR:1.00:23.5:309.4::::Favored:m"]
#    top8000 version
    line_values = [
     " A  14  MET:1.00:1.3:29.2:173.3:287.9::Allowed:ptm",
     " A  15  SER:1.00:0.1:229.0::::OUTLIER:OUTLIER",
     " A  16  SER:1.00:3.0:277.9::::Favored:m",
     " A  58  ASN:1.00:1.0:252.4:343.6:::Allowed:m-40",
     " A  59  ILE:1.00:0.5:84.2:186.7:::Allowed:pt",
     " A 202  GLU:1.00:0.0:272.7:65.9:287.8::OUTLIER:OUTLIER",
     " A 203  ILE:1.00:1.0:292.9:199.6:::Allowed:mt",
     " B 154  THR:1.00:0.0:356.0::::OUTLIER:OUTLIER",
     " B 316  TYR:1.00:4.1:153.7:68.6:::Favored:t80",
     " B  86  ASP:1.00:0.4:321.4:145.1:::Allowed:m-30",
     " B 377  GLU:1.00:15.0:311.7:166.2:160.1::Favored:mt-10",
     " B 378  THR:1.00:17.0:309.4::::Favored:m",
    ]
    for idx, val in zip(line_indices, line_values):
      assert (output_lines[idx] == val), (idx, output_lines[idx])

  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/pdb1jxt.ent",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_ramalyze(): input pdb (pdb1jxt.ent) not available")
    return
  pdb_in = pdb.input(file_name=regression_pdb)
  hierarchy = pdb_in.construct_hierarchy()
  pdb_io = pdb.input(file_name=regression_pdb)
  r = rotalyze.rotalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=True)
  out = StringIO()
  r.show_old_output(out=out, verbose=False)
  output = out.getvalue().strip()
  assert output == ""

  r = rotalyze.rotalyze(
    pdb_hierarchy=hierarchy,
    outliers_only=False)
  for unpickle in [False, True] :
    if unpickle :
      r = loads(dumps(r))
    out = StringIO()
    r.show_old_output(out=out, verbose=False)
    output = out.getvalue()
    assert not show_diff(output,"""\
 A   1  THR:1.00:95.4:299.5::::Favored:m
 A   2 ATHR:0.67:49.5:56.1::::Favored:p
 A   2 BTHR:0.33:90.4:298.1::::Favored:m
 A   3  CYS:1.00:12.9:310.5::::Favored:m
 A   4  CYS:1.00:91.6:293.1::::Favored:m
 A   5  PRO:1.00:78.8:30.2:319.7:33.8::Favored:Cg_endo
 A   6  SER:1.00:90.1:68.4::::Favored:p
 A   7 AILE:0.45:49.6:290.8:178.2:::Favored:mt
 A   7 BILE:0.55:6.5:284.4:298.4:::Favored:mm
 A   8 AVAL:0.50:1.1:156.7::::Allowed:t
 A   8 BVAL:0.30:5.1:71.3::::Favored:p
 A   8 CVAL:0.20:69.8:172.1::::Favored:t
 A  10 AARG:0.65:24.7:176.8:66.5:63.9:180.0:Favored:tpp-160
 A  10 BARG:0.35:17.5:176.8:72.8:66.4:171.9:Favored:tpp-160
 A  11  SER:1.00:51.6:300.9::::Favored:m
 A  12 AASN:0.50:93.9:286.1:343.8:::Favored:m-40
 A  12 BASN:0.50:98.9:288.4:337.6:::Favored:m-40
 A  13 APHE:0.65:45.1:187.2:276.4:::Favored:t80
 A  13 BPHE:0.35:86.1:179.6:263.1:::Favored:t80
 A  14  ASN:1.00:95.2:289.6:333.0:::Favored:m-40
 A  15  VAL:1.00:42.3:168.2::::Favored:t
 A  16  CYS:1.00:40.8:176.5::::Favored:t
 A  17  ARG:1.00:21.4:289.7:282.8:288.6:158.7:Favored:mmm160
 A  18  LEU:1.00:65.0:287.2:173.3:::Favored:mt
 A  19  PRO:1.00:43.6:24.4:324.8:31.6::Favored:Cg_endo
 A  21  THR:1.00:5.7:314.0::::Favored:m
 A  22 APRO:0.55:87.5:333.5:34.0:333.8::Favored:Cg_exo
 A  23 AGLU:0.50:86.9:290.9:187.1:341.8::Favored:mt-10
 A  23 BGLU:0.50:91.7:292.0:183.8:339.2::Favored:mt-10
 A  25 ALEU:0.50:95.7:294.4:173.6:::Favored:mt
 A  26  CYS:1.00:83.0:295.0::::Favored:m
 A  28  THR:1.00:29.6:52.9::::Favored:p
 A  29 ATYR:0.65:18.5:161.8:67.8:::Favored:t80
 A  29 BTYR:0.35:0.4:191.3:322.7:::Allowed:t80
 A  30 ATHR:0.70:60.8:57.4::::Favored:p
 A  30 BTHR:0.30:6.6:78.1::::Favored:p
 A  32  CYS:1.00:61.4:301.7::::Favored:m
 A  33  ILE:1.00:36.6:66.5:173.4:::Favored:pt
 A  34 AILE:0.70:60.9:303.6:167.6:::Favored:mt
 A  34 BILE:0.30:31.4:308.5:296.8:::Favored:mm
 A  35  ILE:1.00:45.6:62.4:170.0:::Favored:pt
 A  36  PRO:1.00:36.2:22.5:330.5:24.8::Favored:Cg_endo
 A  39 ATHR:0.70:14.0:311.0::::Favored:m
 A  39 BTHR:0.30:13.1:288.8::::Favored:m
 A  40  CYS:1.00:81.4:294.4::::Favored:m
 A  41  PRO:1.00:35.4:34.4:317.5:33.1::Favored:Cg_endo
 A  43 AASP:0.75:24.8:56.5:340.3:::Favored:p0
 A  43 BASP:0.25:43.2:59.6:349.3:::Favored:p0
 A  44  TYR:1.00:85.3:290.9:85.1:::Favored:m-80
 A  46  ASN:1.00:38.7:301.6:117.9:::Favored:m110
""")

def exercise_2():
  pdb_str = """\
ATOM   2527  N   LEU A 261     -31.022 -24.808 107.479  1.00 28.22           N
ATOM   2528  CA  LEU A 261     -30.054 -23.719 107.237  1.00 21.77           C
ATOM   2529  C   LEU A 261     -30.582 -22.773 106.168  1.00 27.64           C
ATOM   2530  O   LEU A 261     -29.841 -21.977 105.561  1.00 26.70           O
ATOM   2531  CB  LEU A 261     -28.696 -24.276 106.874  1.00 22.58           C
ATOM   2532  CG  LEU A 261     -28.135 -25.066 108.060  1.00 40.89           C
ATOM   2533  CD1 LEU A 261     -26.892 -25.858 107.664  1.00 46.72           C
ATOM   2534  CD2 LEU A 261     -27.806 -24.109 109.202  1.00 38.88           C
ATOM   2535  H   LEU A 261     -31.201 -25.277 106.781  1.00 33.87           H
ATOM   2536  HA  LEU A 261     -29.950 -23.204 108.064  1.00 26.12           H
ATOM   2537  HB2 LEU A 261     -28.781 -24.874 106.115  1.00 27.10           H
ATOM   2538  HB3 LEU A 261     -28.088 -23.548 106.670  1.00 27.10           H
ATOM   2539  HG  LEU A 261     -28.806 -25.693 108.373  1.00 49.07           H
ATOM   2540 HD11 LEU A 261     -26.570 -26.338 108.430  1.00 56.07           H
ATOM   2541 HD12 LEU A 261     -27.124 -26.473 106.965  1.00 56.07           H
ATOM   2542 HD13 LEU A 261     -26.219 -25.247 107.353  1.00 56.07           H
ATOM   2543 HD21 LEU A 261     -28.608 -23.653 109.468  1.00 46.66           H
ATOM   2544 HD22 LEU A 261     -27.455 -24.612 109.941  1.00 46.66           H
ATOM   2545 HD23 LEU A 261     -27.153 -23.474 108.899  1.00 46.66           H
ATOM   2546  N   GLY A 262     -31.887 -22.863 105.948  1.00 23.68           N
ATOM   2547  CA  GLY A 262     -32.572 -21.935 105.075  1.00 21.87      85   C
ATOM   2548  C   GLY A 262     -33.718 -22.620 104.386  1.00 27.32           C
ATOM   2549  O   GLY A 262     -33.943 -23.822 104.556  1.00 23.10           O
ATOM   2550  H   GLY A 262     -32.399 -23.459 106.298  1.00 28.42           H
ATOM   2551  HA2 GLY A 262     -32.916 -21.189 105.591  1.00 26.25      85   H
ATOM   2552  HA3 GLY A 262     -31.958 -21.598 104.405  1.00 26.25      85   H
ATOM   2553  N   SER A 263     -34.460 -21.830 103.628  1.00 24.62           N
ATOM   2554  CA  SER A 263     -35.631 -22.290 102.921  1.00 27.15           C
ATOM   2555  C   SER A 263     -35.594 -21.761 101.492  1.00 22.14           C
ATOM   2556  O   SER A 263     -34.723 -20.945 101.159  1.00 21.01           O
ATOM   2557  CB  SER A 263     -36.839 -21.713 103.619  1.00 25.73           C
ATOM   2558  OG  SER A 263     -36.907 -22.232 104.922  1.00 26.84           O
ATOM   2559  H   SER A 263     -34.296 -20.995 103.507  1.00 29.54           H
ATOM   2560  HA  SER A 263     -35.680 -23.269 102.917  1.00 32.58           H
ATOM   2561  HB2 SER A 263     -36.754 -20.747 103.661  1.00 30.87           H
ATOM   2562  HB3 SER A 263     -37.641 -21.960 103.132  1.00 30.87           H
ATOM   2563  HG  SER A 263     -37.560 -21.925 105.312  1.00 32.20           H
"""

  pdb_str2 = """
ATOM    453  N   PRO A  47       8.633   6.370   5.022  1.00 13.79           N
ATOM    454  CA  PRO A  47       7.915   7.571   5.496  1.00 14.61           C
ATOM    455  C   PRO A  47       7.612   7.481   6.994  1.00 15.06           C
ATOM    456  O   PRO A  47       7.289   6.377   7.439  1.00 14.39           O
ATOM    457  CB  PRO A  47       6.639   7.559   4.651  1.00 16.24           C
ATOM    458  CG  PRO A  47       7.089   6.901   3.338  1.00 15.52           C
ATOM    459  CD  PRO A  47       7.990   5.773   3.833  1.00 14.40           C
ATOM    460  N   MSE A  48       7.754   8.528   7.779  1.00 15.13           N
ATOM    461  CA  MSE A  48       7.482   8.456   9.201  1.00 16.17           C
ATOM    462  C   MSE A  48       6.040   8.750   9.517  1.00 15.23           C
ATOM    463  O   MSE A  48       5.417   9.418   8.735  1.00 14.77           O
ATOM    464  CB  MSE A  48       8.165   9.538  10.023  1.00 19.62           C
ATOM    465  CG  MSE A  48       9.630   9.466  10.238  1.00 21.70           C
ATOM    466 SE   MSE A  48      10.022  10.161  12.050  0.70 37.95          SE
ATOM    467  CE  MSE A  48      11.268   8.720  12.235  1.00 28.72           C
ATOM    468  N   LYS A  49       5.519   8.291  10.645  1.00 13.93           N
ATOM    469  CA  LYS A  49       4.167   8.624  11.045  1.00 13.79           C
ATOM    470  C   LYS A  49       4.022  10.138  11.202  1.00 14.66           C
ATOM    471  O   LYS A  49       5.011  10.853  11.351  1.00 15.69           O
ATOM    472  CB  LYS A  49       3.797   7.915  12.349  1.00 13.33           C
ATOM    473  CG  LYS A  49       3.593   6.416  12.204  1.00 14.35           C
ATOM    474  CD  LYS A  49       2.121   6.071  12.044  1.00 16.45           C
ATOM    475  CE  LYS A  49       1.571   5.402  13.292  1.00 18.19           C
ATOM    476  NZ  LYS A  49       0.899   4.110  12.980  1.00 19.97           N
"""

  pdb_io = pdb.input(source_info=None, lines=pdb_str)
  hierarchy = pdb_io.construct_hierarchy()
  try :
    rotalyze.rotalyze(pdb_hierarchy=hierarchy)
  except Sorry as e :
    assert ("GLY A 262" in str(e))
  else :
    raise Exception_expected

  pdb_io = pdb.input(source_info=None, lines=pdb_str2)
  hierarchy = pdb_io.construct_hierarchy()
  r = rotalyze.rotalyze(pdb_hierarchy=hierarchy)
  out = StringIO()
  r.show_old_output(out=out, verbose=False)
  output = out.getvalue()
  assert output == """\
 A  47  PRO:1.00:86.4:329.3:41.3:324.9::Favored:Cg_exo
 A  48  MSE:0.70:0.3:287.6:214.8:138.3::OUTLIER:OUTLIER
 A  49  LYS:1.00:0.1:288.6:263.2:251.7:233.0:OUTLIER:OUTLIER
""", output

  r = rotalyze.rotalyze(pdb_hierarchy=hierarchy,
    data_version="8000")
  out = StringIO()
  r.show_old_output(out=out, verbose=False)
  assert (out.getvalue() == """\
 A  47  PRO:1.00:86.4:329.3:41.3:324.9::Favored:Cg_exo
 A  48  MSE:0.70:0.3:287.6:214.8:138.3::OUTLIER:OUTLIER
 A  49  LYS:1.00:0.1:288.6:263.2:251.7:233.0:OUTLIER:OUTLIER
"""), out.getvalue()

  try :
    r = rotalyze.rotalyze(pdb_hierarchy=hierarchy,
      data_version="9000")
  except ValueError :
    pass
  else :
    raise Exception_expected

  from mmtbx.rotamer.rotamer_eval import RotamerEval
  rotamer_manager = RotamerEval()
  results = []
  for model in hierarchy.models():
    for chain in model.chains():
      for residue in chain.residues():
        cur_rot = rotamer_manager.evaluate_residue(residue)
        results.append(cur_rot)
  assert results == ['Cg_exo', 'OUTLIER', 'OUTLIER']

def exercise_rotalyze_json(test_mmcif=False):
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/jcm.pdb",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise_rotalyze(): input pdb (jcm.pdb) not available")
    return
  if (find_rotarama_data_dir(optional=True) is None):
    print("Skipping exercise_rotalyze(): rotarama_data directory not available")
    return
  dm = DataManager()
  if test_mmcif:
    with open(regression_pdb) as f:
      pdb_jcm_str = f.read()
    pdb_jcm_str = convert_string_to_cif_long(pdb_jcm_str, chain_addition="LONGCHAIN")
    dm.process_model_str("1", pdb_jcm_str)
    m = dm.get_model("1")
  else:
    m = dm.get_model(regression_pdb)
  rotalyze_json = rotalyze.rotalyze(pdb_hierarchy=m.get_hierarchy(), outliers_only=True).as_JSON()
  rtjson_dict = json.loads(rotalyze_json)
  #import pprint
  #pprint.pprint(rtjson_dict)
  assert len(rtjson_dict['flat_results'])==123, "tst_rotalyze json output not returning correct number of values"
  assert approx_equal(rtjson_dict['flat_results'][0]['chi_angles'][0], 229.02299329063914), "tst_rotalyze json output first calculated chi dihedral angle not matching previous value"
  assert rtjson_dict['flat_results'][0]['rotamer_name']=='OUTLIER', "tst_rotalyze json output first rotamer_name not matching previous value"
  assert approx_equal(rtjson_dict['flat_results'][122]['chi_angles'][0], 328.0085051658891), "tst_rotalyze json output last calculated first chi dihedral angle not matching previous value"
  assert approx_equal(rtjson_dict['flat_results'][122]['chi_angles'][1], 352.23811983072466), "tst_rotalyze json output last calculated second chi dihedral angle not matching previous value"
  assert rtjson_dict['flat_results'][122]['rotamer_name']=='OUTLIER', "tst_rotalyze json output last rotamer_name not matching previous value"
  from mmtbx.validation import test_utils
  assert test_utils.count_dict_values(rtjson_dict['hierarchical_results'], "OUTLIER")==246, "tst_rotalyze json hierarchical output total number of rota outliers changed"
  assert rtjson_dict['summary_results'][""]['num_allowed'] == 116, "tst_rotalyze json output summary total num_allowed not matching previous value"
  assert rtjson_dict['summary_results'][""]['num_favored'] == 404, "tst_rotalyze json output summary total num_favored not matching previous value"
  assert rtjson_dict['summary_results'][""]['num_outliers'] == 123, "tst_rotalyze json output summary total num_outliers not matching previous value"
  assert rtjson_dict['summary_results'][""]['num_residues'] == 643, "tst_rotalyze json output summary total num_residues not matching previous value"
  return rtjson_dict

if (__name__ == "__main__"):
  exercise_rotalyze()
  exercise_2()
  rt_dict = exercise_rotalyze_json()
  rt_dict_cif = exercise_rotalyze_json(test_mmcif=True)
  assert rt_dict['summary_results'] == rt_dict_cif['summary_results'], "tst_rotalyze summary results changed between pdb and cif version"

  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/validation/regression/tst_suitename.py
from __future__ import absolute_import, division, print_function
from mmtbx.suitename import suitealyze
from iotbx.data_manager import DataManager
from libtbx.test_utils import convert_string_to_cif_long, convert_pdb_to_cif_for_pdb_str

import libtbx.load_env
import time
import json
import os

def exercise_suitename_json(test_mmcif=False):
  # derived from 2goz
  # note: chain B, residue 20 of 2goz is a DNA residue (DC). As of 2023, DNA conformations are not handled by suitename,
  #   and this residue is skipped.
  regression_pdb = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/pdb2goz_refmac_tls.ent",
    test=os.path.isfile)
  if (regression_pdb is None):
    print("Skipping exercise: input pdb (pdb2goz_refmac_tls.ent) not available")
    return
  dm = DataManager()
  if test_mmcif:
    with open(regression_pdb) as f:
      pdb_2goz_str = f.read()
    pdb_2goz_str = convert_string_to_cif_long(pdb_2goz_str, hetatm_name_addition = "", chain_addition="LONGCHAIN")
    dm.process_model_str("1", pdb_2goz_str)
    m = dm.get_model("1")
    chainA = "ALONGCHAIN"
    chainB = "BLONGCHAIN"
  else:
    m = dm.get_model(regression_pdb)
    chainA = "A"
    chainB = "B"
  sz = suitealyze.suitealyze(pdb_hierarchy=m.get_hierarchy())
  sz_dict = json.loads(sz.as_JSON())
  #import pprint
  #pprint.pprint(sz_dict)
  assert len(sz_dict['flat_results']) == 62, "tst_suitename json output not returning correct number of suites, now: "+str(len(sz_dict['flat_results']))
  assert sz_dict['flat_results'][0]["cluster"] == "__", "tst_suitename json output first cluster value changed, now: "+sz_dict['flat_results'][0]["cluster"]
  from mmtbx.validation import test_utils
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "1a")==37, "tst_suitename json hierarchical output total number of 1a changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "1a"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "1b")==5, "tst_suitename json hierarchical output total number of 1b changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "1b"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "7r")==1, "tst_suitename json hierarchical output total number of 7r changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "7r"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "!!")==5, "tst_suitename json hierarchical output total number of !! changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "!!"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "__")==2, "tst_suitename json hierarchical output total number of __ changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "__"))
  assert sz_dict['summary_results'][""]["num_outliers"] == 5, "tst_suitename json summary output total number of outliers changed"
  assert sz_dict['summary_results'][""]["num_suites"] == 62, "tst_suitename json summary output total number of suites changed"
  assert sz_dict['suitestrings'][""][chainA] == "__G1aG1aA1aU1aG1aU1aA7rC0aU1aA1aC1aC1aA1cG1bC4aU1gG1aA1[U6gG9aA1aG1aU1aC1aC1aC1aA!!A!!A2aU1bA!!G1aG1aA1aC1aG&aA1aA1aA1aC1aG1aC1cC", "model 1 chain A suitestring changed"
  assert sz_dict['suitestrings'][""][chainB] == "__G1aG1aC1aG1aU1bC!!C1aU1aG1cG1a?1aA1bU4aC1bC!!A1aA1a?1aC", "model 1 chain B suitestring changed"

multimod_2goz_pdb_str = """MODEL        1
ATOM    539  P     C A  26     -19.024  25.068  -5.945  1.00 46.81           P
ATOM    540  OP1   C A  26     -19.207  26.235  -5.055  1.00 45.04           O
ATOM    541  OP2   C A  26     -17.676  24.613  -6.369  1.00 44.77           O
ATOM    542  O5'   C A  26     -19.675  23.774  -5.260  1.00 45.98           O
ATOM    543  C5'   C A  26     -20.927  23.881  -4.629  1.00 44.99           C
ATOM    544  C4'   C A  26     -21.435  22.491  -4.330  1.00 44.44           C
ATOM    545  O4'   C A  26     -21.502  21.721  -5.562  1.00 44.23           O
ATOM    546  C3'   C A  26     -20.539  21.645  -3.436  1.00 43.30           C
ATOM    547  O3'   C A  26     -20.642  22.010  -2.045  1.00 43.60           O
ATOM    548  C2'   C A  26     -21.120  20.271  -3.754  1.00 42.13           C
ATOM    549  O2'   C A  26     -22.418  20.065  -3.239  1.00 39.90           O
ATOM    550  C1'   C A  26     -21.222  20.354  -5.267  1.00 41.42           C
ATOM    551  N1    C A  26     -19.997  19.822  -5.973  1.00 39.41           N
ATOM    552  C2    C A  26     -19.788  18.429  -6.015  1.00 39.39           C
ATOM    553  O2    C A  26     -20.593  17.642  -5.478  1.00 37.57           O
ATOM    554  N3    C A  26     -18.683  17.965  -6.652  1.00 36.84           N
ATOM    555  C4    C A  26     -17.823  18.785  -7.222  1.00 38.50           C
ATOM    556  N4    C A  26     -16.768  18.220  -7.830  1.00 39.67           N
ATOM    557  C5    C A  26     -18.010  20.208  -7.197  1.00 37.68           C
ATOM    558  C6    C A  26     -19.098  20.666  -6.567  1.00 38.34           C
ATOM    559  P     A A  27     -19.357  21.872  -1.098  1.00 45.51           P
ATOM    560  OP1   A A  27     -19.721  22.274   0.274  1.00 45.89           O
ATOM    561  OP2   A A  27     -18.210  22.527  -1.770  1.00 45.31           O
ATOM    562  O5'   A A  27     -19.069  20.294  -1.096  1.00 45.85           O
ATOM    563  C5'   A A  27     -20.076  19.401  -0.618  1.00 45.44           C
ATOM    564  C4'   A A  27     -19.669  17.972  -0.877  1.00 44.25           C
ATOM    565  O4'   A A  27     -19.522  17.744  -2.296  1.00 44.42           O
ATOM    566  C3'   A A  27     -18.303  17.615  -0.313  1.00 43.99           C
ATOM    567  O3'   A A  27     -18.508  17.353   1.048  1.00 44.86           O
ATOM    568  C2'   A A  27     -17.965  16.379  -1.157  1.00 42.87           C
ATOM    569  O2'   A A  27     -18.734  15.239  -0.850  1.00 42.69           O
ATOM    570  C1'   A A  27     -18.430  16.850  -2.521  1.00 42.15           C
ATOM    571  N9    A A  27     -17.387  17.528  -3.288  1.00 40.58           N
ATOM    572  C8    A A  27     -17.180  18.869  -3.373  1.00 40.38           C
ATOM    573  N7    A A  27     -16.163  19.191  -4.139  1.00 40.04           N
ATOM    574  C5    A A  27     -15.672  17.981  -4.572  1.00 39.49           C
ATOM    575  C6    A A  27     -14.602  17.635  -5.416  1.00 42.18           C
ATOM    576  N6    A A  27     -13.805  18.531  -5.990  1.00 41.83           N
ATOM    577  N1    A A  27     -14.374  16.326  -5.659  1.00 41.96           N
ATOM    578  C2    A A  27     -15.177  15.419  -5.080  1.00 41.06           C
ATOM    579  N3    A A  27     -16.209  15.633  -4.274  1.00 39.86           N
ATOM    580  C4    A A  27     -16.409  16.943  -4.055  1.00 39.15           C
ATOM    581  P     A A  28     -17.341  17.272   2.110  1.00 45.26           P
ATOM    582  OP1   A A  28     -17.978  17.212   3.439  1.00 48.43           O
ATOM    583  OP2   A A  28     -16.346  18.351   1.847  1.00 44.90           O
ATOM    584  O5'   A A  28     -16.694  15.843   1.817  1.00 46.52           O
ATOM    585  C5'   A A  28     -17.365  14.642   2.237  1.00 49.78           C
ATOM    586  C4'   A A  28     -16.459  13.761   3.084  1.00 51.07           C
ATOM    587  O4'   A A  28     -15.433  13.241   2.193  1.00 51.00           O
ATOM    588  C3'   A A  28     -15.746  14.526   4.211  1.00 52.58           C
ATOM    589  O3'   A A  28     -16.208  14.324   5.616  1.00 56.20           O
ATOM    590  C2'   A A  28     -14.251  14.279   3.995  1.00 51.35           C
ATOM    591  O2'   A A  28     -13.582  13.793   5.135  1.00 51.93           O
ATOM    592  C1'   A A  28     -14.184  13.259   2.857  1.00 49.66           C
ATOM    593  N9    A A  28     -13.133  13.599   1.911  1.00 48.08           N
ATOM    594  C8    A A  28     -12.647  14.842   1.637  1.00 47.72           C
ATOM    595  N7    A A  28     -11.695  14.858   0.741  1.00 47.42           N
ATOM    596  C5    A A  28     -11.535  13.530   0.409  1.00 47.59           C
ATOM    597  C6    A A  28     -10.676  12.874  -0.499  1.00 48.14           C
ATOM    598  N6    A A  28      -9.771  13.521  -1.243  1.00 47.37           N
ATOM    599  N1    A A  28     -10.770  11.527  -0.604  1.00 48.11           N
ATOM    600  C2    A A  28     -11.675  10.892   0.155  1.00 48.78           C
ATOM    601  N3    A A  28     -12.529  11.409   1.043  1.00 47.86           N
ATOM    602  C4    A A  28     -12.413  12.742   1.122  1.00 47.87           C
ATOM    603  P     A A  29     -16.571  12.975   6.417  1.00 56.21           P
ATOM    604  OP1   A A  29     -15.913  13.074   7.733  1.00 55.14           O
ATOM    605  OP2   A A  29     -16.319  11.787   5.562  1.00 58.11           O
ATOM    606  O5'   A A  29     -18.142  13.153   6.601  1.00 56.19           O
ATOM    607  C5'   A A  29     -18.988  12.025   6.745  1.00 57.91           C
ATOM    608  C4'   A A  29     -20.346  12.311   6.130  1.00 58.84           C
ATOM    609  O4'   A A  29     -20.942  13.497   6.732  1.00 57.42           O
ATOM    610  C3'   A A  29     -20.327  12.540   4.614  1.00 59.78           C
ATOM    611  O3'   A A  29     -21.378  11.750   4.001  1.00 63.25           O
ATOM    612  C2'   A A  29     -20.556  14.053   4.510  1.00 59.01           C
ATOM    613  O2'   A A  29     -21.148  14.457   3.293  1.00 58.45           O
ATOM    614  C1'   A A  29     -21.523  14.248   5.685  1.00 57.26           C
ATOM    615  N9    A A  29     -21.837  15.624   6.106  1.00 56.47           N
ATOM    616  C8    A A  29     -21.000  16.652   6.455  1.00 56.26           C
ATOM    617  N7    A A  29     -21.619  17.768   6.784  1.00 55.43           N
ATOM    618  C5    A A  29     -22.960  17.456   6.637  1.00 56.14           C
ATOM    619  C6    A A  29     -24.156  18.194   6.825  1.00 56.57           C
ATOM    620  N6    A A  29     -24.202  19.469   7.225  1.00 56.29           N
ATOM    621  N1    A A  29     -25.329  17.561   6.590  1.00 56.55           N
ATOM    622  C2    A A  29     -25.312  16.285   6.185  1.00 56.37           C
ATOM    623  N3    A A  29     -24.266  15.492   5.977  1.00 55.90           N
ATOM    624  C4    A A  29     -23.109  16.140   6.222  1.00 56.39           C
ATOM    625  P     U A  30     -21.077  10.352   3.257  1.00 65.20           P
ATOM    626  OP1   U A  30     -22.343   9.743   2.804  1.00 65.24           O
ATOM    627  OP2   U A  30     -20.167   9.523   4.084  1.00 65.39           O
ATOM    628  O5'   U A  30     -20.316  10.903   1.969  1.00 66.07           O
ATOM    629  C5'   U A  30     -20.969  11.820   1.095  1.00 66.37           C
ATOM    630  C4'   U A  30     -20.234  11.844  -0.226  1.00 66.40           C
ATOM    631  O4'   U A  30     -18.809  11.940   0.024  1.00 67.11           O
ATOM    632  C3'   U A  30     -20.352  10.547  -1.009  1.00 65.69           C
ATOM    633  O3'   U A  30     -21.627  10.410  -1.672  1.00 62.51           O
ATOM    634  C2'   U A  30     -19.112  10.638  -1.908  1.00 66.65           C
ATOM    635  O2'   U A  30     -19.229  11.597  -2.942  1.00 67.13           O
ATOM    636  C1'   U A  30     -18.088  11.109  -0.879  1.00 68.23           C
ATOM    637  N1    U A  30     -17.381  10.011  -0.110  1.00 68.83           N
ATOM    638  C2    U A  30     -15.993  10.004   0.007  1.00 69.07           C
ATOM    639  O2    U A  30     -15.275  10.851  -0.501  1.00 69.49           O
ATOM    640  N3    U A  30     -15.472   8.955   0.741  1.00 68.66           N
ATOM    641  C4    U A  30     -16.202   7.927   1.346  1.00 69.29           C
ATOM    642  O4    U A  30     -15.653   7.028   1.974  1.00 69.21           O
ATOM    643  C5    U A  30     -17.628   8.003   1.183  1.00 69.98           C
ATOM    644  C6    U A  30     -18.145   9.017   0.481  1.00 69.92           C
ENDMDL
MODEL        2
ATOM    539  P     C A  26     -19.024  25.068  -5.945  1.00 46.81           P
ATOM    540  OP1   C A  26     -19.207  26.235  -5.055  1.00 45.04           O
ATOM    541  OP2   C A  26     -17.676  24.613  -6.369  1.00 44.77           O
ATOM    542  O5'   C A  26     -19.675  23.774  -5.260  1.00 45.98           O
ATOM    543  C5'   C A  26     -20.927  23.881  -4.629  1.00 44.99           C
ATOM    544  C4'   C A  26     -21.435  22.491  -4.330  1.00 44.44           C
ATOM    545  O4'   C A  26     -21.502  21.721  -5.562  1.00 44.23           O
ATOM    546  C3'   C A  26     -20.539  21.645  -3.436  1.00 43.30           C
ATOM    547  O3'   C A  26     -20.642  22.010  -2.045  1.00 43.60           O
ATOM    548  C2'   C A  26     -21.120  20.271  -3.754  1.00 42.13           C
ATOM    549  O2'   C A  26     -22.418  20.065  -3.239  1.00 39.90           O
ATOM    550  C1'   C A  26     -21.222  20.354  -5.267  1.00 41.42           C
ATOM    551  N1    C A  26     -19.997  19.822  -5.973  1.00 39.41           N
ATOM    552  C2    C A  26     -19.788  18.429  -6.015  1.00 39.39           C
ATOM    553  O2    C A  26     -20.593  17.642  -5.478  1.00 37.57           O
ATOM    554  N3    C A  26     -18.683  17.965  -6.652  1.00 36.84           N
ATOM    555  C4    C A  26     -17.823  18.785  -7.222  1.00 38.50           C
ATOM    556  N4    C A  26     -16.768  18.220  -7.830  1.00 39.67           N
ATOM    557  C5    C A  26     -18.010  20.208  -7.197  1.00 37.68           C
ATOM    558  C6    C A  26     -19.098  20.666  -6.567  1.00 38.34           C
ATOM    559  P     A A  27     -19.357  21.872  -1.098  1.00 45.51           P
ATOM    560  OP1   A A  27     -19.721  22.274   0.274  1.00 45.89           O
ATOM    561  OP2   A A  27     -18.210  22.527  -1.770  1.00 45.31           O
ATOM    562  O5'   A A  27     -19.069  20.294  -1.096  1.00 45.85           O
ATOM    563  C5'   A A  27     -20.076  19.401  -0.618  1.00 45.44           C
ATOM    564  C4'   A A  27     -19.669  17.972  -0.877  1.00 44.25           C
ATOM    565  O4'   A A  27     -19.522  17.744  -2.296  1.00 44.42           O
ATOM    566  C3'   A A  27     -18.303  17.615  -0.313  1.00 43.99           C
ATOM    567  O3'   A A  27     -18.508  17.353   1.048  1.00 44.86           O
ATOM    568  C2'   A A  27     -17.965  16.379  -1.157  1.00 42.87           C
ATOM    569  O2'   A A  27     -18.734  15.239  -0.850  1.00 42.69           O
ATOM    570  C1'   A A  27     -18.430  16.850  -2.521  1.00 42.15           C
ATOM    571  N9    A A  27     -17.387  17.528  -3.288  1.00 40.58           N
ATOM    572  C8    A A  27     -17.180  18.869  -3.373  1.00 40.38           C
ATOM    573  N7    A A  27     -16.163  19.191  -4.139  1.00 40.04           N
ATOM    574  C5    A A  27     -15.672  17.981  -4.572  1.00 39.49           C
ATOM    575  C6    A A  27     -14.602  17.635  -5.416  1.00 42.18           C
ATOM    576  N6    A A  27     -13.805  18.531  -5.990  1.00 41.83           N
ATOM    577  N1    A A  27     -14.374  16.326  -5.659  1.00 41.96           N
ATOM    578  C2    A A  27     -15.177  15.419  -5.080  1.00 41.06           C
ATOM    579  N3    A A  27     -16.209  15.633  -4.274  1.00 39.86           N
ATOM    580  C4    A A  27     -16.409  16.943  -4.055  1.00 39.15           C
ATOM    581  P     A A  28     -17.341  17.272   2.110  1.00 45.26           P
ATOM    582  OP1   A A  28     -17.978  17.212   3.439  1.00 48.43           O
ATOM    583  OP2   A A  28     -16.346  18.351   1.847  1.00 44.90           O
ATOM    584  O5'   A A  28     -16.694  15.843   1.817  1.00 46.52           O
ATOM    585  C5'   A A  28     -17.365  14.642   2.237  1.00 49.78           C
ATOM    586  C4'   A A  28     -16.459  13.761   3.084  1.00 51.07           C
ATOM    587  O4'   A A  28     -15.433  13.241   2.193  1.00 51.00           O
ATOM    588  C3'   A A  28     -15.746  14.526   4.211  1.00 52.58           C
ATOM    589  O3'   A A  28     -16.208  14.324   5.616  1.00 56.20           O
ATOM    590  C2'   A A  28     -14.251  14.279   3.995  1.00 51.35           C
ATOM    591  O2'   A A  28     -13.582  13.793   5.135  1.00 51.93           O
ATOM    592  C1'   A A  28     -14.184  13.259   2.857  1.00 49.66           C
ATOM    593  N9    A A  28     -13.133  13.599   1.911  1.00 48.08           N
ATOM    594  C8    A A  28     -12.647  14.842   1.637  1.00 47.72           C
ATOM    595  N7    A A  28     -11.695  14.858   0.741  1.00 47.42           N
ATOM    596  C5    A A  28     -11.535  13.530   0.409  1.00 47.59           C
ATOM    597  C6    A A  28     -10.676  12.874  -0.499  1.00 48.14           C
ATOM    598  N6    A A  28      -9.771  13.521  -1.243  1.00 47.37           N
ATOM    599  N1    A A  28     -10.770  11.527  -0.604  1.00 48.11           N
ATOM    600  C2    A A  28     -11.675  10.892   0.155  1.00 48.78           C
ATOM    601  N3    A A  28     -12.529  11.409   1.043  1.00 47.86           N
ATOM    602  C4    A A  28     -12.413  12.742   1.122  1.00 47.87           C
ATOM    603  P     A A  29     -16.571  12.975   6.417  1.00 56.21           P
ATOM    604  OP1   A A  29     -15.913  13.074   7.733  1.00 55.14           O
ATOM    605  OP2   A A  29     -16.319  11.787   5.562  1.00 58.11           O
ATOM    606  O5'   A A  29     -18.142  13.153   6.601  1.00 56.19           O
ATOM    607  C5'   A A  29     -18.988  12.025   6.745  1.00 57.91           C
ATOM    608  C4'   A A  29     -20.346  12.311   6.130  1.00 58.84           C
ATOM    609  O4'   A A  29     -20.942  13.497   6.732  1.00 57.42           O
ATOM    610  C3'   A A  29     -20.327  12.540   4.614  1.00 59.78           C
ATOM    611  O3'   A A  29     -21.378  11.750   4.001  1.00 63.25           O
ATOM    612  C2'   A A  29     -20.556  14.053   4.510  1.00 59.01           C
ATOM    613  O2'   A A  29     -21.148  14.457   3.293  1.00 58.45           O
ATOM    614  C1'   A A  29     -21.523  14.248   5.685  1.00 57.26           C
ATOM    615  N9    A A  29     -21.837  15.624   6.106  1.00 56.47           N
ATOM    616  C8    A A  29     -21.000  16.652   6.455  1.00 56.26           C
ATOM    617  N7    A A  29     -21.619  17.768   6.784  1.00 55.43           N
ATOM    618  C5    A A  29     -22.960  17.456   6.637  1.00 56.14           C
ATOM    619  C6    A A  29     -24.156  18.194   6.825  1.00 56.57           C
ATOM    620  N6    A A  29     -24.202  19.469   7.225  1.00 56.29           N
ATOM    621  N1    A A  29     -25.329  17.561   6.590  1.00 56.55           N
ATOM    622  C2    A A  29     -25.312  16.285   6.185  1.00 56.37           C
ATOM    623  N3    A A  29     -24.266  15.492   5.977  1.00 55.90           N
ATOM    624  C4    A A  29     -23.109  16.140   6.222  1.00 56.39           C
ATOM    625  P     U A  30     -21.077  10.352   3.257  1.00 65.20           P
ATOM    626  OP1   U A  30     -22.343   9.743   2.804  1.00 65.24           O
ATOM    627  OP2   U A  30     -20.167   9.523   4.084  1.00 65.39           O
ATOM    628  O5'   U A  30     -20.316  10.903   1.969  1.00 66.07           O
ATOM    629  C5'   U A  30     -20.969  11.820   1.095  1.00 66.37           C
ATOM    630  C4'   U A  30     -20.234  11.844  -0.226  1.00 66.40           C
ATOM    631  O4'   U A  30     -18.809  11.940   0.024  1.00 67.11           O
ATOM    632  C3'   U A  30     -20.352  10.547  -1.009  1.00 65.69           C
ATOM    633  O3'   U A  30     -21.627  10.410  -1.672  1.00 62.51           O
ATOM    634  C2'   U A  30     -19.112  10.638  -1.908  1.00 66.65           C
ATOM    635  O2'   U A  30     -19.229  11.597  -2.942  1.00 67.13           O
ATOM    636  C1'   U A  30     -18.088  11.109  -0.879  1.00 68.23           C
ATOM    637  N1    U A  30     -17.381  10.011  -0.110  1.00 68.83           N
ATOM    638  C2    U A  30     -15.993  10.004   0.007  1.00 69.07           C
ATOM    639  O2    U A  30     -15.275  10.851  -0.501  1.00 69.49           O
ATOM    640  N3    U A  30     -15.472   8.955   0.741  1.00 68.66           N
ATOM    641  C4    U A  30     -16.202   7.927   1.346  1.00 69.29           C
ATOM    642  O4    U A  30     -15.653   7.028   1.974  1.00 69.21           O
ATOM    643  C5    U A  30     -17.628   8.003   1.183  1.00 69.98           C
ATOM    644  C6    U A  30     -18.145   9.017   0.481  1.00 69.92           C
ENDMDL
END
"""

def exercise_multimodel_suitename_json(test_mmcif=False):
  # derived from 2goz
  dm = DataManager()
  dm.process_model_str("1",multimod_2goz_pdb_str)
  m = dm.get_model("1")
  sz = suitealyze.suitealyze(pdb_hierarchy=m.get_hierarchy())
  sz_dict = json.loads(sz.as_JSON())
  if test_mmcif:
    model_1 = "1"
    model_2 = "2"
  else:
    model_1 = "   1"
    model_2 = "   2"
  #import pprint
  #pprint.pprint(sz_dict)
  assert len(sz_dict['flat_results']) == 10, "tst_suitename json output not returning correct number of suites, now: "+str(len(sz_dict['flat_results']))
  assert sz_dict['flat_results'][0]["cluster"] == "__", "tst_suitename json output first cluster value changed, now: "+sz_dict['flat_results'][0]["cluster"]
  from mmtbx.validation import test_utils
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "1a")==2, "tst_suitename json hierarchical output total number of 1a changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "1a"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "2a")==2, "tst_suitename json hierarchical output total number of 1b changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "2a"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "!!")==4, "tst_suitename json hierarchical output total number of !! changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "!!"))
  assert test_utils.count_dict_values(sz_dict['hierarchical_results'], "__")==2, "tst_suitename json hierarchical output total number of __ changed, now: "+str(test_utils.count_dict_values(sz_dict['hierarchical_results'], "__"))
  assert sz_dict['summary_results'][model_1]["num_outliers"] == 2, "tst_suitename json summary output total number of outliers changed"
  assert sz_dict['summary_results'][model_1]["num_suites"] == 5, "tst_suitename json summary output total number of suites changed"
  assert sz_dict['summary_results'][model_2]["num_outliers"] == 2, "tst_suitename json summary output total number of outliers changed"
  assert sz_dict['summary_results'][model_2]["num_suites"] == 5, "tst_suitename json summary output total number of suites changed"
  return sz_dict

if (__name__ == "__main__"):
  t0 = time.time()
  exercise_suitename_json()
  suite_json = exercise_multimodel_suitename_json()
  exercise_suitename_json(test_mmcif=True)
  convert_pdb_to_cif_for_pdb_str(locals(), chain_addition="LONGCHAIN", hetatm_name_addition = "", key_str="multimod_", print_new_string = False)
  suite_json_cif = exercise_multimodel_suitename_json(test_mmcif=True)
  assert suite_json['summary_results']['   1'] == suite_json_cif['summary_results']['1'], "tst_suitename summary results changed between pdb and cif version"
  assert suite_json['summary_results']['   2'] == suite_json_cif['summary_results']['2'], "tst_suitename summary results changed between pdb and cif version"

  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************
