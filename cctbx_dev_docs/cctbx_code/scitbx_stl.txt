

 *******************************************************************************
scitbx/stl/__init__.py
"""
stl
"""

from __future__ import division


 *******************************************************************************


 *******************************************************************************
scitbx/stl/map.py
from __future__ import absolute_import, division, print_function
import scitbx.stl.vector # import dependency

import boost_adaptbx.boost.python as bp
ext = bp.import_ext("scitbx_stl_map_ext")
from scitbx_stl_map_ext import *


 *******************************************************************************


 *******************************************************************************
scitbx/stl/set.py
from __future__ import absolute_import, division, print_function
import boost_adaptbx.boost.python as bp
ext = bp.import_ext("scitbx_stl_set_ext")
from scitbx_stl_set_ext import *


 *******************************************************************************


 *******************************************************************************
scitbx/stl/tst_map.py
from __future__ import absolute_import, division, print_function
from scitbx.stl import map
from six.moves import zip
try:
  from six.moves import cPickle as pickle
except ImportError:
  import pickle

def exercise_long_long():
  m = map.long_long()
  assert m.size() == 0
  assert len(m) == 0
  m[3] = 0
  assert m.size() == 1
  assert len(m) == 1
  assert m.items() == [(3, 0)]
  m[3] += 1
  assert m[3] == 1
  m[3] += 3
  assert m[3] == 4
  m[-5] = -8
  assert m.items() == [(-5, -8), (3, 4)]

def exercise_stl_string_double():
  m = map.stl_string_double()
  assert m.size() == 0
  assert len(m) == 0
  assert not "a" in m
  assert "a" not in m
  assert m.get("a", -1) == -1
  assert m.size() == 0
  assert m.setdefault("a", -2) == -2
  assert m.size() == 1
  assert len(m) == 1
  assert "a" in m
  assert "a" in m
  assert m["a"] == -2
  assert m.setdefault("a", -3) == -2
  assert m.size() == 1
  assert m["a"] == -2
  m["a"] = 10
  assert m["a"] == 10
  assert m.size() == 1
  m.setdefault("b")
  assert m.size() == 2
  assert m["b"] == 0
  m["b"] = 20
  assert m.size() == 2
  assert m["b"] == 20
  del m["b"]
  assert m.size() == 1
  m["b"] = 22
  assert m.size() == 2
  assert m.erase("c") == 0
  assert m.size() == 2
  assert m.erase("a") == 1
  assert m.size() == 1
  assert m.erase("a") == 0
  assert m.size() == 1
  m.clear()
  assert m.size() == 0
  m = map.stl_string_double({})
  assert m.size() == 0
  assert m.keys() == []
  assert m.values() == []
  assert m.items() == []
  m = map.stl_string_double({"b": 2, "a": 1, "c": 3})
  assert m.size() == 3
  assert m.keys() == ["a", "b", "c"]
  assert [k for k in m] == ["a", "b", "c"]
  assert m.values() == [1, 2, 3]
  assert m.items() == list(zip(["a", "b", "c"], [1, 2, 3]))
  d = dict(m.items())
  assert len(d) == 3
  ld = list(d)
  ld.sort()
  assert ld == list(m)
  m.update(map.stl_string_double({"x": -1, "y": -2}))
  assert m.items() == list(zip(["a", "b", "c", "x", "y"], [1, 2, 3, -1, -2]))
  m.update({"r": 9, "s": 8})
  assert m.items() == list(zip(["a","b","c","r","s","x","y"], [1,2,3,9,8,-1,-2]))
  assert m.popitem() == ("a", 1)
  assert m.popitem() == ("b", 2)
  d = pickle.dumps(m)
  l = pickle.loads(d)
  assert l.items() == list(zip(["c","r","s","x","y"], [3,9,8,-1,-2]))

def exercise_stl_string_stl_map_stl_string_double():
  mm = map.stl_string_stl_map_stl_string_double()
  m = mm.setdefault("a")
  assert mm["a"].size() == 0
  m["b"] = 10
  assert mm["a"].size() == 1
  m["c"] = 20
  assert mm["a"].size() == 2
  assert mm["a"]["b"] == 10
  assert mm["a"]["c"] == 20
  del mm["a"]["b"]
  assert mm["a"].size() == 1
  assert m.size() == 1
  d = pickle.dumps(mm)
  l = pickle.loads(d)
  assert l["a"].size() == 1

def exercise_stl_string_stl_vector_unsigned():
  sv = map.stl_string_stl_vector_unsigned()
  v = sv.setdefault("a")
  assert sv["a"].size() == 0
  v.append(10)
  assert sv["a"].size() == 1
  sv["a"].append(20)
  assert v.size() == 2
  d = pickle.dumps(sv)
  l = pickle.loads(d)
  assert l.keys() == ["a"]
  assert list(l["a"]) == [10,20]

def exercise_int_stl_vector_unsigned():
  sv = map.int_stl_vector_unsigned()
  v = sv.setdefault(-1)
  assert sv[-1].size() == 0
  v.append(10)
  assert sv[-1].size() == 1
  sv[-1].append(20)
  assert v.size() == 2
  d = pickle.dumps(sv)
  l = pickle.loads(d)
  assert l.keys() == [-1]
  assert list(l[-1]) == [10,20]
  #
  v = sv.get(-1)
  v.append(30)
  assert list(v) == [10,20,30]
  assert list(sv[-1]) == [10,20,30]
  l = sv.values()
  l[0].append(40)
  assert list(sv[-1]) == [10,20,30,40]
  l = sv.items()
  l[0][1].append(50)
  assert list(sv[-1]) == [10,20,30,40,50]

def exercise():
  exercise_long_long()
  exercise_stl_string_double()
  exercise_stl_string_stl_map_stl_string_double()
  exercise_stl_string_stl_vector_unsigned()
  exercise_int_stl_vector_unsigned()
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
scitbx/stl/tst_set.py
from __future__ import absolute_import, division, print_function
from scitbx.stl import set
try:
  from six.moves import cPickle as pickle
except ImportError:
  import pickle

def exercise_unsigned():
  s = set.unsigned()
  assert s.size() == 0
  assert len(s) == 0
  assert not 1 in s
  s.insert(1)
  assert s.size() == 1
  assert len(s) == 1
  assert 1 in s
  s.append(1)
  assert s.size() == 1
  s.insert(3)
  assert s.size() == 2
  assert s.erase(2) == 0
  assert s.size() == 2
  assert s.erase(1) == 1
  assert s.size() == 1
  s.clear()
  assert s.size() == 0
  s = set.unsigned([4,5,8,7,5,3])
  assert s.size() == 5
  assert list(s) == [3,4,5,7,8]
  s.insert(set.unsigned(s))
  assert s.size() == 5
  s.extend([0,4,6,11])
  assert list(s) == [0,3,4,5,6,7,8,11]
  d = pickle.dumps(s)
  l = pickle.loads(d)
  assert list(l) == list(s)

def exercise_stl_string():
  s = set.stl_string(["a", "b", "c"])
  d = pickle.dumps(s)
  l = pickle.loads(d)
  assert list(l) == list(s)

def exercise():
  exercise_unsigned()
  exercise_stl_string()
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
scitbx/stl/tst_vector.py
from __future__ import absolute_import, division, print_function
from scitbx.stl import vector
from scitbx.stl import set
try:
  from six.moves import cPickle as pickle
except ImportError:
  import pickle

def exercise_unsigned():
  a = vector.unsigned()
  assert a.size() == 0
  assert len(a) == 0
  a.append(13)
  assert a.size() == 1
  a.append(12)
  assert len(a) == 2
  a.append(3)
  assert list(a) == [13, 12, 3]
  a.extend(a)
  assert list(a) == [13, 12, 3, 13, 12, 3]
  a.insert(1, 23)
  assert list(a) == [13, 23, 12, 3, 13, 12, 3]
  a[4] = 15
  assert list(a) == [13, 23, 12, 3, 15, 12, 3]
  a = a[2:5]
  assert list(a) == [12, 3, 15]
  del a[0]
  assert list(a) == [3, 15]
  a.append(23)
  a.append(56)
  assert list(a) == [3, 15, 23, 56]
  del a[1:3]
  assert list(a) == [3, 56]
  del a[:]
  assert a.size() == 0
  a.append(12)
  a.append(23)
  a.append(34)
  del a[-1:]
  assert list(a) == [12, 23]
  del a[:1]
  assert list(a) == [23]
  a.clear()
  assert a.size() == 0
  a = vector.unsigned([12,23])
  assert list(a) == [12, 23]
  a = vector.unsigned(0)
  assert list(a) == []
  a = vector.unsigned(3)
  assert list(a) == [0,0,0]
  a = vector.unsigned(3, 12)
  assert list(a) == [12,12,12]
  for elems in [(), (3,6,4)]:
    a = vector.unsigned(elems)
    d = pickle.dumps(a)
    l = pickle.loads(d)
    assert tuple(l) == elems

def exercise_set_unsigned():
  v = vector.set_unsigned()
  v.append(set.unsigned([3,7,3,4]))
  assert list(v[0]) == [3,4,7]
  v[0].insert(5)
  assert list(v[0]) == [3,4,5,7]
  v[0].clear()
  assert v[0].size() == 0

def exercise():
  exercise_unsigned()
  exercise_set_unsigned()
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
scitbx/stl/vector.py
from __future__ import absolute_import, division, print_function
import scitbx.stl.set # import dependency

import boost_adaptbx.boost.python as bp
ext = bp.import_ext("scitbx_stl_vector_ext")
from scitbx_stl_vector_ext import *


 *******************************************************************************
