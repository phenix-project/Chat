

 *******************************************************************************
cma_es/__init__.py
from __future__ import absolute_import, division, print_function
import boost_adaptbx.boost.python as bp
cma_es_ext = bp.import_ext("cma_es_ext")
from cma_es_ext import *


 *******************************************************************************


 *******************************************************************************
cma_es/cma_es_interface.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
from cma_es import cma_es
from six.moves import range

class cma_es_driver(object):
  """
  This object provides one with a easy interface to cma_es optimisation.
  For now, no options can be set, this will be added in the future.
  """
  def __init__(self, N, mean, sigma, evaluator, l=0):
    self.N = N
    self.x = mean
    self.sigma = sigma
    self.evaluator = evaluator

    self.optimizer = cma_es(self.N, self.x, self.sigma, l)
    self.count = 0

    while (not self.optimizer.converged() ):
      # get sample population
      p = self.optimizer.sample_population()
      pop_size = p.accessor().all()[0]
      # update objective function
      v = flex.double(pop_size)
      for i in range(pop_size):
        vector = p[(i*N):(i*N + N)]
        v[i] = self.evaluator( vector )
      self.optimizer.update_distribution(v)
      self.count += 1
    self.x_final = self.optimizer.get_result()
    self.score_final = self.evaluator( self.x_final )


def tst_it():
  def function(vector):
    x = vector[0]
    y = vector[1]
    result =100.0*((y-x*x)**2.0) + (1-x)**2.0
    return result

  m = flex.double( [5,5] )
  s = flex.double( [3,3] )
  obj = cma_es_driver( 2, m, s, function )
  assert abs(obj.x_final[0]-1)<1e-8
  assert abs(obj.x_final[1]-1)<1e-8




# =============================================================================
if (__name__ == '__main__'):
  tst_it()
  print('Ok')


 *******************************************************************************


 *******************************************************************************
cma_es/run_tests.py
from __future__ import absolute_import, division, print_function
from libtbx import test_utils
import libtbx.load_env

tst_list = [
"$D/tst_cma_es.py",
]

def run():
  build_dir = libtbx.env.under_build("cma_es")
  dist_dir = libtbx.env.dist_path("cma_es")

  test_utils.run_tests(build_dir, dist_dir, tst_list)

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
cma_es/tst_cma_es.py
from __future__ import absolute_import, division, print_function
from libtbx.test_utils import approx_equal
from scitbx.array_family import flex
from cma_es import cma_es
from six.moves import range
from six.moves import zip

# =============================================================================
center = flex.double([8.0,-13.0,0.5])

def obj_fun(x):
  assert(len(x) == 3)
  fun = 0.0
  for i in range(len(x)):
    xi = x[i] - center[i]
    fun += xi*xi
  return fun

# from example1.c
def fitfun(x,N):
  isum = 1e4*x[0]*x[0] + 1e-4*x[1]*x[1]
  for i in range(2,N):
    isum += x[i]*x[i]
  return isum

def test_cma_es():
  N = 3
  x = flex.double(N,100.0)
  sd = flex.double(N,5.0)
  m = cma_es(N,x,sd)

  while (not m.converged()):
    # sample population
    p = m.sample_population()
    pop_size = p.accessor().all()[0]

    # update objective function
    v = flex.double(pop_size)
    for i in range(pop_size):
      v[i] = obj_fun(p[(i*N):(i*N + N)])
    m.update_distribution(v)

  x_final = m.get_result()
  assert(approx_equal(x_final,center,eps=1e-6))

def test_cma_es_rosebrock_n(M=10):

  def funct(x,y):
    result = 0
    for xx,yy in zip(x,y):
      result+=100.0*((yy-xx*xx)**2.0) + (1-xx)**2.0
    return result

  N=M*2
  x  = flex.double(N,10.0)
  sd = flex.double(N,3.0)
  m = cma_es(N,x,sd)

  while ( not m.converged() ):
    # sample population
    p = m.sample_population()
    pop_size = p.accessor().all()[0]

    # update objective function
    v = flex.double(pop_size)
    for ii in range(pop_size):
      vector = p[(ii*N):(ii*N + N)]
      x = vector[0:M]
      y = vector[M:]
      v[ii] = funct(x,y)
    m.update_distribution(v)
    print(list(m.get_result()))
    print(flex.min(v))
    print()

  x_final = m.get_result()
  print(list(x_final))

def test_cma_es_lambda():
  N = 3
  x = flex.double(N,100.0)
  sd = flex.double(N,5.0)
  l = 10
  m = cma_es(N,x,sd,l)

  while (not m.converged()):
    # sample population
    p = m.sample_population()
    pop_size = p.accessor().all()[0]

    # update objective function
    v = flex.double(pop_size)
    for i in range(pop_size):
      v[i] = obj_fun(p[(i*N):(i*N + N)])
    m.update_distribution(v)

  x_final = m.get_result()
  assert(approx_equal(x_final,center,eps=1e-6))

def test_cma_es_file():
  import libtbx.load_env
  m = cma_es(libtbx.env.dist_path("cma_es") + "/cma/initials.par")

  while (not m.converged()):
    # sample population and get problem size
    p = m.sample_population()
    pop_size = p.accessor().all()[0]
    N = p.accessor().all()[1]

    # update objective function
    v = flex.double(pop_size)
    for i in range(pop_size):
      v[i] = fitfun(p[(i*N):(i*N + N)],N)
    m.update_distribution(v)

  x_final = m.get_result()
  assert(approx_equal(x_final,flex.double(len(x_final),0.0),eps=1e-5))

# =============================================================================
if (__name__ == '__main__'):
  test_cma_es()
  test_cma_es_lambda()
  test_cma_es_file()
  print('Ok')


 *******************************************************************************
