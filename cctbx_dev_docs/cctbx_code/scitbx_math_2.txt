

 *******************************************************************************
scitbx/math/tst_zernike_mom.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
from scitbx import math
from six.moves import zip

def makexyz():
  xyz=flex.vec3_double()
  xyz.append( ( 25, 0, 0) )
  xyz.append( (-25, 0, 0) )
  xyz.append( ( 0, 10, 0) )
  xyz.append( ( 0,-10, 0) )
  xyz.append( ( 0,0, 15) )
  xyz.append( ( 0,0,-15) )

  return xyz

def tst_voxel(nmax, np):
  splat_range = 1
  fraction = 0.9
  default_dx = 0.7
  external_rmax = -1.0
  uniform = True
  adjust_dx = False
  centering = False

  xyz = makexyz()
  density=flex.double(xyz.size(),1.0)
  voxel_obj = math.sphere_voxel(np,splat_range,uniform,adjust_dx,external_rmax,default_dx, fraction,xyz,density)

  assert voxel_obj.np() == np
  assert abs(voxel_obj.rmax() - 25)<1e-4
  assert voxel_obj.occupied_sites() == 162

  info = voxel_obj.status()
  expect_info = """number of grid point is:    68921
rmax is                : 25.00000000
max fraction one 1-d is: 0.90000000
non-empty grid point is:      162
non-empty grid fract is: 0.00235052
"""
  assert info == expect_info

  new_xyz = voxel_obj.xyz()
  for xxx, yyy in zip(xyz, new_xyz):
    for x1, x2 in zip(xxx, yyy):
      assert x1 == x2

  return voxel_obj

def tst_grid(nmax,np):
  voxel_obj = tst_voxel( nmax, np )

  grid_obj = math.sphere_grid(np, nmax)
  pdb_out = False
  grid_obj.clean_space(voxel_obj, pdb_out)
  grid_obj.construct_space_sum()

  assert grid_obj.occupied_sites() == voxel_obj.occupied_sites()

  return grid_obj

def tst_moments(nmax,np):
  grid_obj = tst_grid(nmax,np)
  mom_obj = math.zernike_moments(grid_obj, nmax)

  moments = mom_obj.moments()
  Fnl= mom_obj.fnl()
  Fnn= mom_obj.fnn()
  Fnnl= mom_obj.fnnl()
  eps = 1e-8

  #print list(Fnl.coefs())
  check_nl = [2.3370760050376607e-05, 2.1910087547227873e-07, 1.1145167882067956e-05, 1.1552795255443502e-05, 1.8332528001413832e-07, 2.7291537694166531e-07, 7.2474025554586763e-06, 2.3917327527551719e-05, 4.2203807328102694e-05]
  for i_pre, i_cal in zip( check_nl, Fnl.coefs()):
    assert abs(i_pre-i_cal) < eps

  check_nn = [1.1685380025188304e-05, 1.0955043773613935e-07, 1.6139115350383189e-05, 1.134898156875573e-05, 1.7412731546555787e-08, 2.2812032847790184e-07, 1.3014503682895901e-05, -4.7928189112959946e-06, 3.668426870555654e-05]
  for i_pre, i_cal in zip( check_nn, Fnn.coefs()):
    assert abs(i_pre-i_cal) < eps

  check_nnl=[(1.1685380025188304e-05+0j), 0j, 0j, (1.0955043773613935e-07+0j), (-1.6139115350383189e-05+0j), 0j, 0j, (5.5725839410339778e-06+0j), 0j, (5.7763976277217503e-06+0j), 0j, 0j, (-1.7412731546555787e-08+0j), 0j, 0j, 0j, 0j, (9.1662640007069148e-08+0j), 0j, (1.3645768847083266e-07+0j), (1.3014503682895901e-05+0j), 0j, 0j, (-8.9874088696083742e-06+0j), 0j, (1.3780227780904368e-05+0j), 0j, 0j, 0j, 0j, (3.6237012777293381e-06+0j), 0j, (1.1958663763775861e-05+0j), 0j, (2.1101903664051344e-05+0j)]
  for i_pre, i_cal in zip( check_nnl, Fnnl.coefs()):
    assert abs(i_pre-i_cal) < eps

  mom_0_0_0 = (0.00483433139642-0j)
  mom_1_1_0 = (0.000270247340704-0j)
  mom_1_1_1 = (-0.000191093727209+0.000191093727209j)
  mom_2_0_0 = (-0.00333843794042-0j)
  mom_2_2_1 = (-1.26396619825e-05+1.26396619825e-05j)
  mom_4_2_0 = (-0.00371195771764-0j)
  mom_4_4_0 = (0.00317650549416-0j)


  assert abs( moments.get_coef(0,0,0) - mom_0_0_0 ) < eps
  assert abs( moments.get_coef(1,1,0) - mom_1_1_0 ) < eps
  assert abs( moments.get_coef(1,1,1) - mom_1_1_1 ) < eps
  assert abs( moments.get_coef(2,0,0) - mom_2_0_0 ) < eps
  assert abs( moments.get_coef(2,2,1) - mom_2_2_1 ) < eps
  assert abs( moments.get_coef(4,2,0) - mom_4_2_0 ) < eps
  assert abs( moments.get_coef(4,4,0) - mom_4_4_0 ) < eps



  # do some alignment please
  from scitbx.math import zernike_align_fft as zafft
  fixed = mom_obj.moments()
  moving = mom_obj.moments()
  al_obj = zafft.align( fixed, moving)
  assert abs(al_obj.get_cc()-1) < 1e-3




  return True



if __name__ == "__main__":
  nmax = 4
  np = 20
  tst_moments(nmax, np)
  print("OK")


 *******************************************************************************


 *******************************************************************************
scitbx/math/undirected_graph.py
from __future__ import absolute_import, division, print_function

class Graph(object):
  """
  Basic graph implementation

  Graph interface:
      * Properties:
        - vertices: an iterable that support constant time membership tests
        - edges: an iterable returning a unique list of edges

      * Methods:
        - add_edge: insert an edge, and the vertices it connects
        - add vertex: insert a vertex
        - edges_from: return edges out from a vertex
  """

  def __init__(self):

    self.vertices = set()
    self.edges = set()


  def add_edge(self, edge):

    self.vertices.update( edge.vertices )
    self.edges.add( edge )


  def add_vertex(self, vertex):

    self.vertices.add( vertex )


  def edges_from(self, vertex):

    return ( e for e in self.edges if vertex in e.vertices )


class VertexIndexedGraph(object):
  """
  Represents a graph, with a quick way to get all edges from a vertex
  """

  def __init__(self):

    self._edges_from = dict()


  @property
  def vertices(self):

    return self._edges_from


  @property
  def edges(self):

    result = set()
    result.update( *list(self._edges_from.values()) )
    return result


  def add_edge(self, edge):

    for v in edge.vertices:
      self._edges_from.setdefault( v, set() ).add( edge )


  def add_vertex(self, vertex):

    self._edges_from.setdefault( vertex, set() )


  def edges_from(self, vertex):

    return self._edges_from.get( vertex, set() )


class Edge(object):
  """
  Edge in an undirected graph
  """

  def __init__(self, vertex1, vertex2):

    self.vertices = frozenset( ( vertex1, vertex2 ) )


  def other_vertex(self, current):

    assert current in self.vertices

    if len( self.vertices ) == 2:
      diff = self.vertices.difference( [ current ] )
      assert len( diff ) == 1
      return list( diff )[0]

    else:
      return current


  def __eq__(self, other):

    return self.vertices == other.vertices


  def __ne__(self, other):

    return not ( self == other )


  def __hash__(self):

    return hash( self.vertices )


def preorder_depth_first_iteration(vertex, graph):
  """
  Preorder depth-first traversal of a graph
  """

  assert vertex in graph.vertices
  yield vertex

  discovereds = set( [ vertex ] )
  stack = [ vertex ]

  while stack:
    current = stack[-1]

    for edge in graph.edges_from( vertex = current ):
      other = edge.other_vertex( current = current )

      if other in discovereds:
        continue

      yield other
      discovereds.add( other )
      stack.append( other )
      break

    else:
      stack.pop()


def connected_components(graph):

  unused = set( graph.vertices )

  while unused:
    vertex = unused.pop()
    component = list( preorder_depth_first_iteration( vertex = vertex, graph = graph ) )
    unused.difference_update( component )
    yield component



 *******************************************************************************


 *******************************************************************************
scitbx/math/zernike_align_fft.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
from scitbx.math import correlation
from scitbx.stdlib import math
from scitbx import fftpack, simplex
from six.moves import range

def get_mean_sigma( nlm_array ):
  coef = nlm_array.coefs()
  mean = abs( coef[0] )
  var = flex.sum( flex.norm(coef) )
  sigma = math.sqrt( var-mean*mean )
  return mean, sigma


class align(object):
  def __init__( self, fixed, moving, nmax=10, n_beta=21, ngrid=21, topn=10, refine=False, check_inversion=False,  show_result=False ):
    self.nmax = nmax
    self.fixed = fixed
    self.moving = moving
    self.beta = math.pi*2.0/float(n_beta-1)*flex.double( range(n_beta) )
    self.nb = n_beta
    self.pad = max(0, (ngrid-1)//2 - nmax )
    self.ngrid = (self.pad+nmax) * 2 + 1
    self.dx = math.pi*2.0/(self.ngrid*10)
    self.topn = topn
    self.refine = refine
    self.check_inversion = check_inversion
    self.inversion = False
    self.show_result=show_result
    self.top_align=[]
    self.top_scores = flex.double()
    self.scores = flex.double()
    self.cc_obj = correlation( fixed, moving, nmax, 0 ) # make default beta=0
    self.scan()
    ea = self.best_ea
    self.moving_nlm = self.cc_obj.rotate_moving_obj( ea[0],ea[1], ea[2], self.inversion )




  def get_cc( self, this_score=None ):
    if this_score is None:
      this_score = self.best_score

    fix_mean, fix_s = get_mean_sigma( self.fixed )
    mov_mean, mov_s = get_mean_sigma( self.moving)
    self.cc = ( this_score - fix_mean*mov_mean ) / ( fix_s*mov_s )
    return self.cc

  def scan( self ):
    fft = fftpack.complex_to_complex_2d( self.ngrid, self.ngrid )
    inversion = False
    for beta in self.beta:
      self.cc_obj.set_beta( beta )
      mm = self.cc_obj.mm_coef(0,inversion)
      if( self.pad > 0):
        mm = self.cc_obj.mm_coef(self.pad, inversion)
      fft_input= mm
      scores = fft.backward( fft_input ).as_1d()
      self.scores = self.scores.concatenate( -flex.norm( scores )  )
    self.best_indx = flex.min_index( self.scores )
    self.best_score = math.sqrt( -self.scores[ self.best_indx ])


    if self.check_inversion:
    ### Inversion of the Spherical Harmonics ###
      inversion = True
      inversion_scores = flex.double()
      for beta in self.beta:
        self.cc_obj.set_beta( beta )
        mm = self.cc_obj.mm_coef(0,inversion)
        if( self.pad > 0):
          mm = self.cc_obj.mm_coef(self.pad, inversion)
        fft_input= mm.deep_copy()
        scores = fft.backward( fft_input ).as_1d()
        inversion_scores = inversion_scores.concatenate( -flex.norm( scores )  )
      inv_best_indx = flex.min_index( inversion_scores )
      inv_best_score = math.sqrt(-inversion_scores[ inv_best_indx ] )

      if( inv_best_score < self.best_score ):
        self.score = inversion_scores
        self.best_indx = inv_best_indx
        self.best_score = inv_best_score
        self.inversion =  True
      else:
        self.inversion = False



    b=self.best_indx//(self.ngrid*self.ngrid)
    a=(self.best_indx - self.ngrid*self.ngrid*b ) // self.ngrid
    g=self.best_indx - self.ngrid*self.ngrid*b - self.ngrid*a

    b = self.beta[b]
    g = math.pi*2.0 *( float(g)/(self.ngrid-1) )
    a = math.pi*2.0 *( float(a)/(self.ngrid-1) )

    self.best_ea = (a, b, g )

    self.find_top( self.topn )
    if( self.refine ):
      self.refined = []
      self.refined_moving_nlm = []
      self.refined_score = flex.double()
      for t in self.top_align:
        r = self.run_simplex( t )
        self.refined.append ( r )
        self.refined_score.append( self.get_cc( self.target( r ) ) )
        self.refined_moving_nlm.append(  self.cc_obj.rotate_moving_obj( r[0],r[1], r[2], self.inversion )  )
      orders=flex.sort_permutation( self.refined_score, True )
      self.best_score = -self.refined_score[orders[0]]


# show the refined results
      if( self.show_result ):
        print("refined results:")
        for ii in range( self.topn ):
          o = orders[ii]
          o = ii
          print(ii, ":", list( self.refined[o] ), ":", self.refined_score[o])
      ea = self.refined[ orders[0] ]
      self.best_ea = (ea[0], ea[1], ea[2] )
      self.moving_nlm = self.cc_obj.rotate_moving_obj( ea[0],ea[1], ea[2], self.inversion )


  def find_top( self, topn ):
    orders = flex.sort_permutation( self.scores )
    for ii in range( topn ):
      o = orders[ii]
      b=o//(self.ngrid*self.ngrid)
      a=(o - self.ngrid*self.ngrid*b ) // self.ngrid
      g=o - self.ngrid*self.ngrid*b - self.ngrid*a

      b = self.beta[b]
      g = math.pi*2.0 *( float(g)/(self.ngrid-1) )
      a = math.pi*2.0 *( float(a)/(self.ngrid-1) )
      self.top_align.append( flex.double( (a, b, g) ) )
      self.top_scores.append( self.scores[o] )
      #print ii, ":", a, b, g, ":", self.scores[o]

  def run_simplex( self, start, max_iter=500 ):
    dim = 3
    starting_matrix = [ start ]
    for ii in range( dim ):
      starting_matrix.append( start + (flex.random_double(dim)*2-1)*self.dx )
    optimizer = simplex.simplex_opt( dimension = dim,
                                     matrix = starting_matrix,
                                     evaluator = self,
                                     max_iter = max_iter,
                                     tolerance=1e-5)
    result = optimizer.get_solution()
    return result

  def target( self, v ):
    cc = self.cc_obj.calc_correlation( v[0], v[1], v[2], self.inversion )
    return -abs( cc )


def tst():
  xyz = flex.vec3_double(  [ (-1,-1,-1) , (1,1,1) ] )


 *******************************************************************************
