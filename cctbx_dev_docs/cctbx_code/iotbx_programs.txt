

 *******************************************************************************
iotbx/programs/__init__.py
"""Command-line tools to carry out reading/writing of files. These
tools all use the Program Template.
"""
from __future__ import division


 *******************************************************************************


 *******************************************************************************
iotbx/programs/box_around_molecule.py
from __future__ import absolute_import, division, print_function
import os
from libtbx.program_template import ProgramTemplate
from cctbx.maptbx.box import shift_and_box_model

master_phil_str = '''
buffer_layer = 5.0
  .type = float
  .help = buffer around atoms, in Angstrom
shift_model = True
  .type = bool
  .help = shift model closer to the origin
output {
  suffix = _box
    .type = str
  format = *Auto pdb cif
    .type = choice(multi=False)
    .help = output model file type
}
'''

# ------------------------------------------------------------------------------

class Program(ProgramTemplate):
  description = '''
Script that creates a P1 box around a model.

Inputs:
  PDB or mmCIF file containing atomic model
  optional: buffer layer in Angstrom (default is 5.0 A)

Usage examples:
  1) Save model as PDB (input is mmCIF)
     iotbx.pdb.box_around_molecule.py test.cif format=pdb

  2) Save model as mmCIF (input is PDB)
    pdb.box_around_molecule.py test.pdb format=cif

  3) Default: input and output format are the same
     pdb.box_around_molecule.py test.pdb

  The program template accepts PDB and mmCIF input formats.
  The paramter output.format allows choosing the output format.
'''

  datatypes = ['model', 'phil']
  master_phil_str = master_phil_str

  # ----------------------------------------------------------------------------

  def validate(self):
    self.data_manager.has_models(expected_n  = 1,
                                 exact_count = True,
                                 raise_sorry = True)

  # ----------------------------------------------------------------------------

  def run(self):
    #
    self.model = self.data_manager.get_model()

    # shift_and_box_model creates a new model object, so the format needs to
    # be obtained here
    if self.params.output.format == 'Auto':
      if self.model.input_model_format_pdb():
        self.params.output.format = 'pdb'
      elif self.model.input_model_format_cif():
        self.params.output.format = 'cif'

    self.model = shift_and_box_model(model = self.model,
                                     box_cushion = self.params.buffer_layer,
                                     shift_model=self.params.shift_model)

    # Get output filename if not provided
    fn = self.data_manager.get_default_model_name()
    basename = os.path.splitext(os.path.basename(fn))[0]
    if self.params.output.prefix is None:
      self.params.output.prefix = basename
      self.data_manager.set_default_output_filename(self.get_default_output_filename())

    # save output
    output_fn = self.data_manager.write_model_file(self.model,
                                       format = self.params.output.format)
    print('Created file', output_fn, file=self.logger)


 *******************************************************************************


 *******************************************************************************
iotbx/programs/split_data_cif.py
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

from libtbx.program_template import ProgramTemplate

from mmtbx.command_line.cif_as_mtz import extract
import iotbx.cif
import iotbx.cif.model
from cctbx import crystal
from libtbx import Auto
from libtbx.utils import Sorry
import os

class Program(ProgramTemplate):
  description = '''
iotbx.split_data_cif: Tool to split cif file that has multiple data blocks

Usage examples:
  iotbx.split_data_cif 5r82-sf.cif
  '''

  datatypes = ['phil', 'miller_array']

  master_phil_str = """\
output_r_free_label = 'R-free-flags'
  .type = str
  .help = MTZ column label to use for R-free flags (default: R-free-flags)
merge_non_unique_under_symmetry = True
  .type = bool
  .help = Merge non-unique data where present
incompatible_flags_to_work_set = True
  .type = bool
  .help = When merging place reflections with incompatible flags into the \
          working set
remove_systematic_absences = True
  .type = bool
  .help = Remove systematic absent reflections
map_to_asu = True
  .type = bool
  .help = Map to asymmetric unit
show_details_if_error = True
  .type = bool
  .help = Show data details for some errors
ignore_bad_sigmas = True
  .type = bool
  .help = Set sigmas to None instead of raising an error when bad sigmas \
          are present
extend_flags = True
  .type = bool
  .help = Extend R-free flags to cover all reflections if necessary
output {
  mtz = True
  cif = True
}
"""

  def validate(self):
    print('Validating inputs:\n', file=self.logger)
    self.data_manager.has_miller_arrays(raise_sorry=True)

  def run(self):
    self.out_cif_names = []
    self.out_mtz_names = []
    fnames = self.data_manager.get_miller_array_names()
    for fname in fnames:
      cif_reader = self.data_manager.get_miller_array(filename=fname).file_content()
      cif_model = cif_reader.model()
      dummy_cs = crystal.symmetry(
            unit_cell=None,
            space_group_info=None)
      for data_block_name in cif_model.keys():
        fn_base = self.get_default_output_filename(
            prefix='%s_%s' % (fname, data_block_name),
            serial=Auto)
        if self.params.output.cif:
          fn = fn_base+'.cif'
          if os.path.isfile(fn) and not self.params.output.overwrite:
            raise Sorry("%s already exists and overwrite is set to False." % fn)
          print ("Writing '%s'" % fn, file=self.logger)
          output_model = iotbx.cif.model.cif(blocks={data_block_name:cif_model[data_block_name]})
          with open(fn, 'w') as f:
            output_model.show(out=f)
          self.out_cif_names.append(fn)
        if self.params.output.mtz:
          miller_arrays = cif_reader.build_miller_arrays(data_block_name=data_block_name)
          mtz_object = extract(
              file_name='',
              crystal_symmetry=dummy_cs,
              wavelength_id=None,
              crystal_id=None,
              show_details_if_error=self.params.show_details_if_error,
              output_r_free_label=self.params.output_r_free_label,
              merge_non_unique_under_symmetry=self.params.merge_non_unique_under_symmetry,
              map_to_asu=self.params.map_to_asu,
              remove_systematic_absences=self.params.remove_systematic_absences,
              all_miller_arrays={data_block_name:miller_arrays},
              incompatible_flags_to_work_set=self.params.incompatible_flags_to_work_set,
              ignore_bad_sigmas=self.params.ignore_bad_sigmas,
              extend_flags=self.params.extend_flags,
              return_as_miller_arrays=False,
              log=self.logger)
          fn = fn_base+'.mtz'
          print ("Writing '%s'" % fn, file=self.logger)
          self.data_manager.write_miller_array_file(mtz_object, filename=fn)
          self.out_mtz_names.append(fn)

  def get_results(self):
    return self.out_cif_names, self.out_mtz_names


 *******************************************************************************


 *******************************************************************************
iotbx/programs/unique_with_biomt.py
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

from libtbx.program_template import ProgramTemplate

from libtbx import Auto
import os

# =============================================================================

class Program(ProgramTemplate):

  description = '''
iotbx.unique_with_biomt: Tool to make an mmCIF file with only part of model
  and _pdbx_struct_assembly* records defining symmetry operations to reconstruct
  the rest of the model.

Usage examples:
  iotbx.unique_with_biomt model.pdb
  iotbx.unique_with_biomt model.pdb chain_id_to_leave='A'
  '''

  datatypes = ['model', 'phil']

  master_phil_str = """\
  chain_id_to_leave = ''
    .type = str
    .help = If chain with this id is present, it will be kept as a unique part \
      of the model.
"""

  # ---------------------------------------------------------------------------
  def validate(self):
    print('Validating inputs', file=self.logger)
    self.data_manager.has_models(expected_n=1, exact_count=False, raise_sorry=True)
    m = self.data_manager.get_model()
    print ('Inputs OK', file=self.logger)

  # ---------------------------------------------------------------------------

  def run(self):
    # print(dir(self.data_manager))
    m = self.data_manager.get_model()
    m.search_for_ncs()
    m.setup_ncs_constraints_groups(filter_groups=False)
    if not m.can_be_unique_with_biomt():
      print("Model cannot be reduced.", file=self.logger)
      return

    if len(self.params.chain_id_to_leave) > 0:
      # make sure master has the correct chain
      nrgl = m.get_ncs_groups()
      found = False
      master_atom = m.get_hierarchy().atoms()[nrgl[0].master_iselection[0]]
      if master_atom.parent().parent().parent().id !=self.params.chain_id_to_leave:
        for i_c, c in enumerate(nrgl[0].copies):
          c_atom = m.get_hierarchy().atoms()[c.iselection[0]]
          if c_atom.parent().parent().parent().id == self.params.chain_id_to_leave:
            nrgl[0].make_nth_copy_master(i_c)
            found = True
      if not found:
        print("Chain id specified in chain_id_to_leave not found.", file=self.logger)
        print("Proceeding with a default value.", file=self.logger)
    cif_txt = m.model_as_mmcif(try_unique_with_biomt=True)
    inp_fn = os.path.basename(self.data_manager.get_default_model_name())[:-4]
    fn = "%s.cif" % self.get_default_output_filename(
        prefix='%s_' % inp_fn,
        suffix='unique_biomt',
        serial=Auto)
    print("Saving:", fn, file=self.logger)
    self.data_manager.write_model_file(model_str=cif_txt, filename=fn, format='cif')






  # ---------------------------------------------------------------------------
  def get_results(self):
    return None


 *******************************************************************************
