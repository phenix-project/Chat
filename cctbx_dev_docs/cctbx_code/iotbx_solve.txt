

 *******************************************************************************
iotbx/solve/__init__.py
"""Tools for manipulation of SOLVE-formatted data files
"""
from __future__ import division


 *******************************************************************************


 *******************************************************************************
iotbx/solve/crystal_symmetry_from_inp.py
from __future__ import absolute_import, division, print_function
from cctbx import crystal
from libtbx.utils import detect_binary_file

def extract_from(file_name=None, file=None, monitor_initial=None):
  assert [file_name, file].count(None) == 1
  if (file is None):
    file = open(file_name)
  lines = file.readlines()
  file.close()
  detect_binary = detect_binary_file(monitor_initial=monitor_initial)
  unit_cell = None
  space_group_symbol = None
  for line in lines:
    if (detect_binary is not None):
      is_binary = detect_binary.is_binary_file(block=line)
      if (is_binary is not None):
        if (is_binary): break
        detect_binary = None
    flds = line.split("!",1)[0].split()
    if (len(flds) > 0):
      keyword = flds[0].upper()
      if (keyword == "CELL"):
        assert len(flds) > 1
        unit_cell = " ".join(flds[1:])
        if (space_group_symbol is not None):
          break
      elif (keyword == "SYMFILE"):
        assert len(flds) > 1
        space_group_symbol = flds[1].replace("\\","/").split("/")[-1]
        if (space_group_symbol.lower().endswith(".sym")):
          space_group_symbol = space_group_symbol[:-4]
        if (unit_cell is not None):
          break
  assert [unit_cell, space_group_symbol].count(None) < 2
  return crystal.symmetry(
    unit_cell=unit_cell,
    space_group_symbol=space_group_symbol)


 *******************************************************************************


 *******************************************************************************
iotbx/solve/fpfm_reader.py
from __future__ import absolute_import, division, print_function
from cctbx import miller
from cctbx import crystal
from cctbx.array_family import flex
from six.moves import range

class reader(object):

  def __init__(self, file_name=None, file_object=None, max_header_lines=30):
    assert [file_name, file_object].count(None) == 1
    if (file_object is None):
      file_object = open(file_name)
    self.file_object = file_object
    line = self.file_object.readline()
    n_data_columns = int(line)
    assert n_data_columns == 4, "Exactly 4 data columns expected."
    self.file_object.readline() # ignore the FORTRAN format line
    label = None
    for sign in ("+", "-"):
      flds = self.file_object.readline().split()
      assert flds[0] == "F"+sign, "F"+sign+" header line expected."
      if (label is None):
        label = flds[-1]
      else:
        assert flds[-1] == label, "Inconsistent wavelength label."
      flds = self.file_object.readline().split()
      assert flds[:3] == ("sig of F"+sign).split(), \
        "sig of F"+sign+" header line expected."
      assert flds[-1] == label, "Inconsistent wavelength label."
    self._indices = flex.miller_index()
    self._data = flex.double()
    self._sigmas = flex.double()
    self.n_lines = 6
    for raw_line in self.file_object:
      self.n_lines += 1
      try:
        h = [int(raw_line[1+i*4:1+i*4+4]) for i in range(3)]
        d = [float(raw_line[23+i*10:23+i*10+10]) for i in range(4)]
      except Exception as e:
        raise RuntimeError("Line %d: %s" % (self.n_lines, str(e)))
      for i in range(2):
        assert (d[2*i] < 0) == (d[2*i+1] < 0), \
          "Line %d: Inconsistent observation and sigma." % self.n_lines
      if (d[0] >= 0):
        self._indices.append(h)
        self._data.append(d[0])
        self._sigmas.append(d[1])
      if (d[2] >= 0):
        self._indices.append([-e for e in h])
        self._data.append(d[2])
        self._sigmas.append(d[3])

  def __del__(self):
    self.file_object.close()

  def indices(self):
    return self._indices

  def data(self):
    return self._data

  def sigmas(self):
    return self._sigmas

  def as_miller_arrays(self,
        crystal_symmetry=None,
        force_symmetry=False,
        merge_equivalents=True,
        base_array_info=None,
        anomalous=None):
    if (crystal_symmetry is None):
      crystal_symmetry = crystal.symmetry()
    if (base_array_info is None):
      base_array_info = miller.array_info(source_type="solve_fpfm")
    miller_set = miller.set(
      crystal_symmetry=crystal_symmetry,
      indices=self.indices(),
      anomalous_flag=True)
    return [miller.array(
      miller_set=miller_set,
      data=self.data(),
      sigmas=self.sigmas())
      .set_info(base_array_info.customized_copy(
        labels=["fpfm", "sigma_fpfm"]))
      .set_observation_type_xray_amplitude()]


 *******************************************************************************
