

 *******************************************************************************
scitbx/tests/__init__.py
"""
tests/__init__
"""

from __future__ import division


 *******************************************************************************


 *******************************************************************************
scitbx/tests/differential_evolution.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
import random
import scitbx.differential_evolution
from six.moves import zip

class test_rosenbrock_function(object):
  def __init__(self, dim=5):
    self.x = None
    self.n = 2*dim
    self.dim = dim
    self.domain = [ (1,3) ]*self.n
    self.optimizer = scitbx.differential_evolution.differential_evolution_optimizer(self,population_size=min(self.n*10,40),n_cross=self.n,cr=0.9, eps=1e-8, show_progress=True)
    print(list(self.x))
    for x in self.x:
      assert abs(x-1.0)<1e-2


  def target(self, vector):
    tmp = vector.deep_copy()
    x_vec = vector[0:self.dim]
    y_vec = vector[self.dim:]
    result=0
    for x,y in zip(x_vec,y_vec):
      result+=100.0*((y-x*x)**2.0) + (1-x)**2.0
    #print list(x_vec), list(y_vec), result
    return result

  def print_status(self, mins,means,vector,txt):
    print(txt,mins, means, list(vector))


def run():
  random.seed(0)
  flex.set_random_seed(0)
  test_rosenbrock_function(1)
  print("OK")


if __name__ == "__main__":
  run()


 *******************************************************************************


 *******************************************************************************
scitbx/tests/direct_search_simulated_annealing.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
import random
import scitbx.direct_search_simulated_annealing
from six.moves import range
from six.moves import zip

class test_rosenbrock_function(object):
  def __init__(self, dim=4):
    self.n = dim*2
    self.dim = dim
    self.x = flex.double( self.n, 2.0 )

    self.starting_simplex=[]
    for ii in range(self.n+1):
      self.starting_simplex.append(flex.random_double(self.n) + self.x)

    self.optimizer = scitbx.direct_search_simulated_annealing.dssa(
                          dimension=self.n,
                          matrix = self.starting_simplex,
                          evaluator = self,
                          tolerance=1e-8,
                          further_opt=True,
                          coolfactor=0.6)
    self.x = self.optimizer.get_solution()
  #  m = self.optimizer.get_candi()
  #  for mm in m:
  #    print list(mm)
    for x in self.x:
      assert abs(x-1.0)<1e-2


  def target(self, vector):
    x_vec = vector[0:self.dim]
    y_vec = vector[self.dim:]
    result=0
    for x,y in zip(x_vec,y_vec):
      result+=100.0*((y-x*x)**2.0) + (1-x)**2.0
    return result

def run():
  random.seed(0)
  flex.set_random_seed(0)
  test_rosenbrock_function(3)
  random.seed(0)
  flex.set_random_seed(0)
  test_rosenbrock_function(4)

if __name__ == "__main__":
  run()


 *******************************************************************************


 *******************************************************************************
scitbx/tests/golden_section_search.py
from __future__ import absolute_import, division, print_function
import scitbx.golden_section_search

def function(x):
  y = (x-3.5)**2.0
  return y

def tst_it():
  opti = scitbx.golden_section_search.gss(function,-10,10)
  assert abs(opti-3.5)<1e-4

if __name__ == "__main__":
  tst_it()


 *******************************************************************************


 *******************************************************************************
scitbx/tests/simplex.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
from libtbx.test_utils import approx_equal
import scitbx.simplex
from six.moves import range
from six.moves import zip

class test_function(object):
  def __init__(self,n):
    self.n = n
    self.starting_simplex=[]
    for ii in range(self.n+1):
      self.starting_simplex.append(flex.random_double(self.n))
    self.optimizer = scitbx.simplex.simplex_opt( dimension=self.n,
                                  matrix  = self.starting_simplex,
                                  evaluator = self,
                                  tolerance=1e-10)
    self.x = self.optimizer.get_solution()
    for ii in range(self.n):
      assert approx_equal(self.x[ii],ii+1,1e-5)

  def target(self, vector):
    result = 0.0
    for ii in range(self.n):
      result += (vector[ii]-ii-1)**2.0
    result +=1.0
    return result

class test_rosenbrock_function(object):
  def __init__(self, dim=2):
    self.dim = dim
    self.n = dim * 2
    self.starting_simplex=[]
    self.x = flex.double(self.n, 2)
    for ii in range(self.n+1):
      self.starting_simplex.append(flex.random_double(self.n)+ self.x)
    self.optimizer = scitbx.simplex.simplex_opt( dimension=self.n,
                                  matrix  = self.starting_simplex,
                                  evaluator = self,
                                  tolerance=1e-10)
    self.x = self.optimizer.get_solution()
    assert (abs(self.x[0]-1.0) < 1e-6)
    assert (abs(self.x[1]-1.0) < 1e-6)

  def target(self, vector):
    result = 0
    for x, y in zip( vector[0:self.dim], vector[self.dim:]):
      result = (1-x)**2.0 + 100.0*(y-x*x)**2.0
    #print(x, y, result)
    return result

def run():
  flex.set_random_seed(0)
  for ii in range(10):
    test_rosenbrock_function(1)
    test_function(1)
    test_function(2)
    test_function(3)
    test_function(4)

if __name__ == "__main__":
  run()


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_basic.py
"""
tests.tst_basic
"""

from __future__ import absolute_import, division, print_function
import sys
from libtbx import easy_run

def run(args):
  ret = easy_run.call("scitbx.unicode_examples")
  ret += easy_run.call("scitbx.show_sizes")
  ret += easy_run.call("scitbx.show_exp_times 100")
  ret += easy_run.call("echo OK")
  return ret

if __name__ == "__main__":
  import sys
  run(sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_cubicle_neighbors.py
from __future__ import absolute_import, division, print_function
from six.moves import zip
def exercise_cubicles_max_memory():
  import scitbx.cubicle_neighbors as cn
  assert cn.cubicles_max_memory_allocation_get() != 0
  mm = cn.cubicles_max_memory_allocation_get()
  cn.cubicles_max_memory_allocation_set(number_of_bytes=10)
  assert cn.cubicles_max_memory_allocation_get() == 10
  cn.cubicles_max_memory_allocation_set(number_of_bytes=0)
  assert cn.cubicles_max_memory_allocation_get() == 0
  cn.cubicles_max_memory_allocation_set(number_of_bytes=mm)
  assert cn.cubicles_max_memory_allocation_get() == mm
  # more tests in cctbx/crystal/tst_ext.py, exercise_cubicles_max_memory()

def neighbors_simple(main_sites_cart, other_sites_cart, distance_cutoff_sq):
  from scitbx.matrix import col
  result = {}
  for j,sj in enumerate(other_sites_cart):
    vj = col(sj)
    for i,si in enumerate(main_sites_cart):
      vi = col(si)
      if ((vj-vi).length_sq() <= distance_cutoff_sq):
        result.setdefault(j, []).append(i)
  return result

def run(args):
  assert len(args) == 0
  exercise_cubicles_max_memory()
  from scitbx.cubicle_neighbors import cubicle_neighbors
  from scitbx.array_family import flex
  main_sites_cart = flex.vec3_double()
  cn = cubicle_neighbors(main_sites_cart=main_sites_cart, cubicle_edge=5)
  nb = cn.neighbors_of(other_sites_cart=main_sites_cart, distance_cutoff_sq=1)
  assert nb.size() == 0
  for xyz in [(0,0,0), (0.1, 0.2, -0.3)]:
    main_sites_cart = flex.vec3_double([xyz])
    cn = cubicle_neighbors(main_sites_cart=main_sites_cart, cubicle_edge=5)
    nb = cn.neighbors_of(other_sites_cart=main_sites_cart, distance_cutoff_sq=1)
    assert nb.size() == 1
    assert nb.keys() == [0]
    assert list(nb[0]) == [0]
    nb = cn.neighbors_of(
      other_sites_cart=flex.vec3_double([(2,2,2)]), distance_cutoff_sq=1)
    assert nb.size() == 0
    nb = cn.neighbors_of(
      other_sites_cart=flex.vec3_double([(2,2,2)]), distance_cutoff_sq=25)
    assert nb.size() == 1
  mt = flex.mersenne_twister(seed=0)
  for nm in [3,5,8]:
    for no in [1,7,9]:
      main_sites_cart = flex.vec3_double(list(zip(
        mt.random_double(size=nm)*2-1,
        mt.random_double(size=nm)*2-1,
        mt.random_double(size=nm)*2-1)))
      other_sites_cart = flex.vec3_double(list(zip(
        mt.random_double(size=no)*2-1,
        mt.random_double(size=no)*2-1,
        mt.random_double(size=no)*2-1)))
      for distance_cutoff in [0.5, 1]:
        distance_cutoff_sq = distance_cutoff**2
        cn = cubicle_neighbors(main_sites_cart=main_sites_cart, cubicle_edge=1)
        nb = cn.neighbors_of(
          other_sites_cart=other_sites_cart,
          distance_cutoff_sq=distance_cutoff_sq)
        nb_simple = neighbors_simple(
          main_sites_cart=main_sites_cart,
          other_sites_cart=other_sites_cart,
          distance_cutoff_sq=distance_cutoff_sq)
        assert sorted(nb.keys()) == sorted(nb_simple.keys())
        for j_seq,i_seqs_simple in nb_simple.items():
          i_seqs = nb[j_seq]
          assert sorted(i_seqs) == sorted(i_seqs_simple)
  print("OK")

if (__name__ == "__main__"):
  import sys
  run(args=sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_genetic_algorithm_with_mp.py
# -*- coding: utf-8 -*-

from __future__ import division, print_function

def tst_01():
  '''  Exercise genetic algorithm '''

  from scitbx.genetic_algorithm_with_mp import  genetic_algorithm,\
    example_params, example_new_gene_method, example_mutation_method, \
    example_recombination_method, example_scoring_method,\
    example_genes_are_identical_method

  params = example_params
  new_gene_method = example_new_gene_method
  mutation_method = example_mutation_method
  recombination_method = example_recombination_method
  scoring_method = example_scoring_method
  genes_are_identical_method = example_genes_are_identical_method

  result = genetic_algorithm(
    params = params,
    new_gene_method = new_gene_method,
    mutation_method = mutation_method,
    recombination_method = recombination_method,
    scoring_method = scoring_method,
    genes_are_identical_method = genes_are_identical_method,
   )
  best_gene = result.get_best_gene()
  print (best_gene.score)
  print (list(best_gene.values))
  assert abs(best_gene.score  - 10 ) < 0.1

if __name__ == "__main__":
  tst_01()


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_minimizer_lbfgs_general.py
from __future__ import absolute_import, division, print_function
import platform
import sys
import time
from scitbx.array_family import flex
from libtbx import adopt_init_args
import scitbx.lbfgs
from scitbx import lbfgsb
from scitbx import minimizers
from libtbx.test_utils import approx_equal

class rosenbrock(object):
  def __init__(self, a, b, x,         # lbfgs and lbfgsb minimizer
               bound_flags    = None, # only lbfgsb
               lower_bound    = None, # only lbfgsb
               upper_bound    = None, # only lbfgsb
               initial_values = None  # only lbfgsb
               ):
    adopt_init_args(self, locals())
    assert self.x.size() == 2

  def update(self, x):
    self.x = x
    assert self.x.size() == 2

  def target(self):
    t = (self.a-self.x[0])**2+self.b*(self.x[1]-self.x[0]**2)**2
    return t

  def gradients(self):
    g1 = 2*(self.x[0]-self.a) + 4*self.b*(self.x[0]**3-self.x[0]*self.x[1])
    g2 = 2*self.b*(self.x[1]-self.x[0]**2)
    return flex.double([g1,g2])

  def curvatures(self):
    d1 = 2+4*self.b*(-self.x[1]+3*self.x[0]**2)
    d2 = 2*self.b
    d = flex.double([d1,d2])
    assert d.all_ne(0)
    return 1 / d


def run():
  tolerance = 1.e-16
  if sys.platform == 'win32':
    tolerance = 1.e-9
  elif (sys.platform == 'darwin' or sys.platform.startswith('linux')) \
    and ('arm64' in platform.machine() or 'arch64' in platform.machine()):
      tolerance = 1.e-6

  # Run L-BFGS (no boundaries)
  calculator = rosenbrock(a = 20, b = 10, x = flex.double([0,0]),
    bound_flags  = flex.int(2,2),
    lower_bound  = flex.double([-10000,-10000]),
    upper_bound  = flex.double([10000,10000]),
    initial_values = flex.double([0,0]))
  m_unbound = scitbx.minimizers.lbfgs(
    mode='lbfgs', max_iterations=100, calculator=calculator)
  #print('\tMinimum: ', list(m_unbound.x))
  res = (19.99999855596629, 399.99994289914525)
  assert approx_equal(m_unbound.x[0]-res[0],0, tolerance), (m_unbound.x[0], res[0], m_unbound.x[0]-res[0])
  assert approx_equal(m_unbound.x[1]-res[1],0, tolerance), (m_unbound.x[1], res[1], m_unbound.x[1]-res[1])

  # Run L-BFGS-B with boundaries
  calculator = rosenbrock(a = 20, b = 10, x = flex.double([0,0]),
    bound_flags  = flex.int(2,2),
    lower_bound  = flex.double([-10000,-10000]),
    upper_bound  = flex.double([10000,10000]),
    initial_values = flex.double([0,0]))
  m_bound = scitbx.minimizers.lbfgs(
    mode='lbfgsb', calculator=calculator)
  #print('\tMinimum: ', list(m_bound.x))
  res = (19.999999988074844, 399.99999950735986)
  assert approx_equal(m_bound.x[0]-res[0],0, tolerance), (m_bound.x[0], res[0], m_bound.x[0]-res[0])
  assert approx_equal(m_bound.x[1]-res[1],0, tolerance), (m_bound.x[1], res[1], m_bound.x[1]-res[1])

  # Run L-BFGS (no curvatures)
  calculator = rosenbrock(a = 1, b = 100, x = flex.double([-3,-4]))
  m_unbound = scitbx.minimizers.lbfgs(
    mode='lbfgs', calculator=calculator)
  #print('\tMinimum: ', list(m_unbound.x))
  res = (0.9999998308201578, 0.9999996829964546)
  assert approx_equal(m_unbound.x[0]-res[0],0, tolerance), (m_unbound.x[0], res[0], m_unbound.x[0]-res[0])
  assert approx_equal(m_unbound.x[1]-res[1],0, tolerance), (m_unbound.x[1], res[1], m_unbound.x[1]-res[1])


  # Run L-BFGS (with curvatures)
  calculator = rosenbrock(a = 1, b = 100, x = flex.double([-3,-4]))
  m_unbound2 = scitbx.minimizers.lbfgs(
    mode='lbfgs', calculator=calculator, diag_mode='always')
  #print('\tMinimum: ', list(m_unbound2.x))
  res = (1.0000002135019004, 1.000000406037043)
  assert approx_equal(m_unbound2.x[0]-res[0],0, tolerance), (m_unbound2.x[0], res[0], m_unbound2.x[0]-res[0])
  assert approx_equal(m_unbound2.x[1]-res[1],0, tolerance), (m_unbound2.x[1], res[1], m_unbound2.x[1]-res[1])


if (__name__ == "__main__"):
  t0 = time.time()
  run()
  print("OK. Time: %8.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_r3_utils.py
from __future__ import absolute_import, division, print_function
from libtbx.test_utils import approx_equal

def exercise_clash_detector_simple():
  from scitbx.array_family import flex
  sites_cart = flex.vec3_double([
    (1,2.0,3),
    (1,3.3,3)])
  from scitbx.r3_utils import clash_detector_simple
  cd = clash_detector_simple(n_sites=2, threshold=1.2)
  assert approx_equal(cd.threshold_sq, 1.2**2)
  assert not cd.has_clash(sites_cart=sites_cart)
  sites_cart[1] = (1,3.1,3)
  assert cd.has_clash(sites_cart=sites_cart)
  cd.add_exclusion(i=0, j=1)
  assert not cd.has_clash(sites_cart=sites_cart)

def run(args):
  assert len(args) == 0
  exercise_clash_detector_simple()
  print("OK")

if (__name__ == "__main__"):
  import sys
  run(args=sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_regular_grid_on_unit_sphere.py
from __future__ import absolute_import, division, print_function
from scitbx import regular_grid_on_unit_sphere

def run():
  r = regular_grid_on_unit_sphere.rosca(m=9, hemisphere=False)
  assert r.size() == 649
  r = regular_grid_on_unit_sphere.rosca(m=9, hemisphere=True)
  assert r.size() == 361

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
scitbx/tests/tst_smoothing.py
from __future__ import absolute_import, division, print_function
from scitbx.stdlib import math, random
from libtbx.utils import frange
from libtbx.test_utils import approx_equal, is_below_limit
from scitbx.array_family import flex
import scitbx.math.curve_fitting
import scitbx.random
from scitbx.smoothing import savitzky_golay_filter, savitzky_golay_coefficients
from scitbx.smoothing import convolve
from six.moves import range

if (1): # fixed random seed to avoid rare failures
  random.seed(0)
  flex.set_random_seed(0)
  scitbx.random.set_random_seed(0)


def exercise_convolve():
  data = flex.double(20, 0)
  for i in range(5,10): data[i] = 1
  response = flex.double([1,1,1,0,0,0,1,1])
  response = flex.double([1,1,1,1,1])
  convolved = convolve(data, response)
  assert approx_equal(convolve(data, response, mode="same"),
                      [0,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0,0,0,0,0])

  try:
    import numpy
  except ImportError:
    print("Skipping numpy compatibility...")
    return

  # convolution of two rectangles gives a triangle
  for data_size in (20,21):
    data = flex.double(data_size, 0)
    for i in range(5,10): data[i] = 1
    for mode in ("full", "same", "valid"):
      for response_size in (5,6):
        response = flex.double([1]*response_size)
        assert approx_equal(
          convolve(data, response, mode=mode),
          numpy.convolve(data, response, mode=mode))


def exercise_savitzky_golay_coefficients():
  coeffs = savitzky_golay_coefficients(5, 5, 4, wraparound=False)
  assert approx_equal(
    coeffs,
    (0.042, -0.105, -0.023, 0.140, 0.280, 0.333, 0.280, 0.140, -0.023, -0.105, 0.042), eps=1e-3)

  coeffs = savitzky_golay_coefficients(4, 4, 4, wraparound=False)
  assert approx_equal(
    coeffs,
    (0.035, -0.128, 0.070, 0.315, 0.417, 0.315, 0.070, -0.128, 0.035), eps=1e-3)

  coeffs = savitzky_golay_coefficients(4, 0, 2, wraparound=False)
  assert approx_equal(
    coeffs,
    (0.086, -0.143, -0.086, 0.257, 0.886), eps=1e-3)


def exercise_savitzky_golay_smoothing():

  plot = False

  def rms(flex_double):
    return math.sqrt(flex.mean(flex.pow2(flex_double)))

  for sigma_frac in (0.005, 0.01, 0.05, 0.1):
    mean = random.randint(-5,5)
    scale = flex.random_double() * 10
    sigma = flex.random_double() * 5 + 1
    gaussian = scitbx.math.curve_fitting.gaussian(scale, mean, sigma)

    x = flex.double(frange(-20,20,0.1))
    y = gaussian(x)
    rand_norm = scitbx.random.normal_distribution(
      mean=0, sigma=sigma_frac*flex.max_absolute(y))
    g = scitbx.random.variate(rand_norm)
    noise = g(y.size())
    y_noisy = y + noise
    # according to numerical recipes the best results are obtained where the
    # full window width is between 1 and 2 times the number of points at fwhm
    # for polynomials of degree 4
    half_window = int(round(0.5 * 2.355 * sigma * 10))
    y_filtered = savitzky_golay_filter(x, y_noisy, half_window=half_window, degree=4)[1]
    extracted_noise = y_noisy - y_filtered
    rms_noise = rms(noise)
    rms_extracted_noise = rms(extracted_noise)

    assert is_below_limit(
      value=abs(rand_norm.sigma - rms_noise)/rand_norm.sigma,
      limit=0.15)
    assert is_below_limit(
      value=abs(rand_norm.sigma - rms_extracted_noise)/rand_norm.sigma,
      limit=0.15)

    diff = y_filtered - y
    assert is_below_limit(
      value=(rms(diff)/ rand_norm.sigma),
      limit=0.4)

    if plot:
      from matplotlib import pyplot
      pyplot.plot(x, y)
      pyplot.plot(x, noise)
      pyplot.scatter(x, y_noisy, marker="x")
      pyplot.plot(x, y_filtered)
      pyplot.show()
      pyplot.plot(x, extracted_noise)
      pyplot.plot(x, noise)
      pyplot.show()

  return


if __name__ == '__main__':
  exercise_convolve()
  exercise_savitzky_golay_smoothing()
  exercise_savitzky_golay_coefficients()
  print("OK")


 *******************************************************************************
