

 *******************************************************************************
mmtbx/conformation_dependent_library/cdl_setup.py
from __future__ import absolute_import, division, print_function
from mmtbx.conformation_dependent_library.bond_angle_registry import \
  bond_angle_registry

not_before_pro_groups = {
  "NonPGIV_nonxpro" : ["ALA",
                       "ARG",
                       "ASN",
                       "ASP",
                       "CYS",
                       "GLN",
                       "GLU",
                       "HIS",
                       "LEU",
                       "LYS",
                       "MET",
                       "PHE",
                       "SER",
                       "THR",
                       "TRP",
                       "TYR",
                       ],
  "IleVal_nonxpro" : ["ILE",
                      "VAL",
                      ],
  "Gly_nonxpro" : ["GLY"],
  "Pro_nonxpro" : ["PRO"],
}
before_pro_groups = {
  "NonPGIV_xpro" : not_before_pro_groups["NonPGIV_nonxpro"],
  "IleVal_xpro"  : not_before_pro_groups["IleVal_nonxpro"],
  "Gly_xpro"     : not_before_pro_groups["Gly_nonxpro"],
  "Pro_xpro"     : not_before_pro_groups["Pro_nonxpro"],
}
columns = [
  "",
  "",
  "mCNA", # C(-1) - N(0)  - Ca(0)
  "sCNA",
  "mNAB", # NAB   N(0)  - Ca(0) - Cb(0)
  "sNAB",
  "mNAC", # NAC   N(0)  - Ca(0) - C(0)
  "sNAC",
  "mBAC", # BAC   Cb(0) - Ca(0) - C(0)
  "sBAC",
  "mACO", # ACO   Ca(0) - C(0)  - O(0)
  "sACO",
  "mACN", # ACN   Ca(0) - C(0)  - N(+1)
  "sACN",
  "mOCN", # OCN   O(0)  - C(0)  - N(+1)
  "sOCN",
  "mCN",  # CN    C(-1) - N(0)
  "sCN",
  "mNA",  # NA    N(0)  - Ca(0)
  "sNA",
  "mAB",  # AB    Ca(0) - Cb(0)
  "sAB",
  "mAC",  # AC    Ca(0) - C(0)
  "sAC",
  "mCO",  # CO    C(0)  - O(0)
  "sCO",
  # needed for cis_127
  'mCND', # C(-1) - N(0) - Cd(0)
  'sCND',
  'mAND', # Ca(0) - N(0) - Cd(0)
  'sAND',
  'mNDG', # N(0) - Cd(0) - Cg(0)
  'sNDG',
  'mABG', # Ca(0) - Cb(0) - Cg(0)
  'sABG',
  'mBGD', # Cb(0) - Cg(0) - Cd(0)
  'sBGD',
  'mBG',
  'sBG',
  'mGD',
  'sGD',
  'mND',
  'sND',
  ]
headers = [
  "statistical type",       # 0
  "number",                 # 1
  "C(-1) - N(0)  - Ca(0)",  # 2
  "",
  "N(0)  - Ca(0) - Cb(0)",  # 4
  "",
  "N(0)  - Ca(0) - C(0)",   # 6
  "",
  "Cb(0) - Ca(0) - C(0)",   # 8
  "",
  "Ca(0) - C(0)  - O(0)",
  "",
  "Ca(0) - C(0)  - N(+1)",
  "",
  "O(0)  - C(0)  - N(+1)",
  "",
  "C(-1) - N(0)",
  "",
  "N(0)  - Ca(0)",
  "",
  "Ca(0) - Cb(0)",
  "",
  "Ca(0) - C(0)",
  "",
  "C(0)  - O(0)",
  "",
  ]

def setup_restraints(geometry, # restraints_manager
                     verbose=False,
                     ):
  ba_registry = bond_angle_registry()
  for angle in geometry.angle_proxies:
    ba_registry[angle.i_seqs]=angle
  return ba_registry



 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/cdl_svl_database.py
from __future__ import division
cdl_svl_database = {
  "trans/trans" : {
    "Gly_nonxpro" : ['?', -1, 121.4, 1.7, 113.3, 2.3, 120.6, 1.6, 116.7, 1.9, 122.7, 1.3],
    "Gly_xpro" : ['?', -1, 121.4, 1.7, 113.1, 2.3, 121.2, 1.3, 116.7, 1.5, 122.0, 0.9],
    "IleVal_nonxpro" : ['?', -1, 121.9, 1.7, 111.3, 1.5, 109.4, 2.1, 111.2, 1.7, 120.7, 1.2, 116.6, 1.4, 122.7, 1.1],
    "IleVal_xpro" : ['?', -1, 122.1, 1.9, 111.3, 1.5, 108.7, 2.0, 110.9, 1.8, 120.0, 1.2, 118.6, 1.5, 121.3, 1.1],
    "NonPGIV_nonxpro" : ['?', -1, 121.5, 1.8, 110.6, 1.6, 110.8, 2.2, 110.4, 1.9, 120.6, 1.3, 116.7, 1.6, 122.7, 1.2],
    "NonPGIV_xpro" : ['?', -1, 121.9, 2.0, 110.5, 1.8, 109.9, 2.2, 110.2, 2.1, 120.2, 1.3, 118.3, 1.6, 121.5, 1.1],
    "Pro_nonxpro" : ['?', -1, 119.7, 1.4, 103.2, 1.0, 112.5, 2.0, 111.5, 1.5, 120.4, 1.6, 116.6, 1.9, 122.8, 1.2],
    "Pro_xpro" : ['?', -1, 119.7, 1.4, 103.2, 1.0, 111.1, 1.7, 110.6, 1.5, 120.5, 1.0, 117.2, 1.2, 122.1, 1.3],
  },
  "trans/cis" : {
    "Gly_nonxpro" : ['?', -1, 121.4, 1.7, 113.1, 2.3, 119.8, 1.1, 118.4, 1.4, 121.8, 1.1],
    "Gly_xpro" : ['?', -1, 121.4, 1.7, 113.1, 2.3, 120.3, 1.6, 117.6, 1.1, 122.0, 1.0],
    "IleVal_nonxpro" : ['?', -1, 121.9, 1.4, 111.3, 1.5, 109.4, 2.1, 110.2, 1.7, 119.2, 1.2, 119.8, 1.3, 121.0, 1.0],
    "IleVal_xpro" : ['?', -1, 121.9, 1.4, 111.3, 1.5, 109.4, 2.1, 110.2, 1.7, 119.7, 1.1, 118.5, 1.3, 121.7, 1.2],
    "NonPGIV_nonxpro" : ['?', -1, 121.6, 1.8, 110.3, 1.6, 108.6, 2.4, 110.2, 1.5, 119.2, 1.2, 119.8, 1.3, 121.0, 1.0],
    "NonPGIV_xpro" : ['?', -1, 122.0, 1.5, 110.3, 1.6, 109.3, 2.1, 109.9, 1.6, 119.7, 1.1, 118.5, 1.3, 121.7, 1.2],
    "Pro_nonxpro" : ['?', -1, 119.7, 1.4, 103.2, 1.0, 110.5, 2.0, 110.1, 2.1, 119.1, 1.0, 119.7, 1.2, 121.2, 1.4],
    "Pro_xpro" : ['?', -1, 119.7, 1.4, 103.2, 1.0, 110.5, 2.0, 111.2, 1.0, 119.9, 1.0, 117.9, 0.8, 122.2, 0.8],
  },
  "cis/trans" : {
    "Gly_nonxpro" : ['?', -1, 125.6, 2.0, 113.1, 2.3, 120.6, 1.6, 116.7, 1.9, 122.7, 1.3],
    "Gly_xpro" : ['?', -1, 125.6, 2.0, 113.1, 2.3, 121.2, 1.3, 116.7, 1.5, 122.0, 0.9],
    "IleVal_nonxpro" : ['?', -1, 126.7, 1.7, 111.3, 1.5, 109.4, 2.1, 108.4, 1.3, 120.6, 1.3, 116.7, 1.6, 122.7, 1.2],
    "IleVal_xpro" : ['?', -1, 126.7, 1.7, 111.3, 1.5, 109.4, 2.1, 108.4, 1.3, 120.2, 1.3, 118.3, 1.6, 121.4, 1.1],
    "NonPGIV_nonxpro" : ['?', -1, 126.7, 1.7, 110.6, 2.0, 109.6, 3.1, 109.4, 2.2, 120.6, 1.3, 116.7, 1.6, 122.7, 1.2],
    "NonPGIV_xpro" : ['?', -1, 126.7, 1.7, 110.6, 2.0, 109.6, 3.1, 109.4, 2.2, 120.2, 1.3, 118.3, 1.6, 121.4, 1.1],
    "Pro_nonxpro" : ['?', -1, 127.3, 1.8, 102.7, 1.0, 113.6, 2.5, 110.0, 1.5, 120.4, 1.4, 116.6, 1.6, 123.0, 1.0],
    "Pro_xpro" : ['?', -1, 127.3, 1.8, 102.7, 1.0, 111.1, 1.7, 110.6, 1.5, 120.5, 1.0, 117.2, 1.2, 122.4, 1.1],
  },
  "cis/cis" : {
    "Gly_nonxpro" : ['?', -1, 125.6, 2.0, 113.1, 2.3, 119.8, 1.1, 118.4, 1.4, 121.8, 1.1],
    "Gly_xpro" : ['?', -1, 125.6, 2.0, 113.1, 2.3, 120.3, 1.6, 117.6, 1.1, 122.0, 1.0],
    "IleVal_nonxpro" : ['?', -1, 126.7, 1.7, 111.3, 1.5, 109.4, 2.1, 108.4, 1.3, 119.2, 1.2, 119.8, 1.3, 121.0, 1.0],
    "IleVal_xpro" : ['?', -1, 126.7, 1.7, 111.3, 1.5, 109.4, 2.1, 108.4, 1.3, 119.7, 1.1, 118.5, 1.3, 121.7, 1.2],
    "NonPGIV_nonxpro" : ['?', -1, 126.7, 1.7, 110.6, 2.0, 109.6, 3.1, 109.4, 2.2, 119.2, 1.2, 119.8, 1.3, 121.0, 1.0],
    "NonPGIV_xpro" : ['?', -1, 126.7, 1.7, 110.6, 2.0, 109.6, 3.1, 109.4, 2.2, 119.7, 1.1, 118.5, 1.3, 121.7, 1.2],
    "Pro_nonxpro" : ['?', -1, 127.3, 1.8, 102.7, 1.0, 110.5, 2.0, 110.1, 2.1, 119.1, 1.0, 119.7, 1.2, 121.2, 1.4],
    "Pro_xpro" : ['?', -1, 127.3, 1.8, 102.7, 1.0, 110.5, 2.0, 111.2, 1.0, 119.9, 1.0, 117.9, 0.8, 122.2, 0.8],
  },
}

if __name__=='__main__':
  print(cdl_svl_database.keys())
  print(cdl_svl_database['cis/trans'])
  print(cdl_svl_database['cis/trans']['Pro_xpro'])
  assert cdl_svl_database['cis/trans']['Pro_xpro'] == ['?', -1, 127.3, 1.8, 102.7, 1.0, 111.1, 1.7, 110.6, 1.5, 120.5, 1.0, 117.2, 1.2, 122.4, 1.1]


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/cdl_utils.py
from __future__ import absolute_import, division, print_function

from scitbx.math import dihedral_angle
from mmtbx.conformation_dependent_library.cdl_setup import \
  before_pro_groups, not_before_pro_groups
from six.moves import range

def distance2(a,b):
  d2 = 0
  for i in range(3):
    d2 += (a.xyz[i]-b.xyz[i])**2
  return d2

def get_c_ca_n(atom_group,
               atom_name_list=[" C  ", " CA ", " N  "],
               return_subset=False):
  assert atom_group
  tmp = []
  outl = []
  for name in atom_name_list:
    atom = atom_group.find_atom_by(name=name)
    if atom:
      tmp.append(atom)
    else:
      outl.append('    missing atom "%s %s %s"' % (
        name,
        atom_group.resname,
        atom_group.resseq,
      ))
      if return_subset:
        tmp.append(None)
      else:
        tmp = None
        break
  return tmp, outl

def round_to_int(d, n=10, wrap=True):
  t = int(round((float(d))/int(n)))*int(n)
  if wrap:
    if t==180: return -180
  return t

def round_to_ten(d):
  return round_to_int(d, 10)

def get_children():
  from iotbx.pdb.modified_aa_names import lookup as parent_child
  rc={}
  for c, p in parent_child.items():
    rc.setdefault(p,[])
    rc[p].append(c)
  return rc

children = get_children()

def is_child_of_PRO(resname):
  return resname in children['P']

def get_parent(resname):
  from iotbx.pdb.modified_aa_names import lookup as parent_child
  rc=parent_child.get(resname, '???')
  from iotbx.pdb.amino_acid_codes import three_letter_given_one_letter
  rc = three_letter_given_one_letter.get(rc, '???')
  return rc

def get_res_type_group(resname1, resname2):
  resname1=resname1.strip()
  resname2=resname2.strip()
  # check for prePro
  if resname2=="PRO" or is_child_of_PRO(resname2):
    lookup = before_pro_groups
  else:
    lookup = not_before_pro_groups
  # find four other sub-classes
  for key in lookup:
    if resname1 in lookup[key] or get_parent(resname1) in lookup[key]:
      return key
  return None

def get_omega_value(residue1, residue2, verbose=False):
  ccn1, outl1 = get_c_ca_n(residue1, return_subset=True)
  ccn2, outl2 = get_c_ca_n(residue2, return_subset=True)
  ca1 = ccn1[1]
  n = ccn1[2]
  c = ccn2[0]
  ca2 = ccn2[1]
  omega_atoms = [ca1, n, c, ca2]
  if verbose:
    for atom in omega_atoms: print(atom.quote())
  if None in omega_atoms: return None
  omega = dihedral_angle(sites=[atom.xyz for atom in omega_atoms], deg=True)
  return omega

def get_phi_psi_atoms(residue1, residue2, residue3, verbose=False):
  backbone_i_minus_1, outl1 = get_c_ca_n(residue1, return_subset=True)
  backbone_i, outl2         = get_c_ca_n(residue2, return_subset=True)
  backbone_i_plus_1, outl3  = get_c_ca_n(residue3, return_subset=True)
  phi_atoms = [
    backbone_i_minus_1[0],
    backbone_i[2],
    backbone_i[1],
    backbone_i[0],
    ]
  psi_atoms = [
    backbone_i[2],
    backbone_i[1],
    backbone_i[0],
    backbone_i_plus_1[2],
    ]
  atoms = [phi_atoms, psi_atoms]
  if len(list(filter(None, atoms[0])))!=4: return None
  if len(list(filter(None, atoms[1])))!=4: return None
  if verbose:
    print(atoms)
    for group in atoms:
      for atom in group: print(atom.quote())
  return atoms

def get_phi_psi_angles(residues, verbose=False):
  assert len(residues)>=3
  dihedrals = []
  for i in range(len(residues)):
    if i<2: continue
    atoms = get_phi_psi_atoms(*tuple(residues[i-2:i+1]), verbose=verbose)
    if atoms is None: return None
    for dihedral in atoms:
      phi_or_psi=dihedral_angle(sites=[atom.xyz for atom in dihedral], deg=True)
      dihedrals.append(phi_or_psi)
  if verbose:
    print('dihedrals')
    for phi_or_psi in dihedrals:
      print('phi_or_psi',phi_or_psi)
  return dihedrals

def get_ca_dihedrals(residues, verbose=False):
  assert len(residues)>=4
  dihedrals = []
  atoms = []
  for residue in residues:
    atoms.append(residue.find_atom_by(name=' CA '))
    if len(atoms)==4:
      if verbose:
        print('CAs')
        for atom in atoms: print(atom.quote())
      dihedrals.append(dihedral_angle(sites=[atom.xyz for atom in atoms], deg=True))
      del atoms[0]
  return dihedrals



 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/check_cdl_database.py
from __future__ import absolute_import, division, print_function
import os, sys
from mmtbx.conformation_dependent_library import cdl_database
from mmtbx.conformation_dependent_library import cdl_setup
from six.moves import range

errors = {'Pro_nonxpro': [
  (-90, 60),
  (-90, 70),
  (-90, 80),
  (-80, 60),
  (-80, 70),
  (-80, 80),
  ],
  }

print_to_disk = " -hdevice JPEG -hardcopy"

def generate_restraints():
  for res_group_type in cdl_database:
    print(res_group_type, len(cdl_database[res_group_type]))
    e = errors.get(res_group_type, [])
    cd = cdl_database[res_group_type]
    for phi in range(-180,180,10):
      for psi in range(-180,180,10):
        #if (phi, psi) in e: continue
        restraints = cd.get((phi, psi), None)
        if restraints is None: continue
        yield res_group_type, phi, psi, restraints

def find_esd_extrema():
  bond_esds = []
  angle_esds = []
  for res_group_type, phi, psi, restraints in generate_restraints():
    for i in range(2,len(restraints),2):
      if restraints[i]==-1: continue # GLY has no CB
      print(res_group_type, phi, psi, i, restraints[i],restraints[i+1])
      if restraints[i]>2: # angles
        angle_esds.append(restraints[i+1])
        print('angle',min(angle_esds), max(angle_esds))
        assert restraints[i+1]<5, "angle esd too large"
        assert restraints[i+1]>.9, "angle esd too small"
      else:
        bond_esds.append(restraints[i+1])
        print('bond',min(bond_esds),max(bond_esds))
        assert restraints[i+1]<0.05, "bond esd too large"
        assert restraints[i+1]>0.001, "bond esd too small"

def analysis_esd(number_of_observations_max=20,
                 maximum_z_score=3,
                 minimum_z_score=0.333,
                 ):

  from elbow.utilities import rmsd_utils

  outl = ""
  py = ""

  defaults = {}
  data = {}
  for res_group_type, phi, psi, restraints in generate_restraints():
    defaults.setdefault(res_group_type, None)
    if restraints[0]=='I':
      defaults[res_group_type]=restraints
      continue

  for res_group_type, phi, psi, restraints in generate_restraints():
    if restraints[0]=='I': continue
    print(res_group_type, phi, psi, restraints)
    data.setdefault(res_group_type, {})
    data[res_group_type].setdefault(restraints[1], {})
    for i in range(2, len(restraints), 2):
      if restraints[i]==-1: continue # GLY has no CB
      print(res_group_type, phi, psi, i, restraints[i],restraints[i+1])
      if restraints[i]>2: # angles
        ptr = 'angles'
      else:
        ptr = 'bonds'
      data[res_group_type][restraints[1]].setdefault(ptr,[])
      d = defaults[res_group_type][i+1]
      z = restraints[i+1]/d
      print(i,z,d,restraints[i+1])
      if z>=maximum_z_score or z<=minimum_z_score:
        for j in range(i,i+2):
          py += "%s[(%d, %d)][%d]=%f # %s\n" % (
            res_group_type,
            phi,
            psi,
            j,
            defaults[res_group_type][j],
            cdl_setup.columns[j],
            )
        outl += " %-18s %4d %4d %2d %2d %-4s %9.4f %7.4f %9.4f %7.4f %5.2f\n" % (
          res_group_type,
          phi,
          psi,
          i,
          restraints[1],
          cdl_setup.columns[i],
          restraints[i],
          restraints[i+1],
          defaults[res_group_type][i],
          defaults[res_group_type][i+1],
          z,
          )
      data[res_group_type][restraints[1]][ptr].append(z)
    if 'Pro_nonxpro' in data:
      if 3 in data['Pro_nonxpro']:
        print('3'*80)
        print(data['Pro_nonxpro'][3])
        #assert 0
    #if len(data)>1: break
  print(data)
  print(outl)
  print(py)
  if 0: xmgace_data(data)

def xmgace_data(data):
  for res_group_type in data:
    for i in range(1,20):
      print(i)
      outl = ""
      d = data[res_group_type].get(i, None)
      if d is None: continue
      print(d)
      for ptr in ['bonds', 'angles']:
        h = rmsd_utils.histogram(d[ptr])
        print(h)
        outl += "@type xy\n"
        for z,c in sorted(h.items()):
          print(z,c)
          outl += " %f %f\n" % (z,c)
        outl += "&\n"
      print(outl)
      df = "%s_%02d.dat" % (res_group_type, i)
      f=open(df, "w")
      f.write(outl)
      f.close()
      cmd  = 'xmgrace -geometry 1100x900 -param z.par %s' % df
      cmd += """ -pexec 'title "%s"'""" % res_group_type
      cmd += """ -pexec 'subtitle "%s"'""" % 'Sample size: %d' % i
      os.system(cmd)
      cmd += print_to_disk
      print(cmd)
      os.system(cmd)
      if os.path.exists("Untitled.jpg"):
        os.rename("Untitled.jpg", "%s" % df.replace(".dat",".jpg"))

def run():
  if 0: find_esd_extrema()
  if 1: analysis_esd()

if __name__=="__main__":
  run()#sys.argv[1])


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/density_dependent_restraints.py
from __future__ import absolute_import, division, print_function
import sys

ddr_master_params = '''
ddr
  .style = hidden
  .short_caption = Density dependent restraints
{
  enable = False
    .type = bool
  weighting_factor = 0.5
    .type = float
  cc_minimum = 0.
    .type = float
  map_value_minimum = 0.5
    .type = float
  bond_weighting = True
    .type = bool
  angle_weighting = True
    .type = bool
  trans_peptide = True
    .type = bool
}
'''


def setup_restraints():
  assert 0

def trim_i_seqs(atoms, ddr_i_seqs):
  total_i_seqs = []
  for i_seq in ddr_i_seqs:
    atom = atoms[i_seq]
    if atom.parent().resname in ['HOH']: continue
    total_i_seqs.append(atom.i_seq)
  return total_i_seqs

def expand_i_seqs_to_residue(atoms, ddr_i_seqs):
  total_i_seqs = []
  for i_seq in ddr_i_seqs:
    atom = atoms[i_seq]
    for at in atom.parent().atoms():
      total_i_seqs.append(at.i_seq)
  return total_i_seqs

def get_selected_i_seqs(rg, names):
  rc = []
  for atom in rg.atoms():
    if atom.name in names:
      rc.append(atom.i_seq)
  return rc

def expand_i_seqs_to_neighbouring_residue(hierarchy, ddr_i_seqs):
  ddr_set = set(ddr_i_seqs)
  previous = None
  intersection = None
  total_i_seqs = []
  for rg in hierarchy.residue_groups():
    if intersection:
      rc = get_selected_i_seqs(rg, [' CA ', ' N  ', ' H  '])
      total_i_seqs += rc
    rg_set = []
    for atom in rg.atoms(): rg_set.append(atom.i_seq)
    intersection = ddr_set.intersection(set(rg_set))
    if intersection and previous:
      total_i_seqs += rg_set
      rc = get_selected_i_seqs(previous, [' CA ', ' C  ', ' O  '])
      total_i_seqs += rc
    previous = rg
  return total_i_seqs

def update_restraints(hierarchy,
                      geometry,
                      ddr_i_seqs,
                      factor=5.,
                      bond_weighting=True,
                      angle_weighting=True,
                      all_trans_peptide=True,
                      log=None,
                      verbose=False,
                      ):
  atoms = hierarchy.atoms()
  ddr_i_seqs = trim_i_seqs(atoms, ddr_i_seqs)
  # total_i_seqs = expand_i_seqs_to_residue(atoms, ddr_i_seqs)
  total_i_seqs = expand_i_seqs_to_neighbouring_residue(hierarchy, ddr_i_seqs)
  total_i_seqs.sort()
  # for i in total_i_seqs: print(atoms[i].quote())
  bond_params_table = geometry.bond_params_table
  n_bonds=0
  if bond_weighting:
    for i, bonded in enumerate(bond_params_table):
      if i in total_i_seqs:
        for j in bonded:
          bond = bond_params_table.lookup(i, j)
          bond.weight*=factor
          n_bonds+=1
          if verbose:
            print(' bond %s-%s %s %s' % (atoms[i].quote(),
                                         atoms[j].quote(),
                                         bond.distance_ideal,
                                         bond.weight))
  n_angles=[]
  if angle_weighting:
    for angle_proxy in geometry.angle_proxies:
      if (angle_proxy.i_seqs[0] not in total_i_seqs and
          angle_proxy.i_seqs[1] not in total_i_seqs and
          angle_proxy.i_seqs[2] not in total_i_seqs): continue
      angle_proxy.weight*=factor
      n_angles.append(angle_proxy)
      if verbose:
        i,j,k = angle_proxy.i_seqs
        print('  angle %s-%s-%s %s %s' % (atoms[i].quote(),
                                          atoms[j].quote(),
                                          atoms[k].quote(),
                                          angle_proxy.angle_ideal,
                                          angle_proxy.weight))
  n_dihedrals = []
  if all_trans_peptide:
    for dihedral_proxy in geometry.dihedral_proxies:
      if (dihedral_proxy.i_seqs[0] not in total_i_seqs and
          dihedral_proxy.i_seqs[1] not in total_i_seqs and
          dihedral_proxy.i_seqs[2] not in total_i_seqs and
          dihedral_proxy.i_seqs[3] not in total_i_seqs): continue
      i,j,k,l = dihedral_proxy.i_seqs
      if verbose:
        print('  dihedral %s-%s-%s-%s %s %s' % (atoms[i].quote(),
                                                atoms[j].quote(),
                                                atoms[k].quote(),
                                                atoms[l].quote(),
                                                dihedral_proxy.angle_ideal,
                                                dihedral_proxy.weight))
      names = [atoms[i].name, atoms[j].name, atoms[k].name, atoms[l].name]
      if names == [' CA ', ' C  ', ' N  ', ' CA ']:
        if abs(dihedral_proxy.angle_ideal)<20.:
          dihedral_proxy.angle_ideal=180.
          n_dihedrals.append(dihedral_proxy)

  print('  Upweighted %d bonds and %d angles' % (n_bonds+1, len(n_angles)), file=log)
  print('  Adjusted %s dihedrals to trans-peptide' % len(n_dihedrals), file=log)
  # geometry.reset_internals()

def run(filename):
  pdb_inp = iotbx.pdb.input(filename)
  hierarchy = pdb_inp.construct_hierarchy()
  hierarchy.atoms().reset_serial()
  update_restraints(hierarchy,
                    restraints_manager,
                    verbose=True,
    )

if __name__=="__main__":
  run(sys.argv[1])


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/histidines.py
from __future__ import absolute_import, division, print_function
import sys
import time

from mmtbx.conformation_dependent_library.hpdl_database import get_hpdl_database
from six.moves import range

def get_histidine_protonation(ag):
  lookup = {"HD1" : 0, # ND1
            "HE2" : 0, # NE2
            }
  for atom in ag.atoms():
    if atom.name.strip() in lookup:
      lookup[atom.name.strip()]+=1
  if lookup["HD1"] and lookup["HE2"]: return "ND1 and NE2 protonated"
  elif lookup["HD1"]: return "Only ND1 protonated"
  elif lookup["HE2"]: return "Only NE2 protonated"
  return None

def setup_restraints():
  return None

def update_restraints(hierarchy,
                      geometry, # restraints_manager,
                      current_geometry=None, # xray_structure!!
                      sites_cart=None,
                      esd_factor=1.,
                      log=None,
                      verbose=False,
                      ):
  #
  def _set_or_reset_bond_restraints(geometry,
                                    lookup,
                                    ignore_esd=True,
                                    log=None,
                                    verbose=False,
                                    ):
    count = 0
    for i_seqs, values in lookup.items():
      if len(i_seqs)!=2: continue
      bond=geometry.bond_params_table.lookup(*list(i_seqs))
      assert bond
      if verbose:
        from math import sqrt
        key = list(i_seqs)
        key.append("names")
        key = tuple(key)
        names = lookup.get(key, "")
        old_bond_ideal=bond.distance_ideal
        old_bond_weight=bond.weight
        print(" i_seqs %-15s %s initial %8.3f %8.3f %8.3f final %8.3f %8.3f %8.3f" % (
          i_seqs,
          names,
          bond.distance_ideal,
          bond.weight,
          1/sqrt(bond.weight),
          values[0],
          1/values[1]**2,
          values[1],
        ), file=log)
        if bond.distance_ideal!=old_bond_ideal or bond.weight!=old_bond_weight:
          print('RESETTING', file=log)
      bond.distance_ideal=values[0]
      if not ignore_esd:
        bond.weight = 1/values[1]**2
      count+=1
    return count
  #
  def _set_or_reset_angle_restraints(geometry,
                                     lookup,
                                     ignore_esd=True,
                                     log=None,
                                     verbose=False,
                                     ):
    count = 0
    for angle_proxy in geometry.angle_proxies:
      if angle_proxy.i_seqs in lookup:
        if verbose:
          old_angle_ideal=angle_proxy.angle_ideal
          old_angle_weight=angle_proxy.weight
          print(" i_seqs %-15s initial %12.3f %12.3f" % (
            angle_proxy.i_seqs,
            angle_proxy.angle_ideal,
            angle_proxy.weight,
            ), end=' ', file=log)
        assert angle_proxy.angle_ideal<181
        angle_proxy.angle_ideal = lookup[angle_proxy.i_seqs][0]
        if not ignore_esd:
          angle_proxy.weight = esd_factor/lookup[angle_proxy.i_seqs][1]**2
        if verbose:
          print("final   %12.3f %12.3f" % (
            angle_proxy.angle_ideal,
            angle_proxy.weight,
          ), file=log)
          if old_angle_ideal!=angle_proxy.angle_ideal or old_angle_weight!=angle_proxy.weight:
            print("RESETTING", file=log)
        count += 1
    return count
  #
  t0=time.time()
  sites_cart = None
  if current_geometry:
    sites_cart = current_geometry.sites_cart()
  i_seqs_restraints = {}
  #
  def _alt_loc_atom_generator(residue_group, atom_group):
    atoms = []
    for ag in residue_group.atom_groups():
      if ag.altloc.strip()=="" or ag.altloc.strip()==atom_group.altloc.strip():
        for atom in ag.atoms(): yield atom
  #
  hpdl_database = get_hpdl_database() #include_hydrogens=False)
  count=0
  counts = {}
  for model in hierarchy.models():
    #if verbose: print 'model: "%s"' % model.id
    for chain in model.chains():
      #if verbose: print 'chain: "%s"' % chain.id
      for residue_group in chain.residue_groups():
        for atom_group in residue_group.atom_groups():
          if atom_group.resname!="HIS": continue
          protonation = get_histidine_protonation(atom_group)
          if verbose or 1:
            rc = predict_protonation(atom_group)
            if rc is None:
              s = "%s" % rc
            else:
              s = "%0.1f, %0.1f" % tuple(rc)
            print('%satom group "%s" has %-22s (%s)' % (
              ' '*6,
              atom_group.id_str(),
              protonation,
              s,
            ), file=log)
            #interpret_his1_his2(*tuple(rc))
          counts.setdefault(protonation, 0)
          if protonation is None: continue
          counts[protonation]+=1
          count+=1
          restraints = hpdl_database[protonation]
          for names, values in restraints.items():
            i_seqs = []
            atoms = []
            for name in names:
              # need to test this...
              for atom in _alt_loc_atom_generator(residue_group, atom_group):
                if name.strip()==atom.name.strip():
                  i_seqs.append(atom.i_seq)
                  atoms.append(atom.name)
                  break
            if len(i_seqs)!=len(names): continue
            i_seqs_restraints[tuple(i_seqs)] = values
            if len(i_seqs)!=2:
              i_seqs.reverse()
              i_seqs_restraints[tuple(i_seqs)] = values
            if verbose:
              i_seqs.append("names")
              i_seqs_restraints[tuple(i_seqs)]=atoms

  count_b = _set_or_reset_bond_restraints(geometry,
                                          i_seqs_restraints,
                                          log=log,
                                          #verbose=verbose,
                                          )
  count_a = _set_or_reset_angle_restraints(geometry,
                                           i_seqs_restraints,
                                           log=log,
                                           #verbose=verbose,
                                           )
  #
  print("    Number of bonds, angles adjusted : %d, %d in %s HIS" % (
    count_b,
    count_a,
    count,
    ), file=log)
  #return rdl_proxies

def predict_protonation(ag, verbose=False):
  from cctbx import geometry
  from mmtbx.monomer_library.linking_utils import get_distance2
  from math import sqrt
#  from cctbx_geometry_restraints_ext import *
#  from cctbx.array_family import flex
  """
his1 = -37.35*X1 + 15.57*X2 - 0.64*X3 + 0.76*X4 + 17.30

his2 = -2.16*X1 - 6.08*X2 + 0.56*X3 + 0.42*X4 - 94.46

X1 = ND1-CE1
X2 = CE1-NE2
X3 = -ND1-
X4 = -NE2-

his1<0 ~> ND1 protonated
his1>0
  his2<0 ~> NE2 protonated
  his2>0 ~> doubly protonated
  """
  bonds = {
    ("ND1", "CE1") : None,
    ("NE2", "CE1") : None,
    }
  if verbose:
    for atom in ag.atoms():
      print(atom.quote())
  for i, tmp_atom in enumerate(bonds):
    atoms = []
    for j in range(2):
      for atom in ag.atoms():
        if atom.name.strip()==tmp_atom[j]:
          atoms.append(atom)
          break
    if len(atoms)==2:
      d2=get_distance2(*atoms)
      bonds[tmp_atom]=sqrt(d2)
  angles = {
    ("CG", "ND1", "CE1") : None,
    ("CE1","NE2", "CD2") : None,
    }
  for i, tmp_atom in enumerate(angles):
    atoms = []
    for j in range(3):
      for atom in ag.atoms():
        if atom.name.strip()==tmp_atom[j]:
          atoms.append(atom.xyz)
          break
    if len(atoms)==3:
      angle=geometry.angle((atoms)).angle_model
      angles[tmp_atom]=angle
  if None in bonds.values() or None in angles.values(): return None
  his1 =  17.30 - 0.64*angles[("CG", "ND1", "CE1")]
  his1 +=         0.76*angles[("CE1","NE2", "CD2")]
  his1 -=        37.35*bonds[("ND1", "CE1")]
  his1 +=        15.57*bonds[("NE2", "CE1")]
  his2 = -94.46 + 0.56*angles[("CG", "ND1", "CE1")]
  his2 +=         0.42*angles[("CE1","NE2", "CD2")]
  his2 -=         2.61*bonds[("ND1", "CE1")]
  his2 -=         6.08*bonds[("NE2", "CE1")]
  if verbose:
    print('his1',his1)
    print('his2',his2)
  return (his1, his2)

def interpret_his1_his2(his1, his2):
  def _interpret_his1_his2(his1, his2, limit=0):
    if his1<-limit:
      return "Only ND1 protonated"
    elif his1>0:
      if his2<-limit:
        return "Only NE2 protonated"
      elif his2>0:
        return "ND1 and NE2 protonated"
    else:
      return None
  limit = 1
  print(limit, _interpret_his1_his2(his1, his2, limit))
  limit = 0
  print(limit, _interpret_his1_his2(his1, his2, limit))

def run(pdb_filename):
  from iotbx import pdb
  print(pdb_filename)
  pdb_inp = pdb.input(pdb_filename)
  pdb_hieratchy = pdb_inp.construct_hierarchy()
  for residue_group in pdb_hieratchy.residue_groups():
    for atom_group in residue_groups.atom_groups():
      print(get_histidine_protonation(atom_group))

if __name__=="__main__":
  run(sys.argv[1])


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/hpdl_database.py
from __future__ import absolute_import, division, print_function
import sys

hpdl_database = {
    "Only ND1 protonated" : {
        ("CG",  "ND1") : [1.371, 0.009],
        ("ND1", "CE1") : [1.338, 0.008],
        ("CE1", "NE2") : [1.316, 0.009],
        ("NE2", "CD2") : [1.377, 0.007],
        ("CD2", "CG")  : [1.356, 0.009],
        ("CB",  "CG")  : [1.477, 0.019],
        ("ND1", "CG", "CD2") : [105.1, 0.5],
        ("CG", "ND1", "CE1") : [108.1, 0.5],
        ("ND1", "CE1", "NE2"): [111.3, 0.6],
        ("CE1", "NE2", "CD2"): [105.3, 0.6],
        ("NE2", "CD2", "CG") : [110.3, 0.6],
        ("CB", "CG", "ND1")  : [123.4, 1.6],
        ("CB", "CG", "CD2")  : [131.5, 1.6],
    },
    "Only NE2 protonated" : {
        ("CG",  "ND1") : [1.382, 0.009],
        ("ND1", "CE1") : [1.320, 0.008],
        ("CE1", "NE2") : [1.335, 0.014],
        ("NE2", "CD2") : [1.367, 0.009],
        ("CD2", "CG")  : [1.359, 0.010],
        ("CB",  "CG")  : [1.481, 0.022],
        ("ND1", "CG", "CD2") : [109.1, 0.5],
        ("CG", "ND1", "CE1") : [105.3, 0.9],
        ("ND1", "CE1", "NE2"): [111.9, 1.0],
        ("CE1", "NE2", "CD2"): [107.2, 0.8],
        ("NE2", "CD2", "CG") : [106.5, 0.7],
        ("CB", "CG", "ND1")  : [121.6, 1.3],
        ("CB", "CG", "CD2")  : [129.3, 1.4],
    },
    "ND1 and NE2 protonated" : {
        ("CG",  "ND1") : [1.379, 0.007],
        ("ND1", "CE1") : [1.325, 0.008],
        ("CE1", "NE2") : [1.316, 0.009],
        ("NE2", "CD2") : [1.373, 0.007],
        ("CD2", "CG")  : [1.353, 0.007],
        ("CB",  "CG")  : [1.490, 0.011],
        ("ND1", "CG", "CD2") : [105.9, 0.5],
        ("CG", "ND1", "CE1") : [109.3, 0.5],
        ("ND1", "CE1", "NE2"): [108.4, 0.5],
        ("CE1", "NE2", "CD2"): [108.9, 0.6],
        ("NE2", "CD2", "CG") : [107.4, 0.5],
        ("CB", "CG", "ND1")  : [122.7, 1.2],
        ("CB", "CG", "CD2")  : [131.3, 1.3],
    },
  }
"""
 This value seems to be in error. The corrected value for the EH99 NE2-CD2 bond length is 1.372  .
}
"""

def geometric_hydrogens():
  angles = [
    ("HD1", "ND1", "CG"),
    ("HD1", "ND1", "CE1"),
    ("HE1", "CE1", "ND1"),
    ("HE1", "CE1", "NE2"),
    ("HE2", "NE2", "CE1"),
    ("HE2", "NE2", "CD2"),
    ("HD2", "CD2", "NE2"),
    ("HD2", "CD2", "CG"),
    ]
  def _geometric_hydrogens(protonation):
    tmp = {}
    for angle in angles:
      for key, item in hpdl_database[protonation].items():
        if len(key)!=3: continue
        has_h=False
        for ta in angles:
          if ta[0] in key:
            has_h=True
            break
        if has_h: continue
        if angle[1]==key[1]:
          esd = item[1]
          na = (360-item[0])/2
          tmp[angle]=[na, esd]
    #for key in sorted(tmp):
    #  print key, tmp[key]
    return tmp

  hpdl_h_database = {}
  for key in hpdl_database:
    hpdl_database[key].update(_geometric_hydrogens(key))

def get_hpdl_database(include_hydrogens=True,
                      reasonable_esds=True,
                      ):
  if include_hydrogens: geometric_hydrogens()
  if reasonable_esds:
    for key, item in hpdl_database.items():
      for ic, values in item.items():
        if len(ic)==2:
          limit=0.01
          factor=2
        elif len(ic)==3:
          limit=1.5
          factor=2
        if values[1]<limit:
          values[1] = limit
        #else:
        #  values[1] *= factor
  return hpdl_database

def run(args):
  assert len(args) == 0
  print(hpdl_database["Only ND1 protonated"])
  for res_type in sorted(hpdl_database):
    print(res_type, len(hpdl_database[res_type]))
  geometric_hydrogens()
  print(hpdl_database["Only ND1 protonated"])
  for res_type in sorted(hpdl_database):
    print(res_type, len(hpdl_database[res_type]))

if (__name__ == "__main__"):
  import sys
  run(args=sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/hydrogen_bonding.py
from __future__ import absolute_import, division, print_function

hb_database = { # donor acceptor
  ("F", "F") : 38.6, #(161.5 kJ/mol or 38.6 kcal/mol)
  ("O", "N") :  6.9,
  ("O", "O") :  5.0,
  ("N", "N") :  3.1,
  ("N", "O") :  1.9,
  #("HOH", "OH+") : 4.3,
  }

def run():
  print(hb_database)

if __name__=="__main__":
  run()#sys.argv[1])


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/investigate_rotamer_space.py
from __future__ import absolute_import, division, print_function
import sys
import copy

from mmtbx.rotamer import rotamer_eval
from mmtbx.conformation_dependent_library import rdl_database
from six.moves import range

number_of_chis = {
  'ARG' : 4,
  'ASN' : 2,
  'ASP' : 2,
  'CYS' : 2,
  'GLN' : 3,
  'GLU' : 3,
  'HIS' : 2,
  'ILE' : 2,
  'LEU' : 2,
  'LYS' : 4,
  'MET' : 3,
  'PHE' : 2,
  'PRO' : 3,
  'SER' : 2,
  'THR' : 1,
  'TRP' : 2,
  'TYR' : 2,
  'VAL' : 1,
}

flat = [0., 20., 36]
lookup = {
  'ASP' : { 2 : ( "CA",  "CB",  "CG",  "OD1" )},
  'GLN' : { 3 : ( "CB",  "CG",  "CD",  "OE1" )},
  'GLU' : { 3 : ( "CB",  "CG",  "CD",  "OE1" )},
  'PHE' : { 2 : ( "CA",  "CB",  "CG",  "CD1" )},
  'TYR' : { 2 : ( "CA",  "CB",  "CG",  "CD1" )},
}

results = {
  'ARG' : {
    'tpm-80' : None, # rare rotamer
    },
  'ASN' : {
    'p0' : None, # wide blob around zero
    't0' : None,
    'm-40' : None, # not so wide
    't160' : None, # no points
    },
  'ASP' : {
    'p0' : { lookup['ASP'][2] : flat},
           # bimodal but wide - make 2 minima or none (36)
    't0' : { lookup['ASP'][2] : [0, 30, 2]},
    },
  'CYS' : 2, # chi2 is to the hydrogen and not important
  'SER' : 2,
  'GLN' : {
    'mp10'  : {lookup['GLN'][3] : [0, 30, 1]}, # really a blob from -30 to 30
    'tm130' : None, # no points
    'tt0'   : {lookup['GLN'][3] : flat}, # tube
    'pp30'  : None, # wraps around 0 - 360
    'mm-40' : None,
    'tp40'  : None,
    'mt0'   : None,
    'tm-30' : None,
    'pm20'  : None,
    'pt0'   : None, # very wide around zero
    },
  'GLU' : {
    'tp30' : {lookup['GLU'][3] : flat}, # chi3 is almost tubular
    'mp0'  : {lookup['GLU'][3] : flat},
    'pm20' : {lookup['GLU'][3] : flat},
    'pp20' : None, # not a sensible blob
    'tm-30': None,
    'mm-30': {lookup['GLU'][3] : flat}, # not a straight tube
    'tt0'  : {lookup['GLU'][3] : flat},
    'mt-10': {lookup['GLU'][3] : flat},
    'pt0'  : {lookup['GLU'][3] : flat}, # straight tube
    },
  'HIS' : 2,
  'ILE' : {
    'pp' : None, # no points
    },
  'LEU' : {
    'tm' : None, # no points
    },
  'LYS' : {
    'mtpm' : None, # no points only 20 examples
    'mtmp' : None,
    'pmtt' : None,
    'pmmt' : None,
    'mptp' : None,
    'mptm' : None,
    'ttpm' : None,
    'ttmp' : None,
    'tmtp' : None,
    'tmmm' : None,
    'tmtm' : None,
    'mttt' : None,
    },
  'MET' : {
    'pmt' : None, # no points
    'tmt' : None,
    'pp-130' : None,
    'mpm' : None,
    'mpt' : None,
    },
  'PRO' : 3, # special case
  'THR' : 1,
  'TRP' : {
    'm-10' : None, # blob near 0
    't60' : None,
    },
  'PHE' : {
    'm-10' : { lookup['PHE'][2] : [ -14.7, 19.8, 2]},
    },
  'TYR' : {
    'm-10' : { lookup['PHE'][2] : [ -14.7, 20.2, 2]},
    },
  'VAL' : 1,
}

rotamer_evaluator = rotamer_eval.RotamerEval(data_version='8000')
rotamer_id = rotamer_eval.RotamerID() # loads in the rotamer names

def generate_chis(chis=None,
                  n=2,
                  step=10,
                  depth=0,
                  starting_chis=None,
                  ):
  if chis is None:
    if starting_chis:
      chis=[]
      for c in starting_chis:
        chis.append(c)
        depth+=1
      while len(chis)<n:
        chis.append(None)
    else:
      chis=[None]*n
  else:
    depth+=1
  for i, angle in enumerate(range(0, 361, step)):
    chis[depth]=angle
    if depth==n-1:
      #if i%1000==0: print "YIELD",i,chis
      yield chis
    else:
      for rc in generate_chis(chis, n, step, depth=depth):
        yield rc

def evaluate(resname, chis):
  name=None
  value = rotamer_evaluator.evaluate(resname, chis)
  if value is not None:
    score=value #*100
    if score<0.02: return None
    #if score<0.003: continue
    wrap_chis = rotamer_id.wrap_chis(resname.strip(), chis,
                                     symmetry=False)
    sym_chis = wrap_chis[:]
    sym_chis = rotamer_id.wrap_sym(resname.strip(), sym_chis)
    #evaluation = self.evaluateScore(value)
    name = rotamer_id.identify(resname,
                               wrap_chis)
  return name

def write_to_pdb(i, sym_chis, f):
  water = "HETATM %4s  O   HOH A%4s    %8.3f%8.3f%8.3f  1.00 22.62           O\n"
  sym_chis = list(sym_chis)
  if len(sym_chis)==2:
    sym_chis.append(0.)
  try:
    f.write(water % (i,i,sym_chis[0],sym_chis[1],sym_chis[2]))
  except: # intentional
    print('WARNING',i, sym_chis)

def loop_on_residue_rotamer(resname,
                            rid,
                            step=10,
                            starting_chis=None,
                           ):
  i=0
  f=open("%s_%s.pdb" % (resname.lower(), rid), "w")
  f.write('CRYST1  360.000  360.000  360.000  90.00  90.00  90.00 P 1           1 ')
  points = []
  n=number_of_chis.get(resname.upper(), None)
  for chis in generate_chis(chis=None,
                            n=n,
                            step=step,
                            starting_chis=starting_chis,
  ):
    name = evaluate(resname,chis)
    #print resname,chis,name,rid
    if name==rid:
      i+=1
      write_to_pdb(i,chis,f)
      points.append(copy.deepcopy(chis))
  f.close()
  return points

def get_min_max(points):
  rc = [None]*len(points[0])
  for i in range(len(rc)):
    tmp = []
    for p in points:
      tmp.append(p[i])
    rc[i] = [min(tmp), max(tmp)]
  return rc

def _order_dihedral_keys(d1,d2):
  order = ["N", "CA", "CB", "CG"]
  if len(d1)!=4: return -1
  if len(d2)!=4: return 1
  assert d1[0] in order
  assert d2[0] in order
  for o in order:
    if d1[0]==o: return -1
    if d2[0]==o: return 1
  assert 0

def run(only_resname=None):
  for resname, rotamers in rdl_database.rdl_database.items():
    if only_resname is not None:
      if only_resname=='new':
        if resname in results: continue
      elif resname!=only_resname: continue
    for rotamer in rotamers:
      starting_chis = None
      if rotamer=='default': continue
      print(resname, rotamer)
      resname_d = results.get(resname, None)
      if type(resname_d)==type({}):
        if rotamer in resname_d:
          continue
      if number_of_chis.get(resname, None)>3:
        print(resname_d)
        keys = list(rdl_database.rdl_database[resname][rotamer].keys())
        keys.sort(_order_dihedral_keys)
        print(keys)
        starting_chis = []
        for key in keys:
          if len(key)!=4: continue
          print(key, rdl_database.rdl_database[resname][rotamer][key])
          starting_chis.append(rdl_database.rdl_database[resname][rotamer][key][0])
        for i in range(3):
          del starting_chis[-1]
        print(starting_chis)
      points = loop_on_residue_rotamer(resname,
                                       rotamer,
                                       starting_chis=starting_chis)
      print('POINTS', len(points))
      if not points and 0:
        #seeds = [-171.7, -75.9, 127.2]
        points = loop_on_residue_rotamer(resname,
                                         rotamer,
                                         step=1,
                                         starting_chis=starting_chis,
        )
      assert points, "there are no points"
      min_max = get_min_max(points)
      print(min_max)

      r=results.get(resname, None)
      for i, (m, n) in enumerate(min_max):
        if type(r)==type(1):
          if i+1==r: continue
        elif type(r)==type({}):
          r=r.get(rotamer, -1)
          if i+1==r: continue
        print(i,m,n,m!=0, n!=360)
        assert not (m==0 and n==360), "\n\n\tphenix.start_coot %s_%s.pdb\n\n" % (
          resname.lower(),
          rotamer,
          )

if __name__=="__main__":
  args = sys.argv[1:]
  del sys.argv[1:]
  run(*tuple(args))


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/mcl.py
from __future__ import absolute_import, division, print_function
import sys
import time

from cctbx.array_family import flex
from scitbx.math import superpose
from mmtbx.conformation_dependent_library import mcl_sf4_coordination
from six.moves import range
from mmtbx.conformation_dependent_library import metal_coordination_library

def get_pdb_hierarchy_from_restraints(code):
  from mmtbx.monomer_library import server
  from iotbx import pdb
  mon_lib_server = server.server()
  path = mon_lib_server.get_comp_comp_id_direct(code, return_filename=True)
  cif_obj = server.read_cif(path)
  ligand_inp=pdb.pdb_input(source_info="Model from %s" % path,
                          lines=flex.split_lines(""))
  ligand_hierarchy = ligand_inp.construct_hierarchy()
  model=pdb.hierarchy.model()
  chain=pdb.hierarchy.chain()
  chain.id='Z'
  rg=pdb.hierarchy.residue_group()
  ag=pdb.hierarchy.atom_group()
  for block, loops in cif_obj.blocks.items():
    if block=='comp_list': continue
    for loop in loops.iterloops():
      for row in loop.iterrows():
        if '_chem_comp_atom.comp_id' not in row: break
        ag.resname = row['_chem_comp_atom.comp_id']
        atom = pdb.hierarchy.atom()
        atom.name = row['_chem_comp_atom.atom_id']
        atom.element = '%2s' % row['_chem_comp_atom.type_symbol']
        atom.xyz = (
          float(row['_chem_comp_atom.x']),
          float(row['_chem_comp_atom.y']),
          float(row['_chem_comp_atom.z']),
                )
        ag.append_atom(atom)
  rg.append_atom_group(ag)
  chain.append_residue_group(rg)
  model.append_chain(chain)
  ligand_hierarchy.append_model(model)
  ligand_hierarchy.atoms().reset_i_seq()
  return ligand_hierarchy

def update(grm,
           pdb_hierarchy,
           link_records=None,
           log=sys.stdout,
           verbose=False,
           ):
  def _atom_id(a, show_i_seq=False):
    if show_i_seq:
      return '%s (%5d)' % (a.id_str(), a.i_seq)
    else:
      return '%s' % (a.id_str())
  if link_records is None: link_records={}
  link_records.setdefault('LINK', [])
  hooks = [
    ["Iron sulfur cluster coordination",
     mcl_sf4_coordination.get_sulfur_iron_cluster_coordination,
     mcl_sf4_coordination.get_all_proxies,
      ],
    ['Zn2+ tetrahedral coordination',
     metal_coordination_library.get_metal_coordination_proxies,
     metal_coordination_library.get_proxies_zn,
      ],
    # ['Mg2+ Nucleotide coordination',
    #  metal_coordination_library.get_metal_coordination_proxies,
    #  metal_coordination_library.get_proxies_mg_nuc,
    #   ],
    ]
  outl = ''
  outl_debug = ''

  sites_c = pdb_hierarchy.atoms().extract_xyz()
  nb_proxies = grm.pair_proxies(
        sites_cart=sites_c).nonbonded_proxies
  for label, get_coordination, get_all_proxies in hooks:
    rc = get_coordination(
      pdb_hierarchy=pdb_hierarchy,
      nonbonded_proxies=nb_proxies,
      verbose=verbose,
    )
    bproxies, aproxies = get_all_proxies(rc)
    if bproxies is None: continue
    if len(bproxies):
      outl += '    %s\n' % label
      atoms = pdb_hierarchy.atoms()
      sf4_coordination = {}
      for bp in bproxies:
        sf4_ag = atoms[bp.i_seqs[0]].parent()
        sf4_coordination.setdefault(sf4_ag.id_str(), [])
        sf4_coordination[sf4_ag.id_str()].append((atoms[bp.i_seqs[0]],
                                                  atoms[bp.i_seqs[1]]))
        link = (atoms[bp.i_seqs[0]], atoms[bp.i_seqs[1]], 'x,y,z')
        if link not in link_records: link_records['LINK'].append(link)
      for sf4, aas in sorted(sf4_coordination.items()):
        outl += '%spdb="%s"\n' % (' '*6, sf4)
        outl_debug += '%spdb="%s"\n' % (' '*6, sf4)
        for aa in aas:
          outl += '%s%s - %s\n' % (' '*8, _atom_id(aa[0]), _atom_id(aa[1]))
          outl_debug += '%s%s - %s\n' % (' '*8,
                                         _atom_id(aa[0], True),
                                         _atom_id(aa[1], True))
    if bproxies:
      if verbose:
        atoms = pdb_hierarchy.atoms()
        for bp in bproxies:
          print(bp.i_seqs,
                atoms[bp.i_seqs[0]].quote(),
                atoms[bp.i_seqs[1]].quote(),
                bp.rt_mx_ji,
                )
      try:
        grm.add_new_bond_restraints_in_place(
          proxies=bproxies,
          sites_cart=pdb_hierarchy.atoms().extract_xyz(),
        )
      except RuntimeError as e:
        print('\n\n%s' % outl_debug)
        raise e
    #
    done = []
    remove = []
    for i, angle in enumerate(aproxies):
      i_seqs = list(angle.i_seqs)
      i_seqs.sort()
      if i_seqs in done:
        remove.append(i)
      else:
        done.append(i_seqs)
    if remove:
      remove.reverse()
      for r in remove:
        del aproxies[r]
    #
    if aproxies:
      outl += '%s%s' % (' '*6, 'Number of angles added : %d\n' % len(aproxies))
    grm.add_angles_in_place(aproxies)
  if outl:
    print('  Dynamic metal coordination', file=log)
    print(outl, file=log)

def _extract_sites_cart(ag, element=None):
  selection = []
  for atom in ag.atoms():
    if element and atom.element.upper().strip()!=element.upper().strip():
      continue
    selection.append(atom.xyz)
  return flex.vec3_double(selection)

def generate_sites_fixed(pdb_hierarchy, resname, element=None):
  for ag in pdb_hierarchy.atom_groups():
    if ag.resname.strip().upper()==resname.upper():
      yield _extract_sites_cart(ag, element), ag

def superpose_ideal_residue_coordinates(pdb_hierarchy,
                                        resname,
                                        superpose_element=None,
                                        ):
  element_lookup = {'SF4' : 'Fe',
                    'F3S' : 'S',
                    #'F4S' : 'S', # not done yet
                    #'CLF' : 'Fe', # too flexible
                    'DVT' : 'V',
                    }
  from mmtbx.monomer_library import pdb_interpretation
  t0=time.time()
  rmsd_list = {}
  if superpose_element is None:
    superpose_element = element_lookup.get(resname, None)
  if resname in pdb_interpretation.ideal_ligands:
    ideal_hierarchy = get_pdb_hierarchy_from_restraints(resname)
  else:
    assert 0
  sites_moving = _extract_sites_cart(ideal_hierarchy, superpose_element)
  assert len(sites_moving), 'No atoms %s found' % superpose_element
  for ideal_ag in ideal_hierarchy.atom_groups(): break
  for sites_fixed, ag in generate_sites_fixed(pdb_hierarchy,
                                              resname,
                                              superpose_element,
                                              ):
    assert sites_fixed.size() == sites_moving.size(), '%(resname)s residue is missing atoms' % locals()
    import random
    min_rmsd = 1e9
    min_sites_cart = None
    for i in range(100):
      random.shuffle(sites_moving)
      lsq_fit = superpose.least_squares_fit(
        reference_sites = sites_fixed,
        other_sites     = sites_moving)
      new_atoms = ideal_ag.detached_copy().atoms()
      sites_new = new_atoms.extract_xyz()
      sites_new = lsq_fit.r.elems * sites_new + lsq_fit.t.elems
      rmsd = sites_fixed.rms_difference(lsq_fit.other_sites_best_fit())
      if rmsd<min_rmsd:
        min_rmsd=rmsd
        min_sites_cart = sites_new
    rmsd_list[ag.id_str()] = min_rmsd
    sites_new = min_sites_cart
    new_atoms.set_xyz(sites_new)
    for atom1 in ag.atoms():
      for atom2 in new_atoms:
        if atom1.name.strip()==atom2.name.strip():
          atom1.xyz=atom2.xyz
          break
      else:
        assert 0, 'not all atoms updated - missing %s' % atom1.quote()
  outl = ''
  if rmsd_list:
    outl = '\n  %(resname)s Regularisation' % locals()
    outl+= '\n    residue        rmsd'
    for id_str, rmsd in sorted(rmsd_list.items()):
      outl += '\n    "%s"   %0.1f' % (id_str, rmsd)
    outl += '\n  Time to superpose : %0.2fs\n' % (time.time()-t0)
  return outl

def superpose_ideal_ligand_on_poor_ligand(ideal_hierarchy,
                                          poor_hierarchy,
                                          ):
  """Function superpose an ideal ligand onto the mangled ligand from a
     ligand fitting procedure

  Args:
      ideal_hierarchy (pdb_hierarchy): Ideal ligand
      poor_hierarchy (pdb_hierarchy): Poor ligand with correct c.o.m. and same
        atom names in order. Could become more sophisticated.
  """
  sites_moving = flex.vec3_double()
  sites_fixed = flex.vec3_double()
  for atom1, atom2 in zip(ideal_hierarchy.atoms(), poor_hierarchy.atoms()):
    assert atom1.name==atom2.name, '%s!=%s' % (atom1.quote(),atom2.quote())
    sites_moving.append(atom1.xyz)
    sites_fixed.append(atom2.xyz)
  lsq_fit = superpose.least_squares_fit(
        reference_sites = sites_fixed,
        other_sites     = sites_moving)
  sites_new = ideal_hierarchy.atoms().extract_xyz()
  sites_new = lsq_fit.r.elems * sites_new + lsq_fit.t.elems
  # rmsd = sites_fixed.rms_difference(lsq_fit.other_sites_best_fit())
  ideal_hierarchy.atoms().set_xyz(sites_new)
  return ideal_hierarchy

if __name__=="__main__":
  from iotbx import pdb
  ideal_inp=pdb.pdb_input(sys.argv[1])
  ideal_hierarchy = ideal_inp.construct_hierarchy()
  poor_inp=pdb.pdb_input(sys.argv[2])
  poor_hierarchy = poor_inp.construct_hierarchy()
  ideal_hierarchy = superpose_ideal_ligand_on_poor_ligand(ideal_hierarchy, poor_hierarchy)
  ideal_hierarchy.write_pdb_file('new.pdb')


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/mcl_sf4_coordination.py
from __future__ import absolute_import, division, print_function
import sys

from cctbx import geometry_restraints
from six.moves import range

origin_ids = geometry_restraints.linking_class.linking_class()

# defaults to CYS
sf4_coordination = {
  'CYS' : {
    ("FE", "S")      : [  2.268, 0.017*2],
    ("S", "FE", "S") : [114.24,  5.75*2],
  },
  'MET' : {
    ("FE", "S")      : [  2.311, 0.006*2],
    ("S", "FE", "S") : [113.97,  8.764*2],
  },
  'HIS' : {
    ('FE', 'N')        : [  2.04,  0.05],
  }
}
fes_coordination = {
  'CYS' : {
    ("FE", "S")        : [  2.305, 0.022*2],
    ("S", "FE", "S")   : [111.20,  4.05*2],
    ('SG', 'FE', 'SG') : [107.77,  4.08*2],
  },
  'HIS' : {
    ('FE', 'N')        : [  2.14,  0.05],
  },
}
# parent pair
fes_coordination['CYS'][('CYS', 'CYS')] = ('SG', 'FE', 'SG')
#
f3s_coordination = {
  'CYS' : {
    ('FE', 'S')      : [  2.318, 0.008*2],
    ('S', 'FE', 'S') : [112.23,  6.03*2],
  },
}
# not coodinated number FE !- S
f3s_naming = {
  1 : 4,
  3 : 2,
  4 : 1,
}
coordination_defaults = {
  'SF4' : sf4_coordination,
  'F3S' : f3s_coordination,
  'FES' : fes_coordination,
}

phil_str = '''
'''

sf_clusters = set(['SF4', 'F3S', 'FES'])

def get_cluster_name(a1, a2, a3=None, other=False):
  resname = [a1.parent().resname,a2.parent().resname]
  if a3: resname.append(a3.parent().resname)
  resname = set(resname)
  if other:
    resname = resname.difference(set(sf_clusters))
  else:
    resname = sf_clusters.intersection(set(resname))
  if len(resname)==1: resname = resname.pop()
  elif len(resname)>1: resname = None
  else: resname = None
  return resname

def get_lookup(a1, a2, a3=None):
  from mmtbx.monomer_library import bondlength_defaults
  resname = get_cluster_name(a1, a2, a3)
  ligand = get_cluster_name(a1, a2, a3, other=True)
  cluster_lookup = coordination_defaults.get(resname, None)
  assert cluster_lookup, 'library for %s not found' % (resname)
  ligand_lookup = cluster_lookup.get(ligand, None)
  if ligand_lookup is None:
    ligand_lookup = cluster_lookup.get('CYS', None)
  if ligand_lookup is None:
    ans = bondlength_defaults.run(a1, a2)
    ligand_lookup = {}
    ligand_lookup[(a1.element.strip().upper(), a2.element.strip().upper())]=[ans, 0.1]
  return ligand_lookup

def get_distance_ideal_and_weight(a1, a2):
  ligand_lookup = get_lookup(a1, a2)
  key = (a1.element.strip().upper(), a2.element.strip().upper())
  if key not in ligand_lookup:
    return None, ' Atom pair %s %s not found in MCL' % (a1.quote(), a2.quote())
  distance_ideal=ligand_lookup[key][0]
  weight=1.0/ligand_lookup[key][1]**2
  return distance_ideal, weight

def get_angle_ideal_and_weight(a1,a2,a3):
  ligand_lookup = get_lookup(a1, a2, a3)
  key = (a1.element.strip().upper(),
         a2.element.strip().upper(),
         a3.element.strip().upper(),
         )
  if key not in ligand_lookup: return None, None
  parent_pair = (a1.parent().resname, a3.parent().resname)
  if parent_pair in ligand_lookup:
    key = ligand_lookup[parent_pair]
    angle_ideal=ligand_lookup[key][0]
    weight=1.0/ligand_lookup[key][1]**2
  else:
    angle_ideal = ligand_lookup[key][0]
    weight = 1.0/ligand_lookup[key][1]**2
  return angle_ideal, weight

def get_sulfur_iron_cluster_coordination(pdb_hierarchy,
                                         nonbonded_proxies,
                                         sorted_nb_proxies_res=None,
                                         coordination_distance_cutoff=3.5,
                                         #params=None,
                                         log=sys.stdout,
                                         verbose=False,
                                       ):
  coordination = []
  done_aa = []
  atoms = pdb_hierarchy.atoms()
  sites_cart = atoms.extract_xyz()
  selection_string = " or ".join(['resname %s' %x for x in sf_clusters])
  s = pdb_hierarchy.atom_selection_cache().selection(selection_string)
  if s.all_eq(False):
    return coordination
  for item in nonbonded_proxies.sorted_value_proxies_generator(
      by_value="delta",
      sites_cart=sites_cart,
      cutoff=coordination_distance_cutoff):
    i_seq, j_seq, dist, sym_op_j, rt_mx, proxy = item
    a1 = atoms[i_seq]
    ag1 = a1.parent()
    a2 = atoms[j_seq]
    ag2 = a2.parent()
    current = set([ag1.resname, ag2.resname])
    intersection = sf_clusters.intersection(current)
    if len(intersection)==2:
      if ag1.id_str()!=ag2.id_str():
        print('Two residues (%s, %s) are close enough to coordinate! ODD!' % (
          ag1.id_str(),
          ag2.id_str()), file=log)
    elif len(intersection)==1:
      if rt_mx:
        coordination = []
        break
      resname = intersection.pop()
      sf4=a2
      sf4g=ag2
      aa=a1
      aag=ag1
      if ag1.resname==resname:
        sf4=a1
        sf4g=ag2
        aa=a2
        aag=ag2
      if aa.element.strip() not in ['S', 'N']: continue
      # if aa.element.strip() in ['H', 'D']: continue
      if verbose: print('%s-aa' % resname,sf4.quote(),aa.quote(),dist)
      if sf4.element.lower()=="fe":
        if aag.id_str() not in done_aa:
          #coordination.append((i_seq, j_seq))
          coordination.append((sf4, aa))
          done_aa.append(aag.id_str())
  return coordination

def get_bond_proxies(coordination, verbose=False):
  #
  bonds = []
  if coordination is None: return bonds
  for a1, a2 in coordination:
    distance_ideal, weight = get_distance_ideal_and_weight(a1, a2)
    if distance_ideal is None:
      if verbose: print('no distance_ideal %s %s' % (distance_ideal, weight))
      continue
    p = geometry_restraints.bond_simple_proxy(
      i_seqs=[a1.i_seq, a2.i_seq],
      distance_ideal=distance_ideal,
      weight=weight,
      slack=0,
      top_out=False,
      limit=1,
      origin_id=origin_ids.get_origin_id('metal coordination'))
    bonds.append(p)
  return bonds

def get_angle_proxies_for_bond(coordination):
  #
  def _get_angle_atoms(a1, a2, resname, second_residues):
    atoms = []
    ii=int(a1.name.strip()[-1])
    if resname=='F3S':
      for i in range(1,5):
        if i == f3s_naming.get(ii, -1): continue
        name = 'S%d' % i
        a3 = a1.parent().get_atom(name)
        if a3: atoms.append(a3)
    else:
      # SF4 has a special naming scheme
      for i in range(1,5):
        if i==ii: continue
        name = 'S%d' % i
        a3 = a1.parent().get_atom(name)
        if a3: atoms.append(a3)
    if resname in ['FES']:
      for ag in second_residues:
        if ag.id_str()==a2.parent().id_str(): continue
        for name in ['SG']:
          sg = ag.get_atom(name)
          if sg and sg.distance(a1)<3.5:
            atoms.append(sg)
    return atoms
  #
  angles = []
  if coordination is None: return angles
  second_residues = []
  for a1, a2 in coordination:
    second_residues.append(a2.parent())
  for a1, a2 in coordination:
    assert a1.name.find("FE")>-1
    resname = get_cluster_name(a1, a2)
    if resname in sf_clusters:
      atoms = _get_angle_atoms(a1, a2, resname, second_residues)
      for a3 in atoms:
        angle_ideal, weight = get_angle_ideal_and_weight(a3, a1, a2)
        if angle_ideal is None: continue
        p = geometry_restraints.angle_proxy(
          i_seqs=[a3.i_seq, a1.i_seq, a2.i_seq],
          angle_ideal=angle_ideal,
          weight=weight,
          origin_id=origin_ids.get_origin_id('metal coordination'))
        angles.append(p)
  return angles

def get_all_proxies(coordination, resname=None):
  return get_bond_proxies(coordination), \
      get_angle_proxies_for_bond(coordination)

def run(pdb_filename):
  print("run",pdb_filename)
  from mmtbx.command_line.geometry_minimization import \
    get_geometry_restraints_manager, master_params
  import mmtbx.monomer_library.pdb_interpretation
  from mmtbx import monomer_library

  mon_lib_srv = monomer_library.server.server()
  ener_lib = monomer_library.server.ener_lib()
  processed_pdb_file = monomer_library.pdb_interpretation.process(
    mon_lib_srv    = mon_lib_srv,
    ener_lib       = ener_lib,
    file_name      = pdb_filename,
    #force_symmetry = True,
  )
  xrs = processed_pdb_file.xray_structure()
  #work_params = master_params().extract()
  #work_params.reference_model.enabled=True
  #work_params.reference_model.use_starting_model_as_reference=True
  grm = get_geometry_restraints_manager(
    processed_pdb_file,
    xrs,
    #params=work_params,
    #log=null_out(),
  )
  pdb_hierarchy = processed_pdb_file.all_chain_proxies.pdb_hierarchy
  rc = get_sf4_coordination(
    pdb_hierarchy=pdb_hierarchy,
    nonbonded_proxies=grm.geometry.pair_proxies(
      sites_cart=pdb_hierarchy.atoms().extract_xyz()).nonbonded_proxies,
    #verbose=True,
  )
  bproxies, aproxies = get_all_proxies(rc)
  print(len(bproxies),len(aproxies))
  grm.geometry.add_new_bond_restraints_in_place(
    proxies=bproxies,
    sites_cart=pdb_hierarchy.atoms().extract_xyz(),
  )
  grm.geometry.add_angles_in_place(aproxies)

if __name__=="__main__":
  args = sys.argv[1:]
  del sys.argv[1:]
  run(*tuple(args))


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/metal_coordination_library.py
from __future__ import division
import sys

from cctbx import geometry_restraints
from cctbx.geometry_restraints import linking_class
origin_ids = linking_class.linking_class()

headers = ['Zn-SG (A)',
           'SG-Zn-SG (degrees)',
           'Zn-N (A)',
           'N-Zn-N (degrees)',
           'ZnCysxHisy',
           ]
database = {'Zn2+ tetrahedral': {
    (4,0) : {
        ('ZN', 'SG') : (2.330, 0.029, 1033),
        ('SG', 'ZN', 'SG') : (109.45, 5.46, 1553),
        }, # n/a        n/a     Cys4
    (3,1) : {
        ('ZN', 'SG') : (2.318, 0.027, 912),
        ('SG', 'ZN', 'SG') : (112.15, 3.96, 912),
        ('ZN', 'ND1') : (2.074, 0.056, 303),
        }, #n/a Cys3His1
    (2,2) : {
        ('ZN', 'SG') : (2.306, 0.029, 76),
        ('SG', 'ZN', 'SG') : (116.23, 4.58, 38),
        ('ZN', 'ND1') : (2.040, 0.050, 65),
        ('ND1', 'ZN', 'ND1') : (102.38, 5.44, 38),
        }, #    Cys2His2
    (1,3) : {
        ('ZN', 'SG') : (2.298, 0.017, 12),
        ('ZN', 'ND1') : (2.002, 0.045, 36),
        ('ND1', 'ZN', 'ND1') : (107.23, 4.78, 36),
        }, #    Cys1His3
    (0,4) : {
        }, #n/a n/a     Insufficient data       Insufficient data       His4
    },
    # 'Mg2+ Nucleotide' : {
    # (4,2) : { # 4 water / 2 nucleotide
    #     ('MG', 'O') : (2.091, 0.048), # water coordination
    #     ('MG', 'O*') : (2.05, 0.02), # Oxygen atom in PO4
    #     ('MG', 'O*', 'P*') : (133.5, 1.),
    #     ('O', 'MG', 'O') : (88.0, 3.),
    #     ('O', 'MG', 'O*') : (90.0, 3.),
    #     ('O*', 'MG', 'O*') : (92.0, 3.),
    #   },
    # }
  }
database['ZN'] = database['Zn2+ tetrahedral']
# database['MG'] = database['Mg2+ Nucleotide']

for nums, restraints in database['Zn2+ tetrahedral'].items():
  for atoms, values in list(restraints.items()):
    if 'ND1' in atoms:
      key = list(atoms)
      for i, atom in enumerate(key):
        if atom=='ND1':
          key[i]='NE2'
          restraints[tuple(key)]=values

def print_restraints(db):
  print('-'*80)
  for coordination, library in sorted(db.items()):
    print(coordination)
    for nums, restraints in sorted(library.items()):
      print('  %s' % str(nums))
      for atoms, values in sorted(restraints.items()):
        print('    ',atoms, values)

def check_other_in_database(metal, other):
  sub = database.get(metal.name.strip(), None)
  if sub is None: return False
  for key, item in sub.items():
    for atoms in item:
      if other.name.strip() in atoms: return True
      if '%s*' % other.element.strip() in atoms: return True
  return False

def get_metal_coordination_proxies(pdb_hierarchy,
                                   nonbonded_proxies,
                                   sorted_nb_proxies_res=None,
                                   prefix=None,
                                   params=None,
                                   log=sys.stdout,
                                   add_segid=None,
                                   verbose=False):
  def is_residue_already_linked_to_metal(linked, atom):
    for link in linked:
      if link.parent().id_str()==atom.parent().id_str():
        break
    else:
      return False
    return True
  hbond_distance_cutoff = 3
  if params is not None:
    hbond_distance_cutoff = params.hbond_distance_cutoff
  mbonds = {}
  selection_string = " or ".join(["element ZN"])
  s = pdb_hierarchy.atom_selection_cache().selection(selection_string)
  if s.all_eq(False):
    return mbonds
  atoms = pdb_hierarchy.atoms()
  sites_cart = atoms.extract_xyz()
  for item in nonbonded_proxies.sorted_value_proxies_generator(
      by_value="delta",
      sites_cart=sites_cart,
      cutoff=hbond_distance_cutoff):
    i_seq, j_seq, dist, sym_op_j, rt_mx, proxy = item
    a1 = atoms[i_seq]
    ag1 = a1.parent()
    a2 = atoms[j_seq]
    ag2 = a2.parent()
    metal = None
    for metal_element in database:
      if a1.name.strip()==metal_element:
        metal = a1
        other = a2
      elif a2.name.strip()==metal_element:
        metal = a2
        other = a1
      if metal:
        if not check_other_in_database(metal, other): continue
        mbonds.setdefault(metal.i_seq, {})
        mbonds[metal.i_seq]['metal'] = metal
        mbonds[metal.i_seq].setdefault('others', [])

        is_linked = is_residue_already_linked_to_metal(
          mbonds[metal.i_seq]['others'],
          other)
        if not is_linked or metal.element.upper() in ['MG']:
          sub = mbonds[metal.i_seq]['others']
          if other not in sub:
            sub.append(other)

  pairs = []
  if verbose:
    for key, item in mbonds.items():
      for label, l in item.items():
        if type(l)==type([]):
          for atom in l:
            print('  ',atom.quote())
        else:
          print(l.quote())
  return mbonds

def _bond_generator(atoms):
  for atom in atoms['others']:
    yield atoms['metal'], atom

def _angle_generator(atoms):
  for i, a1 in enumerate(atoms['others']):
   for j, a2 in enumerate(atoms['others']):
     if i==j: break
     yield a1, atoms['metal'], a2

def _default_bonds(atoms,
                   distance_ideal=2.3,
                   sigma=0.03,
                   origin_id_key='metal coordination',
                   ):
  tmp = []
  for a1, a2 in _bond_generator(atoms):
    p = geometry_restraints.bond_simple_proxy(
      i_seqs=[a1.i_seq, a2.i_seq],
      distance_ideal=distance_ideal,
      weight=1.0/sigma**2,
      slack=0,
      top_out=False,
      limit=1,
      origin_id=origin_ids.get_origin_id(origin_id_key))
    tmp.append(p)
  return tmp

def _default_bonds_zn(atoms):
  return _default_bonds(atoms) # defaults to ZN

def _default_bonds_mg_nuc(atoms):
  return _default_bonds(atoms,
                        distance_ideal=2.0,
                        sigma=0.1,
                        origin_id_key='metal coordination',
                        )

def _get_defaults_zn(atoms, verbose=False):
  bonds = []
  if len(atoms['others'])<4:
    bonds += _default_bonds_zn(atoms)
  return bonds

def _get_defaults_mg_nuc(atoms, verbose=False):
  bonds = []
  if len(atoms['others']) not in [6]:
    bonds += _default_bonds_mg_nuc(atoms)
  return bonds

def _get_ideals_zn(atoms, verbose=False):
  cyss = []
  hiss = []
  for atom in atoms['others']:
    if atom.parent().resname=='CYS':
      cyss.append(atom)
    elif atom.parent().resname=='HIS':
      hiss.append(atom)
  key = (len(cyss), len(hiss))
  metal_name = atoms['metal'].name.strip()
  if key not in database[metal_name]:
    if verbose:
      outl = '\n'
      for atom in atoms['others']:
        outl += '    %s\n' % atom.quote()
      print('''  Metal %s has coordination not in MCL%s
            ''' % (atoms['metal'].quote(), outl)
            )
    return None
  ideals = database[metal_name][key]
  return ideals

def _get_ideals_mg_nuc(atoms, verbose=False):
  hohs = []
  nucs = []
  for atom in atoms['others']:
    if atom.parent().resname=='HOH':
      hohs.append(atom)
    else:
      nucs.append(atom)
  key = (len(hohs), len(nucs))
  metal_name = atoms['metal'].name.strip()
  if key not in database[metal_name]:
    if verbose:
      outl = '\n'
      for atom in atoms['others']:
        outl += '    %s\n' % atom.quote()
      print('''  Metal %s has coordination not in MCL%s
            ''' % (atoms['metal'].quote(), outl)
            )
    return None
  ideals = database[metal_name][key]
  return ideals

def _get_keys(a1,a2,a3=None):
  args=[a1,a2]
  if a3: args.append(a3)
  for i in range(2**len(args)):
    s = "{0:b}".format(i).zfill(len(args))
    rc = []
    for k, j in enumerate(s):
      if int(j)==0:
        rc.append(args[k].name.strip())
      elif int(j)==1:
        rc.append('%s*' % args[k].element.strip())
    yield tuple(rc)

def get_proxies(metal_element, coordination, get_defaults, get_ideals, verbose=False):
  #
  # TODO
  #   - check that only one link is made to each resiude
  #     e.g. 1a6y "2080 ZN    ZN B 451 .*." "1874  CB  CYS B 153 .*."
  #
  bonds = []
  angles = []
  if coordination is None: return bonds, angles
  atoms = None
  for metal_i_seq, atoms in coordination.items():
    if not atoms: continue #return None, None
    metal = atoms['metal']
    if metal.element.upper()!=metal_element: continue
    tmp = get_defaults(atoms)
    if tmp:
      bonds += tmp
      continue
    ideals = get_ideals(atoms)
    if ideals is None: continue
    for a1, a2 in _bond_generator(atoms):
      for key in _get_keys(a1,a2):
        if key in ideals: break
      if key not in ideals: continue
      t = ideals[key]
      p = geometry_restraints.bond_simple_proxy(
        i_seqs=[a1.i_seq, a2.i_seq],
        distance_ideal=t[0],
        weight=1.0/t[1]**2,
        slack=0,
        top_out=False,
        limit=1,
        origin_id=origin_ids.get_origin_id('metal coordination'))
      bonds.append(p)
    for a1, a2, a3 in _angle_generator(atoms):
      for key in _get_keys(a1,a2,a3):
        if key in ideals: break
      if key not in ideals: continue
      t = ideals[key]
      p = geometry_restraints.angle_proxy(
        i_seqs=[a1.i_seq, a2.i_seq, a3.i_seq],
        angle_ideal=t[0],
        weight=1.0/t[1]**2,
        origin_id=origin_ids.get_origin_id('metal coordination'))
      angles.append(p)
  return bonds, angles

def get_proxies_zn(coordination, verbose=False):
  return get_proxies('ZN',
                     coordination,
                     _get_defaults_zn,
                     _get_ideals_zn,
                     verbose=verbose)

def get_proxies_mg_nuc(coordination, verbose=False):
  return get_proxies('MG',
                     coordination,
                     _get_defaults_mg_nuc,
                     _get_ideals_mg_nuc,
                     verbose=verbose)

def run(model_filename=None):
  import mmtbx.monomer_library.pdb_interpretation as pdb_inter
  if model_filename is not None:
    from iotbx import pdb
    pdb_inp = pdb.input(model_filename)
    pdb_hierarchy = pdb_inp.construct_hierarchy()
    #pdb_hierarchy.show()
    pdb_processed_file = pdb_inter.run(
      args=[model_filename],
      assume_hydrogens_all_missing=False,
      hard_minimum_nonbonded_distance=0.0,
      nonbonded_distance_threshold=None,
      substitute_non_crystallographic_unit_cell_if_necessary=True,
      )
    grm = pdb_processed_file.geometry_restraints_manager()
    xrs = pdb_processed_file.xray_structure()
    sites_cart = xrs.sites_cart()
    site_labels = xrs.scatterers().extract_labels()
    pair_proxies=grm.pair_proxies(sites_cart=sites_cart,site_labels=site_labels)
    proxies_info_nonbonded = pair_proxies.nonbonded_proxies.get_sorted(
        by_value="delta",
        sites_cart=sites_cart,
        site_labels=site_labels)
    rc = get_metal_coordination_proxies(pdb_hierarchy,
                                        pair_proxies.nonbonded_proxies,
    )
    bonds, angles = get_proxies(rc)
    print('\n\tbonds, angles : %d, %d\n\n' % (len(bonds), len(angles)))


if __name__=="__main__":
  args = sys.argv[1:]
  del sys.argv[1:]
  run(*tuple(args))


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/multi_base_class.py
from __future__ import absolute_import, division, print_function
from mmtbx.conformation_dependent_library.LinkedResidues import LinkedResidues
from mmtbx.conformation_dependent_library.cdl_utils import \
  get_c_ca_n, distance2
from six.moves import range

def calc_pseudorotation(t0,t1,t2,t3,t4):
  import math
  if t0 > 180.0: t0 = t0 - 360.0
  if t1 > 180.0: t1 = t1 - 360.0
  if t2 > 180.0: t2 = t2 - 360.0
#JC hack
  if t2 == 0.0: t2 = 0.1
#/JC
  if t3 > 180.0: t3 = t3 - 360.0
  if t4 > 180.0: t4 = t4 - 360.0

  taus = [t0, t1, t2, t3, t4]

  tanP = ((taus[4] + taus[1]) - (taus[3] + taus[0]))/(2 * taus[2] * (math.sin(36.0*math.pi/180.0) + math.sin(72.0*math.pi/180.0)))

  P = math.atan(tanP)*180.0/math.pi
  if taus[2] < 0: P = P + 180.0
  elif tanP < 0: P = P + 360.0
  #P = "%.1f" % P
  return P

def _get_atoms(atom_group, atom_names):
  atoms, outl = get_c_ca_n(atom_group, atom_names)
  if atoms is None:
    for i in range(len(atom_names)):
      atom_names[i] = atom_names[i].replace("'", '*')
    atoms, outl = get_c_ca_n(atom_group, atom_names)
  return atoms

def get_distance(ag1, ag2, an1, an2):
  atoms = _get_atoms(ag1, an1) + _get_atoms(ag2, an2)
  # for atom in atoms: print atom.quote()
  return atoms[0].distance(atoms[1])

def get_torsion(ag1, ag2, an1, an2, limits='-180-180'):
  from scitbx.math import dihedral_angle
  atoms = _get_atoms(ag1, an1) + _get_atoms(ag2, an2)
  omega = dihedral_angle(sites=[atom.xyz for atom in atoms], deg=True)
  if limits=='-180-180':
    if omega>180:
      print(omega, limits)
      assert 0
  elif limits=='0-360':
    if omega<0:
      omega+=360
  # for atom in atoms: print atom.quote()
  return omega

class TwoNucleicResidues(LinkedResidues):
  def show(self):
    outl = "%sNucleicResidues" % self.length
    for residue in self:
      if residue is not None: outl += " %s(%s)" % (residue.resname, residue.resseq)
      else: outl += ' "%s"' % residue
    outl += " %s" % self.are_linked(return_value=True)
    if self.start is not None: outl += " start=T"
    if self.end is not None: outl += " end=T"
    return outl

  @staticmethod
  def get_o3prime_p(residue, return_subset=False):
    rc = get_c_ca_n(residue, atom_name_list=[" O3'", ' P  '], return_subset=return_subset)
    if rc[0] is None:
      rc = get_c_ca_n(residue, atom_name_list=[" O3'", ' P  '], return_subset=return_subset)
    return rc

  def are_linked(self,
                 return_value=False,
                 use_distance_always=False,
                 bond_cut_off=3.5, # Same as link_distance_cutoff of pdb_interpretation
                 verbose=True,
                 ):
    bond_cut_off *= bond_cut_off
    for i, residue in enumerate(self):
      if i==0: continue
      op1, outl1 = self.get_o3prime_p(residue, return_subset=True)
      # if self[i-1] is None: # place holder for omega CDL
      #   return False
      op2, outl2 = self.get_o3prime_p(self[i-1], return_subset=True)
      # if ccn1 is None:
      #   for line in outl1:
      #     if line not in self.errors:
      #       self.errors.append(line)
      #   break
      # if ccn2 is None:
      #   for line in outl2:
      #     if line not in self.errors:
      #       self.errors.append(line)
      #   break
      p = op1[1]
      o3prime = op2[0]
      if p is None or o3prime is None: return False
      if self.bond_params_table is None:
        d2 = distance2(p,o3prime)
        if d2<bond_cut_off: bond=True
        else: bond=False
      else:
        bond=self.bond_params_table.lookup(p.i_seq, o3prime.i_seq)
        if not bond and use_distance_always:
          # needed for situations where atoms are added and the i_seq is updated
          if distance2(p,o3prime)<bond_cut_off: bond=True
      if not bond:
        break
    else:
      return True
    if return_value: return d2
    return False

  def get_base_types(self):
    rc = []
    for base in self:
      for atom in base.atoms():
        if atom.name==' N9 ':
          rc.append('R')
          break
      else:
        rc.append('Y')
    return rc

  def get_id(self):
    outl = []
    outl.append(self[0].parent().parent().id)
    outl.append(self[0].resname.strip())
    outl.append(self[0].resseq.strip())
    assert not self[0].parent().altloc
    outl.append(self[1].resname.strip())
    outl.append(self[1].resseq.strip())
    assert not self[1].parent().altloc
    return '_'.join(outl)

  def get_ntc_angles(self):
    angles = {
      'd' :[[" C5'", " C4'", " C3'", " O3'"],[]], # delta0
      'e' :[[" C4'", " C3'", " O3'" ],       [" P  "]], # epsilon
      'z' :[[" C3'", " O3'"],                [" P  ", " O5'"]], # zeta
      'a1':[[" O3'"],                        [" P  ", " O5'", " C5'"]], # alpha
      'b1':[[],                              [" P  ", " O5'", " C5'", " C4'"]], # beta
      'g1':[[],                              [" O5'", " C5'", " C4'", " C3'"]], # gamma
      'd1':[[],                              [" C5'", " C4'", " C3'", " O3'"]], # delta1
    }
    types = self.get_base_types()
    if types[0]=='R':
      angles['ch'] = [[" O4'", " C1'", " N9 ", " C4 "],[]] # chi0
      N0 = ' N9 '
    else:
      angles['ch'] = [[" O4'", " C1'", " N1 ", " C2 "],[]] # chi0
      N0 = ' N1 '
    if types[1]=='R':
      angles['ch1'] = [[], [" O4'", " C1'", " N9 ", " C4 "]] # chi1
      N1 = ' N9 '
    else:
      angles['ch1'] = [[], [" O4'", " C1'", " N1 ", " C2 "]] # chi1
      N1 = ' N1 '
    angles['NCCN'] = [[N0, " C1'"], [" C1'", N1]]
    rc = {}
    for angle, atom_names in angles.items():
      rc[angle] = get_torsion(self[0], self[1], atom_names[0], atom_names[1], limits='0-360')
    rc['NN'] = get_distance(self[0], self[1], [N0], [N1])
    rc['CC'] = get_distance(self[0], self[1], [" C1'"], [" C1'"])
    # tau
    args1 = []
    args2 = []
    for atom_names in [
      [" C4'", " O4'", " C1'", " C2'"],
      [" O4'", " C1'", " C2'", " C3'"],
      [" C1'", " C2'", " C3'", " C4'"],
      [" C2'", " C3'", " C4'", " O4'"],
      [" C3'", " C4'", " O4'", " C1'"],
      ]:
      args1.append(get_torsion(self[0], self[1], atom_names, []))
      args2.append(get_torsion(self[0], self[1], [], atom_names))
    rc['P'] = calc_pseudorotation(*tuple(args1))
    rc['P1'] = calc_pseudorotation(*tuple(args2))
    for label, item in rc.items():
      # print '  %s : %0.2f' % (label, item)
      rc[label] = '%0.1f' % item
    rc['step_id'] = self.get_id()
    return rc

  def get_ntc_coordinates(self):
    query = {}
    for atom_key in ['C5pa',
                     'C4pa',
                     'O4pa',
                     'C3pa',
                     'O3pa',
                     'C2pa',
                     'C1pa',
                     'N19a',
                     'C24a',
                     'Pb',
                     'O5pb',
                     'C5pb',
                     'C4pb',
                     'O4pb',
                     'C3pb',
                     'O3pb',
                     'C2pb',
                     'C1pb',
                     'N19b',
                     'C24b',
      ]:
      if atom_key[-1]=='a': atom_group = self[0]
      elif atom_key[-1]=='b': atom_group = self[1]
      else: assert 0
      if atom_key.find('P')>-1: names = [' P  ']
      elif atom_key.find('N19')>-1: names = [' N1 ', ' N9 ']
      elif atom_key.find('C24')>-1: names = [' C2 ', ' C4 ']
      else: names = ['%4s' % atom_key[:-1].replace('p',"'")]
      for name in names:
        atom = atom_group.find_atom_by(name=name)
        if atom is None:
          atom = atom_group.find_atom_by(name=name.replace("'", '*'))
        if atom: break
      else:
        assert atom
      query[atom_key]= ['%s'%atom.xyz[0], '%s'%atom.xyz[1], '%s'%atom.xyz[2]]
    query['step_id'] = self.get_id()
    return query


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/multi_residue_cdl_class.py
from __future__ import absolute_import, division, print_function
import copy

from scitbx.math import dihedral_angle
from libtbx.utils import Sorry
from mmtbx.conformation_dependent_library.multi_residue_class import \
  ThreeProteinResidues
from mmtbx.conformation_dependent_library.cdl_utils import \
  get_c_ca_n, round_to_ten, get_omega_value
from mmtbx.conformation_dependent_library.cdl_setup import columns

from cctbx.geometry_restraints.linking_class import linking_class
from six.moves import range
origin_ids = linking_class()

class ThreeProteinResiduesWithCDL(ThreeProteinResidues):
  #
  # CDL specific methods
  #
  def get_i_seqs(self):
    atoms = {}
    # i-1
    if self[0]:
      for name in [" C  ", " CA "]: # need CA_minus_1 for omega-CDL
        atom = self[0].find_atom_by(name=name)
        if atom: atoms["%s_minus_1" % name.strip()] = atom
    # i
    for name in [" N  ", " CA ", " CB ", " C  ", " O  ", ' H  ', ' CD ', ' CG ']:
      atom = self[1].find_atom_by(name=name)
      if atom: atoms["%s_i" % name.strip()] = atom
    # i+1
    for name in [" N  ", " CA "]: # need CA_plus_1 for omega-CDL
      atom = self[2].find_atom_by(name=name)
      if atom: atoms["%s_plus_1" % name.strip()] = atom
    return atoms

  def cis_group(self, limit=45, omega_cdl=False):
    omegas = self.get_omega_values()
    assert omegas
    if omega_cdl: del omegas[0]
    else: del omegas[1]
    def _is_cis(angle):
      return self._define_omega_a_la_duke_using_limit(angle, limit=limit)=='cis'
    if list(filter(_is_cis, omegas)): return True
    return False

  def get_omega_value(self,
                      omega_cdl=False,
                     ):
    #
    # this is very poor! there needs to be a better way to check for cis-
    #
    assert not omega_cdl
    for i, residue in enumerate(self):
      if i==0: continue
      if omega_cdl:
        if len(self)==self.length:
          if i==1: continue
      else:
        if i==2: continue
      omega = get_omega_value(residue, self[i-1])
      return omega

  def get_phi_psi_atoms(self,
                        only_psi_phi_pairs=True,
                        force_plus_one=False,
                        omega_cdl=False,
                        verbose=False,
                        ):
    if omega_cdl:
      if len(self) not in [self.length, self.length-1]:
        return None, None
      if len(self)==self.length-1:
        self.insert(0, None)
    else:
      if len(self)!=self.length: return None, None
    if force_plus_one: only_psi_phi_pairs=False
    if self[0] is None:
      backbone_i_minus_1 = None
    else:
      backbone_i_minus_1, junk = get_c_ca_n(self[0], return_subset=True)
      assert len(backbone_i_minus_1)==self.length
    backbone_i, junk = get_c_ca_n(self[1], return_subset=True)
    if verbose: print(backbone_i)
    if None in backbone_i: return None
    backbone_i_plus_1, junk = get_c_ca_n(self[2], return_subset=True)
    if verbose: print(backbone_i_plus_1, junk)
    if None in backbone_i_plus_1: return None
    assert len(backbone_i)==self.length
    assert len(backbone_i_plus_1)==self.length
    if omega_cdl: # phi(+1)
      phi_atoms = [
        backbone_i[0],
        backbone_i_plus_1[2],
        backbone_i_plus_1[1],
        backbone_i_plus_1[0],
        ]
    else:
      phi_atoms = [
        backbone_i_minus_1[0],
        backbone_i[2],
        backbone_i[1],
        backbone_i[0],
        ]
    psi_atoms = [
      backbone_i[2],
      backbone_i[1],
      backbone_i[0],
      backbone_i_plus_1[2],
      ]
    atoms = [phi_atoms, psi_atoms]
    if verbose:
      print(atoms)
    if not only_psi_phi_pairs:
      if self.start:
        psi_atoms = [
          backbone_i_minus_1[2],
          backbone_i_minus_1[1],
          backbone_i_minus_1[0],
          backbone_i[2],
          ]
        atoms.insert(0, psi_atoms)
      if self.end or force_plus_one:
        phi_atoms = [
          backbone_i[0],
          backbone_i_plus_1[2],
          backbone_i_plus_1[1],
          backbone_i_plus_1[0],
          ]
        atoms.append(phi_atoms)
    if 0:
      for dihedral in atoms:
        print('-'*80)
        for atom in dihedral:
          print(atom.quote())
    return atoms

  def get_phi_psi_angles(self,
                         only_psi_phi_pairs=True,
                         force_plus_one=False,
                         omega_cdl=False,
                         verbose=False,
                         ):
    atoms = self.get_phi_psi_atoms(only_psi_phi_pairs=only_psi_phi_pairs,
                                   force_plus_one=force_plus_one,
                                   omega_cdl=omega_cdl,
                                   verbose=verbose,
                                  )
    if atoms is None: return None
    dihedrals = []
    for dihedral in atoms:
      phi_or_psi=dihedral_angle(sites=[atom.xyz for atom in dihedral], deg=True)
      dihedrals.append(phi_or_psi)
    if verbose:
      for phi_or_psi in dihedrals:
        print('phi_or_psi',phi_or_psi)
    return dihedrals

  def get_cdl_key(self,
                  exact=False,
                  only_psi_phi_pairs=True,
                  force_plus_one=False,
                  omega_cdl=False,
                  verbose=False):
    dihedrals=self.get_phi_psi_angles(only_psi_phi_pairs=only_psi_phi_pairs,
                                      omega_cdl=omega_cdl,
                                      verbose=verbose,
                                      )
    if dihedrals is None: return None
    if None in dihedrals: return None
    key = []
    for phi_or_psi in dihedrals:
      if exact:
        key.append(phi_or_psi)
      else:
        key.append(round_to_ten(phi_or_psi))
    return tuple(key)

  def apply_updates(self,
                    restraint_values,
                    cdl_proxies,
                    ideal=True,
                    esd=True,
                    esd_factor=1.,
                    average=True,
                    verbose=False,
                    ):
    def _get_angle_proxy(names):
      angle_proxy = cdl_proxies.get(tuple(names), None)
      if angle_proxy is None:
        rnames = copy.deepcopy(names)
        rnames.reverse()
        angle_proxy = cdl_proxies.get(tuple(rnames), None)
      return angle_proxy
    def _get_i_seqs(names):
      for j in range(len(names)):
        if names[j] not in atoms:
          # print('names not found',names)
          return None
        names[j] = atoms[names[j]].i_seq
      return names
    ####################
    if not average:
      if restraint_values[0]=="I":
        print(restraint_values)
        assert 0
        return
    atoms = self.get_i_seqs()
    for i, value in enumerate(restraint_values):
      if i<2: continue
      if columns[i][0]=="s": continue
      if restraint_values[i] is None: continue
      code = columns[i][1:]
      names = []
      if code=="CNA":   names = ["C_minus_1", "N_i",  "CA_i"      ]
      elif code=="NAB": names = ["N_i",       "CA_i", "CB_i"      ]
      elif code=="NAC": names = ["N_i",       "CA_i", "C_i"       ]
      elif code=="BAC": names = ["CB_i",      "CA_i", "C_i"       ]
      elif code=="ACO": names = ["CA_i",      "C_i",  "O_i"       ]
      elif code=="ACN": names = ["CA_i",      "C_i",  "N_plus_1"  ]
      elif code=="OCN": names = ["O_i",       "C_i",  "N_plus_1"  ]
      elif code=="CN":  names = ["C_minus_1",  "N_i" ]
      elif code=="NA":  names = ["N_i",  "CA_i" ]
      elif code=="AB":  names = ["CA_i", "CB_i" ]
      elif code=="AC":  names = ["CA_i", "C_i" ]
      elif code=="CO":  names = ["C_i",  "O_i" ]
      # needed for cis_127
      elif code=='CND': names = ['C_minus_1', 'N_i', 'CD_i']
      elif code=='AND': names = ['CA_i', 'N_i', 'CD_i']
      elif code=='NDG': names = ['N_i', 'CD_i', 'CG_i']
      elif code=='ABG': names = ['CA_i','CB_i', 'CG_i']
      elif code=='BGD': names = ['CB_i','CG_i', 'CD_i']
      elif code=='BG':  names = ['CB_i','CG_i']
      elif code=='GD':  names = ['CG_i','CD_i']
      elif code=='ND':  names = ['N_i', 'CD_i']
      # not all amino acids have a CB
      if "CB_i" in names and not "CB_i" in atoms: continue
      # sometimes the O is not in the model
      if "O_i" in names and not "O_i" in atoms: continue
      names = _get_i_seqs(names)
      if names is None: continue
      if len(names)==3:
        angle_proxy = _get_angle_proxy(names)
        if angle_proxy is None: continue
        if angle_proxy.origin_id==origin_ids.get_origin_id('edits'): continue
        if 0:
          outl=""
          for key in atoms:
            outl += "\n    %-10s %s" % ( key, atoms[key].quote())
          raise Sorry("""CDL angle to be changed not set in model.
  Possible problems:
    Residue on special positions.

  Check:%s""" % outl)
        if verbose:
          print(" %s i_seqs %-15s initial %12.3f %12.3f final %12.3f %12.3f" % (
            code,
            angle_proxy.i_seqs,
            angle_proxy.angle_ideal,
            angle_proxy.weight,
            restraint_values[i],
            1/restraint_values[i+1]**2,
            ))
        names.sort()
        self.registry[tuple(names)] = restraint_values[i]
        if ideal: angle_proxy.angle_ideal = restraint_values[i]
        if esd: angle_proxy.weight = esd_factor * 1/restraint_values[i+1]**2
      elif len(names)==2:
        bond=self.bond_params_table.lookup(*names)
        if not bond:
          atoms = []
          for atom in self.atoms():
            if atom.i_seq in names: atoms.append(atom)
          outl = 'CDL error: bond not found between %s - %s' % (
            atoms[0].quote(),
            atoms[1].quote(),
            )
          raise Sorry(outl)
        if verbose:
          print(" i_seqs %-15s initial %12.3f %12.3f final %12.3f %12.3f" % (
            names,
            bond.distance_ideal,
            bond.weight,
            restraint_values[i],
            1/restraint_values[i+1]**2,
            ))
        names.sort()
        self.registry[tuple(names)] = restraint_values[i]
        #print "BOND", 1/restraint_values[i+1]**2/bond.weight,1/restraint_values[i+1]**2, bond.weight
        if ideal: bond.distance_ideal = restraint_values[i]
        if esd: bond.weight = esd_factor * 1/restraint_values[i+1]**2
        assert restraint_values[i+1]<.1, 'CDL bond restraint larger than 0.1'
      else:
        assert 0, 'names %s not found' % names
    # adjust X-N-H angles to obtain planar
    nh_atoms = 0
    if self[0].find_atom_by(name=" C  "):
      nh_atoms += 1
    for name in [" N  ", " CA ", ' H  ']:
      if self[1].find_atom_by(name=name):
        nh_atoms += 1
    if nh_atoms == 4:
      CNCA = _get_angle_proxy(_get_i_seqs(["C_minus_1", "N_i", "CA_i"]))
      CNH = _get_angle_proxy(_get_i_seqs(["C_minus_1", "N_i", "H_i"]))
      CANH = _get_angle_proxy(_get_i_seqs(["CA_i", "N_i", "H_i"]))
      if not (CNH and CANH):
        error_atoms = []
        for atom in self[0].atoms():
          error_atoms.append('%s\n' %atom.quote())
        for atom in self[1].atoms():
          error_atoms.append('%s\n' %atom.quote())
        raise Sorry('''
  Certain angles in the protein chain (C-N-H or CA-N-H) have not been found
  in the restraints by the Conformational Dependent Library. This usually
  means that the protein backbone is traversing a special position.

  This is unlikely.

  However, to proceed, set cdl=False.

%s
                    ''' % ''.join(error_atoms))
      total = CNCA.angle_ideal + CNH.angle_ideal + CANH.angle_ideal
      diff = (total-360)/2
      CNH.angle_ideal-=diff
      CANH.angle_ideal-=diff
      assert 360 - (CNCA.angle_ideal + CNH.angle_ideal + CANH.angle_ideal)<0.1

  def apply_average_updates(self, averages, verbose=False):
    if verbose:
      print(averages)
      print(averages.n)
    if not averages.n: return
    for key in list(averages.n.keys()):
      if len(key)==2:
        bond=self.bond_params_table.lookup(*key)
        bond.distance_ideal = averages[key]/averages.n[key]
      elif len(key)==3:
        rkey = (key[2],key[1],key[0])
        averages.n[rkey]=averages.n[key]
    for angle in self.geometry.angle_proxies:
      if angle.i_seqs in averages.n:
        key = angle.i_seqs
        if key not in averages:
          assert 0
        angle.angle_ideal = averages[key]/averages.n[key]


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/multi_residue_class.py
from __future__ import absolute_import, division, print_function
import copy

from mmtbx.conformation_dependent_library.cdl_utils import \
  get_c_ca_n
from mmtbx.conformation_dependent_library.cdl_utils import \
  distance2, get_omega_value, get_phi_psi_angles
from mmtbx.conformation_dependent_library.cdl_utils import \
  get_ca_dihedrals
from mmtbx.conformation_dependent_library.LinkedResidues import LinkedResidues
from six.moves import range

class RestraintsRegistry(dict):
  def __init__(self):
    self.n = {}

  def __repr__(self):
    outl = "RestraintsRegistry"
    outl += "\n  %s(%d)" % (list(self.keys()), len(self))
    outl += "\n  %s" % self.n
    return outl

  def __setitem__(self, key, item):
    if key in self:
      if self[key]!=item:
        self.n.setdefault(key,1)
        self.n[key]+=1
        dict.__setitem__(self, key, (self[key]+item))
    else:
      dict.__setitem__(self, key, item)

class ProteinResidues(LinkedResidues):
  def __init__(self,
               geometry,
               length=3, # CDL & other psi/phi apps
               allow_poly_ca=False,
               registry=None,
               include_non_linked=False,
              ):
    LinkedResidues.__init__(self,
                            geometry,
                            length=length,
                            allow_poly_ca=allow_poly_ca,
                            registry=registry,
                            include_non_linked=include_non_linked,
                            )

  def show(self):
    outl = "%sProteinResidues" % self.length
    for residue in self:
      if residue is not None: outl += " %s(%s)" % (residue.resname, residue.resseq)
      else: outl += ' "%s"' % residue
    outl += " %s" % self.are_linked(return_value=True)
    if self.start is not None: outl += " start=T"
    if self.end is not None: outl += " end=T"
    return outl

  def show_detailed(self):
    outl = "%sProteinResidues" % self.length
    outl += "\nREMARK"
    for residue in self:
      for atom in residue.atoms():
        outl += "\n%s" % atom.format_atom_record()
    return outl

  def get_omega_value(self): assert 0

  def _define_omega_a_la_duke_using_limit(self,
                                          omega,
                                          limit=45.,
                                          ):
    if omega is None: return None
    if abs(omega)<limit: return 'cis'
    elif 180-abs(omega)<limit: return 'trans'
    else: return 'twisted'

  def cis_group(self,
                limit=45.,
#                omega_cdl=False, # need last not middle
                verbose=False):
    # is any omega a cis angle?
    # assert not omega_cdl
    #cis_peptide_bond = False
    #omega = self.get_omega_value(omega_cdl=omega_cdl)
    #if omega is None: return None
    omegas = self.get_omega_values()
    assert omegas
    def _is_cis(angle):
      return self._define_omega_a_la_duke_using_limit(angle, limit=limit)=='cis'
    if list(filter(_is_cis, omegas)): return True
    return False
    #if self._define_omega_a_la_duke_using_limit(omega, limit=limit)=='cis':
    #  cis_peptide_bond = True

  def trans_group(self, limit=45.):
    return not self.cis_group(limit=limit)

  def cis_trans_twisted_list(self, limit=45.):
    omegas = self.get_omega_values()
    def _is_cis_trans_twisted(angle):
      return self._define_omega_a_la_duke_using_limit(angle, limit=limit)
    return [_is_cis_trans_twisted(o) for o in omegas]

  def are_linked(self,
                 return_value=False,
                 use_distance_always=False,
                 bond_cut_off=2.,
                 allow_poly_ca=False,
                 poly_ca_cut_off=4.,
                 verbose=True):
    '''
    Need to add poly-Calpha chains
      CA-CA 4.5 is use in CaBLAM, maybe shorter
    '''
    allow_poly_ca = allow_poly_ca or self.allow_poly_ca
    d2 = None
    bond_cut_off *= bond_cut_off
    poly_ca_cut_off *= poly_ca_cut_off
    for i, residue in enumerate(self):
      if i==0: continue
      ccn1, outl1 = get_c_ca_n(residue, return_subset=True)
      if self[i-1] is None: # place holder for omega CDL
        return False
      ccn2, outl2 = get_c_ca_n(self[i-1], return_subset=True)
      if ccn1 is None:
        for line in outl1:
          if line not in self.errors:
            self.errors.append(line)
        break
      if ccn2 is None:
        for line in outl2:
          if line not in self.errors:
            self.errors.append(line)
        break
      n = ccn1[2]
      c = ccn2[0]
      if n is None or c is None:
        if not allow_poly_ca: return False
        #poly ca "bonding" is checked only if peptide bond is missing
        #  and if poly ca chains are allowed
        ca1 = ccn1[1]
        ca2 = ccn2[1]
        if ca1 is None or ca2 is None: return False
        d2 = distance2(ca1,ca2)
        if d2<poly_ca_cut_off:
          bond=True
          continue
        else:
          bond=False
          break
      if self.bond_params_table is None:
        d2 = distance2(n,c)
        if d2<bond_cut_off: bond=True
        else: bond=False
      else:
        bond=self.bond_params_table.lookup(c.i_seq, n.i_seq)
        if not bond and use_distance_always:
          # needed for situations where atoms are added and the i_seq is updated
          if distance2(n,c)<bond_cut_off: bond=True
      if not bond:
        break
    else:
      return True
    if return_value: return d2
    return False

  def get_phi_psi_angles(self): assert 0

  def get_omega_values(self, verbose=False):
    rc=[]
    for i, residue in enumerate(self):
      if i==0: continue
      omega = get_omega_value(residue, self[i-1], verbose=verbose)
      rc.append(omega)
    return rc

  def get_residue_group_from_hierarchy(self, hierarchy, index):
    atom = self[index].atoms()[0]
    for i in range(atom.i_seq, len(hierarchy.atoms())):
      tmp = hierarchy.atoms()[i]
      if tmp.id_str()==atom.id_str(): break
    atom = hierarchy.atoms()[i]
    return atom.parent().parent()

class TwoProteinResidues(ProteinResidues):
  def get_omega_value(self):
    return get_omega_value(self[1], self[0])

class ThreeProteinResidues(ProteinResidues):
  def get_omega_values(self,
                       #omega_cdl=None,
                       verbose=False,
                       ):
    #assert omega_cdl is None, 'can not use omega_cdl for %sProteinResidues' % self.length
    return ProteinResidues.get_omega_values(self, verbose=verbose)

  def get_phi_psi_atoms(self,
                        only_psi_phi_pairs=True,
                        force_plus_one=False,
                        verbose=False,
                        ):
    if len(self)!=self.length: return None, None
    if force_plus_one: only_psi_phi_pairs=False
    if self[0] is None:
      backbone_i_minus_1 = None
    else:
      backbone_i_minus_1, junk = get_c_ca_n(self[0], return_subset=True)
      assert len(backbone_i_minus_1)==self.length
    backbone_i, junk = get_c_ca_n(self[1], return_subset=True)
    if verbose: print(backbone_i)
    if None in backbone_i: return None
    backbone_i_plus_1, junk = get_c_ca_n(self[2], return_subset=True)
    if verbose: print(backbone_i_plus_1, junk)
    if None in backbone_i_plus_1: return None
    assert len(backbone_i)==self.length
    assert len(backbone_i_plus_1)==self.length
    phi_atoms = [
      backbone_i_minus_1[0],
      backbone_i[2],
      backbone_i[1],
      backbone_i[0],
      ]
    psi_atoms = [
      backbone_i[2],
      backbone_i[1],
      backbone_i[0],
      backbone_i_plus_1[2],
      ]
    atoms = [phi_atoms, psi_atoms]
    if verbose: print(atoms)
    if not only_psi_phi_pairs:
      if self.start:
        psi_atoms = [
          backbone_i_minus_1[2],
          backbone_i_minus_1[1],
          backbone_i_minus_1[0],
          backbone_i[2],
          ]
        atoms.insert(0, psi_atoms)
      if self.end or force_plus_one:
        phi_atoms = [
          backbone_i[0],
          backbone_i_plus_1[2],
          backbone_i_plus_1[1],
          backbone_i_plus_1[0],
          ]
        atoms.append(phi_atoms)
    if verbose:
      for dihedral in atoms:
        print('-'*80)
        for atom in dihedral:
          print(atom.quote())
    return atoms

  def get_phi_psi_angles(self, verbose=False):
    if verbose:
      for residue in self:
        print(residue.id_str())
    return get_phi_psi_angles(self, verbose=verbose)

  def get_ramalyze_key(self,
                       limit=30.,
                       verbose=False,
                       ):
    from mmtbx.validation import ramalyze
    # defined in mmtbx.validation.ramalyze:
    # res_types = ["general", "glycine", "cis-proline", "trans-proline",
    #              "pre-proline", "isoleucine or valine"]
    #
    # This should be consistent with mmtbx/validation/ramalyze.py,
    # lines 179-195. Particularly, prepro comes before ile/val
    if self[1].resname == "PRO":
      if self.cis_group(limit=limit): return ramalyze.RAMA_CISPRO
      else: return ramalyze.RAMA_TRANSPRO
    elif self[1].resname == "GLY": return ramalyze.RAMA_GLYCINE
    elif self[2].resname == "PRO": return ramalyze.RAMA_PREPRO
    elif self[1].resname in ["ILE", "VAL"]: return ramalyze.RAMA_ILE_VAL
    else: return ramalyze.RAMA_GENERAL

  def provide_second_sub_unit_if_unlinked(self):
    # used if residue is appended using superclass method
    if not self.are_linked():
      sub_unit = copy.copy(self) # calls append to delete first sub unit
      while not self.are_linked():
        del self[-1]
      return sub_unit
    return None

  def get_dummy_dihedral_proxies(self, only_psi_phi_pairs=True):
    #
    # Needs testing. One of the candidates is 3j0d, chain I, the first
    # residue is missing CA atom.
    #
    from cctbx.geometry_restraints import dihedral_proxy
    atoms = self.get_phi_psi_atoms(only_psi_phi_pairs=only_psi_phi_pairs)
    proxies = []
    if atoms is None: return proxies
    for dihedral in atoms:
      if None not in dihedral:
        proxy = dihedral_proxy(
            i_seqs=[atom.i_seq for atom in dihedral],
            angle_ideal=0,
            weight=1)
        proxies.append(proxy)
    return proxies

def id_str_for_phi_psi_2(residue, ignore_altloc=False):
  id_str = residue.id_str(suppress_segid=True).replace('pdbres=','').replace('"','')
  if ignore_altloc:
    return ' %s' % id_str
  altloc=''
  for atom in residue.atoms():
    if atom.name not in [' N  ', ' CA ', ' C  ']: continue
    atom_group = atom.parent()
    if atom_group.altloc:
      altloc = atom_group.altloc
      break
  return '%1s%s' % (altloc, id_str)

class FourProteinResidues(ThreeProteinResidues):
  def get_ca_dihedrals(self, verbose=False):
    if verbose:
      for residue in self:
        print(residue.id_str())
    return get_ca_dihedrals(self)

  def id_str_for_phi_psi_2(self, ignore_altloc=False):
    return '%s ~> %s' % ( id_str_for_phi_psi_2(self[1], ignore_altloc),
                          id_str_for_phi_psi_2(self[2], ignore_altloc))

class FiveProteinResidues(FourProteinResidues):
  def get_cablam_info(self):
    assert 0

if __name__=="__main__":
  import sys
  from iotbx import pdb
  from mmtbx.conformation_dependent_library.tst_rdl import get_geometry_restraints_manager
  filename=sys.argv[1]
  pdb_inp = pdb.input(filename)
  pdb_hierarchy = pdb_inp.construct_hierarchy()
  geometry_restraints_manager = get_geometry_restraints_manager(filename)
  pdb_hierarchy.reset_i_seq_if_necessary()
  from mmtbx.conformation_dependent_library import generate_protein_fragments
  for i in range(2,11):
    for threes in generate_protein_fragments(pdb_hierarchy,
                                             geometry_restraints_manager,
                                             length=i,
                                             #verbose=verbose,
                                             ):
      print(threes)
      try: print('  omega   %5.1f' % threes.get_omega_value())
      except: print('  omega is not valid') # intentional
      print('  omegas  %s' % threes.get_omega_values())
      try: print("  cis?    %-5s %s" % (threes.cis_group(), threes.cis_group(limit=30)))
      except: print('  cis? is not valid') # intentional
      try: print("  trans?  %-5s %s" % (threes.trans_group(), threes.trans_group(limit=30)))
      except: print('  trans? is not valid') # intentional
      print(threes.cis_trans_twisted_list())
      # print('  cis/trans/twisted? %s' % ' '.join(threes.cis_trans_twisted_list()))
      try: print("  rama    %s" % threes.get_ramalyze_key())
      except: print('  rama not specified') # intentional
      print('  conf    %s' % threes.is_pure_main_conf())
      try: print('  phi/psi %s' % threes.get_phi_psi_angles())
      except: print('  phi/psi not specified') # intentional
      try: print('  CA dihedrals %s' % threes.get_ca_dihedrals())
      except: print('  CA dihedrals not specified') # intentional
    print("OK",i+2)


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/nucleotides.py
from __future__ import division, print_function

restraintlib_installed=True
try:
  from restraintlib import launcher
  from restraintlib.printer import TuplePrinter
  from restraintlib.restraints import analyze_pdb_hierarhy
except ImportError as e:
  restraintlib_installed = False

cofsky_esd = {
  'AD' : {
    ("C1'", 'N1') : 0.02,
    ("C3'", "O3'"): 0.02,
    ("O4'", "C1'", 'N9') : 0.3,
    ("O4'", "C1'", 'N1') : 0.3,
  },
  'U' : {
    ('C5', 'C6', 'N1') : 0.5,
    ('C6', 'N1', 'C2') : 0.5,
  },
  'C' : {
    ('C6', 'N1', 'C2') : 0.5,
  },
  'A' : {
    ('N7', 'C8', 'N9') : 0.5,
  },
}
cofsky_esd['TD']=cofsky_esd['AD']
cofsky_esd['CD']=cofsky_esd['AD']
cofsky_esd['GD']=cofsky_esd['AD']

def update_restraints(hierarchy,
                      geometry, # restraints_manager,
                      use_phenix_esd=True,
                      csd_factor=1.,
                      use_cofsky_esd=False,
                      log=None,
                      verbose=False,
                      ):
  if not restraintlib_installed:
    print('  RestraintLib not installed\n', file=log)
    return False
  if use_cofsky_esd:
    assert 0, 'use_cofsky_esd not implemented'
  restraint_groups = launcher.load_restraints_lib()
  printer = TuplePrinter(override_sigma=use_phenix_esd) # use_phenix_esd not really needed here
  rc = analyze_pdb_hierarhy(hierarchy, restraint_groups, restraint_groups, printer)
  bond_restraints = []
  angle_restraints = {}
  if verbose:
    atoms = hierarchy.atoms()
  for i_seqs, ideal, esd in rc:
    if verbose:
      if len(i_seqs)==2:
        print('%-20s %s %s %s %s' % (i_seqs,
              atoms[i_seqs[0]].quote(),
              atoms[i_seqs[1]].quote(),
              ideal,
              esd,
              ))
      else:
        print('%-20s %s %s %s %s %s' % (i_seqs,
              atoms[i_seqs[0]].quote(),
              atoms[i_seqs[1]].quote(),
              atoms[i_seqs[2]].quote(),
              ideal,
              esd,
              ))
    if len(i_seqs)==2:
      bond_restraints.append([i_seqs, ideal, esd])
    elif len(i_seqs)==3:
      angle_restraints[i_seqs]=[ideal, esd]
    else:
      assert 0
  remove=[]
  n_bonds=0
  c_bonds=0
  non_standard_issues=False
  for i, (i_seqs, ideal, esd) in enumerate(bond_restraints):
    if verbose:
      print(i, i_seqs, atoms[i_seqs[0]].quote(), atoms[i_seqs[1]].quote(), ideal, esd)
    bond=geometry.bond_params_table.lookup(*list(i_seqs))
    remove.append(i)
    if bond is None:
      atoms = hierarchy.atoms()
      print('bond between %s and %s not found in restraints' % (
        atoms[i_seqs[0]].quote(),
        atoms[i_seqs[1]].quote()
        ))
      non_standard_issues=True
      continue
    if bond.distance_ideal!=ideal:
      c_bonds+=1
    bond.distance_ideal=ideal
    if not use_phenix_esd:
      if csd_factor!=1: esd*=csd_factor
      bond.weight = 1/esd**2
    n_bonds+=1
  remove.reverse()
  for r in remove:
    del bond_restraints[r]
  n_angles=0
  c_angles=0
  for angle_proxy in geometry.angle_proxies:
    i_seqs = list(angle_proxy.i_seqs)
    ap = None
    if tuple(i_seqs) in angle_restraints:
      ap = angle_proxy
      i_seqs = tuple(i_seqs)
    if ap is None:
      i_seqs.reverse()
      i_seqs = tuple(i_seqs)
      if tuple(i_seqs) in angle_restraints:
        ap = angle_proxy
    if ap:
      if verbose:
        old_angle_ideal=angle_proxy.angle_ideal
        old_angle_weight=angle_proxy.weight
        print(" i_seqs %-15s initial %12.3f %12.3f" % (
          angle_proxy.i_seqs,
          angle_proxy.angle_ideal,
          angle_proxy.weight,
          ), end=' ', file=log)
      assert angle_proxy.angle_ideal<181
      if angle_proxy.angle_ideal!=angle_restraints[i_seqs][0]:
        c_angles+=1
      angle_proxy.angle_ideal = angle_restraints[i_seqs][0]
      if not use_phenix_esd:
        esd = angle_restraints[i_seqs][1]
        if csd_factor!=1: esd*=csd_factor
        angle_proxy.weight = 1/esd**2
      del angle_restraints[i_seqs]
      n_angles+=1
      if verbose:
        print(" i_seqs %-15s final %12.3f %12.3f\n" % (
          angle_proxy.i_seqs,
          angle_proxy.angle_ideal,
          angle_proxy.weight,
          ), end=' ', file=log)
  assert not bond_restraints
  for i_seqs in angle_restraints:
    print(i_seqs,
          atoms[i_seqs[0]].quote(),
          atoms[i_seqs[1]].quote(),
          atoms[i_seqs[2]].quote(),
          ideal,
          esd,
          )
  if not non_standard_issues:
    assert not angle_restraints, 'not finished angle_restraints: %s' % angle_restraints
  if n_bonds or n_angles:
    print('''  CDL for nucleotides adjusted restraints counts
    coord. : total (unchanged)
    bonds  : %5d (%5d)
    angles : %5d (%5d)''' % (n_bonds, c_bonds, n_angles, c_angles),
      file=log)
  return (n_bonds, c_bonds, n_angles, c_angles)


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/omega.py
from __future__ import absolute_import, division, print_function
import copy

from mmtbx.conformation_dependent_library.bond_angle_registry import \
  bond_angle_registry
from mmtbx.conformation_dependent_library import generate_protein_threes
from mmtbx.conformation_dependent_library.multi_residue_class import \
  RestraintsRegistry

from mmtbx.conformation_dependent_library.omega_database import omega_database

from mmtbx.conformation_dependent_library.cdl_utils import get_res_type_group
from six.moves import range

columns = [
  "",
  "",
  "mACNA", # Ca(0) - C(0) - N(1) - Ca(1)
  "sACNA",
  ]

def get_restraint_values(threes, verbose=False):

  res_type_group = get_res_type_group(
    threes[-2].resname,
    threes[-1].resname,
  )
  if verbose: print(threes[-2].resname,threes[-1].resname,res_type_group)
  if res_type_group is None: return None
  restraint_values = []
  key = threes.get_cdl_key(force_plus_one=True,
                           omega_cdl=True,
                          )
  if verbose: print('key',key)
  if key is None: return None
  previous_key = None
  if len(key)==4:
    previous_key = key[:2]
  key = key[-2:]
  if previous_key:
    rv = omega_database[res_type_group][previous_key]
    restraint_values.append(rv)
  else:
    restraint_values.append(None)
  rv = omega_database[res_type_group][key]
  restraint_values.append(rv)
  return restraint_values

def setup_restraints(geometry,
                     verbose=False,
                     ):
  ba_registry = bond_angle_registry()
  for angle in geometry.dihedral_proxies:
    ba_registry[angle.i_seqs]=angle
  return ba_registry

def apply_updates(self,
                  restraint_value_pairs,
                  cdl_proxies,
                  ideal=True,
                  esd=True,
                  esd_factor=1.,
                  average=True,
                  verbose=False,
                  ):
    if not average:
      if restraint_value_pairs[0]=="I":
        print(restraint_values)
        assert 0
        return
    atoms = self.get_i_seqs()
    for j, restraint_values in enumerate(restraint_value_pairs):
      if restraint_values is None: continue
      for i, value in enumerate(restraint_values):
        if verbose:
          print('i,value',i,value)
        if i<2: continue
        if columns[i][0]=="s": continue
        code = columns[i][1:]
        names = []
        if code=="ACNA":
          if j:
            names = ["CA_i", "C_i", "N_plus_1", "CA_plus_1"]
          else:
            names = ["CA_minus_1", "C_minus_1", "N_i", "CA_i"]
        for j in range(len(names)):
          names[j] = atoms[names[j]].i_seq
        if len(names)==4:
          rnames = copy.deepcopy(names)
          rnames.reverse()
          angle_proxy = cdl_proxies.get(tuple(names), None)
          if angle_proxy is None:
            angle_proxy = cdl_proxies.get(tuple(rnames), None)
          if angle_proxy is None:
            outl=""
            for key in atoms:
              outl += "\n    %-10s %s" % ( key, atoms[key].quote())
            raise Sorry("""CDL angle to be changed not set in model.
  Possible problems:
    Residue on special positions.

  Check:%s""" % outl)
          if verbose:
            print(" i_seqs %-15s initial %12.3f %12.3f final %12.3f %12.3f" % (
              angle_proxy.i_seqs,
              angle_proxy.angle_ideal,
              angle_proxy.weight,
              restraint_values[i],
              1/restraint_values[i+1]**2,
              ))
          names.sort()
          self.registry[tuple(names)] = restraint_values[i]
          if ideal: angle_proxy.angle_ideal = restraint_values[i]
          if esd: angle_proxy.weight = esd_factor * 1/restraint_values[i+1]**2
        else:
          assert 0

def update_restraints(hierarchy,
                      geometry, # restraints_manager,
                      current_geometry=None, # xray_structure!!
                      sites_cart=None,
                      cdl_proxies=None,
                      ideal=True,
                      esd=True,
                      esd_factor=1.,
                      log=None,
                      verbose=False,
                      ):
  global registry
  registry = RestraintsRegistry()
  if current_geometry:
    assert not sites_cart
    sites_cart = current_geometry.sites_cart()
  if sites_cart:
    pdb_atoms = hierarchy.atoms()
    # XXX PDB_TRANSITION VERY SLOW
    for j_seq, atom in enumerate(pdb_atoms):
      atom.xyz = sites_cart[j_seq]

  threes = None
  average_updates = 0
  total_updates = 0
  for threes in generate_protein_threes(hierarchy,
                                        geometry,
                                        cdl_class=True,
                                        omega_cdl=True,
                                        #verbose=verbose,
                                        ):
    threes.apply_updates = apply_updates
    if threes.cis_group(omega_cdl=True):
      if verbose and 0:
        print('cis '*20)
        print(threes)
      continue

    restraint_values = get_restraint_values(threes, verbose=verbose)
    if restraint_values is None: continue
    if restraint_values[0]=="I":
      average_updates += 1
    else:
      total_updates += 1
    threes.apply_updates(threes,
                         restraint_values,
                         cdl_proxies,
                         ideal=ideal,
                         esd=esd,
                         esd_factor=esd_factor,
                         verbose=verbose,
                         )
  if registry.n:
    threes.apply_average_updates(registry)
    assert 0
  geometry.reset_internals()
  if verbose and threes and threes.errors:
    if log:
      log.write("  Residues not completely updated with CDL restraints\n\n")
    for line in threes.errors:
      if log:
        log.write("%s\n" % line)
      else:
        print(line)
  return geometry

def run(filename):
  if False:
    for i in range(-188,188):
      print(i,round_to_ten(i),abs(i-round_to_ten(i)))
    assert 0

  pdb_inp = iotbx.pdb.input(filename)
  hierarchy = pdb_inp.construct_hierarchy()
  hierarchy.atoms().reset_serial()
  assert 0, "broken run method"
  update_restraints(hierarchy,
                    #verbose=True,
                    )

if __name__=="__main__":
  if 0:
    psi = -180
    lookup = "Gly_nonxpro"
    print(lookup)
    for phi in range(170,181):
      key = (round_to_ten(psi),round_to_ten(phi))
      print('key',psi,phi,round_to_ten(psi),round_to_ten(phi),key, end=' ')
      print(cdl_database[lookup][key][:4])

  run(sys.argv[1])


 *******************************************************************************


 *******************************************************************************
mmtbx/conformation_dependent_library/omega_database.py
from __future__ import absolute_import, division, print_function
from six.moves import range

omega_database = {
  "All" : {
    (-180, -180) : ['B', 9, 177.39, 4.57],
    (-180, -170) : ['B', 3, 179.05, 5.1],
    (-180, -160) : ['I', 28917, 179.07, 6.33],
    (-180, -50) : ['B', 5, 183.72, 4.47],
    (-180, -40) : ['B', 6, 183.76, 4.35],
    (-180, -30) : ['B', 9, 183.01, 4.35],
    (-180, -20) : ['B', 10, 182.11, 4.35],
    (-180, -10) : ['B', 9, 180.96, 4.72],
    (-180, 0) : ['B', 6, 179.48, 5.01],
    (-180, 10) : ['B', 5, 178.62, 5.02],
    (-180, 120) : ['B', 7, 181.62, 4.17],
    (-180, 130) : ['B', 12, 180.09, 4.64],
    (-180, 140) : ['B', 20, 177.78, 5.07],
    (-180, 150) : ['B', 19, 177.09, 5.32],
    (-180, 160) : ['B', 11, 177.56, 5.08],
    (-180, 170) : ['B', 9, 177.28, 4.77],
    (-170, -180) : ['B', 9, 177.98, 5.77],
    (-170, -170) : ['B', 9, 180.86, 5.92],
    (-170, -160) : ['B', 4, 184.54, 5.99],
    (-170, -50) : ['B', 13, 183.39, 5.52],
    (-170, -40) : ['B', 31, 183.79, 5.31],
    (-170, -30) : ['B', 30, 183.17, 5.16],
    (-170, -20) : ['B', 27, 182.12, 5.38],
    (-170, -10) : ['B', 22, 180.63, 5.53],
    (-170, 0) : ['B', 11, 179.46, 5.53],
    (-170, 10) : ['B', 8, 179.31, 5.71],
    (-170, 20) : ['B', 4, 179.22, 5.66],
    (-170, 40) : ['B', 5, 179.48, 4.78],
    (-170, 60) : ['B', 3, 183.56, 6.19],
    (-170, 70) : ['B', 7, 185.33, 5.67],
    (-170, 80) : ['B', 3, 186.74, 4.92],
    (-170, 90) : ['B', 5, 186.96, 5.05],
    (-170, 100) : ['B', 6, 187.03, 5.62],
    (-170, 110) : ['B', 8, 184.21, 5.29],
    (-170, 120) : ['B', 19, 181.58, 5.2],
    (-170, 130) : ['B', 26, 180.03, 5.71],
    (-170, 140) : ['B', 34, 178.76, 5.67],
    (-170, 150) : ['B', 34, 178.34, 5.62],
    (-170, 160) : ['B', 32, 177.85, 5.75],
    (-170, 170) : ['B', 21, 177.17, 5.86],
    (-160, -180) : ['B', 26, 178.74, 6.17],
    (-160, -170) : ['B', 22, 181.65, 5.91],
    (-160, -160) : ['B', 13, 183.88, 5.39],
    (-160, -150) : ['B', 10, 184.43, 4.92],
    (-160, -70) : ['B', 4, 184.2, 4.2],
    (-160, -60) : ['B', 12, 182.87, 5.68],
    (-160, -50) : ['B', 39, 183.15, 6.47],
    (-160, -40) : ['B', 63, 183.3, 6.08],
    (-160, -30) : ['B', 66, 182.79, 5.7],
    (-160, -20) : ['B', 80, 181.73, 5.93],
    (-160, -10) : ['B', 62, 179.98, 6.01],
    (-160, 0) : ['B', 32, 179.28, 6.13],
    (-160, 10) : ['B', 25, 179.49, 6.47],
    (-160, 20) : ['B', 18, 179.4, 6.55],
    (-160, 30) : ['B', 12, 179.89, 6.3],
    (-160, 40) : ['B', 10, 179.95, 5.29],
    (-160, 50) : ['B', 9, 181.04, 4.98],
    (-160, 60) : ['B', 9, 183.22, 5.15],
    (-160, 70) : ['B', 17, 184.88, 5.14],
    (-160, 80) : ['B', 10, 185.48, 4.78],
    (-160, 90) : ['B', 8, 186.13, 5.14],
    (-160, 100) : ['B', 16, 186.53, 5.82],
    (-160, 110) : ['B', 22, 184.41, 5.8],
    (-160, 120) : ['B', 38, 181.94, 5.92],
    (-160, 130) : ['B', 87, 180.13, 6.19],
    (-160, 140) : ['B', 116, 178.83, 5.93],
    (-160, 150) : ['B', 184, 178.32, 5.66],
    (-160, 160) : ['B', 150, 177.76, 5.72],
    (-160, 170) : ['B', 60, 177.39, 5.96],
    (-150, -180) : ['B', 38, 179.22, 6.39],
    (-150, -170) : ['B', 33, 181.97, 6.11],
    (-150, -160) : ['B', 27, 183.84, 5.78],
    (-150, -150) : ['B', 14, 184.55, 5.54],
    (-150, -140) : ['B', 6, 184.85, 5.49],
    (-150, -60) : ['B', 8, 183.26, 6.87],
    (-150, -50) : ['B', 28, 183.12, 7.22],
    (-150, -40) : ['B', 57, 182.77, 6.59],
    (-150, -30) : ['B', 73, 182.56, 6.27],
    (-150, -20) : ['B', 90, 181.87, 6.38],
    (-150, -10) : ['B', 65, 180.46, 6.38],
    (-150, 0) : ['B', 48, 180.16, 6.83],
    (-150, 10) : ['B', 37, 180.35, 7.61],
    (-150, 20) : ['B', 23, 180.2, 7.46],
    (-150, 30) : ['B', 17, 179.92, 6.84],
    (-150, 40) : ['B', 10, 179.8, 5.97],
    (-150, 50) : ['B', 15, 181.17, 5.65],
    (-150, 60) : ['B', 14, 183.15, 5.24],
    (-150, 70) : ['B', 19, 183.76, 4.69],
    (-150, 80) : ['B', 10, 184.14, 4.85],
    (-150, 90) : ['B', 5, 185.75, 5.72],
    (-150, 100) : ['B', 12, 186.25, 6.31],
    (-150, 110) : ['B', 20, 184.67, 6.35],
    (-150, 120) : ['B', 53, 182.21, 6.24],
    (-150, 130) : ['B', 154, 179.93, 6.17],
    (-150, 140) : ['B', 254, 178.23, 6.16],
    (-150, 150) : ['B', 274, 177.59, 6.16],
    (-150, 160) : ['B', 219, 177.38, 6.2],
    (-150, 170) : ['B', 99, 177.51, 6.31],
    (-140, -180) : ['B', 64, 179.47, 6.78],
    (-140, -170) : ['B', 52, 182.02, 6.31],
    (-140, -160) : ['B', 34, 183.74, 6.06],
    (-140, -150) : ['B', 29, 184.37, 6.13],
    (-140, -140) : ['B', 13, 185.1, 6.36],
    (-140, -130) : ['B', 3, 184.68, 6.46],
    (-140, -70) : ['B', 4, 183.15, 5.27],
    (-140, -60) : ['B', 7, 183.13, 6.85],
    (-140, -50) : ['B', 35, 182.93, 7.25],
    (-140, -40) : ['B', 79, 182.68, 6.99],
    (-140, -30) : ['B', 92, 182.73, 6.8],
    (-140, -20) : ['B', 87, 182.47, 6.72],
    (-140, -10) : ['B', 89, 181.92, 6.46],
    (-140, 0) : ['B', 56, 181.68, 6.69],
    (-140, 10) : ['B', 45, 181.11, 7.27],
    (-140, 20) : ['B', 35, 180.14, 7.17],
    (-140, 30) : ['B', 25, 178.87, 6.59],
    (-140, 40) : ['B', 21, 178.76, 6.09],
    (-140, 50) : ['B', 21, 180.24, 5.78],
    (-140, 60) : ['B', 20, 182.15, 5.24],
    (-140, 70) : ['B', 19, 183.13, 4.7],
    (-140, 80) : ['B', 10, 184.2, 5.17],
    (-140, 90) : ['B', 8, 185.58, 6.2],
    (-140, 100) : ['B', 22, 185.92, 6.34],
    (-140, 110) : ['B', 42, 184.74, 6.36],
    (-140, 120) : ['B', 136, 182.17, 6.22],
    (-140, 130) : ['B', 334, 179.58, 6.14],
    (-140, 140) : ['B', 479, 177.61, 6.36],
    (-140, 150) : ['B', 390, 176.77, 6.66],
    (-140, 160) : ['B', 286, 176.68, 6.87],
    (-140, 170) : ['B', 130, 177.26, 6.91],
    (-130, -180) : ['B', 71, 179.26, 7.27],
    (-130, -170) : ['B', 42, 181.6, 6.75],
    (-130, -160) : ['B', 29, 183.36, 5.92],
    (-130, -150) : ['B', 18, 183.91, 5.88],
    (-130, -140) : ['B', 7, 184.56, 6.22],
    (-130, -70) : ['B', 3, 181.7, 5.58],
    (-130, -60) : ['B', 7, 182.71, 6.6],
    (-130, -50) : ['B', 38, 183.13, 7.41],
    (-130, -40) : ['B', 88, 183.56, 7.37],
    (-130, -30) : ['B', 106, 183.55, 6.96],
    (-130, -20) : ['B', 109, 183.09, 6.72],
    (-130, -10) : ['B', 133, 182.85, 6.39],
    (-130, 0) : ['B', 110, 182.51, 6.15],
    (-130, 10) : ['B', 93, 181.3, 6.27],
    (-130, 20) : ['B', 60, 179.66, 6.47],
    (-130, 30) : ['B', 32, 178.57, 6.22],
    (-130, 40) : ['B', 30, 179.03, 5.81],
    (-130, 50) : ['B', 19, 179.99, 5.69],
    (-130, 60) : ['B', 13, 181.33, 5.66],
    (-130, 70) : ['B', 14, 182.96, 5.54],
    (-130, 80) : ['B', 9, 184.31, 5.76],
    (-130, 90) : ['B', 8, 185.05, 5.92],
    (-130, 100) : ['B', 25, 185.43, 5.99],
    (-130, 110) : ['B', 84, 184.27, 6.03],
    (-130, 120) : ['B', 262, 181.7, 5.94],
    (-130, 130) : ['B', 615, 179.07, 6.04],
    (-130, 140) : ['B', 694, 176.97, 6.39],
    (-130, 150) : ['B', 486, 175.83, 6.89],
    (-130, 160) : ['B', 329, 175.62, 7.19],
    (-130, 170) : ['B', 151, 176.66, 7.25],
    (-120, -180) : ['B', 61, 178.37, 7.54],
    (-120, -170) : ['B', 31, 180.94, 7.24],
    (-120, -160) : ['B', 22, 183.04, 6.33],
    (-120, -150) : ['B', 11, 183.87, 5.83],
    (-120, -140) : ['B', 7, 184.97, 5.85],
    (-120, -130) : ['B', 5, 185.85, 6.29],
    (-120, -110) : ['B', 3, 180.29, 4.16],
    (-120, -70) : ['B', 6, 182.75, 5.86],
    (-120, -60) : ['B', 11, 184.22, 6.55],
    (-120, -50) : ['B', 47, 185.01, 7.31],
    (-120, -40) : ['B', 90, 185.25, 7.23],
    (-120, -30) : ['B', 113, 184.32, 6.6],
    (-120, -20) : ['B', 141, 183.0, 6.31],
    (-120, -10) : ['B', 146, 182.48, 6.13],
    (-120, 0) : ['B', 122, 182.34, 5.84],
    (-120, 10) : ['B', 97, 181.42, 5.79],
    (-120, 20) : ['B', 56, 179.87, 5.95],
    (-120, 30) : ['B', 44, 179.04, 5.9],
    (-120, 40) : ['B', 43, 179.53, 5.63],
    (-120, 50) : ['B', 32, 180.33, 6.0],
    (-120, 60) : ['B', 14, 182.07, 6.69],
    (-120, 70) : ['B', 13, 183.97, 6.28],
    (-120, 80) : ['B', 11, 184.26, 5.87],
    (-120, 90) : ['B', 8, 184.61, 5.9],
    (-120, 100) : ['B', 35, 184.73, 6.07],
    (-120, 110) : ['B', 114, 183.22, 5.9],
    (-120, 120) : ['B', 390, 180.72, 5.72],
    (-120, 130) : ['B', 717, 178.16, 5.93],
    (-120, 140) : ['B', 639, 175.96, 6.45],
    (-120, 150) : ['B', 423, 174.55, 7.1],
    (-120, 160) : ['B', 298, 174.4, 7.49],
    (-120, 170) : ['B', 149, 175.77, 7.53],
    (-110, -180) : ['B', 46, 178.44, 7.38],
    (-110, -170) : ['B', 28, 181.54, 7.07],
    (-110, -160) : ['B', 21, 183.5, 6.43],
    (-110, -150) : ['B', 11, 183.83, 5.75],
    (-110, -140) : ['B', 7, 183.68, 5.57],
    (-110, -130) : ['B', 5, 183.13, 5.4],
    (-110, -120) : ['B', 3, 182.33, 4.83],
    (-110, -110) : ['B', 3, 181.22, 4.5],
    (-110, -70) : ['B', 6, 183.38, 6.83],
    (-110, -60) : ['B', 10, 185.81, 6.65],
    (-110, -50) : ['B', 63, 186.4, 6.7],
    (-110, -40) : ['B', 113, 185.53, 6.4],
    (-110, -30) : ['B', 150, 183.66, 5.79],
    (-110, -20) : ['B', 195, 181.79, 5.57],
    (-110, -10) : ['B', 170, 181.22, 5.66],
    (-110, 0) : ['B', 137, 181.53, 5.8],
    (-110, 10) : ['B', 80, 181.16, 5.83],
    (-110, 20) : ['B', 47, 180.06, 5.76],
    (-110, 30) : ['B', 38, 179.3, 5.84],
    (-110, 40) : ['B', 37, 179.28, 5.92],
    (-110, 50) : ['B', 27, 180.5, 6.55],
    (-110, 60) : ['B', 17, 183.73, 7.23],
    (-110, 70) : ['B', 8, 185.86, 6.46],
    (-110, 80) : ['B', 12, 184.68, 5.71],
    (-110, 90) : ['B', 20, 184.38, 6.1],
    (-110, 100) : ['B', 53, 183.7, 5.95],
    (-110, 110) : ['B', 163, 181.7, 5.69],
    (-110, 120) : ['B', 466, 179.32, 5.56],
    (-110, 130) : ['B', 641, 177.05, 5.79],
    (-110, 140) : ['B', 480, 174.99, 6.4],
    (-110, 150) : ['B', 286, 173.57, 7.18],
    (-110, 160) : ['B', 235, 173.66, 7.62],
    (-110, 170) : ['B', 109, 175.42, 7.55],
    (-100, -180) : ['B', 52, 179.0, 7.55],
    (-100, -170) : ['B', 27, 182.49, 6.73],
    (-100, -160) : ['B', 23, 184.35, 5.63],
    (-100, -150) : ['B', 16, 184.31, 5.12],
    (-100, -140) : ['B', 16, 182.7, 4.92],
    (-100, -130) : ['B', 21, 181.3, 4.42],
    (-100, -120) : ['B', 9, 180.7, 4.31],
    (-100, -70) : ['B', 3, 181.91, 8.72],
    (-100, -60) : ['B', 9, 185.57, 7.04],
    (-100, -50) : ['B', 71, 185.86, 6.17],
    (-100, -40) : ['B', 173, 184.45, 5.51],
    (-100, -30) : ['B', 230, 182.48, 5.01],
    (-100, -20) : ['B', 299, 180.68, 4.96],
    (-100, -10) : ['B', 261, 180.04, 5.3],
    (-100, 0) : ['B', 140, 180.29, 5.83],
    (-100, 10) : ['B', 98, 180.17, 5.84],
    (-100, 20) : ['B', 75, 179.77, 5.61],
    (-100, 30) : ['B', 43, 179.3, 5.87],
    (-100, 40) : ['B', 29, 179.33, 6.22],
    (-100, 50) : ['B', 21, 181.22, 6.77],
    (-100, 60) : ['B', 19, 184.86, 7.16],
    (-100, 70) : ['B', 12, 186.84, 6.54],
    (-100, 80) : ['B', 10, 185.39, 6.07],
    (-100, 90) : ['B', 24, 184.28, 6.42],
    (-100, 100) : ['B', 85, 182.99, 5.89],
    (-100, 110) : ['B', 202, 180.64, 5.6],
    (-100, 120) : ['B', 405, 178.21, 5.56],
    (-100, 130) : ['B', 492, 176.31, 5.85],
    (-100, 140) : ['B', 370, 174.55, 6.45],
    (-100, 150) : ['B', 278, 173.38, 7.15],
    (-100, 160) : ['B', 195, 173.78, 7.51],
    (-100, 170) : ['B', 128, 175.69, 7.6],
    (-90, -180) : ['B', 55, 179.48, 7.63],
    (-90, -170) : ['B', 43, 182.76, 6.69],
    (-90, -160) : ['B', 30, 184.39, 5.46],
    (-90, -150) : ['B', 23, 184.61, 5.05],
    (-90, -140) : ['B', 16, 182.91, 4.71],
    (-90, -130) : ['B', 29, 181.2, 4.17],
    (-90, -120) : ['B', 8, 180.16, 4.19],
    (-90, -100) : ['B', 3, 179.24, 4.38],
    (-90, -70) : ['B', 3, 183.46, 8.05],
    (-90, -60) : ['B', 18, 185.31, 6.5],
    (-90, -50) : ['B', 82, 184.46, 5.32],
    (-90, -40) : ['B', 236, 182.92, 4.57],
    (-90, -30) : ['B', 359, 181.27, 4.37],
    (-90, -20) : ['B', 371, 179.89, 4.69],
    (-90, -10) : ['B', 312, 179.33, 5.26],
    (-90, 0) : ['B', 166, 179.49, 5.8],
    (-90, 10) : ['B', 117, 179.56, 5.82],
    (-90, 20) : ['B', 82, 179.45, 5.95],
    (-90, 30) : ['B', 48, 179.14, 6.39],
    (-90, 40) : ['B', 42, 179.38, 6.38],
    (-90, 50) : ['B', 23, 181.02, 6.54],
    (-90, 60) : ['B', 9, 183.79, 7.06],
    (-90, 70) : ['B', 15, 186.0, 6.94],
    (-90, 80) : ['B', 25, 185.53, 6.3],
    (-90, 90) : ['B', 41, 184.25, 6.46],
    (-90, 100) : ['B', 91, 182.63, 6.16],
    (-90, 110) : ['B', 216, 180.27, 5.85],
    (-90, 120) : ['B', 354, 178.02, 5.85],
    (-90, 130) : ['B', 414, 176.49, 6.2],
    (-90, 140) : ['B', 350, 174.97, 6.68],
    (-90, 150) : ['B', 348, 173.87, 7.09],
    (-90, 160) : ['B', 254, 174.26, 7.4],
    (-90, 170) : ['B', 116, 176.14, 7.63],
    (-80, -180) : ['B', 76, 180.34, 7.18],
    (-80, -170) : ['B', 47, 183.06, 6.34],
    (-80, -160) : ['B', 35, 184.46, 5.3],
    (-80, -150) : ['B', 17, 184.47, 4.98],
    (-80, -140) : ['B', 15, 182.83, 4.72],
    (-80, -130) : ['B', 25, 181.38, 4.39],
    (-80, -120) : ['B', 9, 179.99, 5.1],
    (-80, -80) : ['B', 3, 181.82, 7.29],
    (-80, -70) : ['B', 7, 184.44, 6.62],
    (-80, -60) : ['B', 28, 183.55, 5.05],
    (-80, -50) : ['B', 163, 182.16, 4.05],
    (-80, -40) : ['B', 411, 181.0, 3.65],
    (-80, -30) : ['B', 425, 180.05, 3.97],
    (-80, -20) : ['B', 358, 179.37, 4.77],
    (-80, -10) : ['B', 296, 179.12, 5.5],
    (-80, 0) : ['B', 189, 179.31, 5.91],
    (-80, 10) : ['B', 122, 179.33, 6.18],
    (-80, 20) : ['B', 86, 179.2, 6.56],
    (-80, 30) : ['B', 58, 179.15, 6.96],
    (-80, 40) : ['B', 51, 179.85, 6.81],
    (-80, 50) : ['B', 29, 181.82, 6.54],
    (-80, 60) : ['B', 20, 184.12, 6.72],
    (-80, 70) : ['B', 27, 185.63, 6.72],
    (-80, 80) : ['B', 43, 185.74, 6.58],
    (-80, 90) : ['B', 42, 184.5, 6.52],
    (-80, 100) : ['B', 95, 182.57, 6.33],
    (-80, 110) : ['B', 190, 180.4, 6.05],
    (-80, 120) : ['B', 303, 178.54, 6.01],
    (-80, 130) : ['B', 387, 177.04, 6.25],
    (-80, 140) : ['B', 413, 175.44, 6.63],
    (-80, 150) : ['B', 396, 174.44, 7.0],
    (-80, 160) : ['B', 273, 174.99, 7.38],
    (-80, 170) : ['B', 141, 177.15, 7.49],
    (-70, -180) : ['B', 144, 180.87, 6.68],
    (-70, -170) : ['B', 80, 183.06, 6.07],
    (-70, -160) : ['B', 36, 184.45, 5.27],
    (-70, -150) : ['B', 21, 184.33, 4.74],
    (-70, -140) : ['B', 29, 182.88, 4.48],
    (-70, -130) : ['B', 25, 181.91, 4.6],
    (-70, -120) : ['B', 12, 180.41, 6.04],
    (-70, -110) : ['B', 9, 177.72, 7.47],
    (-70, -100) : ['B', 4, 178.74, 6.19],
    (-70, -80) : ['B', 8, 183.55, 7.29],
    (-70, -70) : ['B', 11, 183.12, 5.3],
    (-70, -60) : ['B', 99, 181.78, 3.79],
    (-70, -50) : ['B', 1397, 180.67, 3.18],
    (-70, -40) : ['B', 2663, 179.74, 3.1],
    (-70, -30) : ['B', 932, 179.0, 3.66],
    (-70, -20) : ['B', 395, 178.82, 4.93],
    (-70, -10) : ['B', 291, 179.23, 5.88],
    (-70, 0) : ['B', 243, 179.62, 6.24],
    (-70, 10) : ['B', 166, 179.48, 6.73],
    (-70, 20) : ['B', 110, 179.07, 6.85],
    (-70, 30) : ['B', 75, 179.4, 6.84],
    (-70, 40) : ['B', 57, 180.81, 6.93],
    (-70, 50) : ['B', 43, 182.96, 6.78],
    (-70, 60) : ['B', 57, 184.58, 6.3],
    (-70, 70) : ['B', 78, 185.34, 5.98],
    (-70, 80) : ['B', 58, 185.44, 6.16],
    (-70, 90) : ['B', 75, 184.49, 6.23],
    (-70, 100) : ['B', 124, 182.9, 6.08],
    (-70, 110) : ['B', 185, 181.08, 5.87],
    (-70, 120) : ['B', 297, 179.3, 5.85],
    (-70, 130) : ['B', 402, 177.54, 6.08],
    (-70, 140) : ['B', 450, 175.88, 6.54],
    (-70, 150) : ['B', 510, 175.15, 6.91],
    (-70, 160) : ['B', 383, 176.01, 7.1],
    (-70, 170) : ['B', 231, 178.16, 7.0],
    (-60, -180) : ['B', 159, 180.36, 6.46],
    (-60, -170) : ['B', 84, 182.59, 6.16],
    (-60, -160) : ['B', 37, 184.33, 5.47],
    (-60, -150) : ['B', 19, 184.64, 4.72],
    (-60, -140) : ['B', 18, 183.14, 4.29],
    (-60, -130) : ['B', 18, 182.25, 4.55],
    (-60, -120) : ['B', 8, 181.4, 6.32],
    (-60, -110) : ['B', 5, 180.91, 9.17],
    (-60, -100) : ['B', 4, 183.16, 8.33],
    (-60, -90) : ['B', 7, 184.19, 6.06],
    (-60, -80) : ['B', 8, 183.34, 6.7],
    (-60, -70) : ['B', 6, 181.83, 4.45],
    (-60, -60) : ['B', 95, 180.72, 3.22],
    (-60, -50) : ['B', 2666, 179.8, 2.89],
    (-60, -40) : ['B', 4420, 178.99, 3.0],
    (-60, -30) : ['B', 1103, 178.35, 3.68],
    (-60, -20) : ['B', 326, 178.29, 5.13],
    (-60, -10) : ['B', 232, 179.07, 6.14],
    (-60, 0) : ['B', 188, 179.82, 6.28],
    (-60, 10) : ['B', 163, 179.71, 6.52],
    (-60, 20) : ['B', 141, 178.95, 6.53],
    (-60, 30) : ['B', 82, 179.3, 6.51],
    (-60, 40) : ['B', 52, 181.01, 6.88],
    (-60, 50) : ['B', 47, 182.83, 7.08],
    (-60, 60) : ['B', 57, 183.98, 6.37],
    (-60, 70) : ['B', 75, 184.79, 5.71],
    (-60, 80) : ['B', 69, 184.94, 5.79],
    (-60, 90) : ['B', 77, 184.33, 5.97],
    (-60, 100) : ['B', 93, 183.19, 5.89],
    (-60, 110) : ['B', 150, 181.51, 5.63],
    (-60, 120) : ['B', 234, 179.78, 5.64],
    (-60, 130) : ['B', 336, 178.13, 5.86],
    (-60, 140) : ['B', 387, 176.61, 6.33],
    (-60, 150) : ['B', 475, 175.86, 6.59],
    (-60, 160) : ['B', 517, 176.41, 6.54],
    (-60, 170) : ['B', 358, 178.02, 6.48],
    (-50, -180) : ['B', 56, 179.6, 6.52],
    (-50, -170) : ['B', 26, 181.84, 6.44],
    (-50, -160) : ['B', 8, 183.73, 5.84],
    (-50, -150) : ['B', 3, 184.46, 4.88],
    (-50, -140) : ['B', 3, 183.13, 3.99],
    (-50, -130) : ['B', 5, 182.12, 4.29],
    (-50, -120) : ['B', 3, 182.74, 8.45],
    (-50, -80) : ['B', 3, 181.05, 5.88],
    (-50, -60) : ['B', 10, 179.9, 3.06],
    (-50, -50) : ['B', 279, 179.14, 2.91],
    (-50, -40) : ['B', 501, 178.45, 3.17],
    (-50, -30) : ['B', 129, 177.96, 3.98],
    (-50, -20) : ['B', 76, 178.09, 5.43],
    (-50, -10) : ['B', 53, 178.83, 6.35],
    (-50, 0) : ['B', 60, 179.77, 6.25],
    (-50, 10) : ['B', 52, 179.7, 5.86],
    (-50, 20) : ['B', 48, 178.87, 5.7],
    (-50, 30) : ['B', 20, 179.25, 5.92],
    (-50, 40) : ['B', 12, 181.04, 6.75],
    (-50, 50) : ['B', 9, 182.52, 7.4],
    (-50, 60) : ['B', 13, 183.42, 6.55],
    (-50, 70) : ['B', 15, 184.18, 5.76],
    (-50, 80) : ['B', 18, 184.01, 6.21],
    (-50, 90) : ['B', 12, 183.67, 6.35],
    (-50, 100) : ['B', 19, 182.92, 5.91],
    (-50, 110) : ['B', 36, 181.36, 5.46],
    (-50, 120) : ['B', 54, 179.8, 5.41],
    (-50, 130) : ['B', 101, 178.4, 5.53],
    (-50, 140) : ['B', 120, 177.01, 6.05],
    (-50, 150) : ['B', 190, 176.06, 6.27],
    (-50, 160) : ['B', 233, 176.13, 6.13],
    (-50, 170) : ['B', 135, 177.36, 6.26],
    (-40, -180) : ['B', 5, 179.25, 6.89],
    (-40, -130) : ['B', 3, 183.36, 3.66],
    (-40, -50) : ['B', 3, 178.65, 3.18],
    (-40, -30) : ['B', 6, 177.88, 4.54],
    (-40, -20) : ['B', 5, 178.18, 5.79],
    (-40, 0) : ['B', 4, 179.56, 6.28],
    (-40, 10) : ['B', 4, 179.51, 5.14],
    (-40, 20) : ['B', 4, 178.86, 4.74],
    (-40, 30) : ['B', 3, 179.21, 5.02],
    (-40, 130) : ['B', 7, 178.31, 6.02],
    (-40, 140) : ['B', 8, 176.88, 6.23],
    (-40, 150) : ['B', 11, 175.86, 6.34],
    (-40, 160) : ['B', 8, 175.74, 6.2],
    (-40, 170) : ['B', 8, 176.98, 6.57],
    (40, -20) : ['B', 4, 182.76, 5.74],
    (40, -10) : ['B', 4, 182.33, 6.3],
    (40, 0) : ['B', 5, 181.44, 6.11],
    (40, 10) : ['B', 4, 179.78, 5.28],
    (40, 120) : ['B', 8, 180.82, 5.51],
    (40, 130) : ['B', 6, 178.79, 5.23],
    (40, 140) : ['B', 5, 176.08, 5.19],
    (40, 150) : ['B', 8, 174.85, 6.0],
    (40, 160) : ['B', 3, 175.15, 6.69],
    (40, 170) : ['B', 3, 175.16, 7.24],
    (50, -180) : ['B', 8, 175.22, 7.06],
    (50, -40) : ['B', 7, 183.49, 7.63],
    (50, -30) : ['B', 14, 182.6, 6.85],
    (50, -20) : ['B', 21, 181.92, 6.23],
    (50, -10) : ['B', 32, 181.26, 5.98],
    (50, 0) : ['B', 34, 180.38, 5.54],
    (50, 10) : ['B', 29, 178.78, 5.25],
    (50, 20) : ['B', 12, 177.72, 5.34],
    (50, 30) : ['B', 11, 176.92, 4.94],
    (50, 40) : ['B', 5, 175.96, 4.34],
    (50, 50) : ['B', 4, 176.09, 4.37],
    (50, 60) : ['B', 5, 177.73, 6.23],
    (50, 70) : ['B', 3, 179.41, 6.83],
    (50, 80) : ['B', 3, 181.44, 7.19],
    (50, 90) : ['B', 3, 183.23, 6.78],
    (50, 100) : ['B', 12, 182.35, 6.29],
    (50, 110) : ['B', 32, 181.56, 5.87],
    (50, 120) : ['B', 58, 180.13, 5.41],
    (50, 130) : ['B', 50, 177.86, 5.17],
    (50, 140) : ['B', 34, 175.58, 5.46],
    (50, 150) : ['B', 32, 174.54, 6.11],
    (50, 160) : ['B', 28, 174.95, 6.49],
    (50, 170) : ['B', 13, 175.65, 7.06],
    (60, -180) : ['B', 17, 175.18, 6.97],
    (60, -170) : ['B', 5, 177.66, 6.04],
    (60, -160) : ['B', 4, 182.22, 5.7],
    (60, -40) : ['B', 13, 183.96, 7.98],
    (60, -30) : ['B', 32, 183.24, 6.97],
    (60, -20) : ['B', 51, 181.76, 6.18],
    (60, -10) : ['B', 73, 180.39, 5.91],
    (60, 0) : ['B', 73, 179.11, 5.54],
    (60, 10) : ['B', 64, 177.69, 5.3],
    (60, 20) : ['B', 28, 176.91, 5.32],
    (60, 30) : ['B', 26, 176.4, 4.58],
    (60, 40) : ['B', 31, 175.52, 3.99],
    (60, 50) : ['B', 14, 175.19, 4.03],
    (60, 60) : ['B', 6, 176.09, 5.44],
    (60, 80) : ['B', 3, 179.46, 7.67],
    (60, 90) : ['B', 7, 182.31, 7.15],
    (60, 100) : ['B', 11, 182.76, 6.77],
    (60, 110) : ['B', 15, 181.34, 6.01],
    (60, 120) : ['B', 38, 179.06, 5.18],
    (60, 130) : ['B', 89, 176.98, 5.0],
    (60, 140) : ['B', 84, 175.3, 5.47],
    (60, 150) : ['B', 62, 174.07, 6.36],
    (60, 160) : ['B', 60, 174.27, 6.64],
    (60, 170) : ['B', 38, 174.93, 6.95],
    (70, -180) : ['B', 9, 175.5, 6.76],
    (70, -40) : ['B', 10, 185.48, 7.86],
    (70, -30) : ['B', 18, 184.67, 6.36],
    (70, -20) : ['B', 50, 182.71, 5.59],
    (70, -10) : ['B', 71, 180.57, 5.58],
    (70, 0) : ['B', 71, 178.76, 5.35],
    (70, 10) : ['B', 62, 177.38, 5.1],
    (70, 20) : ['B', 30, 176.57, 5.13],
    (70, 30) : ['B', 19, 176.19, 4.4],
    (70, 40) : ['B', 34, 175.42, 3.76],
    (70, 50) : ['B', 17, 174.64, 3.76],
    (70, 60) : ['B', 3, 174.07, 4.52],
    (70, 90) : ['B', 6, 180.56, 7.36],
    (70, 100) : ['B', 8, 181.53, 6.87],
    (70, 110) : ['B', 8, 180.12, 5.5],
    (70, 120) : ['B', 20, 178.1, 4.67],
    (70, 130) : ['B', 68, 177.04, 4.48],
    (70, 140) : ['B', 60, 176.05, 4.85],
    (70, 150) : ['B', 38, 174.51, 5.93],
    (70, 160) : ['B', 30, 174.21, 6.67],
    (70, 170) : ['B', 25, 174.66, 6.88],
    (80, -180) : ['B', 8, 176.88, 6.24],
    (80, -170) : ['B', 6, 180.48, 5.39],
    (80, -30) : ['B', 14, 184.53, 5.78],
    (80, -20) : ['B', 38, 183.06, 5.16],
    (80, -10) : ['B', 70, 180.8, 5.21],
    (80, 0) : ['B', 99, 178.85, 4.98],
    (80, 10) : ['B', 78, 177.12, 4.96],
    (80, 20) : ['B', 34, 175.95, 5.27],
    (80, 30) : ['B', 30, 175.95, 4.62],
    (80, 40) : ['B', 37, 175.54, 3.89],
    (80, 50) : ['B', 16, 174.72, 4.08],
    (80, 60) : ['B', 3, 173.16, 5.08],
    (80, 110) : ['B', 6, 178.94, 4.63],
    (80, 120) : ['B', 25, 178.31, 4.15],
    (80, 130) : ['B', 96, 177.89, 4.07],
    (80, 140) : ['B', 83, 177.41, 4.41],
    (80, 150) : ['B', 24, 176.04, 5.52],
    (80, 160) : ['B', 31, 174.75, 6.66],
    (80, 170) : ['B', 26, 174.9, 6.74],
    (90, -170) : ['B', 4, 180.46, 4.87],
    (90, -150) : ['B', 3, 182.47, 4.44],
    (90, -140) : ['B', 3, 181.14, 4.72],
    (90, -40) : ['B', 3, 181.93, 6.58],
    (90, -30) : ['B', 13, 183.43, 5.85],
    (90, -20) : ['B', 31, 182.77, 5.26],
    (90, -10) : ['B', 66, 180.88, 5.21],
    (90, 0) : ['B', 81, 178.81, 4.96],
    (90, 10) : ['B', 66, 176.71, 5.13],
    (90, 20) : ['B', 27, 175.23, 5.66],
    (90, 30) : ['B', 22, 175.56, 5.18],
    (90, 40) : ['B', 30, 175.46, 4.6],
    (90, 50) : ['B', 14, 174.79, 5.23],
    (90, 110) : ['B', 4, 179.69, 4.32],
    (90, 120) : ['B', 18, 179.24, 3.85],
    (90, 130) : ['B', 103, 178.95, 3.81],
    (90, 140) : ['B', 95, 178.57, 4.23],
    (90, 150) : ['B', 23, 177.21, 5.24],
    (90, 160) : ['B', 26, 175.1, 6.06],
    (90, 170) : ['B', 12, 174.99, 5.83],
    (100, -180) : ['B', 3, 177.81, 5.79],
    (100, -170) : ['B', 5, 179.01, 5.98],
    (100, -150) : ['B', 3, 183.46, 5.13],
    (100, -50) : ['B', 3, 180.16, 7.48],
    (100, -40) : ['B', 5, 182.15, 6.72],
    (100, -30) : ['B', 7, 183.26, 5.78],
    (100, -20) : ['B', 13, 182.3, 5.31],
    (100, -10) : ['B', 30, 180.38, 5.37],
    (100, 0) : ['B', 43, 178.45, 5.41],
    (100, 10) : ['B', 29, 176.58, 5.5],
    (100, 20) : ['B', 16, 175.44, 5.79],
    (100, 30) : ['B', 9, 175.83, 5.54],
    (100, 40) : ['B', 10, 176.35, 6.0],
    (100, 50) : ['B', 8, 176.67, 7.09],
    (100, 110) : ['B', 3, 181.1, 4.18],
    (100, 120) : ['B', 17, 180.18, 3.83],
    (100, 130) : ['B', 48, 179.78, 3.77],
    (100, 140) : ['B', 39, 179.27, 4.09],
    (100, 150) : ['B', 13, 177.55, 5.01],
    (100, 160) : ['B', 18, 175.3, 5.59],
    (100, 170) : ['B', 8, 175.83, 5.17],
    (110, -180) : ['B', 6, 178.92, 6.59],
    (110, -170) : ['B', 4, 179.62, 7.2],
    (110, -60) : ['B', 3, 181.99, 6.38],
    (110, -50) : ['B', 3, 182.28, 7.36],
    (110, -30) : ['B', 6, 182.31, 5.11],
    (110, -20) : ['B', 12, 180.47, 4.96],
    (110, -10) : ['B', 17, 178.8, 5.4],
    (110, 0) : ['B', 16, 177.93, 5.97],
    (110, 10) : ['B', 13, 177.41, 6.15],
    (110, 20) : ['B', 8, 176.62, 5.83],
    (110, 30) : ['B', 8, 176.6, 5.0],
    (110, 40) : ['B', 7, 178.25, 6.19],
    (110, 50) : ['B', 4, 180.15, 7.56],
    (110, 110) : ['B', 3, 182.25, 5.29],
    (110, 120) : ['B', 6, 180.54, 4.89],
    (110, 130) : ['B', 11, 179.59, 4.6],
    (110, 140) : ['B', 8, 178.37, 4.61],
    (110, 150) : ['B', 11, 175.73, 5.46],
    (110, 160) : ['B', 8, 174.43, 6.0],
    (110, 170) : ['B', 8, 176.43, 5.65],
    (120, -60) : ['B', 3, 184.19, 4.58],
    (120, -50) : ['B', 3, 183.79, 4.96],
    (120, -20) : ['B', 7, 178.96, 4.58],
    (120, -10) : ['B', 14, 177.7, 5.29],
    (120, 0) : ['B', 9, 177.84, 6.1],
    (120, 10) : ['B', 7, 178.33, 6.29],
    (120, 20) : ['B', 3, 177.46, 5.58],
    (120, 70) : ['B', 3, 180.02, 1.89],
    (120, 130) : ['B', 5, 178.28, 6.31],
    (120, 140) : ['B', 7, 176.34, 5.64],
    (120, 150) : ['B', 8, 174.39, 5.78],
    (120, 160) : ['B', 5, 174.11, 5.99],
    (130, -20) : ['B', 4, 178.44, 4.75],
    (130, -10) : ['B', 7, 178.35, 5.13],
    (130, 0) : ['B', 7, 178.46, 6.33],
    (130, 10) : ['B', 5, 177.91, 7.02],
    (130, 70) : ['B', 4, 180.55, 2.19],
    (130, 130) : ['B', 3, 177.85, 7.06],
    (130, 140) : ['B', 4, 176.24, 6.34],
    (130, 150) : ['B', 5, 175.3, 5.58],
    (130, 160) : ['B', 6, 175.31, 5.16],
    (130, 170) : ['B', 4, 176.0, 4.95],
    (140, -20) : ['B', 6, 178.4, 5.71],
    (140, -10) : ['B', 4, 180.08, 5.38],
    (140, 0) : ['B', 6, 180.57, 6.35],
    (140, 140) : ['B', 5, 175.07, 6.21],
    (140, 150) : ['B', 6, 175.14, 5.04],
    (140, 160) : ['B', 10, 175.61, 4.33],
    (140, 170) : ['B', 6, 176.11, 4.29],
    (150, -20) : ['B', 4, 180.07, 5.22],
    (150, -10) : ['B', 5, 181.64, 5.44],
    (150, 0) : ['B', 9, 182.78, 5.64],
    (150, 120) : ['B', 4, 178.14, 3.05],
    (150, 130) : ['B', 4, 176.28, 4.66],
    (150, 140) : ['B', 6, 176.24, 4.88],
    (150, 150) : ['B', 11, 176.25, 4.52],
    (150, 160) : ['B', 10, 176.19, 3.93],
    (160, -30) : ['B', 4, 183.36, 3.85],
    (160, -20) : ['B', 5, 181.99, 3.58],
    (160, -10) : ['B', 6, 181.81, 4.38],
    (160, 0) : ['B', 6, 181.87, 4.93],
    (160, 110) : ['B', 3, 180.82, 2.12],
    (160, 120) : ['B', 3, 178.44, 2.87],
    (160, 130) : ['B', 9, 176.9, 3.86],
    (160, 140) : ['B', 18, 176.61, 3.93],
    (160, 150) : ['B', 16, 176.37, 3.76],
    (160, 160) : ['B', 11, 176.69, 3.51],
    (160, 170) : ['B', 3, 177.47, 3.14],
    (170, -180) : ['B', 4, 177.43, 3.57],
    (170, -50) : ['B', 3, 182.1, 4.16],
    (170, -30) : ['B', 4, 183.65, 3.69],
    (170, -20) : ['B', 10, 182.46, 3.21],
    (170, -10) : ['B', 6, 181.34, 3.57],
    (170, 0) : ['B', 3, 179.41, 4.28],
    (170, 10) : ['B', 3, 178.45, 4.04],
    (170, 30) : ['B', 3, 176.69, 4.28],
    (170, 130) : ['B', 3, 178.65, 3.86],
    (170, 140) : ['B', 10, 176.67, 4.08],
    (170, 150) : ['B', 19, 176.21, 3.89],
    (170, 160) : ['B', 20, 177.12, 3.54],
    (170, 170) : ['B', 10, 177.77, 3.51],
  },
  "All_nonxpro" : {
    (-180, -180) : ['B', 9, 177.39, 4.57],
    (-180, -170) : ['B', 3, 179.05, 5.1],
    (-180, -160) : ['I', 27683, 179.02, 6.32],
    (-180, -50) : ['B', 5, 183.72, 4.47],
    (-180, -40) : ['B', 6, 183.76, 4.35],
    (-180, -30) : ['B', 9, 183.01, 4.35],
    (-180, -20) : ['B', 10, 182.11, 4.35],
    (-180, -10) : ['B', 9, 180.96, 4.72],
    (-180, 0) : ['B', 6, 179.48, 5.01],
    (-180, 10) : ['B', 5, 178.62, 5.02],
    (-180, 120) : ['B', 7, 181.62, 4.17],
    (-180, 130) : ['B', 12, 180.09, 4.64],
    (-180, 140) : ['B', 20, 177.78, 5.07],
    (-180, 150) : ['B', 19, 177.09, 5.32],
    (-180, 160) : ['B', 11, 177.56, 5.08],
    (-180, 170) : ['B', 9, 177.28, 4.77],
    (-170, -180) : ['B', 9, 177.98, 5.77],
    (-170, -170) : ['B', 9, 180.86, 5.92],
    (-170, -160) : ['B', 4, 184.54, 5.99],
    (-170, -50) : ['B', 13, 183.39, 5.52],
    (-170, -40) : ['B', 31, 183.79, 5.31],
    (-170, -30) : ['B', 30, 183.17, 5.16],
    (-170, -20) : ['B', 27, 182.12, 5.38],
    (-170, -10) : ['B', 22, 180.63, 5.53],
    (-170, 0) : ['B', 11, 179.46, 5.53],
    (-170, 10) : ['B', 8, 179.31, 5.71],
    (-170, 20) : ['B', 4, 179.22, 5.66],
    (-170, 40) : ['B', 5, 179.48, 4.78],
    (-170, 60) : ['B', 3, 183.56, 6.19],
    (-170, 70) : ['B', 7, 185.33, 5.67],
    (-170, 80) : ['B', 3, 186.74, 4.92],
    (-170, 90) : ['B', 5, 186.96, 5.05],
    (-170, 100) : ['B', 6, 187.03, 5.62],
    (-170, 110) : ['B', 8, 184.21, 5.29],
    (-170, 120) : ['B', 19, 181.58, 5.2],
    (-170, 130) : ['B', 26, 180.03, 5.71],
    (-170, 140) : ['B', 34, 178.76, 5.67],
    (-170, 150) : ['B', 34, 178.34, 5.62],
    (-170, 160) : ['B', 32, 177.85, 5.75],
    (-170, 170) : ['B', 21, 177.17, 5.86],
    (-160, -180) : ['B', 26, 178.74, 6.17],
    (-160, -170) : ['B', 22, 181.65, 5.91],
    (-160, -160) : ['B', 13, 183.88, 5.39],
    (-160, -150) : ['B', 10, 184.43, 4.92],
    (-160, -70) : ['B', 4, 184.2, 4.2],
    (-160, -60) : ['B', 12, 182.87, 5.68],
    (-160, -50) : ['B', 39, 183.15, 6.47],
    (-160, -40) : ['B', 63, 183.3, 6.08],
    (-160, -30) : ['B', 66, 182.79, 5.7],
    (-160, -20) : ['B', 80, 181.73, 5.93],
    (-160, -10) : ['B', 62, 179.98, 6.01],
    (-160, 0) : ['B', 32, 179.28, 6.13],
    (-160, 10) : ['B', 25, 179.49, 6.47],
    (-160, 20) : ['B', 18, 179.4, 6.55],
    (-160, 30) : ['B', 12, 179.89, 6.3],
    (-160, 40) : ['B', 10, 179.95, 5.29],
    (-160, 50) : ['B', 9, 181.04, 4.98],
    (-160, 60) : ['B', 9, 183.22, 5.15],
    (-160, 70) : ['B', 17, 184.88, 5.14],
    (-160, 80) : ['B', 10, 185.48, 4.78],
    (-160, 90) : ['B', 8, 186.13, 5.14],
    (-160, 100) : ['B', 16, 186.53, 5.82],
    (-160, 110) : ['B', 22, 184.41, 5.8],
    (-160, 120) : ['B', 38, 181.94, 5.92],
    (-160, 130) : ['B', 87, 180.13, 6.19],
    (-160, 140) : ['B', 116, 178.83, 5.93],
    (-160, 150) : ['B', 184, 178.32, 5.66],
    (-160, 160) : ['B', 150, 177.76, 5.72],
    (-160, 170) : ['B', 60, 177.39, 5.96],
    (-150, -180) : ['B', 38, 179.22, 6.39],
    (-150, -170) : ['B', 33, 181.97, 6.11],
    (-150, -160) : ['B', 27, 183.84, 5.78],
    (-150, -150) : ['B', 14, 184.55, 5.54],
    (-150, -140) : ['B', 6, 184.85, 5.49],
    (-150, -60) : ['B', 8, 183.26, 6.87],
    (-150, -50) : ['B', 28, 183.12, 7.22],
    (-150, -40) : ['B', 57, 182.77, 6.59],
    (-150, -30) : ['B', 73, 182.56, 6.27],
    (-150, -20) : ['B', 90, 181.87, 6.38],
    (-150, -10) : ['B', 65, 180.46, 6.38],
    (-150, 0) : ['B', 48, 180.16, 6.83],
    (-150, 10) : ['B', 37, 180.35, 7.61],
    (-150, 20) : ['B', 23, 180.2, 7.46],
    (-150, 30) : ['B', 17, 179.92, 6.84],
    (-150, 40) : ['B', 10, 179.8, 5.97],
    (-150, 50) : ['B', 15, 181.17, 5.65],
    (-150, 60) : ['B', 14, 183.15, 5.24],
    (-150, 70) : ['B', 19, 183.76, 4.69],
    (-150, 80) : ['B', 10, 184.14, 4.85],
    (-150, 90) : ['B', 5, 185.75, 5.72],
    (-150, 100) : ['B', 12, 186.25, 6.31],
    (-150, 110) : ['B', 20, 184.67, 6.35],
    (-150, 120) : ['B', 53, 182.21, 6.24],
    (-150, 130) : ['B', 154, 179.93, 6.17],
    (-150, 140) : ['B', 254, 178.23, 6.16],
    (-150, 150) : ['B', 274, 177.59, 6.16],
    (-150, 160) : ['B', 219, 177.38, 6.2],
    (-150, 170) : ['B', 99, 177.51, 6.31],
    (-140, -180) : ['B', 64, 179.47, 6.78],
    (-140, -170) : ['B', 52, 182.02, 6.31],
    (-140, -160) : ['B', 34, 183.74, 6.06],
    (-140, -150) : ['B', 29, 184.37, 6.13],
    (-140, -140) : ['B', 13, 185.1, 6.36],
    (-140, -130) : ['B', 3, 184.68, 6.46],
    (-140, -70) : ['B', 4, 183.15, 5.27],
    (-140, -60) : ['B', 7, 183.13, 6.85],
    (-140, -50) : ['B', 35, 182.93, 7.25],
    (-140, -40) : ['B', 79, 182.68, 6.99],
    (-140, -30) : ['B', 92, 182.73, 6.8],
    (-140, -20) : ['B', 87, 182.47, 6.72],
    (-140, -10) : ['B', 89, 181.92, 6.46],
    (-140, 0) : ['B', 56, 181.68, 6.69],
    (-140, 10) : ['B', 45, 181.11, 7.27],
    (-140, 20) : ['B', 35, 180.14, 7.17],
    (-140, 30) : ['B', 25, 178.87, 6.59],
    (-140, 40) : ['B', 21, 178.76, 6.09],
    (-140, 50) : ['B', 21, 180.24, 5.78],
    (-140, 60) : ['B', 20, 182.15, 5.24],
    (-140, 70) : ['B', 19, 183.13, 4.7],
    (-140, 80) : ['B', 10, 184.2, 5.17],
    (-140, 90) : ['B', 8, 185.58, 6.2],
    (-140, 100) : ['B', 22, 185.92, 6.34],
    (-140, 110) : ['B', 42, 184.74, 6.36],
    (-140, 120) : ['B', 136, 182.17, 6.22],
    (-140, 130) : ['B', 334, 179.58, 6.14],
    (-140, 140) : ['B', 479, 177.61, 6.36],
    (-140, 150) : ['B', 390, 176.77, 6.66],
    (-140, 160) : ['B', 286, 176.68, 6.87],
    (-140, 170) : ['B', 130, 177.26, 6.91],
    (-130, -180) : ['B', 71, 179.26, 7.27],
    (-130, -170) : ['B', 42, 181.6, 6.75],
    (-130, -160) : ['B', 29, 183.36, 5.92],
    (-130, -150) : ['B', 18, 183.91, 5.88],
    (-130, -140) : ['B', 7, 184.56, 6.22],
    (-130, -70) : ['B', 3, 181.7, 5.58],
    (-130, -60) : ['B', 7, 182.71, 6.61],
    (-130, -50) : ['B', 38, 183.13, 7.41],
    (-130, -40) : ['B', 88, 183.56, 7.37],
    (-130, -30) : ['B', 106, 183.55, 6.96],
    (-130, -20) : ['B', 109, 183.09, 6.72],
    (-130, -10) : ['B', 133, 182.85, 6.39],
    (-130, 0) : ['B', 110, 182.51, 6.15],
    (-130, 10) : ['B', 93, 181.3, 6.27],
    (-130, 20) : ['B', 60, 179.66, 6.47],
    (-130, 30) : ['B', 32, 178.57, 6.22],
    (-130, 40) : ['B', 30, 179.03, 5.81],
    (-130, 50) : ['B', 19, 179.99, 5.68],
    (-130, 60) : ['B', 13, 181.32, 5.64],
    (-130, 70) : ['B', 14, 182.96, 5.53],
    (-130, 80) : ['B', 9, 184.3, 5.76],
    (-130, 90) : ['B', 8, 185.05, 5.92],
    (-130, 100) : ['B', 25, 185.43, 5.99],
    (-130, 110) : ['B', 84, 184.27, 6.03],
    (-130, 120) : ['B', 262, 181.7, 5.94],
    (-130, 130) : ['B', 615, 179.07, 6.04],
    (-130, 140) : ['B', 694, 176.97, 6.39],
    (-130, 150) : ['B', 486, 175.83, 6.89],
    (-130, 160) : ['B', 329, 175.62, 7.19],
    (-130, 170) : ['B', 151, 176.66, 7.25],
    (-120, -180) : ['B', 61, 178.37, 7.54],
    (-120, -170) : ['B', 31, 180.94, 7.24],
    (-120, -160) : ['B', 22, 183.04, 6.33],
    (-120, -150) : ['B', 11, 183.87, 5.83],
    (-120, -140) : ['B', 7, 184.97, 5.85],
    (-120, -130) : ['B', 5, 185.85, 6.29],
    (-120, -110) : ['B', 3, 180.29, 4.16],
    (-120, -70) : ['B', 6, 182.75, 5.86],
    (-120, -60) : ['B', 11, 184.23, 6.55],
    (-120, -50) : ['B', 47, 185.02, 7.31],
    (-120, -40) : ['B', 90, 185.25, 7.23],
    (-120, -30) : ['B', 113, 184.32, 6.6],
    (-120, -20) : ['B', 141, 183.0, 6.31],
    (-120, -10) : ['B', 146, 182.48, 6.13],
    (-120, 0) : ['B', 122, 182.34, 5.84],
    (-120, 10) : ['B', 97, 181.42, 5.79],
    (-120, 20) : ['B', 56, 179.87, 5.95],
    (-120, 30) : ['B', 44, 179.04, 5.9],
    (-120, 40) : ['B', 43, 179.52, 5.62],
    (-120, 50) : ['B', 32, 180.28, 5.95],
    (-120, 60) : ['B', 14, 181.88, 6.51],
    (-120, 70) : ['B', 13, 183.81, 6.13],
    (-120, 80) : ['B', 11, 184.23, 5.84],
    (-120, 90) : ['B', 8, 184.61, 5.89],
    (-120, 100) : ['B', 35, 184.73, 6.07],
    (-120, 110) : ['B', 114, 183.22, 5.9],
    (-120, 120) : ['B', 390, 180.72, 5.72],
    (-120, 130) : ['B', 717, 178.16, 5.93],
    (-120, 140) : ['B', 639, 175.96, 6.45],
    (-120, 150) : ['B', 423, 174.55, 7.1],
    (-120, 160) : ['B', 298, 174.4, 7.48],
    (-120, 170) : ['B', 149, 175.77, 7.53],
    (-110, -180) : ['B', 46, 178.43, 7.38],
    (-110, -170) : ['B', 28, 181.54, 7.08],
    (-110, -160) : ['B', 21, 183.5, 6.43],
    (-110, -150) : ['B', 11, 183.82, 5.75],
    (-110, -140) : ['B', 7, 183.68, 5.57],
    (-110, -130) : ['B', 5, 183.13, 5.39],
    (-110, -120) : ['B', 3, 182.33, 4.83],
    (-110, -110) : ['B', 3, 181.22, 4.5],
    (-110, -70) : ['B', 6, 183.35, 6.85],
    (-110, -60) : ['B', 10, 185.85, 6.67],
    (-110, -50) : ['B', 62, 186.46, 6.71],
    (-110, -40) : ['B', 112, 185.55, 6.4],
    (-110, -30) : ['B', 150, 183.66, 5.79],
    (-110, -20) : ['B', 195, 181.79, 5.57],
    (-110, -10) : ['B', 170, 181.22, 5.66],
    (-110, 0) : ['B', 137, 181.53, 5.8],
    (-110, 10) : ['B', 80, 181.16, 5.83],
    (-110, 20) : ['B', 47, 180.06, 5.76],
    (-110, 30) : ['B', 38, 179.3, 5.84],
    (-110, 40) : ['B', 37, 179.27, 5.91],
    (-110, 50) : ['B', 27, 180.33, 6.42],
    (-110, 60) : ['B', 16, 183.02, 6.7],
    (-110, 70) : ['B', 8, 185.15, 5.82],
    (-110, 80) : ['B', 12, 184.54, 5.6],
    (-110, 90) : ['B', 20, 184.38, 6.1],
    (-110, 100) : ['B', 53, 183.7, 5.96],
    (-110, 110) : ['B', 163, 181.7, 5.69],
    (-110, 120) : ['B', 466, 179.32, 5.55],
    (-110, 130) : ['B', 641, 177.05, 5.79],
    (-110, 140) : ['B', 480, 174.99, 6.39],
    (-110, 150) : ['B', 286, 173.56, 7.17],
    (-110, 160) : ['B', 233, 173.62, 7.59],
    (-110, 170) : ['B', 109, 175.39, 7.54],
    (-100, -180) : ['B', 52, 178.92, 7.55],
    (-100, -170) : ['B', 27, 182.43, 6.75],
    (-100, -160) : ['B', 23, 184.32, 5.65],
    (-100, -150) : ['B', 16, 184.27, 5.14],
    (-100, -140) : ['B', 16, 182.67, 4.93],
    (-100, -130) : ['B', 21, 181.29, 4.42],
    (-100, -120) : ['B', 9, 180.7, 4.31],
    (-100, -70) : ['B', 3, 181.76, 8.83],
    (-100, -60) : ['B', 8, 185.6, 7.11],
    (-100, -50) : ['B', 69, 185.92, 6.18],
    (-100, -40) : ['B', 171, 184.47, 5.51],
    (-100, -30) : ['B', 230, 182.48, 5.01],
    (-100, -20) : ['B', 299, 180.68, 4.96],
    (-100, -10) : ['B', 261, 180.04, 5.3],
    (-100, 0) : ['B', 140, 180.29, 5.83],
    (-100, 10) : ['B', 98, 180.17, 5.84],
    (-100, 20) : ['B', 75, 179.77, 5.61],
    (-100, 30) : ['B', 43, 179.3, 5.87],
    (-100, 40) : ['B', 29, 179.32, 6.21],
    (-100, 50) : ['B', 21, 181.05, 6.69],
    (-100, 60) : ['B', 17, 184.07, 6.69],
    (-100, 70) : ['B', 10, 185.91, 5.88],
    (-100, 80) : ['B', 10, 185.17, 5.99],
    (-100, 90) : ['B', 24, 184.27, 6.45],
    (-100, 100) : ['B', 85, 182.95, 5.86],
    (-100, 110) : ['B', 201, 180.58, 5.54],
    (-100, 120) : ['B', 402, 178.14, 5.49],
    (-100, 130) : ['B', 492, 176.23, 5.78],
    (-100, 140) : ['B', 368, 174.46, 6.38],
    (-100, 150) : ['B', 277, 173.27, 7.1],
    (-100, 160) : ['B', 193, 173.66, 7.47],
    (-100, 170) : ['B', 127, 175.59, 7.57],
    (-90, -180) : ['B', 52, 179.09, 7.58],
    (-90, -170) : ['B', 42, 182.55, 6.67],
    (-90, -160) : ['B', 30, 184.29, 5.47],
    (-90, -150) : ['B', 22, 184.55, 5.08],
    (-90, -140) : ['B', 15, 182.89, 4.72],
    (-90, -130) : ['B', 29, 181.2, 4.17],
    (-90, -120) : ['B', 8, 180.16, 4.19],
    (-90, -100) : ['B', 3, 179.24, 4.36],
    (-90, -70) : ['B', 3, 183.41, 8.11],
    (-90, -60) : ['B', 17, 185.35, 6.53],
    (-90, -50) : ['B', 82, 184.49, 5.32],
    (-90, -40) : ['B', 235, 182.93, 4.57],
    (-90, -30) : ['B', 359, 181.27, 4.37],
    (-90, -20) : ['B', 371, 179.89, 4.69],
    (-90, -10) : ['B', 312, 179.33, 5.26],
    (-90, 0) : ['B', 166, 179.49, 5.8],
    (-90, 10) : ['B', 117, 179.56, 5.82],
    (-90, 20) : ['B', 82, 179.45, 5.95],
    (-90, 30) : ['B', 48, 179.14, 6.38],
    (-90, 40) : ['B', 42, 179.35, 6.37],
    (-90, 50) : ['B', 23, 180.81, 6.49],
    (-90, 60) : ['B', 9, 183.06, 6.88],
    (-90, 70) : ['B', 12, 185.4, 6.82],
    (-90, 80) : ['B', 22, 185.51, 6.32],
    (-90, 90) : ['B', 39, 184.25, 6.46],
    (-90, 100) : ['B', 87, 182.48, 6.01],
    (-90, 110) : ['B', 207, 180.07, 5.68],
    (-90, 120) : ['B', 347, 177.77, 5.67],
    (-90, 130) : ['B', 396, 176.14, 5.99],
    (-90, 140) : ['B', 333, 174.57, 6.51],
    (-90, 150) : ['B', 340, 173.52, 7.01],
    (-90, 160) : ['B', 246, 173.97, 7.37],
    (-90, 170) : ['B', 113, 175.8, 7.59],
    (-80, -180) : ['B', 62, 179.76, 7.12],
    (-80, -170) : ['B', 45, 182.73, 6.22],
    (-80, -160) : ['B', 34, 184.33, 5.28],
    (-80, -150) : ['B', 15, 184.44, 5.01],
    (-80, -140) : ['B', 14, 182.85, 4.73],
    (-80, -130) : ['B', 25, 181.39, 4.39],
    (-80, -120) : ['B', 9, 179.99, 5.1],
    (-80, -80) : ['B', 3, 181.64, 7.24],
    (-80, -70) : ['B', 7, 184.48, 6.65],
    (-80, -60) : ['B', 28, 183.62, 5.06],
    (-80, -50) : ['B', 160, 182.18, 4.04],
    (-80, -40) : ['B', 409, 181.01, 3.66],
    (-80, -30) : ['B', 424, 180.05, 3.97],
    (-80, -20) : ['B', 358, 179.37, 4.78],
    (-80, -10) : ['B', 296, 179.12, 5.5],
    (-80, 0) : ['B', 189, 179.31, 5.91],
    (-80, 10) : ['B', 122, 179.33, 6.18],
    (-80, 20) : ['B', 86, 179.2, 6.56],
    (-80, 30) : ['B', 58, 179.14, 6.96],
    (-80, 40) : ['B', 51, 179.71, 6.82],
    (-80, 50) : ['B', 26, 181.07, 6.54],
    (-80, 60) : ['B', 15, 182.94, 7.01],
    (-80, 70) : ['B', 17, 185.27, 7.19],
    (-80, 80) : ['B', 33, 186.05, 6.78],
    (-80, 90) : ['B', 33, 184.66, 6.43],
    (-80, 100) : ['B', 84, 182.38, 6.07],
    (-80, 110) : ['B', 175, 180.1, 5.85],
    (-80, 120) : ['B', 267, 178.1, 5.85],
    (-80, 130) : ['B', 332, 176.46, 6.08],
    (-80, 140) : ['B', 357, 174.79, 6.45],
    (-80, 150) : ['B', 349, 173.83, 6.92],
    (-80, 160) : ['B', 248, 174.5, 7.4],
    (-80, 170) : ['B', 124, 176.63, 7.52],
    (-70, -180) : ['B', 129, 180.5, 6.67],
    (-70, -170) : ['B', 74, 182.85, 5.99],
    (-70, -160) : ['B', 35, 184.41, 5.23],
    (-70, -150) : ['B', 21, 184.32, 4.72],
    (-70, -140) : ['B', 29, 182.91, 4.46],
    (-70, -130) : ['B', 25, 181.91, 4.6],
    (-70, -120) : ['B', 12, 180.39, 6.08],
    (-70, -110) : ['B', 9, 177.64, 7.52],
    (-70, -100) : ['B', 4, 178.57, 6.17],
    (-70, -80) : ['B', 8, 183.24, 7.3],
    (-70, -70) : ['B', 10, 183.17, 5.3],
    (-70, -60) : ['B', 89, 181.8, 3.78],
    (-70, -50) : ['B', 1364, 180.67, 3.18],
    (-70, -40) : ['B', 2650, 179.74, 3.1],
    (-70, -30) : ['B', 929, 179.0, 3.66],
    (-70, -20) : ['B', 395, 178.82, 4.94],
    (-70, -10) : ['B', 291, 179.23, 5.88],
    (-70, 0) : ['B', 243, 179.62, 6.24],
    (-70, 10) : ['B', 166, 179.48, 6.73],
    (-70, 20) : ['B', 110, 179.07, 6.85],
    (-70, 30) : ['B', 75, 179.38, 6.84],
    (-70, 40) : ['B', 57, 180.54, 6.99],
    (-70, 50) : ['B', 28, 182.05, 7.13],
    (-70, 60) : ['B', 19, 184.1, 7.13],
    (-70, 70) : ['B', 27, 185.24, 6.51],
    (-70, 80) : ['B', 28, 185.7, 6.46],
    (-70, 90) : ['B', 55, 184.85, 6.15],
    (-70, 100) : ['B', 99, 182.89, 5.91],
    (-70, 110) : ['B', 151, 180.86, 5.84],
    (-70, 120) : ['B', 231, 178.94, 5.88],
    (-70, 130) : ['B', 328, 177.05, 6.11],
    (-70, 140) : ['B', 374, 175.33, 6.5],
    (-70, 150) : ['B', 415, 174.6, 6.89],
    (-70, 160) : ['B', 318, 175.58, 7.17],
    (-70, 170) : ['B', 204, 177.82, 7.08],
    (-60, -180) : ['B', 131, 180.17, 6.55],
    (-60, -170) : ['B', 70, 182.57, 6.24],
    (-60, -160) : ['B', 32, 184.5, 5.53],
    (-60, -150) : ['B', 15, 184.82, 4.65],
    (-60, -140) : ['B', 16, 183.27, 4.19],
    (-60, -130) : ['B', 18, 182.28, 4.55],
    (-60, -120) : ['B', 7, 181.38, 6.45],
    (-60, -110) : ['B', 4, 180.85, 9.4],
    (-60, -100) : ['B', 4, 183.02, 8.35],
    (-60, -90) : ['B', 6, 183.63, 6.02],
    (-60, -80) : ['B', 7, 182.93, 6.71],
    (-60, -70) : ['B', 6, 181.89, 4.42],
    (-60, -60) : ['B', 83, 180.74, 3.2],
    (-60, -50) : ['B', 2608, 179.8, 2.88],
    (-60, -40) : ['B', 4362, 178.98, 3.0],
    (-60, -30) : ['B', 1092, 178.34, 3.68],
    (-60, -20) : ['B', 326, 178.28, 5.13],
    (-60, -10) : ['B', 232, 179.07, 6.14],
    (-60, 0) : ['B', 188, 179.82, 6.28],
    (-60, 10) : ['B', 163, 179.71, 6.52],
    (-60, 20) : ['B', 141, 178.95, 6.53],
    (-60, 30) : ['B', 82, 179.28, 6.51],
    (-60, 40) : ['B', 52, 180.78, 6.96],
    (-60, 50) : ['B', 31, 182.25, 7.64],
    (-60, 60) : ['B', 19, 184.03, 7.21],
    (-60, 70) : ['B', 27, 185.09, 5.73],
    (-60, 80) : ['B', 29, 185.29, 5.66],
    (-60, 90) : ['B', 45, 184.94, 5.84],
    (-60, 100) : ['B', 61, 183.55, 5.86],
    (-60, 110) : ['B', 103, 181.66, 5.83],
    (-60, 120) : ['B', 153, 179.85, 5.93],
    (-60, 130) : ['B', 234, 178.05, 6.09],
    (-60, 140) : ['B', 300, 176.47, 6.43],
    (-60, 150) : ['B', 375, 175.65, 6.62],
    (-60, 160) : ['B', 383, 176.18, 6.55],
    (-60, 170) : ['B', 280, 177.85, 6.52],
    (-50, -180) : ['B', 45, 179.43, 6.75],
    (-50, -170) : ['B', 20, 181.87, 6.69],
    (-50, -160) : ['B', 8, 184.03, 5.99],
    (-50, -140) : ['B', 3, 183.42, 3.78],
    (-50, -130) : ['B', 5, 182.17, 4.28],
    (-50, -120) : ['B', 3, 182.82, 8.62],
    (-50, -80) : ['B', 3, 180.67, 5.81],
    (-50, -60) : ['B', 8, 179.94, 3.01],
    (-50, -50) : ['B', 270, 179.15, 2.88],
    (-50, -40) : ['B', 486, 178.44, 3.17],
    (-50, -30) : ['B', 128, 177.94, 3.99],
    (-50, -20) : ['B', 75, 178.07, 5.43],
    (-50, -10) : ['B', 53, 178.82, 6.36],
    (-50, 0) : ['B', 60, 179.77, 6.25],
    (-50, 10) : ['B', 52, 179.7, 5.86],
    (-50, 20) : ['B', 48, 178.87, 5.7],
    (-50, 30) : ['B', 20, 179.25, 5.92],
    (-50, 40) : ['B', 12, 180.91, 6.81],
    (-50, 50) : ['B', 9, 182.33, 7.83],
    (-50, 60) : ['B', 7, 183.85, 7.07],
    (-50, 70) : ['B', 7, 184.93, 5.11],
    (-50, 80) : ['B', 7, 184.63, 5.43],
    (-50, 90) : ['B', 7, 184.37, 6.22],
    (-50, 100) : ['B', 12, 183.7, 6.02],
    (-50, 110) : ['B', 16, 181.98, 5.8],
    (-50, 120) : ['B', 29, 180.38, 5.9],
    (-50, 130) : ['B', 59, 178.81, 5.85],
    (-50, 140) : ['B', 84, 177.26, 6.13],
    (-50, 150) : ['B', 148, 176.07, 6.26],
    (-50, 160) : ['B', 158, 175.98, 6.06],
    (-50, 170) : ['B', 101, 177.24, 6.31],
    (-40, -180) : ['B', 5, 179.07, 7.22],
    (-40, -130) : ['B', 3, 183.39, 3.64],
    (-40, -50) : ['B', 3, 178.68, 3.14],
    (-40, -30) : ['B', 6, 177.84, 4.56],
    (-40, -20) : ['B', 5, 178.15, 5.79],
    (-40, 0) : ['B', 4, 179.56, 6.28],
    (-40, 10) : ['B', 4, 179.51, 5.14],
    (-40, 20) : ['B', 4, 178.86, 4.74],
    (-40, 30) : ['B', 3, 179.21, 5.03],
    (-40, 130) : ['B', 6, 178.89, 6.47],
    (-40, 140) : ['B', 7, 177.24, 6.25],
    (-40, 150) : ['B', 9, 175.83, 6.29],
    (-40, 160) : ['B', 6, 175.47, 6.17],
    (-40, 170) : ['B', 8, 176.83, 6.74],
    (40, -20) : ['B', 4, 182.76, 5.74],
    (40, -10) : ['B', 4, 182.33, 6.3],
    (40, 0) : ['B', 5, 181.44, 6.11],
    (40, 10) : ['B', 4, 179.78, 5.28],
    (40, 120) : ['B', 8, 180.82, 5.51],
    (40, 130) : ['B', 6, 178.79, 5.23],
    (40, 140) : ['B', 5, 176.08, 5.19],
    (40, 150) : ['B', 8, 174.85, 6.0],
    (40, 160) : ['B', 3, 175.15, 6.69],
    (40, 170) : ['B', 3, 175.16, 7.24],
    (50, -180) : ['B', 8, 175.22, 7.06],
    (50, -40) : ['B', 7, 183.49, 7.63],
    (50, -30) : ['B', 14, 182.6, 6.85],
    (50, -20) : ['B', 21, 181.92, 6.23],
    (50, -10) : ['B', 32, 181.26, 5.98],
    (50, 0) : ['B', 34, 180.38, 5.54],
    (50, 10) : ['B', 29, 178.78, 5.25],
    (50, 20) : ['B', 12, 177.72, 5.34],
    (50, 30) : ['B', 11, 176.92, 4.94],
    (50, 40) : ['B', 5, 175.96, 4.34],
    (50, 50) : ['B', 4, 176.09, 4.37],
    (50, 60) : ['B', 5, 177.73, 6.23],
    (50, 70) : ['B', 3, 179.41, 6.83],
    (50, 80) : ['B', 3, 181.44, 7.19],
    (50, 90) : ['B', 3, 183.23, 6.78],
    (50, 100) : ['B', 12, 182.35, 6.29],
    (50, 110) : ['B', 32, 181.56, 5.87],
    (50, 120) : ['B', 58, 180.13, 5.41],
    (50, 130) : ['B', 50, 177.86, 5.17],
    (50, 140) : ['B', 34, 175.58, 5.46],
    (50, 150) : ['B', 32, 174.54, 6.11],
    (50, 160) : ['B', 28, 174.95, 6.49],
    (50, 170) : ['B', 13, 175.65, 7.06],
    (60, -180) : ['B', 17, 175.18, 6.97],
    (60, -170) : ['B', 5, 177.66, 6.04],
    (60, -160) : ['B', 4, 182.22, 5.7],
    (60, -40) : ['B', 13, 183.96, 7.98],
    (60, -30) : ['B', 32, 183.24, 6.97],
    (60, -20) : ['B', 51, 181.76, 6.18],
    (60, -10) : ['B', 73, 180.39, 5.91],
    (60, 0) : ['B', 73, 179.11, 5.54],
    (60, 10) : ['B', 64, 177.69, 5.3],
    (60, 20) : ['B', 28, 176.91, 5.32],
    (60, 30) : ['B', 26, 176.4, 4.58],
    (60, 40) : ['B', 31, 175.52, 3.99],
    (60, 50) : ['B', 14, 175.19, 4.03],
    (60, 60) : ['B', 6, 176.09, 5.44],
    (60, 80) : ['B', 3, 179.46, 7.67],
    (60, 90) : ['B', 7, 182.31, 7.15],
    (60, 100) : ['B', 11, 182.76, 6.77],
    (60, 110) : ['B', 15, 181.34, 6.01],
    (60, 120) : ['B', 38, 179.06, 5.18],
    (60, 130) : ['B', 89, 176.98, 5.0],
    (60, 140) : ['B', 84, 175.3, 5.47],
    (60, 150) : ['B', 62, 174.07, 6.36],
    (60, 160) : ['B', 60, 174.27, 6.64],
    (60, 170) : ['B', 38, 174.93, 6.95],
    (70, -180) : ['B', 9, 175.5, 6.76],
    (70, -40) : ['B', 10, 185.48, 7.86],
    (70, -30) : ['B', 18, 184.67, 6.36],
    (70, -20) : ['B', 50, 182.71, 5.59],
    (70, -10) : ['B', 71, 180.57, 5.58],
    (70, 0) : ['B', 71, 178.76, 5.35],
    (70, 10) : ['B', 62, 177.38, 5.1],
    (70, 20) : ['B', 30, 176.57, 5.13],
    (70, 30) : ['B', 19, 176.19, 4.4],
    (70, 40) : ['B', 34, 175.42, 3.76],
    (70, 50) : ['B', 17, 174.64, 3.76],
    (70, 60) : ['B', 3, 174.07, 4.52],
    (70, 90) : ['B', 6, 180.56, 7.36],
    (70, 100) : ['B', 8, 181.53, 6.87],
    (70, 110) : ['B', 8, 180.12, 5.5],
    (70, 120) : ['B', 20, 178.1, 4.67],
    (70, 130) : ['B', 68, 177.04, 4.48],
    (70, 140) : ['B', 60, 176.05, 4.85],
    (70, 150) : ['B', 38, 174.51, 5.93],
    (70, 160) : ['B', 30, 174.21, 6.67],
    (70, 170) : ['B', 25, 174.66, 6.88],
    (80, -180) : ['B', 8, 176.88, 6.24],
    (80, -170) : ['B', 6, 180.48, 5.39],
    (80, -30) : ['B', 14, 184.53, 5.78],
    (80, -20) : ['B', 38, 183.06, 5.16],
    (80, -10) : ['B', 70, 180.8, 5.21],
    (80, 0) : ['B', 99, 178.85, 4.98],
    (80, 10) : ['B', 78, 177.12, 4.96],
    (80, 20) : ['B', 34, 175.95, 5.27],
    (80, 30) : ['B', 30, 175.95, 4.62],
    (80, 40) : ['B', 37, 175.54, 3.89],
    (80, 50) : ['B', 16, 174.72, 4.08],
    (80, 60) : ['B', 3, 173.16, 5.08],
    (80, 110) : ['B', 6, 178.94, 4.63],
    (80, 120) : ['B', 25, 178.31, 4.15],
    (80, 130) : ['B', 96, 177.89, 4.07],
    (80, 140) : ['B', 83, 177.41, 4.41],
    (80, 150) : ['B', 24, 176.04, 5.52],
    (80, 160) : ['B', 31, 174.75, 6.66],
    (80, 170) : ['B', 26, 174.9, 6.74],
    (90, -170) : ['B', 4, 180.46, 4.87],
    (90, -150) : ['B', 3, 182.47, 4.44],
    (90, -140) : ['B', 3, 181.14, 4.72],
    (90, -40) : ['B', 3, 181.93, 6.58],
    (90, -30) : ['B', 13, 183.43, 5.85],
    (90, -20) : ['B', 31, 182.77, 5.26],
    (90, -10) : ['B', 66, 180.88, 5.21],
    (90, 0) : ['B', 81, 178.81, 4.96],
    (90, 10) : ['B', 66, 176.71, 5.13],
    (90, 20) : ['B', 27, 175.23, 5.66],
    (90, 30) : ['B', 22, 175.56, 5.18],
    (90, 40) : ['B', 30, 175.46, 4.6],
    (90, 50) : ['B', 14, 174.79, 5.23],
    (90, 110) : ['B', 4, 179.69, 4.32],
    (90, 120) : ['B', 18, 179.24, 3.85],
    (90, 130) : ['B', 103, 178.95, 3.81],
    (90, 140) : ['B', 95, 178.57, 4.23],
    (90, 150) : ['B', 23, 177.21, 5.24],
    (90, 160) : ['B', 26, 175.1, 6.06],
    (90, 170) : ['B', 12, 174.99, 5.83],
    (100, -180) : ['B', 3, 177.81, 5.79],
    (100, -170) : ['B', 5, 179.01, 5.98],
    (100, -150) : ['B', 3, 183.46, 5.13],
    (100, -50) : ['B', 3, 180.16, 7.48],
    (100, -40) : ['B', 5, 182.15, 6.72],
    (100, -30) : ['B', 7, 183.26, 5.78],
    (100, -20) : ['B', 13, 182.3, 5.31],
    (100, -10) : ['B', 30, 180.38, 5.37],
    (100, 0) : ['B', 43, 178.45, 5.41],
    (100, 10) : ['B', 29, 176.58, 5.5],
    (100, 20) : ['B', 16, 175.44, 5.79],
    (100, 30) : ['B', 9, 175.83, 5.54],
    (100, 40) : ['B', 10, 176.35, 6.0],
    (100, 50) : ['B', 8, 176.67, 7.09],
    (100, 110) : ['B', 3, 181.1, 4.18],
    (100, 120) : ['B', 17, 180.18, 3.83],
    (100, 130) : ['B', 48, 179.78, 3.77],
    (100, 140) : ['B', 39, 179.27, 4.09],
    (100, 150) : ['B', 13, 177.55, 5.01],
    (100, 160) : ['B', 18, 175.3, 5.59],
    (100, 170) : ['B', 8, 175.83, 5.17],
    (110, -180) : ['B', 6, 178.92, 6.59],
    (110, -170) : ['B', 4, 179.62, 7.2],
    (110, -60) : ['B', 3, 181.99, 6.38],
    (110, -50) : ['B', 3, 182.28, 7.36],
    (110, -30) : ['B', 6, 182.31, 5.11],
    (110, -20) : ['B', 12, 180.47, 4.96],
    (110, -10) : ['B', 17, 178.8, 5.4],
    (110, 0) : ['B', 16, 177.93, 5.97],
    (110, 10) : ['B', 13, 177.41, 6.15],
    (110, 20) : ['B', 8, 176.62, 5.83],
    (110, 30) : ['B', 8, 176.6, 5.0],
    (110, 40) : ['B', 7, 178.25, 6.19],
    (110, 50) : ['B', 4, 180.15, 7.56],
    (110, 110) : ['B', 3, 182.25, 5.29],
    (110, 120) : ['B', 6, 180.54, 4.89],
    (110, 130) : ['B', 11, 179.59, 4.6],
    (110, 140) : ['B', 8, 178.37, 4.61],
    (110, 150) : ['B', 11, 175.73, 5.46],
    (110, 160) : ['B', 8, 174.43, 6.0],
    (110, 170) : ['B', 8, 176.43, 5.65],
    (120, -60) : ['B', 3, 184.19, 4.58],
    (120, -50) : ['B', 3, 183.79, 4.96],
    (120, -20) : ['B', 7, 178.96, 4.58],
    (120, -10) : ['B', 14, 177.7, 5.29],
    (120, 0) : ['B', 9, 177.84, 6.1],
    (120, 10) : ['B', 7, 178.33, 6.29],
    (120, 20) : ['B', 3, 177.46, 5.58],
    (120, 70) : ['B', 3, 180.02, 1.89],
    (120, 130) : ['B', 5, 178.28, 6.31],
    (120, 140) : ['B', 7, 176.34, 5.64],
    (120, 150) : ['B', 8, 174.39, 5.78],
    (120, 160) : ['B', 5, 174.11, 5.99],
    (130, -20) : ['B', 4, 178.44, 4.75],
    (130, -10) : ['B', 7, 178.35, 5.13],
    (130, 0) : ['B', 7, 178.46, 6.33],
    (130, 10) : ['B', 5, 177.91, 7.02],
    (130, 70) : ['B', 4, 180.55, 2.19],
    (130, 130) : ['B', 3, 177.85, 7.06],
    (130, 140) : ['B', 4, 176.24, 6.34],
    (130, 150) : ['B', 5, 175.3, 5.58],
    (130, 160) : ['B', 6, 175.31, 5.16],
    (130, 170) : ['B', 4, 176.0, 4.95],
    (140, -20) : ['B', 6, 178.4, 5.71],
    (140, -10) : ['B', 4, 180.08, 5.38],
    (140, 0) : ['B', 6, 180.57, 6.35],
    (140, 140) : ['B', 5, 175.07, 6.21],
    (140, 150) : ['B', 6, 175.14, 5.04],
    (140, 160) : ['B', 10, 175.61, 4.33],
    (140, 170) : ['B', 6, 176.11, 4.29],
    (150, -20) : ['B', 4, 180.07, 5.22],
    (150, -10) : ['B', 5, 181.64, 5.44],
    (150, 0) : ['B', 9, 182.78, 5.64],
    (150, 120) : ['B', 4, 178.14, 3.05],
    (150, 130) : ['B', 4, 176.28, 4.66],
    (150, 140) : ['B', 6, 176.24, 4.88],
    (150, 150) : ['B', 11, 176.25, 4.52],
    (150, 160) : ['B', 10, 176.19, 3.93],
    (160, -30) : ['B', 4, 183.36, 3.85],
    (160, -20) : ['B', 5, 181.99, 3.58],
    (160, -10) : ['B', 6, 181.81, 4.38],
    (160, 0) : ['B', 6, 181.87, 4.93],
    (160, 110) : ['B', 3, 180.82, 2.12],
    (160, 120) : ['B', 3, 178.44, 2.87],
    (160, 130) : ['B', 9, 176.9, 3.86],
    (160, 140) : ['B', 18, 176.61, 3.93],
    (160, 150) : ['B', 16, 176.37, 3.76],
    (160, 160) : ['B', 11, 176.69, 3.51],
    (160, 170) : ['B', 3, 177.47, 3.14],
    (170, -180) : ['B', 4, 177.43, 3.57],
    (170, -50) : ['B', 3, 182.1, 4.16],
    (170, -30) : ['B', 4, 183.65, 3.69],
    (170, -20) : ['B', 10, 182.46, 3.21],
    (170, -10) : ['B', 6, 181.34, 3.57],
    (170, 0) : ['B', 3, 179.41, 4.28],
    (170, 10) : ['B', 3, 178.45, 4.04],
    (170, 30) : ['B', 3, 176.69, 4.28],
    (170, 130) : ['B', 3, 178.65, 3.86],
    (170, 140) : ['B', 10, 176.67, 4.08],
    (170, 150) : ['B', 19, 176.21, 3.89],
    (170, 160) : ['B', 20, 177.12, 3.54],
    (170, 170) : ['B', 10, 177.77, 3.51],
  },
  "All_xpro" : {
    (-180, -180) : ['I', 1234, 180.3, 6.5],
    (-100, 120) : ['B', 3, 185.23, 7.85],
    (-90, -180) : ['B', 3, 185.83, 6.01],
    (-90, 70) : ['B', 3, 188.41, 6.27],
    (-90, 80) : ['B', 3, 185.59, 5.62],
    (-90, 100) : ['B', 4, 185.93, 7.79],
    (-90, 110) : ['B', 9, 185.17, 7.51],
    (-90, 120) : ['B', 7, 183.72, 6.74],
    (-90, 130) : ['B', 18, 183.04, 6.67],
    (-90, 140) : ['B', 17, 181.69, 6.4],
    (-90, 150) : ['B', 8, 180.15, 5.72],
    (-90, 160) : ['B', 8, 180.18, 5.4],
    (-90, 170) : ['B', 3, 182.88, 5.78],
    (-80, -180) : ['B', 14, 184.79, 6.06],
    (-80, -50) : ['B', 3, 180.78, 3.62],
    (-80, 50) : ['B', 3, 186.06, 6.05],
    (-80, 60) : ['B', 5, 186.05, 5.78],
    (-80, 70) : ['B', 10, 186.12, 5.77],
    (-80, 80) : ['B', 10, 185.06, 5.85],
    (-80, 90) : ['B', 9, 183.85, 6.47],
    (-80, 100) : ['B', 11, 183.99, 7.47],
    (-80, 110) : ['B', 15, 183.03, 6.78],
    (-80, 120) : ['B', 36, 181.87, 5.92],
    (-80, 130) : ['B', 55, 181.12, 5.79],
    (-80, 140) : ['B', 56, 179.98, 5.94],
    (-80, 150) : ['B', 47, 178.86, 5.9],
    (-80, 160) : ['B', 25, 178.89, 5.82],
    (-80, 170) : ['B', 17, 181.38, 5.79],
    (-70, -180) : ['B', 15, 183.17, 6.08],
    (-70, -170) : ['B', 6, 184.71, 5.99],
    (-70, -60) : ['B', 10, 180.94, 3.8],
    (-70, -50) : ['B', 33, 180.54, 3.16],
    (-70, -40) : ['B', 13, 179.98, 2.8],
    (-70, -30) : ['B', 3, 179.17, 2.54],
    (-70, 50) : ['B', 15, 185.08, 5.53],
    (-70, 60) : ['B', 38, 184.96, 5.44],
    (-70, 70) : ['B', 51, 185.41, 5.51],
    (-70, 80) : ['B', 30, 185.14, 5.66],
    (-70, 90) : ['B', 20, 183.68, 6.13],
    (-70, 100) : ['B', 25, 182.92, 6.45],
    (-70, 110) : ['B', 34, 181.94, 5.75],
    (-70, 120) : ['B', 66, 180.64, 5.34],
    (-70, 130) : ['B', 74, 179.53, 5.36],
    (-70, 140) : ['B', 76, 178.39, 5.89],
    (-70, 150) : ['B', 95, 177.67, 6.22],
    (-70, 160) : ['B', 65, 178.0, 6.23],
    (-70, 170) : ['B', 27, 179.98, 6.06],
    (-60, -180) : ['B', 28, 181.28, 5.77],
    (-60, -170) : ['B', 14, 182.65, 5.47],
    (-60, -160) : ['B', 5, 183.29, 4.98],
    (-60, -150) : ['B', 4, 183.13, 4.9],
    (-60, -60) : ['B', 12, 180.02, 3.64],
    (-60, -50) : ['B', 58, 179.92, 3.17],
    (-60, -40) : ['B', 58, 179.64, 2.89],
    (-60, -30) : ['B', 11, 179.18, 2.7],
    (-60, 50) : ['B', 16, 183.99, 5.66],
    (-60, 60) : ['B', 38, 183.94, 5.68],
    (-60, 70) : ['B', 48, 184.61, 5.69],
    (-60, 80) : ['B', 40, 184.64, 5.81],
    (-60, 90) : ['B', 32, 183.42, 5.96],
    (-60, 100) : ['B', 32, 182.41, 5.76],
    (-60, 110) : ['B', 47, 181.16, 5.04],
    (-60, 120) : ['B', 81, 179.6, 4.77],
    (-60, 130) : ['B', 102, 178.33, 5.0],
    (-60, 140) : ['B', 87, 177.11, 5.77],
    (-60, 150) : ['B', 100, 176.61, 6.29],
    (-60, 160) : ['B', 134, 177.17, 6.37],
    (-60, 170) : ['B', 78, 178.68, 6.17],
    (-50, -180) : ['B', 11, 180.27, 5.39],
    (-50, -170) : ['B', 6, 181.73, 5.23],
    (-50, -50) : ['B', 9, 178.98, 3.67],
    (-50, -40) : ['B', 15, 179.32, 3.2],
    (-50, 60) : ['B', 6, 183.03, 6.01],
    (-50, 70) : ['B', 8, 183.68, 6.09],
    (-50, 80) : ['B', 11, 183.54, 6.66],
    (-50, 90) : ['B', 5, 182.82, 6.35],
    (-50, 100) : ['B', 7, 181.75, 5.52],
    (-50, 110) : ['B', 20, 180.4, 4.76],
    (-50, 120) : ['B', 25, 178.84, 4.38],
    (-50, 130) : ['B', 42, 177.57, 4.72],
    (-50, 140) : ['B', 36, 176.3, 5.7],
    (-50, 150) : ['B', 42, 176.0, 6.28],
    (-50, 160) : ['B', 75, 176.55, 6.3],
    (-50, 170) : ['B', 34, 177.75, 6.05],
  },
  "Gly_nonxpro" : {
    (-180, -180) : ['B', 3, 178.76, 4.39],
    (-180, -170) : ['I', 2599, 180.43, 5.63],
    (-170, -180) : ['B', 7, 178.54, 5.28],
    (-170, -170) : ['B', 8, 181.17, 6.01],
    (-170, -160) : ['B', 3, 184.68, 6.16],
    (-170, -10) : ['B', 5, 183.93, 4.16],
    (-170, 40) : ['B', 3, 176.75, 4.21],
    (-160, -180) : ['B', 17, 179.38, 5.53],
    (-160, -170) : ['B', 21, 181.85, 5.76],
    (-160, -160) : ['B', 11, 183.85, 5.48],
    (-160, -150) : ['B', 9, 184.18, 4.9],
    (-160, -40) : ['B', 3, 179.21, 4.13],
    (-160, -30) : ['B', 5, 181.81, 4.6],
    (-160, -20) : ['B', 7, 183.47, 5.24],
    (-160, -10) : ['B', 9, 182.47, 4.63],
    (-160, 0) : ['B', 8, 180.93, 4.39],
    (-160, 10) : ['B', 9, 179.49, 5.07],
    (-160, 20) : ['B', 10, 179.17, 5.98],
    (-160, 30) : ['B', 4, 179.96, 6.7],
    (-160, 140) : ['B', 4, 180.91, 4.64],
    (-160, 150) : ['B', 8, 178.97, 5.07],
    (-160, 160) : ['B', 17, 177.78, 4.86],
    (-160, 170) : ['B', 14, 178.0, 4.93],
    (-150, -180) : ['B', 18, 179.92, 5.56],
    (-150, -170) : ['B', 21, 182.33, 5.64],
    (-150, -160) : ['B', 21, 183.91, 5.8],
    (-150, -150) : ['B', 13, 184.39, 5.53],
    (-150, -140) : ['B', 6, 184.85, 5.34],
    (-150, -40) : ['B', 3, 179.25, 5.64],
    (-150, -30) : ['B', 3, 180.88, 5.04],
    (-150, -20) : ['B', 7, 182.16, 4.97],
    (-150, -10) : ['B', 3, 182.31, 5.14],
    (-150, 0) : ['B', 7, 181.68, 5.47],
    (-150, 10) : ['B', 10, 180.93, 5.5],
    (-150, 20) : ['B', 10, 180.73, 6.05],
    (-150, 30) : ['B', 5, 181.04, 6.96],
    (-150, 50) : ['B', 3, 180.01, 4.83],
    (-150, 130) : ['B', 4, 182.29, 4.37],
    (-150, 140) : ['B', 10, 180.33, 4.76],
    (-150, 150) : ['B', 27, 178.76, 5.36],
    (-150, 160) : ['B', 31, 177.96, 5.31],
    (-150, 170) : ['B', 15, 178.29, 5.43],
    (-140, -180) : ['B', 32, 180.24, 5.41],
    (-140, -170) : ['B', 36, 182.42, 5.43],
    (-140, -160) : ['B', 29, 183.89, 5.96],
    (-140, -150) : ['B', 28, 184.44, 6.08],
    (-140, -140) : ['B', 13, 185.47, 6.08],
    (-140, -40) : ['B', 4, 178.96, 6.58],
    (-140, -20) : ['B', 10, 181.67, 4.54],
    (-140, -10) : ['B', 15, 182.23, 5.16],
    (-140, 0) : ['B', 15, 182.33, 5.92],
    (-140, 10) : ['B', 14, 182.24, 5.74],
    (-140, 20) : ['B', 8, 181.9, 5.75],
    (-140, 30) : ['B', 6, 180.81, 6.67],
    (-140, 40) : ['B', 4, 181.03, 5.97],
    (-140, 50) : ['B', 3, 182.14, 4.67],
    (-140, 130) : ['B', 10, 182.34, 5.01],
    (-140, 140) : ['B', 22, 179.68, 4.73],
    (-140, 150) : ['B', 28, 178.16, 5.39],
    (-140, 160) : ['B', 27, 177.8, 5.95],
    (-140, 170) : ['B', 22, 178.54, 5.91],
    (-130, -180) : ['B', 33, 180.77, 5.42],
    (-130, -170) : ['B', 31, 182.62, 5.2],
    (-130, -160) : ['B', 25, 183.86, 5.41],
    (-130, -150) : ['B', 17, 184.26, 5.63],
    (-130, -140) : ['B', 6, 185.13, 5.67],
    (-130, -40) : ['B', 3, 180.09, 5.98],
    (-130, -20) : ['B', 7, 181.36, 4.4],
    (-130, -10) : ['B', 20, 181.55, 4.69],
    (-130, 0) : ['B', 36, 182.08, 5.15],
    (-130, 10) : ['B', 33, 182.35, 5.3],
    (-130, 20) : ['B', 14, 181.91, 5.35],
    (-130, 30) : ['B', 6, 180.92, 6.09],
    (-130, 40) : ['B', 4, 181.28, 6.25],
    (-130, 120) : ['B', 6, 185.02, 5.56],
    (-130, 130) : ['B', 11, 181.57, 5.01],
    (-130, 140) : ['B', 27, 179.06, 4.75],
    (-130, 150) : ['B', 25, 177.58, 5.66],
    (-130, 160) : ['B', 24, 177.68, 6.75],
    (-130, 170) : ['B', 29, 179.06, 6.31],
    (-120, -180) : ['B', 22, 181.51, 5.24],
    (-120, -170) : ['B', 21, 183.1, 5.09],
    (-120, -160) : ['B', 18, 184.19, 5.28],
    (-120, -150) : ['B', 11, 184.45, 5.35],
    (-120, -140) : ['B', 7, 185.23, 5.13],
    (-120, -130) : ['B', 4, 184.98, 4.59],
    (-120, -110) : ['B', 3, 178.04, 1.67],
    (-120, -30) : ['B', 3, 181.49, 3.88],
    (-120, -20) : ['B', 7, 181.12, 4.2],
    (-120, -10) : ['B', 21, 181.64, 4.31],
    (-120, 0) : ['B', 44, 182.13, 4.62],
    (-120, 10) : ['B', 49, 182.33, 4.96],
    (-120, 20) : ['B', 23, 182.01, 5.1],
    (-120, 30) : ['B', 18, 181.22, 5.85],
    (-120, 40) : ['B', 6, 181.33, 6.06],
    (-120, 50) : ['B', 3, 184.4, 5.66],
    (-120, 120) : ['B', 4, 183.11, 4.6],
    (-120, 130) : ['B', 8, 180.88, 4.81],
    (-120, 140) : ['B', 11, 178.79, 5.02],
    (-120, 150) : ['B', 15, 177.39, 6.22],
    (-120, 160) : ['B', 20, 178.04, 7.09],
    (-120, 170) : ['B', 23, 179.88, 6.27],
    (-110, -180) : ['B', 21, 182.16, 5.16],
    (-110, -170) : ['B', 18, 183.49, 5.22],
    (-110, -160) : ['B', 18, 184.49, 5.41],
    (-110, -150) : ['B', 11, 184.58, 5.15],
    (-110, -140) : ['B', 6, 184.41, 4.77],
    (-110, -30) : ['B', 5, 180.45, 3.88],
    (-110, -20) : ['B', 14, 180.56, 4.2],
    (-110, -10) : ['B', 30, 181.25, 4.38],
    (-110, 0) : ['B', 45, 181.6, 4.61],
    (-110, 10) : ['B', 32, 181.74, 4.66],
    (-110, 20) : ['B', 28, 181.86, 4.65],
    (-110, 30) : ['B', 19, 181.78, 5.16],
    (-110, 40) : ['B', 6, 181.4, 5.27],
    (-110, 50) : ['B', 3, 182.39, 5.49],
    (-110, 120) : ['B', 5, 180.98, 4.65],
    (-110, 130) : ['B', 10, 180.01, 5.02],
    (-110, 140) : ['B', 10, 178.33, 5.88],
    (-110, 150) : ['B', 14, 177.26, 6.76],
    (-110, 160) : ['B', 13, 178.26, 6.97],
    (-110, 170) : ['B', 10, 180.52, 6.06],
    (-100, -180) : ['B', 25, 181.92, 6.08],
    (-100, -170) : ['B', 20, 183.63, 5.63],
    (-100, -160) : ['B', 20, 184.89, 5.17],
    (-100, -150) : ['B', 11, 184.92, 4.64],
    (-100, -140) : ['B', 10, 182.82, 4.1],
    (-100, -130) : ['B', 15, 180.87, 4.09],
    (-100, -120) : ['B', 5, 179.78, 4.3],
    (-100, -40) : ['B', 3, 182.61, 4.97],
    (-100, -30) : ['B', 4, 180.54, 4.56],
    (-100, -20) : ['B', 26, 179.91, 4.55],
    (-100, -10) : ['B', 45, 180.28, 4.48],
    (-100, 0) : ['B', 42, 180.9, 4.62],
    (-100, 10) : ['B', 42, 181.15, 4.53],
    (-100, 20) : ['B', 35, 181.5, 4.45],
    (-100, 30) : ['B', 14, 182.06, 4.76],
    (-100, 40) : ['B', 7, 182.31, 5.13],
    (-100, 120) : ['B', 3, 179.81, 4.2],
    (-100, 130) : ['B', 5, 179.4, 5.0],
    (-100, 140) : ['B', 9, 178.33, 5.8],
    (-100, 150) : ['B', 11, 177.45, 6.1],
    (-100, 160) : ['B', 10, 177.98, 6.29],
    (-100, 170) : ['B', 23, 179.9, 6.34],
    (-90, -180) : ['B', 17, 181.88, 6.77],
    (-90, -170) : ['B', 29, 183.76, 6.2],
    (-90, -160) : ['B', 29, 184.74, 5.42],
    (-90, -150) : ['B', 16, 184.9, 4.97],
    (-90, -140) : ['B', 11, 182.47, 4.23],
    (-90, -130) : ['B', 21, 180.6, 3.86],
    (-90, -120) : ['B', 7, 179.6, 4.05],
    (-90, -40) : ['B', 6, 181.55, 4.5],
    (-90, -30) : ['B', 18, 180.17, 4.43],
    (-90, -20) : ['B', 33, 179.53, 4.64],
    (-90, -10) : ['B', 54, 179.79, 4.6],
    (-90, 0) : ['B', 55, 180.64, 4.66],
    (-90, 10) : ['B', 57, 180.91, 4.58],
    (-90, 20) : ['B', 42, 181.14, 4.36],
    (-90, 30) : ['B', 13, 181.76, 4.51],
    (-90, 40) : ['B', 7, 182.91, 5.2],
    (-90, 140) : ['B', 7, 178.4, 4.67],
    (-90, 150) : ['B', 16, 177.3, 4.74],
    (-90, 160) : ['B', 18, 177.38, 5.5],
    (-90, 170) : ['B', 13, 179.11, 6.42],
    (-80, -180) : ['B', 21, 181.7, 6.27],
    (-80, -170) : ['B', 31, 183.81, 5.92],
    (-80, -160) : ['B', 29, 184.67, 5.39],
    (-80, -150) : ['B', 11, 184.47, 5.04],
    (-80, -140) : ['B', 11, 182.18, 4.36],
    (-80, -130) : ['B', 22, 180.67, 4.0],
    (-80, -120) : ['B', 8, 179.0, 4.31],
    (-80, -40) : ['B', 7, 179.03, 3.31],
    (-80, -30) : ['B', 20, 178.58, 3.82],
    (-80, -20) : ['B', 40, 178.89, 4.45],
    (-80, -10) : ['B', 66, 179.51, 4.7],
    (-80, 0) : ['B', 74, 180.13, 4.78],
    (-80, 10) : ['B', 54, 180.34, 5.04],
    (-80, 20) : ['B', 32, 180.71, 4.93],
    (-80, 30) : ['B', 12, 181.45, 4.86],
    (-80, 40) : ['B', 4, 183.0, 5.61],
    (-80, 130) : ['B', 4, 178.96, 4.72],
    (-80, 140) : ['B', 8, 177.2, 4.82],
    (-80, 150) : ['B', 24, 176.53, 4.9],
    (-80, 160) : ['B', 25, 176.89, 5.69],
    (-80, 170) : ['B', 18, 178.87, 6.38],
    (-70, -180) : ['B', 31, 181.57, 6.2],
    (-70, -170) : ['B', 31, 183.81, 5.85],
    (-70, -160) : ['B', 27, 184.8, 5.41],
    (-70, -150) : ['B', 17, 184.13, 4.84],
    (-70, -140) : ['B', 20, 182.37, 4.34],
    (-70, -130) : ['B', 16, 181.23, 4.19],
    (-70, -120) : ['B', 7, 178.7, 4.75],
    (-70, -110) : ['B', 5, 174.28, 5.48],
    (-70, -60) : ['B', 3, 179.65, 3.09],
    (-70, -50) : ['B', 35, 178.8, 2.71],
    (-70, -40) : ['B', 144, 178.2, 2.87],
    (-70, -30) : ['B', 58, 177.84, 3.57],
    (-70, -20) : ['B', 53, 178.57, 4.67],
    (-70, -10) : ['B', 86, 179.55, 5.17],
    (-70, 0) : ['B', 81, 179.97, 5.21],
    (-70, 10) : ['B', 50, 179.81, 5.61],
    (-70, 20) : ['B', 29, 180.05, 5.54],
    (-70, 30) : ['B', 20, 180.98, 5.45],
    (-70, 40) : ['B', 5, 182.76, 5.9],
    (-70, 130) : ['B', 3, 178.93, 5.78],
    (-70, 140) : ['B', 9, 177.7, 5.86],
    (-70, 150) : ['B', 37, 176.66, 5.92],
    (-70, 160) : ['B', 34, 176.92, 6.39],
    (-70, 170) : ['B', 34, 178.94, 6.54],
    (-60, -180) : ['B', 35, 181.48, 6.49],
    (-60, -170) : ['B', 27, 183.89, 6.08],
    (-60, -160) : ['B', 23, 185.21, 5.59],
    (-60, -150) : ['B', 15, 184.9, 4.77],
    (-60, -140) : ['B', 14, 183.28, 4.15],
    (-60, -130) : ['B', 10, 182.31, 4.07],
    (-60, -90) : ['B', 3, 185.35, 4.77],
    (-60, -60) : ['B', 4, 179.05, 3.03],
    (-60, -50) : ['B', 79, 178.35, 2.59],
    (-60, -40) : ['B', 189, 177.84, 2.8],
    (-60, -30) : ['B', 54, 177.63, 3.65],
    (-60, -20) : ['B', 26, 178.36, 4.98],
    (-60, -10) : ['B', 38, 179.23, 5.51],
    (-60, 0) : ['B', 40, 179.52, 5.39],
    (-60, 10) : ['B', 38, 179.27, 5.35],
    (-60, 20) : ['B', 27, 179.18, 5.22],
    (-60, 30) : ['B', 11, 179.43, 5.5],
    (-60, 40) : ['B', 5, 180.78, 5.46],
    (-60, 120) : ['B', 3, 180.73, 5.59],
    (-60, 130) : ['B', 4, 179.29, 6.38],
    (-60, 140) : ['B', 8, 179.03, 6.52],
    (-60, 150) : ['B', 20, 177.91, 6.36],
    (-60, 160) : ['B', 38, 177.66, 6.45],
    (-60, 170) : ['B', 40, 178.99, 6.51],
    (-50, -180) : ['B', 15, 181.27, 6.36],
    (-50, -170) : ['B', 9, 183.53, 5.96],
    (-50, -160) : ['B', 5, 184.74, 5.73],
    (-50, -140) : ['B', 3, 183.83, 3.71],
    (-50, -40) : ['B', 10, 177.53, 2.95],
    (-50, -30) : ['B', 10, 177.36, 3.92],
    (-50, -20) : ['B', 3, 177.75, 5.17],
    (-50, 0) : ['B', 11, 178.81, 5.61],
    (-50, 10) : ['B', 9, 178.89, 4.92],
    (-50, 20) : ['B', 11, 178.53, 4.48],
    (-50, 30) : ['B', 4, 178.19, 4.91],
    (-50, 150) : ['B', 4, 178.67, 5.99],
    (-50, 160) : ['B', 10, 178.25, 6.02],
    (-50, 170) : ['B', 11, 178.92, 6.29],
    (-40, -130) : ['B', 3, 184.42, 2.53],
    (50, -10) : ['B', 4, 177.88, 2.5],
    (50, 0) : ['B', 3, 178.39, 3.02],
    (50, 20) : ['B', 4, 178.48, 4.16],
    (60, -180) : ['B', 3, 176.55, 3.97],
    (60, -160) : ['B', 3, 186.62, 3.66],
    (60, -20) : ['B', 3, 176.63, 3.4],
    (60, -10) : ['B', 3, 176.68, 4.22],
    (60, 0) : ['B', 3, 177.42, 4.5],
    (60, 10) : ['B', 3, 178.74, 4.35],
    (60, 20) : ['B', 3, 178.97, 3.71],
    (60, 160) : ['B', 4, 174.62, 3.39],
    (60, 170) : ['B', 5, 174.7, 3.86],
    (70, -180) : ['B', 3, 176.52, 4.09],
    (70, -10) : ['B', 5, 177.3, 5.2],
    (70, 0) : ['B', 6, 177.91, 5.14],
    (70, 10) : ['B', 4, 179.23, 4.78],
    (70, 20) : ['B', 5, 178.9, 3.85],
    (70, 30) : ['B', 3, 178.19, 2.87],
    (70, 140) : ['B', 3, 178.15, 2.83],
    (70, 150) : ['B', 3, 177.89, 2.45],
    (70, 170) : ['B', 3, 174.8, 4.27],
    (80, -180) : ['B', 5, 176.44, 4.14],
    (80, -170) : ['B', 3, 178.47, 3.24],
    (80, -10) : ['B', 5, 177.82, 4.19],
    (80, 0) : ['B', 5, 177.81, 4.13],
    (80, 10) : ['B', 5, 178.66, 4.01],
    (80, 20) : ['B', 5, 178.51, 3.65],
    (80, 30) : ['B', 5, 178.47, 3.02],
    (80, 170) : ['B', 3, 175.07, 4.74],
    (90, -150) : ['B', 3, 181.82, 4.28],
    (90, -140) : ['B', 3, 181.05, 4.7],
    (90, 10) : ['B', 3, 178.1, 3.51],
    (90, 20) : ['B', 4, 178.55, 3.7],
    (90, 30) : ['B', 3, 178.9, 3.02],
    (90, 140) : ['B', 3, 179.45, 5.2],
    (90, 170) : ['B', 3, 175.7, 4.52],
    (100, -170) : ['B', 3, 178.73, 4.42],
    (100, -150) : ['B', 3, 183.03, 5.11],
    (100, 0) : ['B', 3, 176.18, 2.7],
    (100, 20) : ['B', 5, 179.65, 3.69],
    (100, 140) : ['B', 3, 177.21, 3.64],
    (100, 170) : ['B', 3, 178.8, 3.12],
    (110, 10) : ['B', 3, 181.06, 3.81],
    (110, 170) : ['B', 3, 180.09, 2.92],
    (120, 0) : ['B', 3, 181.32, 2.88],
    (120, 10) : ['B', 3, 180.67, 3.82],
    (170, -180) : ['B', 3, 178.92, 3.53],
  },
  "Gly_xpro" : {
    (-180, -180) : ['I', 100, 183.21, 5.51],
    (-90, -180) : ['B', 3, 187.7, 4.14],
    (-90, 170) : ['B', 3, 186.78, 4.51],
    (-80, -180) : ['B', 13, 186.84, 4.66],
    (-80, 170) : ['B', 10, 185.38, 4.79],
    (-70, -180) : ['B', 15, 185.15, 5.36],
    (-70, -170) : ['B', 6, 185.11, 5.51],
    (-70, 170) : ['B', 10, 184.02, 5.17],
    (-60, -180) : ['B', 24, 182.98, 5.2],
    (-60, -170) : ['B', 14, 182.84, 5.3],
    (-60, -160) : ['B', 5, 183.3, 4.95],
    (-60, -150) : ['B', 4, 183.13, 4.9],
    (-60, -50) : ['B', 7, 179.81, 2.58],
    (-60, -40) : ['B', 5, 180.02, 2.27],
    (-60, 160) : ['B', 3, 181.17, 5.05],
    (-60, 170) : ['B', 14, 182.48, 4.74],
    (-50, -180) : ['B', 11, 182.06, 4.53],
    (-50, -170) : ['B', 6, 181.91, 5.12],
    (-50, 170) : ['B', 7, 181.91, 3.81],
  },
  "IleVal_nonxpro" : {
    (-180, -180) : ['I', 3528, 178.64, 6.31],
    (-180, 120) : ['B', 3, 181.75, 2.73],
    (-180, 130) : ['B', 6, 180.75, 2.62],
    (-170, -50) : ['B', 6, 181.38, 3.84],
    (-170, -40) : ['B', 6, 181.94, 4.1],
    (-170, -30) : ['B', 4, 182.31, 4.9],
    (-170, -20) : ['B', 7, 180.5, 5.42],
    (-170, -10) : ['B', 6, 178.41, 5.33],
    (-170, 100) : ['B', 4, 188.82, 5.0],
    (-170, 120) : ['B', 6, 181.48, 3.73],
    (-170, 130) : ['B', 5, 180.39, 4.2],
    (-170, 140) : ['B', 4, 179.15, 4.25],
    (-170, 150) : ['B', 3, 178.37, 3.82],
    (-160, -50) : ['B', 13, 180.98, 5.84],
    (-160, -40) : ['B', 10, 180.92, 5.44],
    (-160, -20) : ['B', 15, 179.61, 6.26],
    (-160, -10) : ['B', 16, 178.21, 5.74],
    (-160, 0) : ['B', 3, 176.44, 4.72],
    (-160, 100) : ['B', 3, 188.24, 4.68],
    (-160, 110) : ['B', 6, 185.31, 4.33],
    (-160, 120) : ['B', 13, 181.97, 4.91],
    (-160, 130) : ['B', 12, 180.34, 5.68],
    (-160, 140) : ['B', 20, 179.5, 5.2],
    (-160, 150) : ['B', 24, 179.05, 4.45],
    (-160, 160) : ['B', 12, 178.39, 3.99],
    (-160, 170) : ['B', 4, 177.27, 3.9],
    (-150, -60) : ['B', 3, 182.96, 9.83],
    (-150, -50) : ['B', 7, 183.01, 8.82],
    (-150, -40) : ['B', 6, 181.64, 7.29],
    (-150, -30) : ['B', 6, 179.74, 6.96],
    (-150, -20) : ['B', 13, 179.17, 6.74],
    (-150, -10) : ['B', 10, 178.77, 5.75],
    (-150, 0) : ['B', 4, 178.12, 4.38],
    (-150, 110) : ['B', 5, 185.7, 5.81],
    (-150, 120) : ['B', 17, 182.23, 6.22],
    (-150, 130) : ['B', 36, 180.0, 6.25],
    (-150, 140) : ['B', 49, 178.85, 6.04],
    (-150, 150) : ['B', 29, 178.5, 5.69],
    (-150, 160) : ['B', 17, 178.04, 5.28],
    (-150, 170) : ['B', 9, 177.18, 4.76],
    (-140, -50) : ['B', 6, 184.76, 8.97],
    (-140, -40) : ['B', 9, 183.06, 7.72],
    (-140, -30) : ['B', 5, 179.88, 7.46],
    (-140, -20) : ['B', 4, 178.0, 6.98],
    (-140, -10) : ['B', 4, 178.04, 5.7],
    (-140, 100) : ['B', 4, 188.0, 6.78],
    (-140, 110) : ['B', 11, 185.23, 6.7],
    (-140, 120) : ['B', 33, 181.84, 6.36],
    (-140, 130) : ['B', 94, 179.43, 6.37],
    (-140, 140) : ['B', 85, 177.79, 6.73],
    (-140, 150) : ['B', 34, 177.13, 7.0],
    (-140, 160) : ['B', 22, 177.07, 6.59],
    (-140, 170) : ['B', 11, 176.58, 5.77],
    (-130, -180) : ['B', 4, 175.19, 6.48],
    (-130, -50) : ['B', 9, 184.12, 6.16],
    (-130, -40) : ['B', 10, 183.56, 6.5],
    (-130, -30) : ['B', 4, 181.23, 7.0],
    (-130, -20) : ['B', 4, 176.95, 6.43],
    (-130, -10) : ['B', 5, 176.04, 5.28],
    (-130, 110) : ['B', 18, 184.13, 6.37],
    (-130, 120) : ['B', 80, 181.05, 5.96],
    (-130, 130) : ['B', 177, 178.59, 6.21],
    (-130, 140) : ['B', 142, 176.69, 6.92],
    (-130, 150) : ['B', 53, 175.66, 7.51],
    (-130, 160) : ['B', 33, 175.5, 6.93],
    (-130, 170) : ['B', 18, 175.38, 6.13],
    (-120, -60) : ['B', 4, 185.42, 5.33],
    (-120, -50) : ['B', 16, 185.46, 5.07],
    (-120, -40) : ['B', 9, 185.09, 5.34],
    (-120, -20) : ['B', 4, 178.12, 5.12],
    (-120, -10) : ['B', 5, 177.47, 4.54],
    (-120, 110) : ['B', 24, 182.84, 6.02],
    (-120, 120) : ['B', 120, 180.06, 5.66],
    (-120, 130) : ['B', 226, 177.49, 5.97],
    (-120, 140) : ['B', 148, 175.48, 6.65],
    (-120, 150) : ['B', 53, 174.18, 7.2],
    (-120, 160) : ['B', 38, 173.32, 6.94],
    (-120, 170) : ['B', 14, 173.28, 6.66],
    (-110, -180) : ['B', 4, 174.64, 8.15],
    (-110, -50) : ['B', 14, 186.77, 5.04],
    (-110, -40) : ['B', 12, 185.73, 4.94],
    (-110, -30) : ['B', 8, 182.53, 4.63],
    (-110, -20) : ['B', 9, 179.75, 4.73],
    (-110, -10) : ['B', 11, 179.43, 4.69],
    (-110, 0) : ['B', 7, 180.0, 4.44],
    (-110, 90) : ['B', 3, 187.1, 5.86],
    (-110, 100) : ['B', 6, 183.86, 6.17],
    (-110, 110) : ['B', 37, 181.06, 5.84],
    (-110, 120) : ['B', 146, 178.7, 5.5],
    (-110, 130) : ['B', 203, 176.55, 5.74],
    (-110, 140) : ['B', 99, 174.73, 6.18],
    (-110, 150) : ['B', 43, 173.22, 6.74],
    (-110, 160) : ['B', 43, 171.91, 7.45],
    (-110, 170) : ['B', 15, 172.41, 8.08],
    (-100, -180) : ['B', 6, 177.16, 9.92],
    (-100, -50) : ['B', 9, 186.89, 5.56],
    (-100, -40) : ['B', 11, 185.29, 5.03],
    (-100, -30) : ['B', 15, 182.1, 4.36],
    (-100, -20) : ['B', 18, 179.76, 4.31],
    (-100, -10) : ['B', 14, 179.39, 4.69],
    (-100, 0) : ['B', 5, 179.7, 4.83],
    (-100, 10) : ['B', 3, 180.3, 4.04],
    (-100, 90) : ['B', 3, 185.93, 6.23],
    (-100, 100) : ['B', 13, 182.77, 5.95],
    (-100, 110) : ['B', 56, 179.87, 5.62],
    (-100, 120) : ['B', 163, 177.58, 5.37],
    (-100, 130) : ['B', 177, 175.99, 5.62],
    (-100, 140) : ['B', 61, 174.65, 5.95],
    (-100, 150) : ['B', 35, 173.13, 6.58],
    (-100, 160) : ['B', 30, 172.0, 7.83],
    (-100, 170) : ['B', 17, 173.75, 9.15],
    (-90, -60) : ['B', 3, 186.04, 6.51],
    (-90, -50) : ['B', 14, 185.46, 5.66],
    (-90, -40) : ['B', 15, 184.0, 4.89],
    (-90, -30) : ['B', 14, 181.53, 4.3],
    (-90, -20) : ['B', 17, 179.08, 4.56],
    (-90, -10) : ['B', 18, 177.67, 5.48],
    (-90, 0) : ['B', 7, 177.16, 5.9],
    (-90, 90) : ['B', 5, 185.17, 7.07],
    (-90, 100) : ['B', 17, 181.88, 6.16],
    (-90, 110) : ['B', 65, 179.11, 5.4],
    (-90, 120) : ['B', 122, 177.25, 5.33],
    (-90, 130) : ['B', 121, 176.19, 5.7],
    (-90, 140) : ['B', 62, 175.33, 6.01],
    (-90, 150) : ['B', 42, 174.07, 6.51],
    (-90, 160) : ['B', 23, 173.53, 7.6],
    (-90, 170) : ['B', 15, 175.82, 9.26],
    (-80, -60) : ['B', 8, 184.14, 5.53],
    (-80, -50) : ['B', 35, 182.95, 4.43],
    (-80, -40) : ['B', 37, 181.79, 3.9],
    (-80, -30) : ['B', 18, 180.63, 4.27],
    (-80, -20) : ['B', 11, 179.48, 5.58],
    (-80, -10) : ['B', 7, 177.49, 6.45],
    (-80, 0) : ['B', 4, 176.39, 6.59],
    (-80, 10) : ['B', 3, 176.93, 6.28],
    (-80, 80) : ['B', 4, 186.68, 5.53],
    (-80, 90) : ['B', 7, 184.36, 6.93],
    (-80, 100) : ['B', 19, 180.8, 6.19],
    (-80, 110) : ['B', 54, 178.54, 5.4],
    (-80, 120) : ['B', 87, 177.48, 5.34],
    (-80, 130) : ['B', 89, 176.76, 5.54],
    (-80, 140) : ['B', 50, 175.79, 5.66],
    (-80, 150) : ['B', 35, 174.42, 6.21],
    (-80, 160) : ['B', 27, 174.21, 7.14],
    (-80, 170) : ['B', 10, 176.42, 8.16],
    (-70, -70) : ['B', 4, 183.37, 5.52],
    (-70, -60) : ['B', 26, 182.22, 3.97],
    (-70, -50) : ['B', 213, 181.15, 3.24],
    (-70, -40) : ['B', 205, 180.25, 3.05],
    (-70, -30) : ['B', 52, 179.46, 3.54],
    (-70, -20) : ['B', 18, 179.26, 5.12],
    (-70, -10) : ['B', 10, 178.88, 6.28],
    (-70, 0) : ['B', 9, 178.0, 6.44],
    (-70, 10) : ['B', 5, 176.95, 6.59],
    (-70, 20) : ['B', 4, 176.13, 7.05],
    (-70, 90) : ['B', 6, 183.98, 6.45],
    (-70, 100) : ['B', 14, 181.24, 6.29],
    (-70, 110) : ['B', 35, 179.67, 5.63],
    (-70, 120) : ['B', 62, 178.63, 5.09],
    (-70, 130) : ['B', 68, 177.58, 4.84],
    (-70, 140) : ['B', 42, 176.12, 5.08],
    (-70, 150) : ['B', 34, 174.72, 6.07],
    (-70, 160) : ['B', 31, 175.24, 7.0],
    (-70, 170) : ['B', 11, 177.32, 7.28],
    (-60, -180) : ['B', 5, 179.68, 5.65],
    (-60, -60) : ['B', 20, 181.04, 3.18],
    (-60, -50) : ['B', 496, 180.13, 2.86],
    (-60, -40) : ['B', 537, 179.32, 2.87],
    (-60, -30) : ['B', 80, 178.56, 3.29],
    (-60, -20) : ['B', 20, 178.15, 4.62],
    (-60, -10) : ['B', 8, 178.14, 5.8],
    (-60, 0) : ['B', 6, 178.21, 5.94],
    (-60, 10) : ['B', 11, 176.66, 6.18],
    (-60, 20) : ['B', 7, 175.36, 6.99],
    (-60, 100) : ['B', 3, 182.54, 6.24],
    (-60, 110) : ['B', 23, 181.45, 5.71],
    (-60, 120) : ['B', 30, 179.89, 4.81],
    (-60, 130) : ['B', 43, 178.66, 4.46],
    (-60, 140) : ['B', 22, 177.17, 5.26],
    (-60, 150) : ['B', 19, 175.85, 6.67],
    (-60, 160) : ['B', 24, 176.81, 7.09],
    (-60, 170) : ['B', 13, 178.59, 6.66],
    (-50, -50) : ['B', 65, 179.31, 2.84],
    (-50, -40) : ['B', 100, 178.6, 2.97],
    (-50, -30) : ['B', 17, 178.0, 3.52],
    (-50, -20) : ['B', 7, 177.34, 4.97],
    (-50, -10) : ['B', 6, 176.01, 5.92],
    (-50, 10) : ['B', 4, 177.11, 5.47],
    (-50, 110) : ['B', 5, 181.73, 5.62],
    (-50, 120) : ['B', 7, 179.93, 4.81],
    (-50, 130) : ['B', 12, 178.96, 4.59],
    (-50, 140) : ['B', 4, 177.86, 5.79],
    (-50, 150) : ['B', 7, 177.01, 7.24],
    (-50, 160) : ['B', 10, 177.6, 6.79],
    (-50, 170) : ['B', 4, 178.48, 5.68],
    (50, 10) : ['B', 4, 175.52, 3.22],
    (50, 100) : ['B', 3, 183.32, 5.43],
    (50, 110) : ['B', 9, 181.6, 4.91],
    (50, 120) : ['B', 22, 180.32, 5.16],
    (50, 130) : ['B', 17, 178.83, 5.53],
    (50, 140) : ['B', 5, 176.31, 4.9],
    (50, 150) : ['B', 4, 174.48, 3.73],
    (60, 10) : ['B', 7, 173.86, 3.92],
    (60, 100) : ['B', 4, 183.73, 6.02],
    (60, 110) : ['B', 9, 181.36, 5.1],
    (60, 120) : ['B', 17, 179.89, 5.04],
    (60, 130) : ['B', 14, 178.38, 5.45],
    (60, 140) : ['B', 6, 176.74, 5.1],
    (60, 150) : ['B', 5, 176.05, 5.06],
    (60, 160) : ['B', 5, 175.93, 7.39],
    (70, 100) : ['B', 3, 183.23, 6.31],
    (70, 110) : ['B', 3, 180.57, 5.32],
    (70, 120) : ['B', 3, 179.09, 5.26],
    (70, 130) : ['B', 6, 178.67, 5.28],
    (70, 140) : ['B', 4, 178.95, 4.85],
    (70, 160) : ['B', 4, 176.79, 8.9],
    (80, -10) : ['B', 4, 177.14, 5.04],
    (80, 0) : ['B', 5, 177.8, 5.12],
    (80, 130) : ['B', 9, 178.96, 4.44],
    (80, 140) : ['B', 9, 179.61, 4.35],
    (90, 0) : ['B', 4, 179.16, 5.77],
    (90, 10) : ['B', 6, 177.71, 5.89],
    (90, 20) : ['B', 6, 174.97, 5.6],
    (90, 130) : ['B', 14, 179.97, 3.44],
    (90, 140) : ['B', 9, 179.94, 3.72],
    (90, 160) : ['B', 3, 173.91, 3.64],
    (100, 0) : ['B', 4, 179.9, 5.22],
    (100, 10) : ['B', 3, 177.91, 5.95],
    (100, 120) : ['B', 5, 182.06, 2.88],
    (100, 130) : ['B', 10, 181.08, 2.74],
    (100, 160) : ['B', 3, 173.43, 3.76],
    (110, 110) : ['B', 3, 183.47, 4.4],
    (170, -20) : ['B', 3, 183.09, 3.13],
  },
  "IleVal_xpro" : {
    (-180, -180) : ['I', 177, 180.02, 5.36],
    (-90, 110) : ['B', 4, 185.91, 6.94],
    (-90, 120) : ['B', 5, 183.67, 5.8],
    (-90, 130) : ['B', 8, 182.9, 5.55],
    (-80, 70) : ['B', 3, 186.03, 8.31],
    (-80, 80) : ['B', 3, 185.92, 7.88],
    (-80, 110) : ['B', 7, 182.99, 5.8],
    (-80, 120) : ['B', 14, 182.09, 5.3],
    (-80, 130) : ['B', 16, 181.99, 4.97],
    (-80, 140) : ['B', 4, 180.66, 4.97],
    (-80, 150) : ['B', 3, 176.61, 5.21],
    (-70, -60) : ['B', 4, 181.24, 3.48],
    (-70, -50) : ['B', 3, 180.94, 3.33],
    (-70, 70) : ['B', 4, 184.57, 6.91],
    (-70, 80) : ['B', 4, 185.19, 6.96],
    (-70, 90) : ['B', 4, 183.45, 5.39],
    (-70, 100) : ['B', 3, 182.28, 4.64],
    (-70, 110) : ['B', 12, 180.81, 4.51],
    (-70, 120) : ['B', 26, 179.98, 4.48],
    (-70, 130) : ['B', 15, 179.58, 4.1],
    (-70, 140) : ['B', 4, 178.6, 3.88],
    (-70, 150) : ['B', 6, 176.25, 5.44],
    (-70, 160) : ['B', 11, 177.06, 5.45],
    (-70, 170) : ['B', 3, 178.57, 4.48],
    (-60, -60) : ['B', 4, 180.6, 3.79],
    (-60, -50) : ['B', 11, 180.23, 3.48],
    (-60, -40) : ['B', 8, 179.65, 2.99],
    (-60, 100) : ['B', 5, 181.64, 4.35],
    (-60, 110) : ['B', 15, 179.86, 4.28],
    (-60, 120) : ['B', 32, 178.67, 3.97],
    (-60, 130) : ['B', 28, 178.1, 3.48],
    (-60, 140) : ['B', 14, 177.58, 3.32],
    (-60, 150) : ['B', 3, 177.07, 5.13],
    (-60, 160) : ['B', 11, 178.72, 5.31],
    (-60, 170) : ['B', 3, 179.94, 4.58],
    (-50, 110) : ['B', 4, 179.63, 4.54],
    (-50, 120) : ['B', 9, 178.11, 3.72],
    (-50, 130) : ['B', 15, 177.5, 3.08],
    (-50, 140) : ['B', 5, 177.3, 3.2],
    (-50, 160) : ['B', 4, 179.46, 4.59],
    (-50, 170) : ['B', 4, 180.01, 4.24],
  },
  "NonPGIV_nonxpro" : {
    (-180, -180) : ['B', 5, 176.19, 4.4],
    (-180, -170) : ['I', 20342, 178.94, 6.38],
    (-180, -50) : ['B', 3, 184.14, 4.82],
    (-180, -40) : ['B', 4, 184.15, 4.51],
    (-180, -30) : ['B', 7, 183.21, 4.37],
    (-180, -20) : ['B', 9, 182.02, 4.02],
    (-180, -10) : ['B', 7, 180.75, 3.88],
    (-180, 0) : ['B', 4, 179.26, 4.41],
    (-180, 10) : ['B', 4, 178.74, 4.67],
    (-180, 120) : ['B', 4, 181.58, 4.72],
    (-180, 130) : ['B', 5, 179.87, 5.29],
    (-180, 140) : ['B', 15, 177.51, 5.53],
    (-180, 150) : ['B', 18, 176.99, 5.57],
    (-180, 160) : ['B', 11, 177.42, 5.18],
    (-180, 170) : ['B', 7, 176.75, 4.79],
    (-170, -50) : ['B', 7, 184.23, 5.91],
    (-170, -40) : ['B', 23, 184.39, 5.46],
    (-170, -30) : ['B', 24, 183.42, 5.18],
    (-170, -20) : ['B', 18, 182.23, 5.24],
    (-170, -10) : ['B', 11, 180.35, 5.27],
    (-170, 0) : ['B', 8, 178.73, 5.15],
    (-170, 10) : ['B', 5, 179.07, 5.23],
    (-170, 70) : ['B', 6, 185.49, 5.76],
    (-170, 90) : ['B', 3, 186.47, 5.37],
    (-170, 110) : ['B', 6, 183.73, 5.47],
    (-170, 120) : ['B', 13, 181.63, 5.66],
    (-170, 130) : ['B', 19, 179.87, 6.11],
    (-170, 140) : ['B', 27, 178.51, 5.98],
    (-170, 150) : ['B', 30, 178.19, 5.85],
    (-170, 160) : ['B', 29, 177.78, 5.98],
    (-170, 170) : ['B', 19, 176.99, 6.25],
    (-160, -180) : ['B', 8, 178.4, 6.74],
    (-160, -70) : ['B', 4, 184.93, 3.29],
    (-160, -60) : ['B', 10, 183.57, 5.32],
    (-160, -50) : ['B', 26, 184.08, 6.54],
    (-160, -40) : ['B', 49, 183.99, 6.11],
    (-160, -30) : ['B', 58, 183.12, 5.64],
    (-160, -20) : ['B', 55, 181.97, 5.79],
    (-160, -10) : ['B', 34, 179.72, 6.03],
    (-160, 0) : ['B', 18, 178.58, 6.3],
    (-160, 10) : ['B', 15, 179.15, 6.79],
    (-160, 20) : ['B', 8, 179.44, 6.79],
    (-160, 30) : ['B', 7, 179.83, 6.26],
    (-160, 40) : ['B', 8, 180.28, 5.13],
    (-160, 50) : ['B', 8, 181.36, 4.45],
    (-160, 60) : ['B', 9, 183.0, 4.71],
    (-160, 70) : ['B', 16, 184.63, 4.93],
    (-160, 80) : ['B', 9, 185.1, 4.66],
    (-160, 90) : ['B', 7, 185.69, 5.09],
    (-160, 100) : ['B', 12, 186.22, 6.0],
    (-160, 110) : ['B', 16, 184.09, 6.22],
    (-160, 120) : ['B', 25, 181.93, 6.26],
    (-160, 130) : ['B', 73, 179.97, 6.4],
    (-160, 140) : ['B', 86, 178.49, 6.11],
    (-160, 150) : ['B', 141, 178.05, 5.78],
    (-160, 160) : ['B', 115, 177.62, 5.91],
    (-160, 170) : ['B', 42, 177.22, 6.32],
    (-150, -180) : ['B', 18, 179.03, 7.0],
    (-150, -170) : ['B', 11, 181.36, 6.98],
    (-150, -160) : ['B', 5, 183.25, 5.71],
    (-150, -60) : ['B', 5, 183.36, 5.44],
    (-150, -50) : ['B', 20, 183.27, 6.6],
    (-150, -40) : ['B', 47, 183.19, 6.38],
    (-150, -30) : ['B', 63, 183.03, 6.14],
    (-150, -20) : ['B', 64, 182.25, 6.35],
    (-150, -10) : ['B', 47, 180.3, 6.55],
    (-150, 0) : ['B', 34, 179.63, 7.22],
    (-150, 10) : ['B', 25, 179.92, 8.35],
    (-150, 20) : ['B', 13, 179.79, 7.95],
    (-150, 30) : ['B', 11, 179.2, 6.62],
    (-150, 40) : ['B', 8, 179.37, 5.78],
    (-150, 50) : ['B', 11, 180.85, 5.27],
    (-150, 60) : ['B', 12, 182.77, 4.61],
    (-150, 70) : ['B', 15, 183.55, 4.21],
    (-150, 80) : ['B', 9, 183.68, 4.4],
    (-150, 90) : ['B', 3, 184.83, 5.38],
    (-150, 100) : ['B', 10, 185.79, 6.45],
    (-150, 110) : ['B', 15, 184.37, 6.46],
    (-150, 120) : ['B', 35, 182.16, 6.23],
    (-150, 130) : ['B', 106, 179.7, 6.19],
    (-150, 140) : ['B', 183, 177.84, 6.21],
    (-150, 150) : ['B', 204, 177.25, 6.23],
    (-150, 160) : ['B', 163, 177.14, 6.37],
    (-150, 170) : ['B', 74, 177.32, 6.63],
    (-140, -180) : ['B', 29, 179.37, 7.67],
    (-140, -170) : ['B', 15, 181.41, 7.57],
    (-140, -160) : ['B', 5, 182.9, 6.31],
    (-140, -70) : ['B', 4, 183.89, 4.01],
    (-140, -60) : ['B', 5, 182.91, 5.68],
    (-140, -50) : ['B', 25, 182.69, 6.68],
    (-140, -40) : ['B', 63, 182.86, 6.77],
    (-140, -30) : ['B', 82, 183.22, 6.7],
    (-140, -20) : ['B', 67, 183.04, 6.75],
    (-140, -10) : ['B', 63, 182.17, 6.63],
    (-140, 0) : ['B', 40, 181.54, 6.98],
    (-140, 10) : ['B', 31, 180.6, 7.8],
    (-140, 20) : ['B', 27, 179.46, 7.47],
    (-140, 30) : ['B', 18, 178.11, 6.31],
    (-140, 40) : ['B', 16, 178.14, 5.88],
    (-140, 50) : ['B', 15, 179.81, 5.56],
    (-140, 60) : ['B', 17, 182.01, 4.82],
    (-140, 70) : ['B', 17, 183.2, 4.43],
    (-140, 80) : ['B', 10, 183.92, 4.86],
    (-140, 90) : ['B', 7, 184.62, 5.81],
    (-140, 100) : ['B', 17, 185.44, 6.18],
    (-140, 110) : ['B', 30, 184.59, 6.17],
    (-140, 120) : ['B', 94, 182.21, 6.06],
    (-140, 130) : ['B', 212, 179.45, 6.03],
    (-140, 140) : ['B', 341, 177.33, 6.27],
    (-140, 150) : ['B', 310, 176.52, 6.67],
    (-140, 160) : ['B', 231, 176.45, 7.0],
    (-140, 170) : ['B', 96, 177.05, 7.23],
    (-130, -180) : ['B', 34, 178.86, 8.17],
    (-130, -170) : ['B', 9, 180.24, 8.25],
    (-130, -160) : ['B', 4, 181.3, 6.79],
    (-130, -60) : ['B', 5, 182.86, 6.52],
    (-130, -50) : ['B', 27, 183.24, 7.54],
    (-130, -40) : ['B', 72, 183.82, 7.41],
    (-130, -30) : ['B', 92, 184.02, 6.87],
    (-130, -20) : ['B', 88, 183.73, 6.62],
    (-130, -10) : ['B', 100, 183.44, 6.5],
    (-130, 0) : ['B', 70, 182.8, 6.47],
    (-130, 10) : ['B', 59, 180.74, 6.61],
    (-130, 20) : ['B', 45, 178.69, 6.65],
    (-130, 30) : ['B', 26, 177.73, 5.98],
    (-130, 40) : ['B', 25, 178.49, 5.52],
    (-130, 50) : ['B', 17, 179.47, 5.36],
    (-130, 60) : ['B', 12, 181.05, 5.34],
    (-130, 70) : ['B', 14, 183.01, 5.52],
    (-130, 80) : ['B', 8, 184.14, 5.88],
    (-130, 90) : ['B', 5, 184.48, 5.92],
    (-130, 100) : ['B', 21, 185.1, 5.81],
    (-130, 110) : ['B', 64, 184.29, 5.89],
    (-130, 120) : ['B', 172, 181.91, 5.87],
    (-130, 130) : ['B', 405, 179.16, 5.93],
    (-130, 140) : ['B', 494, 176.88, 6.22],
    (-130, 150) : ['B', 384, 175.65, 6.8],
    (-130, 160) : ['B', 262, 175.39, 7.22],
    (-130, 170) : ['B', 100, 176.36, 7.51],
    (-120, -180) : ['B', 36, 177.49, 8.17],
    (-120, -170) : ['B', 9, 178.4, 8.72],
    (-120, -160) : ['B', 4, 178.62, 7.71],
    (-120, -70) : ['B', 4, 183.48, 5.35],
    (-120, -60) : ['B', 7, 184.39, 6.79],
    (-120, -50) : ['B', 29, 185.33, 7.72],
    (-120, -40) : ['B', 75, 185.61, 7.42],
    (-120, -30) : ['B', 101, 184.78, 6.61],
    (-120, -20) : ['B', 117, 183.48, 6.29],
    (-120, -10) : ['B', 112, 182.85, 6.31],
    (-120, 0) : ['B', 76, 182.49, 6.29],
    (-120, 10) : ['B', 46, 180.68, 6.13],
    (-120, 20) : ['B', 32, 178.34, 6.03],
    (-120, 30) : ['B', 26, 177.85, 5.53],
    (-120, 40) : ['B', 36, 178.98, 5.33],
    (-120, 50) : ['B', 29, 179.62, 5.69],
    (-120, 60) : ['B', 12, 181.14, 6.26],
    (-120, 70) : ['B', 12, 183.73, 6.16],
    (-120, 80) : ['B', 8, 184.33, 6.14],
    (-120, 90) : ['B', 5, 184.35, 6.1],
    (-120, 100) : ['B', 34, 184.59, 6.03],
    (-120, 110) : ['B', 88, 183.35, 5.89],
    (-120, 120) : ['B', 263, 180.96, 5.74],
    (-120, 130) : ['B', 474, 178.36, 5.87],
    (-120, 140) : ['B', 457, 175.97, 6.33],
    (-120, 150) : ['B', 322, 174.4, 6.99],
    (-120, 160) : ['B', 231, 174.21, 7.47],
    (-120, 170) : ['B', 109, 175.46, 7.68],
    (-110, -180) : ['B', 21, 177.22, 7.74],
    (-110, -170) : ['B', 9, 178.99, 8.57],
    (-110, -160) : ['B', 3, 179.23, 8.17],
    (-110, -130) : ['B', 3, 183.32, 4.94],
    (-110, -70) : ['B', 5, 182.59, 6.88],
    (-110, -60) : ['B', 9, 185.68, 6.86],
    (-110, -50) : ['B', 47, 186.64, 6.95],
    (-110, -40) : ['B', 95, 185.78, 6.58],
    (-110, -30) : ['B', 125, 184.01, 5.93],
    (-110, -20) : ['B', 147, 182.04, 5.69],
    (-110, -10) : ['B', 114, 181.26, 5.91],
    (-110, 0) : ['B', 82, 181.48, 6.31],
    (-110, 10) : ['B', 40, 180.45, 6.47],
    (-110, 20) : ['B', 19, 178.24, 6.05],
    (-110, 30) : ['B', 19, 177.64, 5.61],
    (-110, 40) : ['B', 31, 178.65, 5.81],
    (-110, 50) : ['B', 24, 179.98, 6.38],
    (-110, 60) : ['B', 14, 182.35, 6.6],
    (-110, 70) : ['B', 6, 184.79, 5.64],
    (-110, 80) : ['B', 8, 184.54, 5.5],
    (-110, 90) : ['B', 15, 184.11, 6.21],
    (-110, 100) : ['B', 47, 183.67, 5.95],
    (-110, 110) : ['B', 124, 181.95, 5.65],
    (-110, 120) : ['B', 313, 179.58, 5.57],
    (-110, 130) : ['B', 421, 177.19, 5.77],
    (-110, 140) : ['B', 346, 174.95, 6.38],
    (-110, 150) : ['B', 200, 173.39, 7.17],
    (-110, 160) : ['B', 165, 173.56, 7.52],
    (-110, 170) : ['B', 81, 175.13, 7.41],
    (-100, -180) : ['B', 21, 177.68, 7.56],
    (-100, -170) : ['B', 6, 180.63, 7.84],
    (-100, -160) : ['B', 3, 181.75, 6.64],
    (-100, -150) : ['B', 5, 181.19, 5.52],
    (-100, -140) : ['B', 4, 180.61, 5.15],
    (-100, -130) : ['B', 6, 181.11, 3.95],
    (-100, -120) : ['B', 4, 182.09, 3.55],
    (-100, -60) : ['B', 6, 185.3, 7.27],
    (-100, -50) : ['B', 59, 185.86, 6.26],
    (-100, -40) : ['B', 154, 184.54, 5.58],
    (-100, -30) : ['B', 194, 182.66, 5.09],
    (-100, -20) : ['B', 221, 180.75, 5.06],
    (-100, -10) : ['B', 180, 179.94, 5.52],
    (-100, 0) : ['B', 90, 179.96, 6.33],
    (-100, 10) : ['B', 49, 179.19, 6.55],
    (-100, 20) : ['B', 38, 177.98, 6.05],
    (-100, 30) : ['B', 29, 177.59, 5.84],
    (-100, 40) : ['B', 22, 178.5, 6.08],
    (-100, 50) : ['B', 19, 180.78, 6.63],
    (-100, 60) : ['B', 15, 183.56, 6.61],
    (-100, 70) : ['B', 9, 185.53, 5.67],
    (-100, 80) : ['B', 8, 184.96, 5.77],
    (-100, 90) : ['B', 20, 184.04, 6.49],
    (-100, 100) : ['B', 70, 183.01, 5.88],
    (-100, 110) : ['B', 142, 180.91, 5.52],
    (-100, 120) : ['B', 235, 178.41, 5.55],
    (-100, 130) : ['B', 302, 176.27, 5.81],
    (-100, 140) : ['B', 279, 174.27, 6.47],
    (-100, 150) : ['B', 214, 173.09, 7.2],
    (-100, 160) : ['B', 148, 173.7, 7.36],
    (-100, 170) : ['B', 81, 175.32, 7.21],
    (-90, -180) : ['B', 32, 177.93, 7.36],
    (-90, -170) : ['B', 13, 180.69, 6.88],
    (-90, -150) : ['B', 6, 182.77, 4.7],
    (-90, -130) : ['B', 7, 182.0, 3.86],
    (-90, -100) : ['B', 3, 179.94, 3.8],
    (-90, -60) : ['B', 13, 185.25, 6.54],
    (-90, -50) : ['B', 65, 184.38, 5.26],
    (-90, -40) : ['B', 208, 182.91, 4.55],
    (-90, -30) : ['B', 296, 181.35, 4.38],
    (-90, -20) : ['B', 271, 179.96, 4.76],
    (-90, -10) : ['B', 218, 179.33, 5.44],
    (-90, 0) : ['B', 100, 179.07, 6.16],
    (-90, 10) : ['B', 57, 178.45, 6.43],
    (-90, 20) : ['B', 39, 177.99, 6.74],
    (-90, 30) : ['B', 35, 177.9, 6.8],
    (-90, 40) : ['B', 34, 178.65, 6.25],
    (-90, 50) : ['B', 23, 180.55, 6.31],
    (-90, 60) : ['B', 8, 182.96, 6.77],
    (-90, 70) : ['B', 11, 185.5, 6.82],
    (-90, 80) : ['B', 20, 185.51, 6.25],
    (-90, 90) : ['B', 34, 184.1, 6.31],
    (-90, 100) : ['B', 69, 182.69, 5.94],
    (-90, 110) : ['B', 138, 180.53, 5.77],
    (-90, 120) : ['B', 221, 178.0, 5.8],
    (-90, 130) : ['B', 267, 176.01, 6.06],
    (-90, 140) : ['B', 237, 174.19, 6.61],
    (-90, 150) : ['B', 255, 173.19, 7.17],
    (-90, 160) : ['B', 191, 173.83, 7.42],
    (-90, 170) : ['B', 82, 175.45, 7.37],
    (-80, -180) : ['B', 39, 179.19, 7.25],
    (-80, -170) : ['B', 13, 181.62, 6.4],
    (-80, -160) : ['B', 4, 183.51, 4.7],
    (-80, -150) : ['B', 4, 184.34, 4.2],
    (-80, -140) : ['B', 3, 184.73, 4.7],
    (-80, -130) : ['B', 3, 183.84, 4.33],
    (-80, -70) : ['B', 5, 184.64, 6.64],
    (-80, -60) : ['B', 20, 183.59, 4.96],
    (-80, -50) : ['B', 122, 182.15, 3.98],
    (-80, -40) : ['B', 351, 181.0, 3.63],
    (-80, -30) : ['B', 354, 180.08, 3.96],
    (-80, -20) : ['B', 261, 179.44, 4.85],
    (-80, -10) : ['B', 202, 179.16, 5.67],
    (-80, 0) : ['B', 106, 179.03, 6.24],
    (-80, 10) : ['B', 64, 178.65, 6.66],
    (-80, 20) : ['B', 52, 178.29, 7.23],
    (-80, 30) : ['B', 45, 178.35, 7.41],
    (-80, 40) : ['B', 45, 179.28, 6.78],
    (-80, 50) : ['B', 23, 180.82, 6.34],
    (-80, 60) : ['B', 12, 182.99, 6.94],
    (-80, 70) : ['B', 15, 185.55, 7.21],
    (-80, 80) : ['B', 28, 186.29, 6.67],
    (-80, 90) : ['B', 26, 184.82, 6.2],
    (-80, 100) : ['B', 64, 182.94, 5.92],
    (-80, 110) : ['B', 119, 180.8, 5.92],
    (-80, 120) : ['B', 177, 178.31, 5.99],
    (-80, 130) : ['B', 230, 176.19, 6.17],
    (-80, 140) : ['B', 266, 174.34, 6.55],
    (-80, 150) : ['B', 258, 173.47, 7.11],
    (-80, 160) : ['B', 177, 174.3, 7.64],
    (-80, 170) : ['B', 90, 176.39, 7.63],
    (-70, -180) : ['B', 95, 180.38, 6.8],
    (-70, -170) : ['B', 43, 182.31, 6.04],
    (-70, -160) : ['B', 8, 183.79, 4.72],
    (-70, -150) : ['B', 4, 185.04, 3.57],
    (-70, -140) : ['B', 9, 184.52, 4.06],
    (-70, -130) : ['B', 9, 183.72, 4.68],
    (-70, -120) : ['B', 5, 183.57, 5.65],
    (-70, -110) : ['B', 4, 181.72, 6.31],
    (-70, -100) : ['B', 3, 178.98, 5.47],
    (-70, -80) : ['B', 5, 182.35, 7.8],
    (-70, -70) : ['B', 5, 183.12, 5.2],
    (-70, -60) : ['B', 58, 181.79, 3.74],
    (-70, -50) : ['B', 1100, 180.66, 3.17],
    (-70, -40) : ['B', 2206, 179.72, 3.1],
    (-70, -30) : ['B', 725, 178.99, 3.68],
    (-70, -20) : ['B', 281, 178.83, 5.03],
    (-70, -10) : ['B', 184, 179.21, 6.06],
    (-70, 0) : ['B', 147, 179.47, 6.54],
    (-70, 10) : ['B', 110, 179.35, 7.1],
    (-70, 20) : ['B', 75, 178.79, 7.18],
    (-70, 30) : ['B', 54, 178.97, 7.06],
    (-70, 40) : ['B', 52, 180.26, 7.01],
    (-70, 50) : ['B', 25, 181.87, 7.09],
    (-70, 60) : ['B', 18, 184.12, 7.17],
    (-70, 70) : ['B', 23, 185.41, 6.49],
    (-70, 80) : ['B', 25, 185.95, 6.26],
    (-70, 90) : ['B', 49, 185.08, 5.98],
    (-70, 100) : ['B', 82, 183.31, 5.77],
    (-70, 110) : ['B', 112, 181.26, 5.83],
    (-70, 120) : ['B', 163, 178.95, 6.04],
    (-70, 130) : ['B', 242, 176.67, 6.3],
    (-70, 140) : ['B', 288, 174.84, 6.63],
    (-70, 150) : ['B', 293, 174.28, 7.05],
    (-70, 160) : ['B', 219, 175.55, 7.35],
    (-70, 170) : ['B', 147, 177.84, 7.2],
    (-60, -180) : ['B', 85, 180.02, 6.58],
    (-60, -170) : ['B', 43, 181.98, 6.22],
    (-60, -160) : ['B', 9, 183.43, 5.19],
    (-60, -130) : ['B', 8, 182.23, 4.98],
    (-60, -120) : ['B', 5, 182.1, 6.9],
    (-60, -80) : ['B', 4, 181.44, 7.28],
    (-60, -70) : ['B', 5, 181.74, 4.36],
    (-60, -60) : ['B', 59, 180.72, 3.18],
    (-60, -50) : ['B', 2009, 179.78, 2.88],
    (-60, -40) : ['B', 3533, 178.96, 3.02],
    (-60, -30) : ['B', 874, 178.31, 3.74],
    (-60, -20) : ['B', 248, 178.34, 5.25],
    (-60, -10) : ['B', 171, 179.2, 6.3],
    (-60, 0) : ['B', 137, 179.96, 6.5],
    (-60, 10) : ['B', 110, 179.97, 6.8],
    (-60, 20) : ['B', 104, 179.07, 6.7],
    (-60, 30) : ['B', 69, 179.34, 6.61],
    (-60, 40) : ['B', 45, 180.89, 7.11],
    (-60, 50) : ['B', 28, 182.42, 7.76],
    (-60, 60) : ['B', 18, 184.13, 7.28],
    (-60, 70) : ['B', 25, 185.15, 5.72],
    (-60, 80) : ['B', 28, 185.38, 5.56],
    (-60, 90) : ['B', 44, 185.04, 5.8],
    (-60, 100) : ['B', 55, 183.67, 5.82],
    (-60, 110) : ['B', 77, 181.66, 5.85],
    (-60, 120) : ['B', 118, 179.73, 6.14],
    (-60, 130) : ['B', 175, 177.61, 6.29],
    (-60, 140) : ['B', 219, 175.87, 6.49],
    (-60, 150) : ['B', 267, 175.24, 6.63],
    (-60, 160) : ['B', 284, 176.05, 6.53],
    (-60, 170) : ['B', 209, 177.79, 6.53],
    (-50, -180) : ['B', 27, 179.15, 6.9],
    (-50, -170) : ['B', 11, 181.12, 6.96],
    (-50, -160) : ['B', 3, 183.04, 6.18],
    (-50, -130) : ['B', 3, 180.72, 4.88],
    (-50, -120) : ['B', 3, 182.38, 9.69],
    (-50, -80) : ['B', 3, 179.14, 5.78],
    (-50, -60) : ['B', 7, 179.96, 2.99],
    (-50, -50) : ['B', 202, 179.14, 2.89],
    (-50, -40) : ['B', 372, 178.42, 3.21],
    (-50, -30) : ['B', 94, 177.94, 4.08],
    (-50, -20) : ['B', 58, 178.29, 5.56],
    (-50, -10) : ['B', 44, 179.31, 6.45],
    (-50, 0) : ['B', 47, 180.14, 6.38],
    (-50, 10) : ['B', 38, 180.05, 6.04],
    (-50, 20) : ['B', 34, 179.15, 5.87],
    (-50, 30) : ['B', 16, 179.58, 6.05],
    (-50, 40) : ['B', 11, 181.21, 7.02],
    (-50, 50) : ['B', 9, 182.57, 7.97],
    (-50, 60) : ['B', 7, 183.93, 7.1],
    (-50, 70) : ['B', 7, 184.93, 5.1],
    (-50, 80) : ['B', 7, 184.63, 5.43],
    (-50, 90) : ['B', 7, 184.37, 6.28],
    (-50, 100) : ['B', 11, 183.7, 6.08],
    (-50, 110) : ['B', 11, 181.96, 5.85],
    (-50, 120) : ['B', 22, 180.4, 6.12],
    (-50, 130) : ['B', 41, 178.47, 6.0],
    (-50, 140) : ['B', 59, 176.62, 6.12],
    (-50, 150) : ['B', 102, 175.48, 6.12],
    (-50, 160) : ['B', 112, 175.66, 5.92],
    (-50, 170) : ['B', 79, 177.11, 6.37],
    (-40, -180) : ['B', 5, 178.99, 7.59],
    (-40, -30) : ['B', 5, 177.9, 4.69],
    (-40, -20) : ['B', 3, 178.52, 5.86],
    (-40, 0) : ['B', 4, 179.84, 6.33],
    (-40, 10) : ['B', 3, 179.61, 5.28],
    (-40, 130) : ['B', 4, 178.72, 6.66],
    (-40, 140) : ['B', 5, 176.44, 6.27],
    (-40, 150) : ['B', 7, 174.88, 6.11],
    (-40, 170) : ['B', 5, 176.99, 6.98],
    (40, -20) : ['B', 4, 183.06, 5.78],
    (40, -10) : ['B', 3, 182.6, 6.46],
    (40, 0) : ['B', 4, 181.7, 6.28],
    (40, 10) : ['B', 4, 180.2, 5.41],
    (40, 120) : ['B', 6, 180.63, 5.34],
    (40, 130) : ['B', 6, 178.29, 4.86],
    (40, 140) : ['B', 5, 176.04, 5.36],
    (40, 150) : ['B', 6, 175.1, 6.52],
    (40, 160) : ['B', 3, 175.39, 7.16],
    (50, -180) : ['B', 7, 174.78, 7.35],
    (50, -40) : ['B', 7, 183.74, 7.81],
    (50, -30) : ['B', 12, 183.06, 6.98],
    (50, -20) : ['B', 20, 182.33, 6.29],
    (50, -10) : ['B', 28, 181.57, 6.11],
    (50, 0) : ['B', 30, 180.7, 5.68],
    (50, 10) : ['B', 23, 179.09, 5.37],
    (50, 20) : ['B', 7, 177.71, 5.47],
    (50, 30) : ['B', 9, 176.44, 4.87],
    (50, 40) : ['B', 4, 175.53, 4.19],
    (50, 50) : ['B', 4, 175.52, 3.79],
    (50, 60) : ['B', 4, 175.84, 4.38],
    (50, 70) : ['B', 3, 178.08, 5.63],
    (50, 80) : ['B', 3, 181.54, 7.32],
    (50, 90) : ['B', 3, 183.37, 7.01],
    (50, 100) : ['B', 9, 182.11, 6.57],
    (50, 110) : ['B', 23, 181.51, 6.31],
    (50, 120) : ['B', 35, 179.95, 5.51],
    (50, 130) : ['B', 31, 177.56, 5.14],
    (50, 140) : ['B', 26, 175.58, 5.77],
    (50, 150) : ['B', 23, 174.66, 6.51],
    (50, 160) : ['B', 22, 175.36, 6.7],
    (50, 170) : ['B', 10, 175.93, 7.23],
    (60, -180) : ['B', 13, 174.94, 7.39],
    (60, -40) : ['B', 13, 184.17, 8.05],
    (60, -30) : ['B', 29, 183.62, 7.03],
    (60, -20) : ['B', 47, 182.09, 6.22],
    (60, -10) : ['B', 68, 180.64, 5.99],
    (60, 0) : ['B', 68, 179.37, 5.6],
    (60, 10) : ['B', 53, 177.89, 5.32],
    (60, 20) : ['B', 23, 176.91, 5.32],
    (60, 30) : ['B', 23, 176.14, 4.51],
    (60, 40) : ['B', 30, 175.29, 3.9],
    (60, 50) : ['B', 14, 174.95, 3.79],
    (60, 60) : ['B', 5, 175.22, 4.4],
    (60, 90) : ['B', 5, 182.33, 7.45],
    (60, 100) : ['B', 5, 182.72, 7.03],
    (60, 110) : ['B', 6, 181.4, 6.54],
    (60, 120) : ['B', 19, 178.73, 5.35],
    (60, 130) : ['B', 66, 176.73, 5.1],
    (60, 140) : ['B', 68, 175.11, 5.79],
    (60, 150) : ['B', 49, 173.87, 6.7],
    (60, 160) : ['B', 45, 174.37, 6.73],
    (60, 170) : ['B', 30, 175.19, 7.09],
    (70, -180) : ['B', 6, 175.31, 7.09],
    (70, -40) : ['B', 10, 185.73, 7.91],
    (70, -30) : ['B', 17, 184.87, 6.38],
    (70, -20) : ['B', 44, 182.91, 5.58],
    (70, -10) : ['B', 63, 180.8, 5.6],
    (70, 0) : ['B', 63, 178.93, 5.35],
    (70, 10) : ['B', 56, 177.4, 5.02],
    (70, 20) : ['B', 23, 176.51, 5.03],
    (70, 30) : ['B', 16, 176.05, 4.34],
    (70, 40) : ['B', 34, 175.3, 3.73],
    (70, 50) : ['B', 17, 174.55, 3.66],
    (70, 90) : ['B', 3, 179.58, 7.3],
    (70, 100) : ['B', 4, 181.0, 6.84],
    (70, 110) : ['B', 5, 179.97, 5.57],
    (70, 120) : ['B', 16, 177.95, 4.72],
    (70, 130) : ['B', 49, 176.88, 4.6],
    (70, 140) : ['B', 41, 175.59, 5.08],
    (70, 150) : ['B', 29, 173.98, 6.04],
    (70, 160) : ['B', 21, 174.03, 6.38],
    (70, 170) : ['B', 19, 174.71, 6.74],
    (80, -180) : ['B', 3, 177.48, 6.57],
    (80, -170) : ['B', 3, 182.92, 5.78],
    (80, -30) : ['B', 14, 184.69, 5.8],
    (80, -20) : ['B', 35, 183.32, 5.09],
    (80, -10) : ['B', 60, 181.14, 5.15],
    (80, 0) : ['B', 89, 178.97, 4.94],
    (80, 10) : ['B', 71, 177.02, 4.9],
    (80, 20) : ['B', 26, 175.69, 5.23],
    (80, 30) : ['B', 24, 175.73, 4.55],
    (80, 40) : ['B', 36, 175.35, 3.85],
    (80, 50) : ['B', 15, 174.53, 4.03],
    (80, 110) : ['B', 4, 178.46, 4.43],
    (80, 120) : ['B', 24, 178.25, 4.23],
    (80, 130) : ['B', 71, 177.73, 4.21],
    (80, 140) : ['B', 53, 176.89, 4.59],
    (80, 150) : ['B', 20, 175.36, 5.52],
    (80, 160) : ['B', 26, 174.67, 6.04],
    (80, 170) : ['B', 20, 175.18, 6.37],
    (90, -30) : ['B', 12, 183.67, 5.88],
    (90, -20) : ['B', 31, 183.19, 5.09],
    (90, -10) : ['B', 61, 181.33, 5.02],
    (90, 0) : ['B', 76, 178.92, 4.82],
    (90, 10) : ['B', 57, 176.52, 5.02],
    (90, 20) : ['B', 17, 174.71, 5.67],
    (90, 30) : ['B', 19, 175.15, 5.17],
    (90, 40) : ['B', 28, 175.18, 4.65],
    (90, 50) : ['B', 13, 174.55, 5.34],
    (90, 110) : ['B', 3, 178.8, 4.14],
    (90, 120) : ['B', 16, 178.88, 3.96],
    (90, 130) : ['B', 75, 178.6, 3.96],
    (90, 140) : ['B', 57, 178.06, 4.5],
    (90, 150) : ['B', 15, 176.67, 5.52],
    (90, 160) : ['B', 21, 175.27, 5.71],
    (90, 170) : ['B', 7, 175.41, 5.51],
    (100, -50) : ['B', 3, 179.78, 7.53],
    (100, -40) : ['B', 4, 181.98, 6.92],
    (100, -30) : ['B', 7, 183.76, 5.63],
    (100, -20) : ['B', 11, 182.94, 5.03],
    (100, -10) : ['B', 25, 180.85, 5.21],
    (100, 0) : ['B', 35, 178.49, 5.35],
    (100, 10) : ['B', 24, 176.23, 5.42],
    (100, 20) : ['B', 10, 174.6, 5.78],
    (100, 30) : ['B', 7, 175.19, 5.76],
    (100, 40) : ['B', 8, 176.08, 6.39],
    (100, 50) : ['B', 8, 176.6, 7.39],
    (100, 120) : ['B', 11, 179.63, 3.95],
    (100, 130) : ['B', 29, 179.34, 3.98],
    (100, 140) : ['B', 20, 178.87, 4.41],
    (100, 150) : ['B', 11, 177.46, 5.36],
    (100, 160) : ['B', 11, 175.6, 5.56],
    (100, 170) : ['B', 3, 175.65, 5.11],
    (110, -180) : ['B', 4, 178.57, 6.92],
    (110, -50) : ['B', 3, 182.05, 7.27],
    (110, -30) : ['B', 6, 183.1, 4.58],
    (110, -20) : ['B', 9, 181.02, 4.55],
    (110, -10) : ['B', 13, 178.72, 5.31],
    (110, 0) : ['B', 13, 177.4, 6.06],
    (110, 10) : ['B', 10, 176.61, 6.19],
    (110, 20) : ['B', 6, 175.63, 5.85],
    (110, 30) : ['B', 5, 176.25, 5.36],
    (110, 40) : ['B', 4, 178.69, 6.97],
    (110, 50) : ['B', 4, 180.51, 7.93],
    (110, 120) : ['B', 4, 180.03, 5.34],
    (110, 130) : ['B', 9, 179.15, 4.95],
    (110, 140) : ['B', 5, 177.9, 4.84],
    (110, 150) : ['B', 6, 175.62, 5.53],
    (110, 160) : ['B', 6, 174.57, 5.99],
    (110, 170) : ['B', 4, 176.29, 5.77],
    (120, -50) : ['B', 3, 183.42, 4.82],
    (120, -20) : ['B', 7, 179.08, 4.32],
    (120, -10) : ['B', 12, 177.23, 5.16],
    (120, 0) : ['B', 5, 176.99, 6.07],
    (120, 10) : ['B', 4, 177.79, 6.41],
    (120, 70) : ['B', 3, 180.02, 1.89],
    (120, 130) : ['B', 3, 178.68, 6.68],
    (120, 140) : ['B', 3, 175.58, 5.5],
    (120, 150) : ['B', 5, 173.56, 5.62],
    (130, -20) : ['B', 4, 178.45, 4.68],
    (130, -10) : ['B', 6, 177.95, 4.8],
    (130, 0) : ['B', 3, 177.76, 6.0],
    (130, 10) : ['B', 5, 177.61, 7.12],
    (130, 70) : ['B', 4, 180.55, 2.19],
    (130, 150) : ['B', 3, 175.19, 5.54],
    (130, 170) : ['B', 3, 177.01, 4.31],
    (140, -20) : ['B', 6, 178.34, 5.72],
    (140, -10) : ['B', 3, 180.12, 4.95],
    (140, 140) : ['B', 3, 175.37, 5.64],
    (140, 150) : ['B', 5, 174.24, 4.79],
    (140, 160) : ['B', 9, 175.3, 3.98],
    (140, 170) : ['B', 3, 176.96, 3.59],
    (150, -20) : ['B', 4, 180.01, 5.32],
    (150, -10) : ['B', 4, 182.23, 5.37],
    (150, 0) : ['B', 7, 184.34, 5.29],
    (150, 120) : ['B', 4, 178.43, 2.55],
    (150, 130) : ['B', 3, 176.51, 3.49],
    (150, 140) : ['B', 3, 175.33, 3.85],
    (150, 150) : ['B', 6, 174.67, 3.67],
    (150, 160) : ['B', 7, 175.23, 3.39],
    (160, -30) : ['B', 4, 183.45, 3.95],
    (160, -20) : ['B', 3, 181.9, 3.81],
    (160, -10) : ['B', 5, 182.27, 4.65],
    (160, 0) : ['B', 4, 183.4, 5.09],
    (160, 110) : ['B', 3, 180.82, 2.07],
    (160, 120) : ['B', 3, 178.37, 2.7],
    (160, 130) : ['B', 9, 176.59, 3.53],
    (160, 140) : ['B', 15, 175.97, 3.5],
    (160, 150) : ['B', 14, 175.66, 3.26],
    (160, 160) : ['B', 9, 176.19, 3.2],
    (170, -30) : ['B', 4, 183.81, 3.69],
    (170, -20) : ['B', 7, 182.26, 3.0],
    (170, -10) : ['B', 4, 181.34, 3.23],
    (170, 130) : ['B', 3, 178.21, 4.16],
    (170, 140) : ['B', 8, 176.42, 4.23],
    (170, 150) : ['B', 17, 176.09, 3.89],
    (170, 160) : ['B', 19, 176.9, 3.44],
    (170, 170) : ['B', 7, 177.14, 3.18],
  },
  "NonPGIV_xpro" : {
    (-180, -180) : ['I', 928, 180.09, 6.71],
    (-100, 120) : ['B', 3, 186.07, 8.68],
    (-90, 70) : ['B', 3, 188.56, 5.93],
    (-90, 80) : ['B', 3, 185.48, 5.3],
    (-90, 100) : ['B', 4, 185.31, 7.78],
    (-90, 110) : ['B', 5, 184.69, 7.73],
    (-90, 130) : ['B', 9, 183.3, 6.97],
    (-90, 140) : ['B', 15, 181.9, 6.41],
    (-90, 150) : ['B', 8, 180.33, 5.68],
    (-90, 160) : ['B', 6, 179.55, 5.27],
    (-80, -50) : ['B', 3, 180.78, 3.87],
    (-80, 50) : ['B', 3, 186.34, 6.04],
    (-80, 60) : ['B', 5, 186.21, 5.67],
    (-80, 70) : ['B', 7, 186.13, 5.35],
    (-80, 80) : ['B', 7, 184.93, 5.45],
    (-80, 90) : ['B', 8, 183.75, 6.58],
    (-80, 100) : ['B', 10, 183.9, 7.84],
    (-80, 110) : ['B', 8, 183.07, 7.21],
    (-80, 120) : ['B', 22, 181.82, 6.17],
    (-80, 130) : ['B', 38, 180.95, 5.97],
    (-80, 140) : ['B', 51, 179.93, 6.04],
    (-80, 150) : ['B', 44, 179.05, 5.93],
    (-80, 160) : ['B', 22, 178.8, 5.85],
    (-80, 170) : ['B', 7, 179.15, 5.75],
    (-70, -60) : ['B', 6, 180.99, 4.05],
    (-70, -50) : ['B', 28, 180.49, 3.28],
    (-70, -40) : ['B', 10, 179.89, 2.88],
    (-70, -30) : ['B', 3, 179.07, 2.57],
    (-70, 50) : ['B', 13, 185.46, 5.52],
    (-70, 60) : ['B', 37, 185.15, 5.41],
    (-70, 70) : ['B', 47, 185.47, 5.37],
    (-70, 80) : ['B', 26, 185.13, 5.5],
    (-70, 90) : ['B', 16, 183.68, 6.25],
    (-70, 100) : ['B', 22, 183.07, 6.88],
    (-70, 110) : ['B', 22, 182.5, 6.23],
    (-70, 120) : ['B', 39, 180.94, 5.64],
    (-70, 130) : ['B', 59, 179.48, 5.63],
    (-70, 140) : ['B', 70, 178.28, 6.08],
    (-70, 150) : ['B', 85, 177.68, 6.21],
    (-70, 160) : ['B', 47, 177.87, 6.26],
    (-70, 170) : ['B', 11, 178.77, 6.35],
    (-60, -180) : ['B', 4, 179.34, 6.21],
    (-60, -60) : ['B', 6, 180.13, 3.55],
    (-60, -50) : ['B', 40, 179.86, 3.11],
    (-60, -40) : ['B', 45, 179.59, 2.91],
    (-60, -30) : ['B', 11, 179.15, 2.72],
    (-60, 50) : ['B', 14, 184.36, 5.69],
    (-60, 60) : ['B', 37, 184.13, 5.72],
    (-60, 70) : ['B', 46, 184.67, 5.71],
    (-60, 80) : ['B', 39, 184.55, 5.83],
    (-60, 90) : ['B', 30, 183.33, 6.13],
    (-60, 100) : ['B', 27, 182.58, 6.13],
    (-60, 110) : ['B', 30, 181.73, 5.28],
    (-60, 120) : ['B', 47, 179.92, 4.96],
    (-60, 130) : ['B', 72, 178.23, 5.28],
    (-60, 140) : ['B', 71, 176.81, 5.99],
    (-60, 150) : ['B', 90, 176.31, 6.27],
    (-60, 160) : ['B', 113, 176.78, 6.38],
    (-60, 170) : ['B', 56, 177.87, 6.43],
    (-50, -50) : ['B', 6, 179.27, 3.35],
    (-50, -40) : ['B', 12, 179.48, 3.13],
    (-50, 60) : ['B', 6, 183.18, 6.09],
    (-50, 70) : ['B', 7, 183.69, 6.16],
    (-50, 80) : ['B', 10, 183.32, 6.7],
    (-50, 90) : ['B', 5, 182.67, 6.56],
    (-50, 100) : ['B', 5, 181.82, 5.83],
    (-50, 110) : ['B', 15, 180.64, 4.78],
    (-50, 120) : ['B', 16, 178.97, 4.45],
    (-50, 130) : ['B', 25, 177.31, 4.96],
    (-50, 140) : ['B', 31, 175.86, 5.94],
    (-50, 150) : ['B', 39, 175.64, 6.31],
    (-50, 160) : ['B', 64, 176.16, 6.31],
    (-50, 170) : ['B', 18, 177.01, 6.24],
  },
  "Pro_nonxpro" : {
    (-180, -180) : ['I', 1214, 178.49, 6.3],
    (-160, -20) : ['B', 3, 182.9, 4.77],
    (-160, -10) : ['B', 3, 183.37, 4.76],
    (-160, 0) : ['B', 3, 186.63, 3.8],
    (-160, 140) : ['B', 6, 180.15, 5.46],
    (-160, 150) : ['B', 11, 179.63, 6.45],
    (-160, 160) : ['B', 6, 178.83, 6.8],
    (-150, -20) : ['B', 6, 181.93, 5.21],
    (-150, -10) : ['B', 5, 182.19, 5.18],
    (-150, 0) : ['B', 3, 184.97, 4.47],
    (-150, 70) : ['B', 3, 181.62, 5.15],
    (-150, 130) : ['B', 8, 181.29, 5.55],
    (-150, 140) : ['B', 12, 179.69, 6.05],
    (-150, 150) : ['B', 14, 178.66, 6.47],
    (-150, 160) : ['B', 8, 178.66, 6.53],
    (-140, -40) : ['B', 3, 181.69, 6.75],
    (-140, -30) : ['B', 3, 180.58, 6.16],
    (-140, -20) : ['B', 6, 181.24, 5.84],
    (-140, -10) : ['B', 7, 181.71, 5.3],
    (-140, 50) : ['B', 3, 180.02, 6.55],
    (-140, 60) : ['B', 3, 181.4, 6.52],
    (-140, 120) : ['B', 7, 181.22, 6.19],
    (-140, 130) : ['B', 18, 180.36, 6.2],
    (-140, 140) : ['B', 31, 178.98, 6.63],
    (-140, 150) : ['B', 18, 177.9, 6.69],
    (-140, 160) : ['B', 6, 177.66, 6.59],
    (-130, -40) : ['B', 3, 181.42, 7.28],
    (-130, -30) : ['B', 8, 180.36, 7.19],
    (-130, -20) : ['B', 10, 181.2, 7.03],
    (-130, -10) : ['B', 8, 182.41, 6.07],
    (-130, 0) : ['B', 4, 182.34, 4.22],
    (-130, 120) : ['B', 4, 181.3, 6.51],
    (-130, 130) : ['B', 22, 179.61, 6.26],
    (-130, 140) : ['B', 31, 178.02, 6.78],
    (-130, 150) : ['B', 24, 177.01, 7.18],
    (-130, 160) : ['B', 10, 176.22, 7.11],
    (-130, 170) : ['B', 4, 174.48, 6.67],
    (-120, -40) : ['B', 4, 181.93, 6.23],
    (-120, -30) : ['B', 8, 181.67, 6.57],
    (-120, -20) : ['B', 13, 182.22, 6.66],
    (-120, -10) : ['B', 8, 183.33, 6.47],
    (-120, 120) : ['B', 3, 181.38, 5.72],
    (-120, 130) : ['B', 9, 178.87, 6.01],
    (-120, 140) : ['B', 23, 176.6, 7.16],
    (-120, 150) : ['B', 33, 175.51, 7.98],
    (-120, 160) : ['B', 9, 175.18, 7.8],
    (-120, 170) : ['B', 3, 174.29, 6.86],
    (-110, -40) : ['B', 3, 183.03, 4.62],
    (-110, -30) : ['B', 12, 182.44, 4.87],
    (-110, -20) : ['B', 25, 181.94, 5.28],
    (-110, -10) : ['B', 15, 182.01, 5.92],
    (-110, 0) : ['B', 3, 183.21, 5.3],
    (-110, 10) : ['B', 6, 185.69, 2.8],
    (-110, 130) : ['B', 7, 177.36, 5.99],
    (-110, 140) : ['B', 25, 175.26, 6.84],
    (-110, 150) : ['B', 29, 174.16, 7.45],
    (-110, 160) : ['B', 12, 173.94, 7.35],
    (-110, 170) : ['B', 3, 173.76, 7.03],
    (-100, -40) : ['B', 3, 182.72, 4.43],
    (-100, -30) : ['B', 17, 181.97, 4.6],
    (-100, -20) : ['B', 34, 181.28, 4.67],
    (-100, -10) : ['B', 22, 180.82, 5.02],
    (-100, 0) : ['B', 3, 181.65, 4.95],
    (-100, 10) : ['B', 4, 184.88, 3.39],
    (-100, 130) : ['B', 8, 177.04, 6.16],
    (-100, 140) : ['B', 19, 174.82, 6.21],
    (-100, 150) : ['B', 17, 173.43, 6.4],
    (-100, 160) : ['B', 5, 172.26, 6.88],
    (-100, 170) : ['B', 6, 171.11, 7.64],
    (-90, -40) : ['B', 6, 182.33, 4.26],
    (-90, -30) : ['B', 31, 181.03, 4.2],
    (-90, -20) : ['B', 50, 180.14, 4.09],
    (-90, -10) : ['B', 22, 179.19, 4.42],
    (-90, 0) : ['B', 4, 179.23, 5.37],
    (-90, 110) : ['B', 3, 178.0, 5.1],
    (-90, 120) : ['B', 3, 179.23, 6.18],
    (-90, 130) : ['B', 6, 177.58, 6.43],
    (-90, 140) : ['B', 27, 175.17, 6.32],
    (-90, 150) : ['B', 27, 173.5, 6.34],
    (-90, 160) : ['B', 14, 172.57, 6.88],
    (-90, 170) : ['B', 3, 171.83, 7.74],
    (-80, -50) : ['B', 3, 182.42, 3.53],
    (-80, -40) : ['B', 14, 181.42, 3.58],
    (-80, -30) : ['B', 32, 180.39, 3.7],
    (-80, -20) : ['B', 46, 179.36, 3.96],
    (-80, -10) : ['B', 21, 178.31, 4.99],
    (-80, 0) : ['B', 5, 179.03, 6.94],
    (-80, 60) : ['B', 3, 180.04, 6.59],
    (-80, 130) : ['B', 9, 178.61, 6.69],
    (-80, 140) : ['B', 33, 176.0, 6.71],
    (-80, 150) : ['B', 32, 174.12, 6.6],
    (-80, 160) : ['B', 19, 173.9, 6.67],
    (-80, 170) : ['B', 6, 174.71, 7.09],
    (-70, -50) : ['B', 16, 181.24, 2.76],
    (-70, -40) : ['B', 95, 180.54, 2.86],
    (-70, -30) : ['B', 94, 179.69, 3.19],
    (-70, -20) : ['B', 43, 178.78, 4.09],
    (-70, -10) : ['B', 11, 178.45, 5.82],
    (-70, 0) : ['B', 6, 181.01, 7.73],
    (-70, 120) : ['B', 4, 181.27, 7.58],
    (-70, 130) : ['B', 15, 179.62, 6.66],
    (-70, 140) : ['B', 35, 177.18, 6.53],
    (-70, 150) : ['B', 51, 175.25, 6.52],
    (-70, 160) : ['B', 34, 174.67, 6.45],
    (-70, 170) : ['B', 12, 175.59, 6.44],
    (-60, -180) : ['B', 6, 176.28, 5.58],
    (-60, -50) : ['B', 24, 180.8, 2.49],
    (-60, -40) : ['B', 103, 180.03, 2.61],
    (-60, -30) : ['B', 84, 179.03, 3.02],
    (-60, -20) : ['B', 32, 177.79, 4.19],
    (-60, -10) : ['B', 15, 177.71, 5.8],
    (-60, 0) : ['B', 5, 181.37, 6.63],
    (-60, 10) : ['B', 4, 183.97, 6.19],
    (-60, 20) : ['B', 3, 180.36, 7.04],
    (-60, 130) : ['B', 12, 180.65, 6.28],
    (-60, 140) : ['B', 51, 178.56, 6.08],
    (-60, 150) : ['B', 69, 176.61, 6.18],
    (-60, 160) : ['B', 37, 175.5, 6.16],
    (-60, 170) : ['B', 18, 175.75, 5.99],
    (-50, -40) : ['B', 4, 179.72, 2.6],
    (-50, -30) : ['B', 7, 178.47, 3.05],
    (-50, -20) : ['B', 7, 176.84, 4.12],
    (-50, 130) : ['B', 5, 181.07, 5.6],
    (-50, 140) : ['B', 20, 179.39, 5.6],
    (-50, 150) : ['B', 35, 177.44, 5.93],
    (-50, 160) : ['B', 26, 175.76, 5.99],
    (-50, 170) : ['B', 7, 175.22, 5.72],
    (-40, 160) : ['B', 3, 175.25, 6.11],
    (50, 140) : ['B', 3, 174.41, 3.12],
    (50, 150) : ['B', 4, 173.95, 4.01],
    (50, 160) : ['B', 4, 173.12, 5.7],
    (60, 130) : ['B', 8, 175.81, 2.82],
    (60, 140) : ['B', 9, 174.78, 3.21],
    (60, 150) : ['B', 6, 173.3, 4.38],
    (60, 160) : ['B', 6, 172.19, 6.13],
    (60, 170) : ['B', 3, 172.43, 7.3],
    (70, -20) : ['B', 3, 185.39, 3.38],
    (70, 130) : ['B', 12, 176.51, 2.57],
    (70, 140) : ['B', 12, 176.14, 3.04],
    (70, 150) : ['B', 5, 174.32, 4.91],
    (70, 160) : ['B', 3, 172.51, 7.65],
    (80, 130) : ['B', 15, 177.91, 2.43],
    (80, 140) : ['B', 19, 177.95, 2.77],
    (80, 160) : ['B', 3, 174.18, 10.72],
    (90, 130) : ['B', 13, 179.59, 2.74],
    (90, 140) : ['B', 26, 179.35, 2.94],
    (90, 150) : ['B', 5, 178.53, 4.4],
    (100, 130) : ['B', 9, 180.47, 3.2],
    (100, 140) : ['B', 14, 179.98, 3.28],
    (100, 160) : ['B', 3, 174.01, 6.84],
    (110, 150) : ['B', 3, 176.45, 5.03],
    (120, 140) : ['B', 3, 180.12, 4.61],
    (120, 150) : ['B', 3, 176.57, 5.25],
    (160, 140) : ['B', 3, 180.16, 1.79],
  },
  "Pro_xpro" : {
    (-180, -180) : ['I', 29, 178.55, 6.54],
    (-70, 150) : ['B', 4, 180.16, 5.51],
    (-70, 160) : ['B', 5, 178.4, 6.05],
    (-70, 170) : ['B', 3, 177.46, 5.57],
    (-60, 150) : ['B', 7, 180.27, 5.48],
    (-60, 160) : ['B', 7, 177.45, 6.02],
    (-60, 170) : ['B', 5, 175.41, 5.73],
    (-50, 150) : ['B', 3, 178.74, 5.16],
    (-50, 160) : ['B', 5, 175.58, 5.78],
    (-50, 170) : ['B', 5, 173.18, 5.86],
  },
}
for res_type_group, res_type_db in sorted(omega_database.items()):
  default_values = None
  for key in sorted(res_type_db):
    if res_type_db[key][0]=="I":
      default_values = res_type_db[key]
      break
  assert default_values
  for i in range(-180,180,10):
    for j in range(-180,180,10):
      key = (i,j)
      if key not in res_type_db:
        res_type_db[key] = default_values

def mean(array):
  m=0
  for value in array:
    m+=float(value)
  return m/len(array)

def run():
  print(omega_database["Pro_nonxpro"][(-180,-180)])
  print(omega_database["Pro_nonxpro"][(-180,-170)])
  print(omega_database["Pro_nonxpro"][( -70, 150)])
  for res_group_type in sorted(omega_database):
    print(res_group_type, len(omega_database[res_group_type]))

  for aat, item in omega_database.items():
    if 1: break
    print(aat)
    ideals = []
    esds = []
    outl = None
    for key, value in item.items():
      if value[0]=='I':
        outl = value
        continue
      ideals.append(str(value[2]))
      esds.append(str(value[3]))
    print(outl)
    print(mean(ideals))
    df = '%s_ideals.dat' % aat
    f=file(df, 'wb')
    f.write('\n'.join(ideals))
    f.write('\n')
    del f
    df = '%s_esds.dat' % aat
    f=file(df, 'wb')
    f.write('\n'.join(esds))
    f.write('\n')
    del f


if __name__=="__main__":
  run()


 *******************************************************************************
