

 *******************************************************************************
mmtbx/hydrogens/__init__.py
from __future__ import absolute_import, division, print_function
from mmtbx.utils import rotatable_bonds
from scitbx.matrix import rotate_point_around_axis
from cctbx.array_family import flex
from cctbx import maptbx
import mmtbx.model
import iotbx.pdb
from libtbx.utils import Sorry

import boost_adaptbx.boost.python as bp
from six.moves import range

hydrogens_master_params_str = """
refine = individual riding *Auto
  .type = choice
  .help = Choice for refinement: riding model or full (H is refined as \
          other atoms, useful at very high resolutions only)
  .short_caption = Hydrogen refinement model
  .expert_level=1
force_riding_adp = None
  .type = bool
optimize_scattering_contribution = True
  .type = bool
contribute_to_f_calc = True
  .type = bool
  .help = Add H contribution to Xray (Fcalc) calculations
  .short_caption=Include hydrogens in Fcalc
  .expert_level=1
high_resolution_limit_to_include_scattering_from_h = 1.6
  .type = float
  .short_caption = High-resolution limit to include scattering from H
  .expert_level=2
real_space_optimize_x_h_orientation = True
  .type = bool
  .short_caption = Optimize X-H orientation in real-space
  .expert_level = 1
xh_bond_distance_deviation_limit = 0.0
  .type = float
  .help = Idealize XH bond distances if deviation from ideal is greater \
          than xh_bond_distance_deviation_limit
  .short_caption = X-H bond distance deviation limit
  .expert_level=2
"""

def shortcut(residue, first, log):
  """
  Avoid TARDY, huge speedup for huge structures!
  """
  d = {}
  for a in residue.atoms():
    name = a.name.strip().upper()
    if(name[0]=="D"):
      name = list(name)
      name[0]="H"
      name = "".join(name)
    d[name] = a.i_seq
  rn = residue.resname.strip().upper()
  result = []
  try:
    if(first):
      try: # H1,H2,H3 are missing way to often, also due to reduce bug
        axis  = [d["CA"], d["N"]]
        atoms = [d["H1"], d["H2"], d["H3"]]
        result.append([axis, atoms])
      except KeyError: pass
    if  (rn == "MET"):
      axis  = [d['SD'],  d['CE']           ]
      atoms = [d['HE1'], d['HE2'], d['HE3']]
      result.append([axis, atoms])
    elif(rn == "LYS"):
      axis  = [d['CE'],  d['NZ']           ]
      atoms = [d['HZ1'], d['HZ2'], d['HZ3']]
      result.append([axis, atoms])
    elif(rn == "SER"):
      axis  = [d['CB'], d['OG']]
      atoms = [d['HG']]
      result.append([axis, atoms])
    elif(rn == "THR"):
      axis  = [d['CB'],   d['CG2']            ]
      atoms = [d['HG21'], d['HG22'], d['HG23']]
      result.append([axis, atoms])
      axis  = [d['CB'], d['OG1']]
      atoms = [d['HG1']         ]
      result.append([axis, atoms])
    elif(rn == "LEU"):
      axis  = [d['CG'],   d['CD1']            ]
      atoms = [d['HD11'], d['HD12'], d['HD13']]
      result.append([axis, atoms])
      axis  = [d['CG'],   d['CD2']            ]
      atoms = [d['HD21'], d['HD22'], d['HD23']]
      result.append([axis, atoms])
    elif(rn == "CYS"):
      if("HG" in d.keys()): # not a disulfide bridge
        axis  = [d['CB'], d['SG']]
        atoms = [d['HG']         ]
        result.append([axis, atoms])
    elif(rn == "VAL"):
      axis  = [d['CB'],   d['CG1']            ]
      atoms = [d['HG11'], d['HG12'], d['HG13']]
      result.append([axis, atoms])
      axis  = [d['CB'],   d['CG2']            ]
      atoms = [d['HG21'], d['HG22'], d['HG23']]
      result.append([axis, atoms])
    elif(rn == "TYR"):
      axis  = [d['CZ'], d['OH']]
      atoms = [d['HH']         ]
      result.append([axis, atoms])
    elif(rn == "ALA"):
      axis  = [d['CA'],  d['CB']           ]
      atoms = [d['HB1'], d['HB2'], d['HB3']]
      result.append([axis, atoms])
    elif(rn == "ILE"):
      axis  = [d['CB'],   d['CG2']            ]
      atoms = [d['HG21'], d['HG22'], d['HG23']]
      result.append([axis, atoms])
      axis  = [d['CG1'],  d['CD1']            ]
      atoms = [d['HD11'], d['HD12'], d['HD13']]
      result.append([axis, atoms])
    elif(rn == "MSE"):
      axis  =  [d['SE'],  d['CE']           ]
      atoms =  [d['HE1'], d['HE2'], d['HE3']]
      result.append([axis, atoms])
    else:
      if(len(result)>0): return result
      else:              return None
  except KeyError:
    m="Residue %s %s is missing expected H atoms. Skipping."%(
      residue.resname, str(residue.resseq))
    print(m, file=log)
    return None
  return result

def rotatable(pdb_hierarchy, mon_lib_srv, restraints_manager, log,
              use_shortcut=True):
  """
  General tool to identify rotatable H, such as C-O-H, C-H3, in any molecule.
  """
  result = []
  def analyze_group_aa_specific(g, atoms, psel):
    result = []
    for gi in g:
      assert len(gi[0])==2 # because this is axis
      assert len(gi[1])>0  # because these are atoms rotating about this axis
      # condition 1: axis does not contain H or D
      a1, a2 = atoms[gi[0][0]], atoms[gi[0][1]]
      e1 = a1.element.strip().upper()
      e2 = a2.element.strip().upper()
      #
      condition_00_ = psel[a1.i_seq] and psel[a2.i_seq]
      condition_00 = flex.bool([condition_00_])
      for gi1_ in gi[1]:
        condition_00.append(condition_00_ and psel[atoms[gi1_].i_seq])
      condition_00 = condition_00.all_eq(True)
      if condition_00: continue
      #
      condition_1 = [e1,e2].count("H")==0 and [e1,e2].count("D")==0
      # condition 2: all atoms to rotate are H or D
      condition_2 = True
      rot_atoms = []
      for gi1i in gi[1]:
        if(not atoms[gi1i].element.strip().upper() in ["H","D"]):
          condition_2 = False
          break
      rot_atoms = []
      axis = None
      if(condition_1 and condition_2 and not condition_00):
        axis = [a1.i_seq, a2.i_seq]
        for gi1i in gi[1]:
          rot_atoms.append(atoms[gi1i].i_seq)
        result.append([axis, rot_atoms])
    if(len(result)>0): return result
    else: return None
  def analyze_group_general(g, atoms, bps, psel):
    result = []
    for gi in g:
      condition_1, condition_2, condition_3 = None,None,None
      assert len(gi[0])==2 # because this is axis
      assert len(gi[1])>0  # because these are atoms rotating about this axis
      # condition 1: axis does not contain H or D
      a1, a2 = atoms[gi[0][0]], atoms[gi[0][1]]
      e1 = a1.element.strip().upper()
      e2 = a2.element.strip().upper()
      #
      condition_00_ = psel[a1.i_seq] and psel[a2.i_seq]
      condition_00 = flex.bool([condition_00_])
      for gi1_ in gi[1]:
        condition_00.append(condition_00_ and psel[atoms[gi1_].i_seq])
      condition_00 = condition_00.all_eq(True)
      if condition_00: continue
      #
      condition_1 = [e1,e2].count("H")==0 and [e1,e2].count("D")==0
      s1 = set(gi[1])
      if(condition_1):
        # condition 2: all atoms to rotate are H or D
        condition_2 = True
        for gi1i in gi[1]:
          if(not atoms[gi1i].element.strip().upper() in ["H","D"]):
            condition_2 = False
            break
        if(condition_2):
          # condition 3: one of axis atoms is terminal (bonded to another axis
          #              atom and hydrogens
          condition_3 = False
          for gia in gi[0]:
            bonds_involved_into = []
            for bp in bps:
              if(gia in bp.i_seqs):
                for i_seq in bp.i_seqs:
                  if(atoms[i_seq].element.strip().upper() in ["H","D"]):
                    bonds_involved_into.append(i_seq)
            s2 = set(bonds_involved_into)
            s = list(s1 & s2)
            if(len(s)>0): condition_3 = True
          #
          if(condition_1 and condition_2 and condition_3):
          #if(condition_1 and condition_2 and condition_3 and not condition_00):
            axis = [a1.i_seq, a2.i_seq]
            rot_atoms = []
            in_plane = False
            for i in bonds_involved_into:
              if(psel[atoms[i].i_seq]): in_plane = True
              rot_atoms.append(atoms[i].i_seq)
            if(not in_plane): result.append([axis, rot_atoms])
    if(len(result)>0): return result
    else: return None
  def helper_1(residue, mon_lib_srv, log, result, psel):
    fr = rotatable_bonds.axes_and_atoms_aa_specific(
      residue=residue, mon_lib_srv=mon_lib_srv,
      remove_clusters_with_all_h=False, log=log)
    if(fr is not None):
      r = analyze_group_aa_specific(g=fr, atoms=residue.atoms(), psel=psel)
      if(r is not None):
        for r_ in r: result.append(r_)
  def helper_2(atoms, restraints_manager):
    elements = atoms.extract_element()
    names = atoms.extract_name()
    # create tardy_model
    iselection = atoms.extract_i_seq()
    sites_cart = atoms.extract_xyz()
    masses     = [1]*sites_cart.size()
    labels     = list(range(sites_cart.size()))
    grm_i = restraints_manager.select(iselection)
    bps, asu = grm_i.geometry.get_all_bond_proxies(
      sites_cart = sites_cart)
    edge_list = []
    for bp in bps: edge_list.append(bp.i_seqs)
    fixed_vertex_lists = []
    tmp_r = []
    # try all possible edges (bonds) as potential fixed vertices and
    # accept only non-redundant
    for bp in bps:
      tardy_tree = scitbx.graph.tardy_tree.construct(
        sites              = sites_cart,
        edge_list          = edge_list,
        fixed_vertex_lists = [bp.i_seqs])
      tardy_model = scitbx.rigid_body.tardy_model(
        labels        = labels,
        sites         = sites_cart,
        masses        = masses,
        tardy_tree    = tardy_tree,
        potential_obj = None)
      fr = rotatable_bonds.axes_and_atoms_aa_specific(
        residue=residue, mon_lib_srv=mon_lib_srv,
        remove_clusters_with_all_h=False, log=None,
        tardy_model = tardy_model)
      if(fr is not None):
        r = analyze_group_general(g=fr, atoms=atoms,bps=bps,psel=psel)
        if(r is not None and len(r)>0):
          for r_ in r:
            if(not r_ in tmp_r):
              if(not r_ in tmp_r): tmp_r.append(r_)
    for r in tmp_r:
      if(not r in result):
        result.append(r)
  #
  if(restraints_manager is not None):
    psel = flex.bool(pdb_hierarchy.atoms().size(), False)
    for p in restraints_manager.geometry.planarity_proxies:
      for i in p.i_seqs:
        psel[i] = True
  # very handy for debugging: do not remove
  #NAMES = pdb_hierarchy.atoms().extract_name()
  #
  get_class = iotbx.pdb.common_residue_names_get_class
  import scitbx.graph.tardy_tree
  for model in pdb_hierarchy.models():
    for chain in model.chains():
      residue_groups = chain.residue_groups()
      n_residues = len(residue_groups)
      for i_rg, residue_group in enumerate(residue_groups):
        first = i_rg == 0
        last  = i_rg+1 == n_residues
        first_or_last = first or last
        conformers = residue_group.conformers()
        for conformer in residue_group.conformers():
          for residue in conformer.residues():
            if(residue.resname.strip().upper() == "PRO"): continue
            atoms = residue.atoms()
            if(get_class(name=residue.resname)=="common_water" and
               len(atoms)==1):
                 continue
            hd = False
            for a in residue.atoms():
              if(a.element_is_hydrogen()):
                hd=True
                break
            if(not hd): continue
            if(get_class(name=residue.resname)=="common_amino_acid" and not last):
              if(use_shortcut):
                r_ = shortcut(residue=residue, first=first, log=log)
                if(r_ is not None): result.extend(r_)
              else:
                helper_1(residue, mon_lib_srv, log, result, psel)
                if(first):
                  helper_2(atoms, restraints_manager)
            elif(get_class(name=residue.resname)=="common_amino_acid"):
              helper_1(residue, mon_lib_srv, log, result, psel)
              helper_2(atoms, restraints_manager)
            elif((restraints_manager is not None)):
              helper_2(atoms, restraints_manager)
  # very handy for debugging: do not remove
  #for r_ in result:
  #  print "  analyze_group:", r_, \
  #    [NAMES[i] for i in r_[0]], [NAMES[i] for i in r_[1]], residue.resname
  return result

def count_rotatable(selections):
  result = 0
  for s in selections:
    result += len(s[1])
  return result

class map_manager(object):

  def __init__(self, fmodel, map_type):
    self.fmodel = fmodel
    self.map_type = map_type
    cs = fmodel.f_obs().crystal_symmetry()
    self.unit_cell = cs.unit_cell()
    self.crystal_gridding = maptbx.crystal_gridding(
      unit_cell        = self.unit_cell,
      space_group_info = cs.space_group_info(),
      symmetry_flags   = maptbx.use_space_group_symmetry,
      step             = 0.25)
    self.omit_map = None
    self.size = self.fmodel.xray_structure.scatterers().size()

  def update_omit_map(self, omit_selection):
    fmodel = self.fmodel.deep_copy()
    xrs = fmodel.xray_structure
    xrs.set_occupancies(value=0, selection = omit_selection)
    fmodel.update_xray_structure(
      xray_structure = xrs,
      update_f_calc  = True,
      update_f_mask  = False)
    mc = fmodel.electron_density_map().map_coefficients(
      map_type   = "mFobs-DFmodel",
      isotropize = False,
      exclude_free_r_reflections = True)
    fft_map = mc.fft_map(crystal_gridding = self.crystal_gridding)
    fft_map.apply_sigma_scaling()
    #fft_map.apply_volume_scaling()
    self.omit_map = fft_map.real_map_unpadded()

  def score(self, sites_cart):
    return maptbx.real_space_target_simple(
      unit_cell   = self.unit_cell,
      density_map = self.omit_map,
      sites_cart  = sites_cart)

def map_statistics(model, fmodel):
  result = flex.double()
  mm = map_manager(fmodel = fmodel, map_type = "mFobs-DFmodel")
  for m in model.get_hierarchy().models():
    for c in m.chains():
      for rg in c.residue_groups():
        h_sel      = flex.size_t()
        sites_cart = flex.vec3_double()
        for atom in rg.atoms():
          if not atom.element_is_hydrogen(): continue
          h_sel.append(atom.i_seq)
          sites_cart.append(atom.xyz)
        if h_sel.size()==0: continue
        mm.update_omit_map(omit_selection = h_sel)
        for site_cart in sites_cart:
          score = mm.score(sites_cart = flex.vec3_double([site_cart]))
          score = min(3.5, max(0, score))
          result.append(score)
  return result

def fit_rotatable2(model, fmodel):
  """
  Slow, OMIT map based fitting of rotatable H.
  """
  # Reset mask params if needed
  mask_params = fmodel.mask_params
  mpih = mask_params.ignore_hydrogens
  if(mpih):
    mask_params.ignore_hydrogens=False
    fmodel.update(mask_params=mask_params)
  # Set X-H lengths based on data type
  scattering_table = model.get_scattering_table()
  if scattering_table is None:
    raise Sorry("scattering_table must be set.")
  use_neutron_distances = False
  if scattering_table in ["neutron", "electron"]:
    use_neutron_distances = True
  model.set_hydrogen_bond_length(use_neutron_distances = use_neutron_distances)
  model.idealize_h_riding()
  #
  fmodel.update_xray_structure(
    xray_structure = model.get_xray_structure(),
    update_f_calc  = True,
    update_f_mask  = True)
  fmodel.update_all_scales()
  #
  # FIT
  mm = map_manager(fmodel = fmodel, map_type = "mFobs-DFmodel")
  get_class = iotbx.pdb.common_residue_names_get_class
  sites_cart = model.get_sites_cart()

  #for m in model.get_hierarchy().models():
  #  for c in m.chains():
  #    first=True
  #    for r in c.residues():

  for m in model.get_hierarchy().models():
    for c in m.chains():
      first=True
      for residue_group in c.residue_groups():
        conformers = residue_group.conformers()
        for conformer in conformers:
          r = conformer.only_residue()

          if not get_class(r.resname)=="common_amino_acid": continue
          s = mmtbx.hydrogens.shortcut(residue=r, first=first, log=model.log)
          first=False
          if s is None: continue
          # print(r.resname, s)
          omit_selection = flex.size_t()
          for cl in s:
            omit_selection.extend(flex.size_t(cl[1]))
          mm.update_omit_map(omit_selection = omit_selection)
          for cl in s:
            axis = cl[0]
            a1, a2               = sites_cart[axis[0]], sites_cart[axis[1]]
            sel_to_rotate        = flex.size_t(cl[1])
            sites_cart_to_rotate = sites_cart.select(sel_to_rotate)
            score_start          = mm.score(sites_cart = sites_cart_to_rotate)
            score_best           = score_start
            sites_cart_moved     = flex.vec3_double(sites_cart_to_rotate.size())
            sites_cart_best      = None
            assert len(sel_to_rotate) in [1,3]
            if len(sel_to_rotate)==1: stop=360
            else:                     stop=60
            for angle in range(0, stop, 1):
              sites_cart_moved = flex.vec3_double(sites_cart_to_rotate.size())
              for isite, site_cart in enumerate(sites_cart_to_rotate):
                site_cart_rotated = rotate_point_around_axis(
                  axis_point_1 = a1,
                  axis_point_2 = a2,
                  point        = site_cart,
                  angle        = angle,
                  deg          = True)
                sites_cart_moved[isite] = site_cart_rotated
              score = mm.score(sites_cart = sites_cart_moved)
              if score > score_best:
                score_best = score
                sites_cart_best = sites_cart_moved.deep_copy()
            if sites_cart_best is not None:
              sites_cart = sites_cart.set_selected(sel_to_rotate, sites_cart_best)
  model.set_sites_cart(sites_cart)
  fmodel.xray_structure.set_sites_cart(model.get_sites_cart())
  if(mpih):
    mask_params.ignore_hydrogens=False
    fmodel.update(mask_params=mask_params)
  fmodel.update_xray_structure(update_f_calc=True, update_f_mask=True)
  fmodel.update_all_scales()

def fit_rotatable(
      pdb_hierarchy,
      xray_structure,
      map_data,
      rotatable_h_selection):
  unit_cell = xray_structure.unit_cell()
  sites_cart = xray_structure.sites_cart()
  scatterers = xray_structure.scatterers()
  for sel_ in rotatable_h_selection:
    ed_val = -1
    angle = 0.
    angular_step = 1
    axis = sel_[0]
    points_i_seqs = sel_[1]
    sites_frac_best = flex.vec3_double(len(points_i_seqs))
    while angle <= 360:
      sites_frac_tmp  = flex.vec3_double(len(points_i_seqs))
      ed_val_ = 0
      for i_seq, point_i_seq in enumerate(points_i_seqs):
        site_cart_new = rotate_point_around_axis(
          axis_point_1 = sites_cart[axis[0]],
          axis_point_2 = sites_cart[axis[1]],
          point        = sites_cart[point_i_seq],
          angle        = angle,
          deg          = True)
        site_frac_new = unit_cell.fractionalize(site_cart_new)
        ed_val_ += abs(maptbx.eight_point_interpolation(map_data,site_frac_new))
        sites_frac_tmp[i_seq] = site_frac_new
      if(ed_val_ > ed_val):
        ed_val = ed_val_
        sites_frac_best = sites_frac_tmp.deep_copy()
      angle += angular_step
    for i_seq, point_i_seq in enumerate(points_i_seqs):
      scatterers[point_i_seq].site = sites_frac_best[i_seq]
  pdb_hierarchy.adopt_xray_structure(xray_structure)

def run_fit_rotatable(
      fmodel,
      ref_model,
      angular_step,
      log = None,
      use_h_omit_map = False,
      map_type="2mFo-DFc"):
  pdb_hierarchy = ref_model.get_hierarchy()
  xrs = fmodel.xray_structure
  rotatable_h_selection = rotatable(
    pdb_hierarchy      = pdb_hierarchy,
    mon_lib_srv        = ref_model.get_mon_lib_srv(),
    restraints_manager = ref_model.get_restraints_manager(),
    log                = log)
  rotatable_h_selection_1d = []
  for s in rotatable_h_selection:
    rotatable_h_selection_1d.extend(s[1])
  rotatable_h_selection_1d = flex.size_t(rotatable_h_selection_1d)
  rotatable_h_selection_1d_bool = flex.bool(xrs.scatterers().size(),
    rotatable_h_selection_1d)
  if(log is not None):
    print("Real-space grid search fit H (or D) atoms:", file=log)
    print("  start:  r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(),
      fmodel.r_free()), file=log)
  if(use_h_omit_map):
    xrs_omit = fmodel.xray_structure.select(~rotatable_h_selection_1d_bool)
    fmodel.update_xray_structure(xray_structure = xrs_omit, update_f_calc= True)
    if(log is not None):
      print("  H omit: r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(),
        fmodel.r_free()), file=log)
  fft_map = fmodel.electron_density_map().fft_map(
    resolution_factor = 1./4.,
    map_type          = map_type,
    symmetry_flags    = maptbx.use_space_group_symmetry)
  fft_map.apply_sigma_scaling()
  map_data = fft_map.real_map_unpadded()
  fit_rotatable(
    pdb_hierarchy  = pdb_hierarchy,
    xray_structure = xrs,
    rotatable_h_selection=rotatable_h_selection,
    map_data       = map_data)
  fmodel.update_xray_structure(xray_structure = xrs, update_f_calc=True)
  ref_model.xray_structure = xrs
  if(log is not None):
    print("  final:  r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(),
      fmodel.r_free()), file=log)


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/build_hydrogens.py
from __future__ import absolute_import, division, print_function
from mmtbx.monomer_library import pdb_interpretation
from mmtbx import monomer_library
import mmtbx.monomer_library.server
from iotbx import pdb
from cctbx.geometry_restraints.lbfgs import lbfgs as geometry_restraints_lbfgs
import scitbx.lbfgs
import libtbx.load_env
import math
import sys, os
from six.moves import zip


def add_ring_h(site_0,site_1,site_2,d0,alpha,beta):
  #                 H (xh,yh,zh)
  #                 |
  #                 | d0
  #                 |
  #      /_alpha    C (x0,y0,z0)   /_beta
  #                / \
  #            d1 /   \ d2
  #              /     \
  #  (x1,y1,z1) C       C (x2,y2,z2)
  #             |       |
  #             |       |
  #             |       |
  #             C       C
  #              \     /
  #               \   /
  #                \ /
  #                 C
  #
  x0 = site_0[0]
  y0 = site_0[1]
  z0 = site_0[2]
  x1 = site_1[0]
  y1 = site_1[1]
  z1 = site_1[2]
  x2 = site_2[0]
  y2 = site_2[1]
  z2 = site_2[2]
  a1 = x2-x0
  a2 = y2-y0
  a3 = z2-z0
  b1 = x1-x0
  b2 = y1-y0
  b3 = z1-z0
  c1 = b2*a3-a2*b3
  c2 = -(b1*a3-a1*b3)
  c3 = b1*a2-a1*b2
  R = -x1*c1-y1*c2-z1*c3
  d1 = math.sqrt(b1*b1+b2*b2+b3*b3)
  d2 = math.sqrt(a1*a1+a2*a2+a3*a3)
  A = d1*d0*math.cos(alpha*math.pi/180.)
  B = d2*d0*math.cos(beta*math.pi/180.)
  P = -(B+a1*x0+a2*y0+a3*z0)
  Q = -(A+b1*x0+b2*y0+b3*z0)
  t1 = b2-b1*a2/a1
  t2 = b3-b1*a3/a1
  t3 = Q-b1*P/a1
  f1 = c2-c1*a2/a1
  f2 = c3-c1*a3/a1
  f3 = R-c1*P/a1
  zh = (f1*t3/t1-f3)/(f2-f1*t2/t1)
  yh = -1./t1*(zh*t2+t3)
  xh = -1./a1*(a2*yh+a3*zh+P)
  return (xh,yh,zh)


def add_ca_ha1_and_ha2(site_0,site_1,site_2,d0,alpha,beta):
  #            HA1      HA2
  #              \      /
  #            d0 \    / d0
  #                \  /
  #      /_alpha    CA (site_0)   /_beta
  #               /    \
  #           d1 /      \ d2
  #             /        \
  #   (site_1) C          N (site_2)
  #
  x0 = site_0[0]
  y0 = site_0[1]
  z0 = site_0[2]
  x1 = site_1[0]
  y1 = site_1[1]
  z1 = site_1[2]
  x2 = site_2[0]
  y2 = site_2[1]
  z2 = site_2[2]
  a1 = x2-x0
  a2 = y2-y0
  a3 = z2-z0
  b1 = x1-x0
  b2 = y1-y0
  b3 = z1-z0
  d1 = math.sqrt(b1*b1+b2*b2+b3*b3)
  d2 = math.sqrt(a1*a1+a2*a2+a3*a3)
  A = d1*d0*math.cos(alpha*math.pi/180.)
  B = d2*d0*math.cos(beta*math.pi/180.)
  P = -(B+a1*x0+a2*y0+a3*z0)
  Q = -(A+b1*x0+b2*y0+b3*z0)
  B1 = (a3/a1-b3/b1)/(b2/b1-a2/a1)
  B2 = (P/a1-Q/b1)/(b2/b1-a2/a1)
  B3 = a3/a1+a2/a1*B1
  B4 = P/a1+a2/a1*B2
  D1 = 1.+B1*B1+B3*B3
  D2 = 2.*B3*(B4+x0)+2.*B1*(B2-y0)-2.*z0
  D3 = (B4+x0)*(B4+x0)+(B2-y0)*(B2-y0)+z0*z0-d0*d0
  discr = math.sqrt(D2*D2-4.*D1*D3)
  coeff = (-D2 - discr)/(2.*D1)
  xh1 = -B4-B3*coeff
  yh1 = B2+B1*coeff
  zh1 = coeff
  coeff = (-D2 + discr)/(2.*D1)
  xh2 = -B4-B3*coeff
  yh2 = B2+B1*coeff
  zh2 = coeff
  return ((xh1,yh1,zh1),(xh2,yh2,zh2))

def add_ca_ha1_or_ha2(site_0,site_1,site_2,site_3,d0,alpha,beta,gamma):
  #     HA1 (or HA2)    CB (or HA1 or HA2)
  #             \ /_gamma/
  #           d0 \      / d3
  #               \    /
  #      /_alpha    CA (site_0)   /_beta
  #               /    \
  #           d1 /      \ d2
  #             /        \
  #   (site_1) C          N (site_2)
  #
  x0 = site_0[0]
  y0 = site_0[1]
  z0 = site_0[2]
  x1 = site_1[0]
  y1 = site_1[1]
  z1 = site_1[2]
  x2 = site_2[0]
  y2 = site_2[1]
  z2 = site_2[2]
  x3 = site_3[0]
  y3 = site_3[1]
  z3 = site_3[2]
  a1 = x2-x0
  a2 = y2-y0
  a3 = z2-z0
  b1 = x1-x0
  b2 = y1-y0
  b3 = z1-z0
  c1 = x3-x0
  c2 = y3-y0
  c3 = z3-z0
  d1 = math.sqrt(b1*b1+b2*b2+b3*b3)
  d2 = math.sqrt(a1*a1+a2*a2+a3*a3)
  d3 = math.sqrt(c1*c1+c2*c2+c3*c3)
  A = d1*d0*math.cos(alpha*math.pi/180.)
  B = d2*d0*math.cos(beta*math.pi/180.)
  C = d3*d0*math.cos(gamma*math.pi/180.)
  P = -(B+a1*x0+a2*y0+a3*z0)
  Q = -(A+b1*x0+b2*y0+b3*z0)
  R = -(C+c1*x0+c2*y0+c3*z0)
  t1 = b2-b1*a2/a1
  t2 = b3-b1*a3/a1
  t3 = Q-b1*P/a1
  f1 = c2-c1*a2/a1
  f2 = c3-c1*a3/a1
  f3 = R-c1*P/a1
  zh = (f1*t3/t1-f3)/(f2-f1*t2/t1)
  yh = -1./t1*(zh*t2+t3)
  xh = -1./a1*(a2*yh+a3*zh+P)
  return (xh,yh,zh)

def add_hhh(site_0,site_1,d0,alpha,beta):
  x0 = site_0[0]
  y0 = site_0[1]
  z0 = site_0[2]
  x1 = site_1[0]
  y1 = site_1[1]
  z1 = site_1[2]
  a1 = x1-x0
  a2 = y1-y0
  a3 = z1-z0
  d1 = math.sqrt(a1*a1+a2*a2+a3*a3)
  A = d1*d0*math.cos(alpha*math.pi/180.)
  P = -(A+a1*x0+a2*y0+a3*z0)
  b1 = z0+P/a3
  b2 = a1/a3
  b3 = a2/a3
  c1 = 1.+b2*b2
  c2 = 1.+b3*b3
  c3 = 2.*b1*b2-2.*x0
  c4 = 2.*b1*b3-2.*y0
  c5 = 2.*b2*b3
  R = -(d0*d0-b1*b1-x0*x0-y0*y0)
  e1 = c5*c5-4.*c1*c2
  e2 = 2.*c3*c5-4.*c1*c4
  e3 = c3*c3-4.*c1*R
  y1 = (-e2+math.sqrt(e2*e2-4.*e1*e3)) / (2.*e1)
  y2 = (-e2-math.sqrt(e2*e2-4.*e1*e3)) / (2.*e1)
  x1 = -(c3+c5*y1)/(2.*c1)
  x2 = -(c3+c5*y2)/(2.*c1)
  z1 = -(P+a1*x1+a2*y1) / a3
  z2 = -(P+a1*x2+a2*y2) / a3
  return (x1,y1,z1), add_ca_ha1_and_ha2(site_0,site_1,(x1,y1,z1),d0,alpha,beta)
  #print x2,y2,z2
  #add_ca_ha1_and_ha2(site_0,site_1,(x2,y2,z2),d0,alpha,alpha)

def add_arg_like_h(site_0,site_1,site_2,d,alpha,flag):
  F = site_0[0]
  G = site_0[1]
  H = site_0[2]
  a1,a2,a3 = site_1[0]-site_0[0],site_1[1]-site_0[1],site_1[2]-site_0[2]
  b1,b2,b3 = site_2[0]-site_1[0],site_2[1]-site_1[1],site_2[2]-site_1[2]
  c1,c2,c3 = site_2[0]-site_0[0],site_2[1]-site_0[1],site_2[2]-site_0[2]
  d1 = math.sqrt(a1*a1+a2*a2+a3*a3)
  A = a2/a1
  B = a3/a1
  C = (-d*d1*math.cos(alpha*math.pi/180.)-F*a1-G*a2-H*a3)/a1
  AA = A*A
  BB = B*B
  CC = C*C
  FF = F*F
  GG = G*G
  HH = H*H
  M = d*d
  f1 = a2*c3-a3*c2
  f2 = -(a1*c3-c1*a3)
  f3 = a1*c2-c1*a2 ;
  f4 = -F*f1 - G*f2 - H*f3
  P = f2/f1
  Q = f3/f1
  R = f4/f1
  PP = P*P
  QQ = Q*Q
  RR = R*R
  xh1 = (-2.*(A-P)*(C*(PP+QQ)+BB*(P*(G-F*P)+R)+AA*(Q*(H-F*Q)+R)-A*(C*P+B*H*P+  \
       B*G*Q-2.*B*F*P*Q+H*P*Q-G*QQ+P*R)+B*(H*PP-Q*(C+G*P+R)))+(-B*P+A*Q)*      \
       math.sqrt(-4.*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ))*((FF+ \
       GG+HH-M)*(A-P)**2+2.*C*(A-P)*(G-F*P)+CC*(1.+PP)+2.*(A*F-G)*(A-P)*R-2.*C*\
       (1.+A*P)*R+(1.+AA)*R**2)+4.*(-2.*A*H*P+H*PP+C*Q-G*P*Q+A*(G+(C+F)*P)*Q-  \
       Q*R+B*((A-P)*(-G+F*P)-C*(1.+PP)+R+A*P*R)+AA*(H-Q*(F+R)))**2))/(2.*(A-   \
       P)*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ)))
  yh1 = (-2.*(A-P)*(-(C*P)+H*P*Q-G*QQ-B*(-2.*G*Q+P*(H+(C+F)*Q))+P*R+A*((B-Q)*    \
       (H-F*Q)+C*(1.+QQ)-(1.+B*Q)*R)+BB*(-G+P*(F+R)))+(B-Q)*math.sqrt(-4.*(PP+   \
       BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ))*((FF+GG+HH-M)*(A-P)**2+2.*\
       C*(A-P)*(G-F*P)+CC*(1.+PP)+2.*(A*F-G)*(A-P)*R-2.*C*(1.+A*P)*R+(1.+AA)*RR)+\
       4.*(-2.*A*H*P+H*PP+C*Q-G*P*Q+A*(G+(C+F)*P)*Q-Q*R+B*((A-P)*(-G+F*P)-C*     \
       (1.+PP)+R+A*P*R)+AA*(H-Q*(F+R)))**2))/(2.*(A-P)*(PP+BB*(1.+PP)-2.*B*Q+QQ- \
       2.*A*(P+B*P*Q)+AA*(1.+QQ)))
  zh1 = -(-2.*H*(A-P)**2-2.*(C-(A*F-G)*(A-P)+A*C*P)*Q+2.*(1.+AA)*Q*R+2.*B*((A-P)*\
       (G-F*P)+C*(1.+PP)-(1.+A*P)*R)+math.sqrt(-4.*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*\
       (P+B*P*Q)+AA*(1.+QQ))*((FF+GG+HH-M)*(A-P)**2+2.*C*(A-P)*(G-F*P)+CC*(1.+   \
       PP)+2.*(A*F-G)*(A-P)*R-2.*C*(1.+A*P)*R+(1.+AA)*RR)+4.*(-2.*A*H*P+H*PP+C*Q-\
       G*P*Q+A*(G+(C+F)*P)*Q-Q*R+B*((A-P)*(-G+F*P)-C*(1.+PP)+R+A*P*R)+AA*(H-Q*(F+\
       R)))**2))/(2.*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ)))
  if(flag > 1):
    xh2 = (-2.*(A-P)*(C*(PP+QQ)+BB*(P*(G-F*P)+R)+AA*(Q*(H-F*Q)+R)-A*(C*P+B*H*P+  \
         B*G*Q-2.*B*F*P*Q+H*P*Q-G*QQ+P*R)+B*(H*PP-Q*(C+G*P+R)))-(-B*P+A*Q)*      \
         math.sqrt(-4.*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ))*((FF+ \
         GG+HH-M)*(A-P)**2+2.*C*(A-P)*(G-F*P)+CC*(1.+PP)+2.*(A*F-G)*(A-P)*R-2.*C*\
         (1.+A*P)*R+(1.+AA)*R**2)+4.*(-2.*A*H*P+H*PP+C*Q-G*P*Q+A*(G+(C+F)*P)*Q-  \
         Q*R+B*((A-P)*(-G+F*P)-C*(1.+PP)+R+A*P*R)+AA*(H-Q*(F+R)))**2))/(2.*(A-   \
         P)*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ)))
    yh2 = (-2.*(A-P)*(-(C*P)+H*P*Q-G*QQ-B*(-2.*G*Q+P*(H+(C+F)*Q))+P*R+A*((B-Q)*    \
         (H-F*Q)+C*(1.+QQ)-(1.+B*Q)*R)+BB*(-G+P*(F+R)))-(B-Q)*math.sqrt(-4.*(PP+   \
         BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ))*((FF+GG+HH-M)*(A-P)**2+2.*\
         C*(A-P)*(G-F*P)+CC*(1.+PP)+2.*(A*F-G)*(A-P)*R-2.*C*(1.+A*P)*R+(1.+AA)*RR)+\
         4.*(-2.*A*H*P+H*PP+C*Q-G*P*Q+A*(G+(C+F)*P)*Q-Q*R+B*((A-P)*(-G+F*P)-C*     \
         (1.+PP)+R+A*P*R)+AA*(H-Q*(F+R)))**2))/(2.*(A-P)*(PP+BB*(1.+PP)-2.*B*Q+QQ- \
         2.*A*(P+B*P*Q)+AA*(1.+QQ)))
    zh2 = -(-2.*H*(A-P)**2-2.*(C-(A*F-G)*(A-P)+A*C*P)*Q+2.*(1.+AA)*Q*R+2.*B*((A-P)*\
         (G-F*P)+C*(1.+PP)-(1.+A*P)*R)-math.sqrt(-4.*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*\
         (P+B*P*Q)+AA*(1.+QQ))*((FF+GG+HH-M)*(A-P)**2+2.*C*(A-P)*(G-F*P)+CC*(1.+   \
         PP)+2.*(A*F-G)*(A-P)*R-2.*C*(1.+A*P)*R+(1.+AA)*RR)+4.*(-2.*A*H*P+H*PP+C*Q-\
         G*P*Q+A*(G+(C+F)*P)*Q-Q*R+B*((A-P)*(-G+F*P)-C*(1.+PP)+R+A*P*R)+AA*(H-Q*(F+\
         R)))**2))/(2.*(PP+BB*(1.+PP)-2.*B*Q+QQ-2.*A*(P+B*P*Q)+AA*(1.+QQ)))
  if(flag == 1):
    return (xh1,yh1,zh1)
  if(flag == 2):
    return (xh1,yh1,zh1),(xh2,yh2,zh2)

def run(file_name):
  print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
  mon_lib_srv = monomer_library.server.server()
  ener_lib = monomer_library.server.ener_lib()
  processed = monomer_library.pdb_interpretation.process(
    mon_lib_srv           = mon_lib_srv,
    ener_lib              = ener_lib,
    file_name             = file_name,
    keep_monomer_mappings = True,
    log                   = sys.stdout).all_chain_proxies
  total_missing = 0.0
  still_missing = 0.0
  still_missing_h = []
  atom_number = 0
  file_name_ =  os.path.basename(file_name)+"_h"
  file = open(file_name_,"w")

  for monomer_mapping in processed.all_monomer_mappings:
    atom_number = write_atoms(monomer_mapping,
                              atom_number,
                              file)
    bond_list = monomer_mapping.monomer.bond_list
    angle_list = monomer_mapping.monomer.angle_list
    missing_h = list(monomer_mapping.missing_hydrogen_atoms.keys())
    residue_name = monomer_mapping.monomer.chem_comp.three_letter_code
    print()
    print("Residue name: ", end=' ')
    print(monomer_mapping.residue_name, monomer_mapping.monomer.chem_comp.three_letter_code)
    print("Missing hydrogen atoms: ", missing_h)
    print()
    total_missing += len(missing_h)
    unknown_h = []
    n_missed = len(missing_h)-1
    while n_missed > 0:
      n_missed -= 1
      h = missing_h[0]
      for bl in bond_list:
        if(h == bl.atom_id_1 or h == bl.atom_id_2):
          for atom in (bl.atom_id_1,bl.atom_id_2):
            if(h != atom): target_atom_name = atom
          for atom_name,atom in monomer_mapping.expected_atoms.items():
            if(atom_name == target_atom_name):
              target_site = atom.xyz
          bond_dist = bl.value_dist
          format="missing %4s: bond: %4s %4s bond distance = %5.3f"
          print(format % (h, bl.atom_id_1, bl.atom_id_2, bl.value_dist))
      angles = []
      for al in angle_list:
        if(h == al.atom_id_1 or h == al.atom_id_2 or h == al.atom_id_3):
          format="        %4s: angle: %4s %4s %4s = %5.3f"
          print(format % (h, al.atom_id_1,al.atom_id_2,al.atom_id_3,al.value_angle))
          angles.append([al.value_angle,al.atom_id_1,al.atom_id_2,al.atom_id_3])
      bonded_to_target_site = []
      #for bl in bond_list:
      #  if(target_atom_name in (bl.atom_id_1,bl.atom_id_2)):
      #    for atom in (bl.atom_id_1,bl.atom_id_2):
      #      if(atom != target_atom_name):
      #        bonded_to_target_site.append(atom)
      #print "target_site, bonded_to_target_site ", target_atom_name, bonded_to_target_site
### ring hydrogens: TYR,PHE,HIS,TRP
      if(residue_name in ["PHE","TYR","HIS","TRP","ARG"]):
        ring_h = {
         "HE1":{"PHE":["CE1","CD1","CZ"],
                "TYR":["CE1","CD1","CZ"],
                "HIS":["CE1","ND1","NE2"],
                "TRP":["NE1","CD1","CE2"]},
         "HE2":{"PHE":["CE2","CD2","CZ"],
                "TYR":["CE2","CD2","CZ"],
                "HIS":["NE2","CE1","CD2"]},
         "HE3":{"TRP":["CE3","CZ3","CD2"]},
         "HD1":{"PHE":["CD1","CE1","CG"],
                "TYR":["CD1","CE1","CG"],
                "HIS":["ND1","CG","CE1"],
                "TRP":["CD1","CG","NE1"]},
         "HD2":{"PHE":["CD2","CE2","CG"],
                "TYR":["CD2","CE2","CG"],
                "HIS":["CD2","NE2","CG"]},
         "HH2":{"TRP":["CH2","CZ2","CZ3"]},
         "HZ" :{"PHE":["CZ","CE1","CE2"]},
         "HZ2":{"TRP":["CZ2","CE2","CH2"]},
         "HZ3":{"TRP":["CZ3","CH2","CE3"]},
         "HE" :{"ARG":["NE","CZ","CD"]}
                 }
        if h in ring_h.keys():
          if residue_name in ring_h[h].keys():
            targets = ring_h[h][residue_name]
            print("Building:", h, " ...")
            site_0 = None
            site_1 = None
            site_2 = None
            for atom_name,atom in monomer_mapping.expected_atoms.items():
              if(atom_name == targets[0]):
                site_0 = atom.xyz
              if(atom_name == targets[1]):
                site_1 = atom.xyz
              if(atom_name == targets[2]):
                site_2 = atom.xyz
            alpha = angles[0][0]
            beta  = angles[1][0]
            assert site_0 is not None and site_1 is not None and site_2 is not None
            xyz = add_ring_h(site_0,site_1,site_2,bond_dist,alpha,beta)
            atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = h,
                                      new_atom_coordinates = xyz)
            missing_h.remove(h)
### CA hydrogen(s): HA or/and HA1 or/and HA2
      if(h == "HA" or h == "HA1" or h == "HA2"):
        build_one = False
        build_two = False
        if("HA" in missing_h):
          build_one = True
        if("HA1" in missing_h and "HA2" in missing_h):
          build_two = True
        if(("HA1" in missing_h or "HA2" in missing_h) and build_two == False):
          build_one = True
        assert build_one == True and build_two == False or \
               build_one == False and build_two == True
        if(build_two == True):
          print("Building: HA1 and HA2")
          site_0 = None
          site_1 = None
          site_2 = None
          for atom_name,atom in monomer_mapping.expected_atoms.items():
            if(atom_name == "CA"):
              site_0 = atom.xyz
            if(atom_name == "C"):
              site_1 = atom.xyz
            if(atom_name == "N"):
              site_2 = atom.xyz
          if(site_0 is not None and site_1 is not None and site_2 is not None):
            for angle in angles:
              if("C" in angle and "CA" in angle): alpha = angle[0]
              if("N" in angle and "CA" in angle): beta  = angle[0]
            xyz = add_ca_ha1_and_ha2(site_0,site_1,site_2,bond_dist,alpha,beta)
            atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = "HA1",
                                      new_atom_coordinates = xyz[0])
            atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = "HA2",
                                      new_atom_coordinates = xyz[1])
            missing_h.remove("HA1")
            missing_h.remove("HA2")
        if(build_one == True):
          print("Building: ", h)
          site_0 = None
          site_1 = None
          site_2 = None
          site_3 = None
          for atom_name,atom in monomer_mapping.expected_atoms.items():
            if(atom_name == "CA"):
              site_0 = atom.xyz
            if(atom_name == "C"):
              site_1 = atom.xyz
            if(atom_name == "N"):
              site_2 = atom.xyz
            if(atom_name == "CB" or atom_name == "HA1" or atom_name == "HA2"):
              site_3 = atom.xyz
              cb_or_ha1_or_ha2 = atom_name
          if(site_0 is not None and site_1 is not None and site_2 is not None):
            for angle in angles:
              if("C" in angle and "CA" in angle): alpha  = angle[0]
              if("N" in angle and "CA" in angle): beta   = angle[0]
              if("CA" in angle and cb_or_ha1_or_ha2 in angle): gamma = angle[0]
            xyz = add_ca_ha1_or_ha2(site_0,site_1,site_2,site_3,bond_dist,alpha,beta,gamma)
            atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = h,
                                      new_atom_coordinates = xyz)
            missing_h.remove(h)
### CB hydrogen(s): HB1 or/and HB2 and similar
      cb_like_h = {
       "HB1":[["CB","CA","CG","HB2"],["CB","CA","OG","HB2"],["CB","CA","SG","HB2"]],
       "HB2":[["CB","CA","CG","HB1"],["CB","CA","OG","HB1"],["CB","CA","SG","HB1"]],
       "HG1":[["CG","CB","CD","HG2"],],
       "HG2":[["CG","CB","CD","HG1"],],
       "HD1":[["CD","CG","NE","HD2"],["CD","CG","CE","HD2"]],
       "HD2":[["CD","CG","NE","HD1"],["CD","CG","CE","HD1"]],
       "HE1":[["CE","CD","NZ","HE2"],],
       "HE2":[["CE","CD","NZ","HE1"],],
       "HG" :[["CG","CB","CD1","CD2"],],
       "HB" :[["CB","CG2","CA","CG1"],["CB","CG2","CA","OG1"]]
                  }
      if h in cb_like_h.keys():
        if(h in missing_h):
          targets_ = cb_like_h[h]
          for targets in targets_:
            build_one = False
            build_two = False
            if(h in missing_h and targets[3] in missing_h):
              build_two = True
            if((h in missing_h or targets[3] in missing_h) and build_two == False):
              build_one = True
            if(build_one == True and build_two == False or \
                                         build_one == False and build_two == True):
              if(build_two == True):
                print("Building: ", h," and ",targets[3])
                site_0 = None
                site_1 = None
                site_2 = None
                for atom_name,atom in monomer_mapping.expected_atoms.items():
                  if(atom_name == targets[0]):
                    site_0 = atom.xyz
                  if(atom_name == targets[1]):
                    site_1 = atom.xyz
                  if(atom_name == targets[2]):
                    site_2 = atom.xyz
                if(site_0 is not None and site_1 is not None and site_2 is not None):
                  for angle in angles:
                    if(targets[1] in angle and targets[0] in angle): alpha = angle[0]
                    if(targets[0] in angle and targets[2] in angle): beta  = angle[0]
                  xyz = add_ca_ha1_and_ha2(site_0,site_1,site_2,bond_dist,alpha,beta)
                  atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = h,
                                      new_atom_coordinates = xyz[0])
                  atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = targets[3],
                                      new_atom_coordinates = xyz[1])
                  missing_h.remove(h)
                  missing_h.remove(targets[3])
              if(build_one == True):
                print("Building: ", h)
                site_0 = None
                site_1 = None
                site_2 = None
                site_3 = None
                alpha  = None
                beta   = None
                gamma  = None
                for atom_name,atom in monomer_mapping.expected_atoms.items():
                  if(atom_name == targets[0]):
                    site_0 = atom.xyz
                  if(atom_name == targets[1]):
                    site_1 = atom.xyz
                  if(atom_name == targets[2]):
                    site_2 = atom.xyz
                  if(atom_name == h or atom_name == targets[3]):
                    site_3 = atom.xyz
                    cb_or_ha1_or_ha2 = atom_name
                if(site_0 is not None and site_1 is not None and site_2 is not None and site_3 is not None):
                  for angle in angles:
                    if(targets[1] in angle and targets[0] in angle): alpha = angle[0]
                    if(targets[0] in angle and targets[2] in angle): beta  = angle[0]
                    if(targets[0] in angle and cb_or_ha1_or_ha2 in angle): gamma = angle[0]
                  if(alpha is not None and beta is not None and gamma is not None):
                    xyz = add_ca_ha1_or_ha2(site_0,site_1,site_2,site_3,bond_dist,alpha,beta,gamma)
                    atom_number = write_atoms(monomer_mapping,
                                      atom_number,
                                      file,
                                      new_atom_name        = h,
                                      new_atom_coordinates = xyz)
                    missing_h.remove(h)
### HT1,HT2,HT3 like hydrogens; rotational optimization is necessary
      hhh_like_h = {
       "HB1" :[["CB","CA","HB2","HB3"],],
       "HB2" :[["CB","CA","HB1","HB3"],],
       "HB3" :[["CB","CA","HB1","HB2"],],
       "HD11":[["CD1","CG","HD12","HD13"],["CD1","CG1","HD12","HD13"]],
       "HD12":[["CD1","CG","HD11","HD13"],["CD1","CG1","HD11","HD13"]],
       "HD13":[["CD1","CG","HD11","HD12"],["CD1","CG1","HD11","HD12"]],
       "HD21":[["CD2","CG","HD22","HD23"],],
       "HD22":[["CD2","CG","HD21","HD23"],],
       "HD23":[["CD2","CG","HD21","HD22"],],
       "HG21":[["CG2","CB","HG22","HG23"],],
       "HG22":[["CG2","CB","HG21","HG23"],],
       "HG23":[["CG2","CB","HG21","HG22"],],
       "HG11":[["CG1","CB","HG12","HG13"],],
       "HG12":[["CG1","CB","HG11","HG13"],],
       "HG13":[["CG1","CB","HG11","HG12"],],
       "HZ1" :[["NZ","CE","HZ2","HZ3"],],
       "HZ2" :[["NZ","CE","HZ1","HZ3"],],
       "HZ3" :[["NZ","CE","HZ1","HZ2"],]
                   }
      hhh_residues = ["ALA","LEU","ILE","VAL","THR","LYS"]
      if h in hhh_like_h.keys() and residue_name in hhh_residues and h in missing_h:
        targets = hhh_like_h[h]
        for target in targets:
          site_0 = None
          site_1 = None
          for atom_name,atom in monomer_mapping.expected_atoms.items():
            if(atom_name == target[0]):
              site_0 = atom.xyz
            if(atom_name == target[1]):
              site_1 = atom.xyz
          alpha = angles[0][0]
          beta  = angles[2][0]
          if(site_0 is not None and site_1 is not None):
            print("Building:", h, " ...")
            xyz = add_hhh(site_0,site_1,bond_dist,alpha,beta)
            for atom_name, coordinates in zip((h,target[2],target[3]),(xyz[0],xyz[1][0],xyz[1][1])):
              atom_number = write_atoms(monomer_mapping,
                                        atom_number,
                                        file,
                                        new_atom_name        = atom_name,
                                        new_atom_coordinates = coordinates)
            if(h in missing_h): missing_h.remove(h)
            if(target[2] in missing_h): missing_h.remove(target[2])
            if(target[3] in missing_h): missing_h.remove(target[3])
### add ARG-like NH's:
      arg_like_h = {
       "HH11":[["NH1","CZ","NH2","HH12",2],],
       "HH12":[["NH1","CZ","NH2","HH11",2],],
       "HH21":[["NH2","CZ","NH1","HH22",2],],
       "HH22":[["NH2","CZ","NH1","HH21",2],],
       "HG"  :[["OG","CB","CA","HG",1],["SG","CB","CA","HG",1]] ,
       "HH"  :[["OH","CZ","CE1","HH",1],]
                   }
      residue_names = ["ARG","SER","TYR","CYS"]
      if h in arg_like_h.keys() and residue_name in residue_names:
        targets = arg_like_h[h]
        for target in targets:
          site_0 = None
          site_1 = None
          site_2 = None
          for atom_name,atom in monomer_mapping.expected_atoms.items():
            if(atom_name == target[0]):
              site_0 = atom.xyz
            if(atom_name == target[1]):
              site_1 = atom.xyz
            if(atom_name == target[2]):
              site_2 = atom.xyz
          alpha = angles[0][0]
          if(site_0 is not None and site_1 is not None and site_2 is not None):
            print("Building:", h, " ...")
            xyz = add_arg_like_h(site_0,site_1,site_2,bond_dist,alpha,flag = target[4])
            if(target[4] == 1):
              atom_number = write_atoms(monomer_mapping,
                                        atom_number,
                                        file,
                                        new_atom_name        = h,
                                        new_atom_coordinates = xyz)
            if(target[4] == 2):
              atom_number = write_atoms(monomer_mapping,
                                        atom_number,
                                        file,
                                        new_atom_name        = h,
                                        new_atom_coordinates = xyz[0])
              atom_number = write_atoms(monomer_mapping,
                                        atom_number,
                                        file,
                                        new_atom_name        = target[3],
                                        new_atom_coordinates = xyz[1])
            if(h in missing_h): missing_h.remove(h)
            if(target[3] in missing_h): missing_h.remove(target[3])

### UNKNOWN H:
      if(h in missing_h):
        print("Unknown hydrogen type: ", h)
        missing_h.remove(h)
        unknown_h.append(h)
      n_missed = len(missing_h)

    print()
    print("Still missing: ", residue_name,unknown_h)
    still_missing_h.append((residue_name,unknown_h))
    still_missing += len(unknown_h)

  print("Build ", int(total_missing - still_missing), end=' ')
  print(" from ", int(total_missing), " % = ", end=' ')
  print((total_missing - still_missing)*100./total_missing)
  print()
  for item in still_missing_h:
    print(item)

  file.close()
  file = open(file_name_,"r")
  processed_pdb_file = pdb_interpretation.process(
    mon_lib_srv = mon_lib_srv,
    ener_lib = ener_lib,
    file_name = file_name_,
    strict_conflict_handling = False,
    crystal_symmetry = processed.pdb_inp.crystal_symmetry(),
    force_symmetry = True,
    log = sys.stdout)
  file.close()
  assert processed_pdb_file.xray_structure() is not None
  assert processed_pdb_file.geometry_restraints_manager() is not None
  xray_structure = processed_pdb_file.xray_structure()
  geometry_restraints_manager = processed_pdb_file.geometry_restraints_manager()
  regularize_model(xray_structure = xray_structure,
                   geometry_restraints_manager = geometry_restraints_manager,
                   max_iterations = 50000)
  processed_pdb_file.all_chain_proxies.pdb_atoms.set_xyz(
    new_xyz=xray_structure.sites_cart())
  processed_pdb_file.all_chain_proxies.pdb_hierarchy.write_pdb_file(
    file_name="out.pdb")

def write_atoms(monomer_mapping,
                atom_number,
                file_object,
                new_atom_name = None,
                new_atom_coordinates = None,
                crystal_symmetry = None):
  assert new_atom_name is None and new_atom_coordinates is None or \
         new_atom_name is not None and new_atom_coordinates is not None
  if(crystal_symmetry is not None):
    print(pdb.format_cryst1_record(
                                             crystal_symmetry=crystal_symmetry), file=file_object)
    print(pdb.format_scale_records(
                                        unit_cell=crystal_symmetry.unit_cell()), file=file_object)
  if(new_atom_name is None and new_atom_coordinates is None):
    for atom_name,atom in monomer_mapping.expected_atoms.items():
      assert atom_name.strip() == atom.name.strip()
      atom_number += 1
      orig = atom.serial
      atom.serial = "%5d" % atom_number
      print(atom.format_atom_record(), file=file_object)
      atom.serial = orig
  else:
    # FIXME ordering of values changes for py2/3, this could break if more than 1 value present
    atom = list(monomer_mapping.expected_atoms.values())[0]
    atom_number += 1
    orig = atom.serial, atom.name, atom.xyz, atom.occ, atom.b
    atom.serial = "%5d" % atom_number
    atom.name = new_atom_name
    atom.xyz = new_atom_coordinates
    atom.occ = 1
    atom.b = 0
    print(atom.format_atom_record(), file=file_object)
    atom.serial, atom.name, atom.xyz, atom.occ, atom.b = orig
  return atom_number

def regularize_model(xray_structure,
                     geometry_restraints_manager,
                     max_iterations):
  sites_cart = xray_structure.sites_cart()
  minimized = geometry_restraints_lbfgs(
    sites_cart                  = sites_cart,
    geometry_restraints_manager = geometry_restraints_manager,
    lbfgs_termination_params    = scitbx.lbfgs.termination_parameters(
      max_iterations = max_iterations))
  xray_structure.set_sites_cart(sites_cart)
  print()
  print("Energies at start of minimization:")
  minimized.first_target_result.show()
  print()
  print("Energies after minimization:")
  minimized.final_target_result.show()


if (__name__ == "__main__"):
  files = ["arg.pdb","lys.pdb","ala.pdb","gly.pdb","his.pdb","ile.pdb","leu.pdb",
           "phe.pdb","tyr.pdb","trp.pdb","thr.pdb","val.pdb","cys.pdb","ser.pdb"]
  if(len(sys.argv) > 1):
    run(sys.argv[1])
  else:
    pdb_dir = libtbx.env.find_in_repositories(
      relative_path="phenix_regression/hydrogens",
      test=os.path.isdir)
    if (pdb_dir is None):
      print("Skipping build_hydrogens.run(): input files not available")
    else:
      for file in files:
        run(os.path.join(pdb_dir, file))


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/connectivity.py
from __future__ import absolute_import, division, print_function
import math
from cctbx import geometry_restraints
from libtbx.utils import Sorry
from libtbx import group_args
from scitbx.array_family import flex
from scitbx.math import dihedral_angle
from six.moves import zip,range

class neighbors(object):
  def __init__(self,
      ih = None,
      a0 = {},
      a1 = {},
      a2 = {},
      a3 = {},
      h1 = {},
      h2 = {},
      b1 = {},
      number_h_neighbors = None,
      number_non_h_neighbors = None):
    self.ih = ih
    self.a0 = a0
    self.a1 = a1
    self.a2 = a2
    self.a3 = a3
    self.h1 = h1
    self.h2 = h2
    self.b1 = b1
    self.number_h_neighbors = number_h_neighbors
    self.number_non_h_neighbors = number_non_h_neighbors

class determine_connectivity(object):
  """ Obtain information about the necessary number of neighbors to reconstruct
  the position of every H atom ("connectivity") and to determine the geometry
  of the H atom. Store also information about ideal angles involving H atom,
  and non-H atoms as well as dihedral angle
  :returns: an array of "neighbors" objects (defined above)
  :rtype: list[]"""
  def __init__(self,
      pdb_hierarchy,
      geometry_restraints):
    geometry = geometry_restraints
    self.atoms = pdb_hierarchy.atoms()
    self.sites_cart = self.atoms.extract_xyz()
    bond_proxies_simple, asu = \
      geometry.get_all_bond_proxies(sites_cart = self.sites_cart)
    angle_proxies = geometry.get_all_angle_proxies()
    dihedral_proxies = geometry.dihedral_proxies # this should be function in GRM, like previous
    planarity_proxies = geometry.planarity_proxies
    fsc0 = geometry.shell_sym_tables[0].full_simple_connectivity()
    self.n_atoms = pdb_hierarchy.atoms_size()
    self.hd_sel = self.hd_selection()
    self.h_connectivity = [None]*self.n_atoms
    # 1. Find parent atoms and ideal A0-H bond distances
    self.find_first_neighbors(
      bond_proxies_simple = bond_proxies_simple,
      fsc0                = fsc0)
    # Check if number H in connectivity and number H in model is the same
    self.count_H()
    # 2. find preliminary list of second neighbors
    self.find_second_neighbors_raw(angle_proxies = angle_proxies)

    # 3. Get plane proxies --> useful for NH2 groups without dihedrals
    self.process_plane_proxies(planarity_proxies = planarity_proxies)

    # 4. process preliminary list to eliminate atoms in double conformation
    self.process_second_neighbors()

    # 5. Find third neighbors via dihedral proxies
    self.find_third_neighbors(dihedral_proxies = dihedral_proxies)

    # 6. Find angles involving a0 and covalently bound non-H atoms and
    #    find preliminary list of third neighbors in cases where no dihedral
    #    proxy is present
    self.determine_a0_angles_and_third_neighbors_without_dihedral(
      angle_proxies = angle_proxies)

    # 7. Assign the angles found previously and process preliminary list of
    #    third neighbors
    self.process_a0_angles_and_third_neighbors_without_dihedral()

    # Add slipped H atoms to h_connectivity
    self.add_slipped()


  def find_first_neighbors(self, bond_proxies_simple, fsc0):
    """ Find first neighbors by looping through bond proxies
    Fills in dictionary of 'a0' in object 'neighbors'.
    Keys: i_seq, dist_ideal"""
    self.double_H = {}
    self.parents = set()
    for bproxy in bond_proxies_simple:
      i_seq, j_seq = bproxy.i_seqs
      is_i_hd = self.hd_sel[i_seq]
      is_j_hd = self.hd_sel[j_seq]
      if(not is_i_hd and not is_j_hd): continue
      elif(is_i_hd and is_j_hd):       assert 0
      else:
        if  (is_i_hd): ih, i_parent = i_seq, j_seq
        elif(is_j_hd): ih, i_parent = j_seq, i_seq
        # else case should not happen...
        #else:
        #  raise Sorry("Something went wrong in bond proxies")
      # if neighbor exists, use only first one found
      if self.h_connectivity[ih] is not None: continue
      # find H atoms bound to two parent atoms, store info in list 'double_H'
      if (fsc0[ih].size() > 1):
        self.double_H[ih] = list(fsc0[ih])
      #else:
      self.h_connectivity[ih] = neighbors(
        ih = ih,
        a0 = {'iseq':i_parent, 'dist_ideal': bproxy.distance_ideal,
          'angles':[]})
      self.parents.add(i_parent) #parent atoms stored in a set

  def find_second_neighbors_raw(self, angle_proxies):
    """Get a an array listing all second neighbors for every H atom.
    :returns: a list of lists: [[iseq1, iseq2, ...], ...]
    :rtype: [[],[].[]]
    """
    self.second_neighbors_raw = [[] for i in range(self.n_atoms)]
    self.angle_dict = {}
    for ap in angle_proxies:
      for i_test in ap.i_seqs:
        if (self.h_connectivity[i_test] is None and not self.hd_sel[i_test]):
          continue
        ih = i_test
        i_parent = ap.i_seqs[1]
        # if one H bound to two parents (case double_H)
        if (i_parent not in self.parents): continue
        bonded = [ih, i_parent]
        i_second = [x for x in ap.i_seqs if x not in bonded][0]
        if (self.h_connectivity[ih] is None): continue
        #assert(self.h_connectivity[ih].a0['iseq'] == i_parent)
        if (self.h_connectivity[ih].a0['iseq'] != i_parent):
          if ih in self.double_H:
          #if self.double_H[ih]:
            continue
          raise Sorry  (
            "It looks like angle and bond restraints are conflicting.\n\
             Bond proxies:  H atom %s is bound to %s. \n\
             Angle proxies: H atom %s is bound to %s" % \
    (self.atoms[ih].id_str(),
     self.atoms[self.h_connectivity[ih].a0['iseq']].id_str(),
     self.atoms[ih].id_str(), self.atoms[i_parent].id_str()  )   )
        self.second_neighbors_raw[ih].append(i_second)
        self.angle_dict[(ih, i_parent, i_second)] = ap.angle_ideal


  def process_second_neighbors(self):
    """Once candidates for second neighbors are determined, they are further
    processed, mainly to avoid alternative conformations of the same atom"""
    self.a0a1_dict = {}
    self.a1_atoms = set()
    for neighbor_obj in self.h_connectivity:
      if (neighbor_obj is None): continue
      ih = neighbor_obj.ih
      i_parent = neighbor_obj.a0['iseq']
      second_neighbors_reduced = []
      alt_conf_neighbors = []
      for i_second in self.second_neighbors_raw[ih]:
        altloc_i_second = self.atoms[i_second].parent().altloc
        if (altloc_i_second == ''):
          second_neighbors_reduced.append(i_second)
        else:
          alt_conf_neighbors.append(i_second)
      second_neighbors_reduced.extend(self.process_alternate_neighbors(
        alt_conf_neighbors = alt_conf_neighbors))
      second_neighbors_H = self.determine_second_neighbors_H(
        second_neighbors_reduced = second_neighbors_reduced)
      second_neighbors_non_H = list(
        set(second_neighbors_reduced) - set(second_neighbors_H))
      self.assign_second_neighbors(
        ih               = ih,
        i_parent         = i_parent,
        neighbors_list   = second_neighbors_non_H,
        neighbors_list_H = second_neighbors_H)
      if (neighbor_obj.number_non_h_neighbors == 1):
        i_a1 = self.h_connectivity[ih].a1['iseq']
        self.a1_atoms.add(i_a1)
        if i_parent in self.a0a1_dict.keys():
          self.a0a1_dict[i_parent].append(i_a1)
        else:
          self.a0a1_dict[i_parent]=[i_a1]
          #self.a0a1_dict[i_parent] = i_a1


  def determine_a0_angles_and_third_neighbors_without_dihedral(self, angle_proxies):
    """Loop through angle proxies to find angles involving a0 and second
    neighbors. Find raw list of third neighbors, which don't have dihedral
    proxies."""
    self.parent_angles = [{} for i in range(self.n_atoms)]
    self.third_neighbors_raw = [[] for i in range(self.n_atoms)]
    for ap in angle_proxies:
      ix, iy, iz = ap.i_seqs
      is_hd_ix = self.hd_sel[ix]
      is_hd_iz = self.hd_sel[iz]
      # get all X1-A0-X2 angles if A0 is parent atom
      if (iy in self.parents and not is_hd_ix and not is_hd_iz):
          self.parent_angles[iy][(ix, iz)] = ap.angle_ideal
      # for third neighbors, a1 atom is central
      if (is_hd_ix or is_hd_iz): continue
      i_third = None
      if (iy in self.a1_atoms):
        if (ix in self.parents and ix in self.a0a1_dict):
          if (iy in self.a0a1_dict[ix] and not is_hd_iz):
            i_parent = ix
            i_third = iz
          elif (i_third == None):
            raise  Sorry(
  "It looks like angle restraints involving an H atom are missing.\n\
  Check H atoms bound to %s and with second neighbor %s" % \
    (self.atoms[ix].id_str(), self.atoms[iy].id_str()))
        elif (iz in self.parents and iz in self.a0a1_dict):
          if (iy in self.a0a1_dict[iz] and not is_hd_ix):
            i_parent = iz
            i_third = ix
          elif (i_third == None):
            raise  Sorry(
  "It looks like angle restraints involving an H atom are missing.\n\
  Check H atoms bound to %s and with second neighbor %s" % \
    (self.atoms[iz].id_str(), self.atoms[iy].id_str()))
        else:
          continue
        if (i_third not in self.third_neighbors_raw[i_parent]):
          self.third_neighbors_raw[i_parent].append(i_third)
          if (i_third in self.parents):
            self.third_neighbors_raw[i_third].append(i_parent)

  def process_a0_angles_and_third_neighbors_without_dihedral(self):
    """Process raw list of third neighbors withouth ideal dihedral proxy."""
    for neighbor_obj in self.h_connectivity:
      if (neighbor_obj is None): continue
      ih = neighbor_obj.ih
      i_parent = neighbor_obj.a0['iseq']
      self.assign_a0_angles(ih = ih)
      if (neighbor_obj.number_non_h_neighbors != 1 or 'iseq' in neighbor_obj.b1):
        continue
      third_neighbors = self.third_neighbors_raw[i_parent]
      third_neighbors_reduced = []
      alt_conf_neighbors = []
      for i_third in third_neighbors:
        altloc_i_third = self.atoms[i_third].parent().altloc
        if (altloc_i_third == ''):
          third_neighbors_reduced.append(i_third)
        else:
          alt_conf_neighbors.append(i_third)
      third_neighbors_reduced.extend(self.process_alternate_neighbors(
        alt_conf_neighbors = alt_conf_neighbors))
      # If there is no dihedral ideal angle, use randomly first atom
      # in list of third neighbors
      if third_neighbors_reduced:
        if (neighbor_obj.number_h_neighbors == 2):
          self.h_connectivity[ih].b1 = {'iseq': third_neighbors_reduced[0]}
        else:
          self.h_connectivity[ih] = neighbors(
            ih = ih,
            number_non_h_neighbors = 0)
        #self.h_connectivity[ih].b1 = {'iseq': third_neighbors_reduced[0]}
        #self.check_for_plane_proxy(ih)

  def process_plane_proxies(self, planarity_proxies):
    self.plane_h = {}
    for pp in planarity_proxies:
      hlist = []
      for i_test in pp.i_seqs:
        if self.hd_sel[i_test]:
          hlist.append(i_test)
      if hlist:
        self.plane_h[hlist[0]]=hlist[1:]

  def check_for_plane_proxy(self, ih):
    neighbors = self.h_connectivity[ih]
    a0 = neighbors.a0['iseq']
    a1 = neighbors.a1['iseq']
    b1 = neighbors.b1['iseq']
    if (neighbors.h1 and not neighbors.h2): # if there is only 1 H atom as second neighbor
      ih2 = neighbors.h1['iseq']
      if ('dihedral_ideal' not in neighbors.b1 or
          'dihedral_ideal' not in self.h_connectivity[ih2].b1):
        if ih in self.plane_h:
          dihedral = dihedral_angle(
                sites = [self.sites_cart[ih], self.sites_cart[a0],
                self.sites_cart[a1],self.sites_cart[b1]])
          neighbors.b1['dihedral_ideal'] = math.degrees(dihedral)

  def assign_a0_angles(self, ih):
    """ Having a list of dictionaries for the angles involving atom a0,
    assign the angles to the correct set of three atoms. """
    partners = self.h_connectivity[ih]
    if (partners.number_non_h_neighbors > 1):
      a0_iseq = partners.a0['iseq']
      a1_iseq = partners.a1['iseq']
      a2_iseq = partners.a2['iseq']
      if (a1_iseq, a2_iseq) in self.parent_angles[a0_iseq]:
        self.h_connectivity[ih].a0['angle_a1a0a2'] = \
          self.parent_angles[a0_iseq][(a1_iseq, a2_iseq)]
      elif (a2_iseq, a1_iseq) in self.parent_angles[a0_iseq]:
        self.h_connectivity[ih].a0['angle_a1a0a2'] = \
          self.parent_angles[a0_iseq][(a2_iseq, a1_iseq)]
      if ('angle_a1a0a2' not in partners.a0):
        self.h_connectivity[ih] = neighbors(
          ih = ih,
          number_non_h_neighbors = 0)
        return
      if (partners.number_non_h_neighbors == 3):
        a3_iseq = partners.a3['iseq']
        if (a2_iseq, a3_iseq) in self.parent_angles[a0_iseq]:
          self.h_connectivity[ih].a0['angle_a2a0a3'] = \
            self.parent_angles[a0_iseq][(a2_iseq, a3_iseq)]
        elif (a3_iseq, a2_iseq) in self.parent_angles[a0_iseq]:
          self.h_connectivity[ih].a0['angle_a2a0a3'] = \
            self.parent_angles[a0_iseq][(a3_iseq, a2_iseq)]
        if (a3_iseq, a1_iseq) in self.parent_angles[a0_iseq]:
          self.h_connectivity[ih].a0['angle_a3a0a1'] = \
            self.parent_angles[a0_iseq][(a3_iseq, a1_iseq)]
        elif (a1_iseq, a3_iseq) in self.parent_angles[a0_iseq]:
          self.h_connectivity[ih].a0['angle_a3a0a1'] = \
            self.parent_angles[a0_iseq][(a1_iseq, a3_iseq)]
        if ('angle_a2a0a3' not in partners.a0 or 'angle_a3a0a1' not in partners.a0):
          self.h_connectivity[ih] = neighbors(
            ih = ih,
            number_non_h_neighbors = 0)


  def find_third_neighbors(self, dihedral_proxies):
    """ Loop through dihedral angle proxies to find third neighbor
    Fill in neighbors.b1 with iseq and angle proxy"""
    for dp in dihedral_proxies:
      for i_test in dp.i_seqs:
        if (self.h_connectivity[i_test] is None and not self.hd_sel[i_test]):
          continue
        ih = i_test
        i1, i2, i3, i4 = dp.i_seqs
        if (ih == i1):
          i_third = i4
        if (ih == i4):
          i_third = i1
        dihedral = dihedral_angle(
              sites = [self.sites_cart[i1], self.sites_cart[i2],
              self.sites_cart[i3],self.sites_cart[i4]])
        if dihedral is None:
          return
        dihedral_id = dp.angle_ideal
        delta = geometry_restraints.angle_delta_deg(
          angle_1 = math.degrees(dihedral),
          angle_2 = dihedral_id,
          periodicity = dp.periodicity)
        dihedral_ideal = math.degrees(dihedral) + delta
        b1 = {'iseq': i_third, 'dihedral_ideal': dihedral_ideal}
        self.h_connectivity[ih].b1 = b1
        self.assign_b1_for_H_atom_groups(ih = ih, i_third = i_third)

  def assign_b1_for_H_atom_groups(self, ih, i_third):
    """ For atom groups (such as propeller), only one H atom has dihedral proxy
    For the other H atoms of such groups, fill in only iseq"""
    number_h_neighbors = self.h_connectivity[ih].number_h_neighbors
    if (number_h_neighbors > 0):
      i_h1 = self.h_connectivity[ih].h1['iseq']
      if (self.h_connectivity[i_h1] is not None):
        self.h_connectivity[i_h1].b1 = {'iseq': i_third}
      if (number_h_neighbors == 2):
        i_h2 = self.h_connectivity[ih].h2['iseq']
        if (self.h_connectivity[i_h2] is not None):
          self.h_connectivity[i_h2].b1 = {'iseq': i_third}

  def determine_second_neighbors_H(self, second_neighbors_reduced):
    """Determine if there are H atoms among second neighbors and store them
    in a list 'second_neighbors_H' """
    second_neighbors_H = []
    for iseq in second_neighbors_reduced:
      if (self.hd_sel[iseq]):
        second_neighbors_H.append(iseq)
    return second_neighbors_H

  def assign_second_neighbors(
          self, ih, i_parent, neighbors_list, neighbors_list_H):
    """With the information of second neighbors, fill in the dictionaries for
    each atom (a1, a2, a3, according to which is present)."""
    number_h_neighbors = 0
    number_non_h_neighbors = 0
    for iseq, n in zip(neighbors_list, [1,2,3]):
      number_non_h_neighbors = number_non_h_neighbors + 1
      a = self.make_neighbor_dict(iseq = iseq, ih = ih, i_parent = i_parent)
      if (n == 1): self.h_connectivity[ih].a1 = a
      if (n == 2): self.h_connectivity[ih].a2 = a
      if (n == 3): self.h_connectivity[ih].a3 = a
    for iseqh, nh in zip(neighbors_list_H, [1,2]):
      number_h_neighbors = number_h_neighbors + 1
      ah = self.make_neighbor_dict(iseq = iseqh, ih = ih, i_parent = i_parent)
      if (nh == 1): self.h_connectivity[ih].h1 = ah
      if (nh == 2): self.h_connectivity[ih].h2 = ah
    self.h_connectivity[ih].number_h_neighbors = number_h_neighbors
    self.h_connectivity[ih].number_non_h_neighbors = number_non_h_neighbors

  def make_neighbor_dict(self, iseq, ih, i_parent):
    angle = self.angle_dict[(ih, i_parent, iseq)]
    neighbor = {'iseq': iseq, 'angle_ideal': angle}
    return neighbor

  def process_alternate_neighbors(self, alt_conf_neighbors):
    """ For a list of atoms in alternative conformations, retain singles and
    those with higher occupancy
    Example: [CA-A, N-A, N-B] --> [CA-A, N-B] if occ(N-B) > occ(N-A)"""
    alt_conf_neighbors_temp = []
    alt_conf_neighbors_reduced = []
    # if only one atom in alt conf list, not necessary to search for other atoms
    if (len(alt_conf_neighbors) == 1):
      alt_conf_neighbors_reduced.append(alt_conf_neighbors[0])
    # Go through each atom in dc, get the name and make temporary dictionary
    # with iseq as key which points to occupancy: {i_1:occA, i_2:occB, i_3:occC}
    # Then choose atom with maximum occupancy
    else:
      for i_second in alt_conf_neighbors:
        altloc_dict_temp = {}
        if (i_second in alt_conf_neighbors_temp): continue
        name_i_second = self.atoms[i_second].name
        altloc_i_second = self.atoms[i_second].parent().altloc
        # check if all neighbors are in the same alt conf (otherwise no angle proxy)
        if alt_conf_neighbors_reduced:
          i_previous = alt_conf_neighbors_reduced[0]
          altloc_previous = self.atoms[i_previous].parent().altloc
          if (altloc_i_second != altloc_previous):
            alt_conf_neighbors_temp.append(i_second)
            continue
        altloc_dict_temp[i_second] = self.atoms[i_second].occ
        for ag in self.atoms[i_second].parent().parent().atom_groups():
          for ag_atom in ag.atoms():
            if (ag_atom.i_seq == altloc_i_second): continue
            if (ag_atom.i_seq in alt_conf_neighbors_temp): continue
            if (ag_atom.name == name_i_second and
                ag_atom.i_seq in alt_conf_neighbors):
              altloc_dict_temp[ag_atom.i_seq] = ag_atom.occ
        i_second_max = max(altloc_dict_temp, key=lambda k: altloc_dict_temp[k])
        alt_conf_neighbors_reduced.append(i_second_max)
        # Store "used" atoms in temp list --> avoids going through atoms twice
        for index in altloc_dict_temp.keys():
          alt_conf_neighbors_temp.append(index)
    return alt_conf_neighbors_reduced

  def count_H(self):
    """ Check if number H/D atoms in the in the model and in h_connectivity
    are the same"""
    self.connectivity_slipped = []
    number_h_input_model = self.hd_sel.count(True)
    number_h_connectivity = \
      len(self.h_connectivity) - self.h_connectivity.count(None)
    if (number_h_input_model != number_h_connectivity):
      self.find_mismatch()

  def find_mismatch(self):
    list_H_connect = []
    list_H = []
    for item in self.h_connectivity:
      if item: list_H_connect.append(item.ih)
    for atom in self.atoms:
      if (atom.element_is_hydrogen()):
        list_H.append(atom.i_seq)
    set_list_H_connect = set(list_H_connect)
    slipped = [x for x in list_H if x not in set_list_H_connect]
    self.connectivity_slipped = slipped

  def add_slipped(self):
    for ih in self.connectivity_slipped:
      self.h_connectivity[ih] = neighbors(
        ih = ih,
        number_non_h_neighbors = 0)

  def get_diagnostics(self):
    h_in_connectivity = []
    for neighbor_obj in self.h_connectivity:
      if (neighbor_obj is not None):
        h_in_connectivity.append(neighbor_obj.ih)
    return group_args(
      double_H = self.double_H,
      connectivity_slipped = self.connectivity_slipped,
      h_in_connectivity = h_in_connectivity)

  def hd_selection(self):
    """Get a selector array for all hydrogen and deuterium scatterers of the structure.
    :returns: an array to select all H and D scatterers of the structure
    :rtype: boolean[]
    """
    result = flex.bool()
    self.list_H = []
    for atom in self.atoms:
      result.append(atom.element_is_hydrogen())
    return result



 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/find.py
from __future__ import absolute_import, division, print_function
from cctbx.array_family import flex
from mmtbx import find_peaks
from mmtbx import utils
import iotbx.phil
from scitbx import matrix
from libtbx import adopt_init_args
from mmtbx.refinement import print_statistics
import mmtbx.utils
from cctbx import sgtbx
import cctbx
from six.moves import zip,range

master_params_part1 = iotbx.phil.parse("""\
map_type = mFobs-DFmodel
  .type = str
  .help = Map type to be used to find hydrogens
map_cutoff = 2.0
  .type = float
  .help = Map cutoff
secondary_map_type = 2mFobs-DFmodel
  .type = str
  .help = Map type to be used to validate peaks in primary map
secondary_map_cutoff = 1.4
  .type = float
  .help = Secondary map cutoff
angular_step = 3.0
  .type = float
  .help = Step in degrees for 6D rigid body search for best fit
dod_and_od = False
  .type = bool
  .help = Build DOD/OD/O types of waters for neutron models
filter_dod = False
  .type = bool
  .help = Filter DOD/OD/O by correlation
min_od_dist = 0.60
  .type = float
  .help = Minimum O-D distance when building water from peaks
max_od_dist = 1.35
  .type = float
  .help = Maximum O-D distance when building water from peaks
min_dod_angle = 85.0
  .type = float
  .help = Minimum D-O-D angle when building water from peaks
max_dod_angle = 170.0
  .type = float
  .help = Maximum D-O-D angle when building water from peaks
h_bond_min_mac = 1.8
  .type = float
  .short_caption = H-bond minimum for DOD solvent-model
  .expert_level = 1
h_bond_max = 3.9
  .type = float
  .short_caption = Maximum H-bond length in DOD solvent model
  .expert_level = 1
""")

master_params_part2 = find_peaks.master_params.fetch(iotbx.phil.parse("""\
use_sigma_scaled_maps = True
resolution_factor = 1./4.
map_next_to_model
{
  min_model_peak_dist = 0.7
  max_model_peak_dist = 1.05
  min_peak_peak_dist = 0.7
  use_hydrogens = False
}
peak_search
{
  peak_search_level = 1
  min_cross_distance = 1.0
  general_positions_only=True
}
"""))

def all_master_params():
  return iotbx.phil.parse("""\
    include scope mmtbx.hydrogens.find.master_params_part1
    include scope mmtbx.hydrogens.find.master_params_part2
""", process_includes=True)

class h_peak(object):
  def __init__(self, site_frac,
                     height,
                     dist,
                     scatterer_o,
                     pdb_atom_o,
                     i_seq_o):
    self.site_frac = site_frac
    self.height = height
    self.dist = dist
    self.scatterer_o = scatterer_o
    self.pdb_atom_o = pdb_atom_o
    self.i_seq_o = i_seq_o

class water_and_peaks(object):
  def __init__(self, i_seq_o,
                     i_seq_h1,
                     i_seq_h2,
                     peaks_sites_frac):
    assert [i_seq_o,i_seq_h1,i_seq_h2,peaks_sites_frac].count(None) == 0
    adopt_init_args(self, locals())

def water_bond_angle(o,h1,h2):
  result = None
  a = h1[0]-o[0], h1[1]-o[1], h1[2]-o[2]
  b = h2[0]-o[0], h2[1]-o[1], h2[2]-o[2]
  a = matrix.col(a)
  b = matrix.col(b)
  return a.angle(b, deg=True)

def find_hydrogen_peaks(fmodel,
                        pdb_atoms,
                        params,
                        log):
  #
  from cctbx import maptbx
  e_map = fmodel.electron_density_map()
  crystal_symmetry = fmodel.xray_structure.crystal_symmetry()
  crystal_gridding = maptbx.crystal_gridding(
    unit_cell        = crystal_symmetry.unit_cell(),
    space_group_info = crystal_symmetry.space_group_info(),
    symmetry_flags   = maptbx.use_space_group_symmetry,
    step             = 0.6)
  coeffs = e_map.map_coefficients(
    map_type     = params.map_type,
    fill_missing = False,
    isotropize   = True)
  fft_map = coeffs.fft_map(crystal_gridding = crystal_gridding)
  fft_map.apply_sigma_scaling()
  map_data = fft_map.real_map_unpadded()
  #
  fp_manager = find_peaks.manager(map_data       = map_data,
                                  xray_structure = fmodel.xray_structure,
                                  map_cutoff = params.map_cutoff,
                                  params     = params,
                                  log        = log)
  result = fp_manager.peaks_mapped()
  fp_manager.show_mapped(pdb_atoms = pdb_atoms)
  return result

def make_peak_dict(peaks, selection, obs_map, cutoff):
  result = {}
  for i in flex.sort_permutation(data=peaks.iseqs_of_closest_atoms):
    s = peaks.sites[i]
    h = peaks.heights[i]
    obsh = obs_map.eight_point_interpolation(s)
    if obsh<cutoff:
      continue
    i_seq = peaks.iseqs_of_closest_atoms[i]
    if(selection[i_seq]):
      if i_seq in result:
        result[i_seq].extend( [(h, s)] )
      else:
        result[i_seq] = [(h, s)]
  return result

def extract_hoh_peaks(peaks, pdb_hierarchy, pdb_atoms, xray_structure):
  scatterers = xray_structure.scatterers()
  assert scatterers.size() == pdb_atoms.size()
  assert peaks.sites.size() == peaks.heights.size()
  assert peaks.heights.size() == peaks.iseqs_of_closest_atoms.size()
  sentinel = pdb_atoms.reset_tmp(first_value=0, increment=0)
  for i_seq in peaks.iseqs_of_closest_atoms:
    pdb_atoms[i_seq].tmp = 1
  get_class = iotbx.pdb.common_residue_names_get_class
  o_i_seq_ag = {}
  result = []
  for model in pdb_hierarchy.models():
    for chain in model.chains():
      for rg in chain.residue_groups():
        for ag in rg.atom_groups():
          is_water = (get_class(name=ag.resname) == "common_water")
          for atom in ag.atoms():
            if (atom.tmp == 0): continue
            assert atom.element.strip() not in ['H','D']
            if (is_water):
              assert atom.element.strip() == 'O'
              o_i_seq_ag[atom.i_seq] = ag
              break
  del sentinel
  o_i_seq_i_peak = {}
  for i_seq in o_i_seq_ag:
    o_i_seq_i_peak[i_seq] = []
  for i_peak,i_seq in enumerate(peaks.iseqs_of_closest_atoms):
    if(o_i_seq_i_peak.get(i_seq) is not None):
      o_i_seq_i_peak[i_seq].append(i_peak)
  for i_seq,ag in o_i_seq_ag.items():
    ag_atoms = ag.atoms()
    assert ag_atoms.size() == 3
    o_atom = None
    h_atoms = []
    for atom in ag_atoms:
      el = atom.element.strip()
      if (el == 'O'):
        o_atom = atom
      else:
        assert el in ['H','D']
        h_atoms.append(atom)
    assert o_atom is not None
    assert len(h_atoms) == 2
    result.append(water_and_peaks(
      i_seq_o = o_atom.i_seq,
      i_seq_h1 = h_atoms[0].i_seq,
      i_seq_h2 = h_atoms[1].i_seq,
      peaks_sites_frac = [peaks.sites[i_peak]
        for i_peak in o_i_seq_i_peak[i_seq]]))
  return result

def fit_water(water_and_peaks, xray_structure, params, log):
  scatterers = xray_structure.scatterers()
  uc = xray_structure.unit_cell()
  site_frac_o  = scatterers[water_and_peaks.i_seq_o ].site
  site_frac_h1 = scatterers[water_and_peaks.i_seq_h1].site
  site_frac_h2 = scatterers[water_and_peaks.i_seq_h2].site
  peak_sites_frac = water_and_peaks.peaks_sites_frac
  if(len(peak_sites_frac) == 1):
    sc1 = scatterers[water_and_peaks.i_seq_h1]
    sc2 = scatterers[water_and_peaks.i_seq_h2]
    if(sc1.occupancy < sc2.occupancy and sc2.occupancy > 0.3):
      site_frac_h2 = sc2.site
    elif(sc1.occupancy > sc2.occupancy and sc1.occupancy > 0.3):
      site_frac_h2 = scatterers[water_and_peaks.i_seq_h1].site
    else:
      site_frac_h2 = peak_sites_frac[0]
    result = mmtbx.utils.fit_hoh(
      site_frac_o     = site_frac_o,
      site_frac_h1    = site_frac_h1,
      site_frac_h2    = site_frac_h2,
      site_frac_peak1 = peak_sites_frac[0],
      site_frac_peak2 = site_frac_h2,
      angular_shift   = params.angular_step,
      unit_cell       = uc)
    d_best = result.dist_best()
    o = uc.fractionalize(result.site_cart_o_fitted)
    h1 = uc.fractionalize(result.site_cart_h1_fitted)
    h2 = uc.fractionalize(result.site_cart_h2_fitted)
  else:
    peak_pairs = []
    for i, s1 in enumerate(peak_sites_frac):
      for j, s2 in enumerate(peak_sites_frac):
        if i < j:
          peak_pairs.append([s1,s2])
    d_best = 999.
    for pair in peak_pairs:
      result = mmtbx.utils.fit_hoh(
        site_frac_o     = site_frac_o,
        site_frac_h1    = site_frac_h1,
        site_frac_h2    = site_frac_h2,
        site_frac_peak1 = pair[0],
        site_frac_peak2 = pair[1],
        angular_shift   = params.angular_step,
        unit_cell       = uc)
      if(result.dist_best() < d_best):
        d_best = result.dist_best()
        o = uc.fractionalize(result.site_cart_o_fitted)
        h1 = uc.fractionalize(result.site_cart_h1_fitted)
        h2 = uc.fractionalize(result.site_cart_h2_fitted)
  if(d_best < 1.0):
    # do not move HOH located on special position
    skip = False
    sites = [scatterers[water_and_peaks.i_seq_o ].site,
             scatterers[water_and_peaks.i_seq_h1].site,
             scatterers[water_and_peaks.i_seq_h2].site]
    for site in sites:
      site_symmetry = sgtbx.site_symmetry(
        xray_structure.unit_cell(),
        xray_structure.space_group(),
        site,
        0.5,
        True)
      if(site_symmetry.n_matrices() != 1):
        skip = True
        break
    #
    if(not skip):
      scatterers[water_and_peaks.i_seq_o ].site = o
      scatterers[water_and_peaks.i_seq_h1].site = h1
      scatterers[water_and_peaks.i_seq_h2].site = h2
  print("%6.3f"%d_best, file=log)

def run(fmodel, model, log, params = None):
  print_statistics.make_header("Fit water hydrogens into residual map",
    out = log)
  if(params is None):
    params = all_master_params().extract()
  print_statistics.make_sub_header("find peak-candidates", out = log)
  peaks = find_hydrogen_peaks(
    fmodel = fmodel,
    pdb_atoms = model.get_atoms(),
    params = params,
    log = log)
  waters_and_peaks = extract_hoh_peaks(
    peaks = peaks,
    pdb_hierarchy = model.get_hierarchy(),
    pdb_atoms = model.get_atoms(),
    xray_structure = model.get_xray_structure())
  print_statistics.make_sub_header("6D rigid body fit of HOH", out = log)
  print("Fit quality:", file=log)
  for water_and_peaks in waters_and_peaks:
    fit_water(water_and_peaks = water_and_peaks,
              xray_structure  = model.get_xray_structure(),
              params          = params,
              log             = log)
  # adjust ADP for H
  # TODO mrt: probably H bfactors should be equal to those
  # of the bonded atom
  u_isos = model.get_xray_structure().extract_u_iso_or_u_equiv()
  u_iso_mean = flex.mean(u_isos)
  sel_big = u_isos > u_iso_mean*2
  hd_sel = model.get_hd_selection()
  sel_big.set_selected(~hd_sel, False)
  model.get_xray_structure().set_u_iso(value = u_iso_mean, selection = sel_big)

def build_dod_and_od(model, fmodels, log=None, params=None):
  fmodels.update_xray_structure(xray_structure = model.get_xray_structure(),
    update_f_calc  = True,
    update_f_mask  = True)
  fmodels.show_short()
  hbparams = params.hydrogens.build
  if hbparams is None:
    hbparams = all_master_params().extract()
  if log is None:
    log = fmodels.log
  if fmodels.fmodel_n is not None:
    fmodel = fmodels.fmodel_neutron()
  else:
    fmodel = fmodels.fmodel_xray()
  title = "xray"
  if fmodel.xray_structure.guess_scattering_type_neutron():
    title="neutron"
  print_statistics.make_header("Build water hydrogens into "+title+" difference"
    " map", out=log)
  model = build_water_hydrogens_from_map2(model, fmodel, params=hbparams, log=log)
  #
  if hbparams.filter_dod:
    bmax=params.ordered_solvent.b_iso_max
    water_map_correlations(model, fmodels, log)
    model = remove_zero_occupancy(model,0.01,bmax)
    model.reprocess_pdb_hierarchy_inefficient()
  fmodels.update_xray_structure(xray_structure = model.get_xray_structure(),
    update_f_calc  = True,
    update_f_mask  = True)
  fmodels.show_short()
  mmtbx.utils.assert_model_is_consistent(model)
  sol_sel = model.solvent_selection()
  hd_sel = sol_sel & model.get_hd_selection()
  print("Final number of water hydrogens: ", hd_sel.count(True), file=log)
  return model, fmodels

def remove_zero_occupancy(model, min_occupancy=0.05, max_b_iso=80.):
  atoms = model.get_xray_structure().scatterers()
  occ = atoms.extract_occupancies()
  # print "dir(atoms): ", dir(atoms)
  umax = cctbx.adptbx.b_as_u(max_b_iso)
  uiso = atoms.extract_u_iso_or_u_equiv(model.get_xray_structure().unit_cell())
  sol_sel = model.solvent_selection()
  hd_sel = model.get_hd_selection()
  sel = sol_sel & hd_sel & ((occ < min_occupancy) | (uiso>umax))
  sel = ~sel
  return model.select( selection = sel)

# TODO code duplicate in model.add_hydrogens.insert_atoms
def insert_atom_into_model(xs, atom, atom_name, site_frac, occupancy, uiso, element):
  i_seq = atom.i_seq
  cart = xs.unit_cell().orthogonalize
  xyz = cart(site_frac)
  h = atom.detached_copy()
  h.name = atom_name
  h.xyz = xyz
  h.sigxyz = (0,0,0)
  h.occ = occupancy
  h.sigocc = 0
  h.b = cctbx.adptbx.u_as_b(uiso)
  h.sigb = 0
  h.uij = (-1,-1,-1,-1,-1,-1)
  if (iotbx.pdb.hierarchy.atom.has_siguij()):
    h.siguij = (-1,-1,-1,-1,-1,-1)
  h.element = "%2s" % element.strip()
  ag = atom.parent() # atom group
  rg = ag.parent()
  na =  ag.atoms_size()
  assert na==2 or na==1
  j_seq = i_seq+1
  if na==2:
    j_seq = j_seq +1
  #h.set_serial("") # 0) # j_seq+1)
  # h.i_seq = j_seq
  ag.append_atom(atom=h)
  appat = ag.atoms()[-1]
  scatterer = cctbx.xray.scatterer(
    label           = h.name,
    scattering_type = h.element.strip(),
    site            = site_frac,
    u               = uiso,
    occupancy       = h.occ)
  xs.add_scatterer(
    scatterer = scatterer,
    insert_at_index = j_seq)

def distances_to_peaks(xray_structure, sites_frac, peak_heights,
    distance_cutoff, use_selection=None):
  asu_mappings = xray_structure.asu_mappings(buffer_thickness =
    distance_cutoff)
  asu_mappings.process_sites_frac(sites_frac, min_distance_sym_equiv =
    xray_structure.min_distance_sym_equiv())
  pair_generator = cctbx.crystal.neighbors_fast_pair_generator(asu_mappings =
    asu_mappings, distance_cutoff = distance_cutoff)
  n_xray = xray_structure.scatterers().size()
  result = {}
  for pair in pair_generator:
    if(pair.i_seq < n_xray):
      if (pair.j_seq < n_xray): continue
      # i_seq = molecule
      # j_seq = site
      rt_mx_i = asu_mappings.get_rt_mx_i(pair)
      rt_mx_j = asu_mappings.get_rt_mx_j(pair)
      rt_mx_ji = rt_mx_i.inverse().multiply(rt_mx_j)
      i_seq_new_site_frac = pair.j_seq - n_xray
      new_site_frac = rt_mx_ji * sites_frac[i_seq_new_site_frac]
      jn = pair.i_seq
    else:
      if(pair.j_seq >= n_xray): continue
      # i_seq = site
      # j_seq = molecule
      rt_mx_i = asu_mappings.get_rt_mx_i(pair)
      rt_mx_j = asu_mappings.get_rt_mx_j(pair)
      rt_mx_ij = rt_mx_j.inverse().multiply(rt_mx_i)
      i_seq_new_site_frac = pair.i_seq - n_xray
      new_site_frac = rt_mx_ij * sites_frac[i_seq_new_site_frac]
      jn = pair.j_seq
    if use_selection is not None:
      height = peak_heights[i_seq_new_site_frac]
      if(use_selection[jn]):
        if jn in result:
          result[jn].extend( [(height, new_site_frac)] )
        else:
          result[jn] = [(height, new_site_frac)]
  return result

def choose_h_for_water(unit_cell, o_site, xyz_h, h1_site=None, min_dod_angle=80,
    max_dod_angle=170):
  hh1_site = h1_site
  assert False
  if hh1_site is None:
    mx = max(xyz_h)
    xyz_h.remove(mx)
    hh1_site = mx[1]
  h_max = -1.e300
  h2_site = None
  d1 = unit_cell.distance(o_site, hh1_site)
  assert d1 > 0.5 and d1 < 1.5, "D-O distance is out of range: %f"%d1
  for h,s in xyz_h:
    d = unit_cell.distance(o_site, s)
    if d<0.5:
      continue
    a = unit_cell.angle(s, o_site, hh1_site)
    if a>min_dod_angle and a<max_dod_angle :
      if h>h_max:
        h_max = h
        h2_site = s
  result = []
  if h1_site is None:
    result = [hh1_site]
  if not h2_site is None :
    result.extend( [h2_site] )
  return result

def match_dod(unit_cell, xyz_h, min_od=0.5, max_od=1.35, min_dod_angle=85.,
    max_dod_angle=170.):
  n=len(xyz_h)
  besta=360.
  r = None
  for i in range(n):
    x1h=xyz_h[i]
    x1 = x1h[1]
    for j in range(i+1,n):
      x2h=xyz_h[j]
      x2 = x2h[1]
      d1 = unit_cell.distance(x1, x2)
      if d1<min_od:
        continue
      for k in range(j+1,n):
        x3h=xyz_h[k]
        x3 = x3h[1]
        d2 = unit_cell.distance(x2, x3)
        d3 = unit_cell.distance(x1, x3)
        if d2<min_od:
          continue
        if d3<min_od:
          continue
        a = [(x2,x1,x3), (x1,x2,x3), (x1,x3,x2) ]
        da = []
        for t in a:
          av = unit_cell.angle(t[0],t[1],t[2])
          td1 = unit_cell.distance(t[0],t[1])
          td2 = unit_cell.distance(t[1],t[2])
          if( td1>max_od or td2>max_od or av>max_dod_angle or av<min_dod_angle):
            da.append(360.)
          else:
            da.append(abs(av - 105.0))
        ibest = min(range(len(da)), key=da.__getitem__)
        if da[ibest] < besta and da[ibest]<90.:
          r = a[ibest]
          besta = da[ibest]
  return r

def match_od(unit_cell, xyz_h, min_od=0.5, max_od=1.35):
  n=len(xyz_h)
  besta=1.e10
  r = None
  for i in range(n):
    x1h=xyz_h[i]
    x1 = x1h[1]
    for j in range(i+1,n):
      x2h=xyz_h[j]
      x2 = x2h[1]
      d1 = unit_cell.distance(x1, x2)
      if d1<min_od or d1>max_od:
        continue
      dd1 =abs(d1-1.)
      if dd1 < besta:
        r = (x1,x2)
        besta = dd1
  return r

def len_peaks(set_of_peaks):
  r = 0
  for peaks in set_of_peaks.values():
    r += len(peaks)
  return r

def print_scats(xray_structure, fn):
  import cctbx
  ftmp = open(fn, "w")
  print(" scats ", file=ftmp)
  itmp=0
  for scat in xray_structure.scatterers():
    itmp=itmp+1
    print(itmp, ' ', scat.label.strip(), \
      ' ', scat.scattering_type.strip(), ' ', \
      xray_structure.unit_cell().orthogonalize(scat.site), \
      ' ', scat.occupancy, ' ', cctbx.adptbx.u_as_b(scat.u_iso), file=ftmp)
  ftmp.close()

def print_atom(out,atom):
  print('     ', atom.format_atom_record(), file=out)
  print("        atom.xyz:  ", atom.xyz, file=out)
  print("        atom.occ:  ", atom.occ, file=out)
  print("        atom.b:    ", atom.b, file=out)
  print('        atom.segid: "%s"' % atom.segid, file=out)
  print("        atom.i_seq: ", atom.i_seq, file=out)
  print("        atom.name: ", atom.name, file=out)
  print("        atom.element: ", atom.element.strip(), file=out)

def print_scat(out, s):
  print("scatterer  label : ", s.label.strip(), file=out)
  print("            site : ", s.site, file=out)
  print("         element : ", s.scattering_type.strip(), file=out)
  print("            biso : ", cctbx.adptbx.u_as_b(s.u_iso), file=out)
  print("             occ : ", s.occupancy, file=out)

def atom_scat(atom,scat):
  import StringIO
  s=StringIO.StringIO()
  print_atom(s,atom)
  print_scat(s,scat)
  # print>>s, "dir(s):\n",dir(scat)
  return s.getvalue()

def atom_as_str(atom):
  import StringIO
  s=StringIO.StringIO()
  print_atom(s,atom)
  return s.getvalue()

def assert_water_is_consistent(model):
  xs = model.get_xray_structure()
  unit_cell = xs.unit_cell()
  scatterers = xs.scatterers()
  hier = model.get_hierarchy()
  water_rgs = model.extract_water_residue_groups()
  for rg in water_rgs:
    if (rg.atom_groups_size() != 1):
      raise RuntimeError(
        "Not implemented: cannot handle water with alt. conf.")
    ag = rg.only_atom_group()
    atoms = ag.atoms()
    h_atoms = []
    o_atom=None
    if atoms.size()>0:
      for atom in atoms:
        if (atom.element.strip() == "O"):
          o_atom = atom
        else:
          h_atoms.append(atom)
    else:
      assert False
    o_i = o_atom.i_seq
    o_site = scatterers[o_i].site
    for hatom in h_atoms:
      hsite = scatterers[hatom.i_seq].site
      doh = unit_cell.distance(hsite, o_site)
      assert doh >0.35 and doh < 1.45, "%f\n%s"%(doh,atom_as_str(hatom))


def build_water_hydrogens_from_map(model, fmodel, params=None, log=None):
  self = model
  xs = self.xray_structure
  unit_cell = xs.unit_cell()
  scatterers = xs.scatterers()
  hier = model.get_hierarchy()
  mmtbx.utils.assert_model_is_consistent(model)
  if log is None:
    log = model.log
  if params is None:
    params = all_master_params().extract()
  max_od_dist = params.max_od_dist
  min_od_dist = params.min_od_dist
  assert min_od_dist >0.5
  assert max_od_dist >min_od_dist and max_od_dist<1.5
  keep_max = params.map_next_to_model.max_model_peak_dist
  keep_min = params.map_next_to_model.min_model_peak_dist
  params.map_next_to_model.max_model_peak_dist = max_od_dist * 1.8
  params.map_next_to_model.min_model_peak_dist = min_od_dist
  params.peak_search.min_cross_distance = 0.9 #params.min_od_dist # 0.5
  params.map_next_to_model.use_hydrogens = True
  params.map_next_to_model.min_peak_peak_dist = min_od_dist #0.8
  max_dod_angle = params.max_dod_angle
  min_dod_angle = params.min_dod_angle
  assert max_dod_angle<180 and min_dod_angle>30 and max_dod_angle>min_dod_angle
  peaks = find_hydrogen_peaks(
    fmodel = fmodel,
    pdb_atoms = model.pdb_atoms,
    params = params,
    log = log)
  if peaks is None:
    return model
  params.map_next_to_model.use_hydrogens = False
  hs = peaks.heights
  params.map_next_to_model.max_model_peak_dist = keep_max
  params.map_next_to_model.min_model_peak_dist = keep_min
  sol_O = model.solvent_selection().set_selected(
    model.get_hd_selection(), False)
  print("Number of solvent molecules: ", sol_O.count(True), file=log)
  sol_sel = model.solvent_selection()
  hd_sel = sol_sel & model.get_hd_selection()
  print("Number of water hydrogens: ", hd_sel.count(True), file=log)
  pks = distances_to_peaks(xs, peaks.sites, hs, max_od_dist, use_selection=sol_O)
  pkss = distances_to_peaks(xs, peaks.sites, hs, max_od_dist*1.7, use_selection=sol_O)
  print("Peaks to consider: ", len(pks.keys()), " : ", len(pkss.keys()), file=log)
  water_rgs = self.extract_water_residue_groups()
  water_rgs.reverse()
  element='D'
  next_to_i_seqs = []
  for rg in water_rgs:
    if (rg.atom_groups_size() != 1):
      raise RuntimeError(
        "Not implemented: cannot handle water with alt. conf.")
    ag = rg.only_atom_group()
    atoms = ag.atoms()
    h1=0
    h1_atom=None
    h1_site=None
    h1_i_seq=None
    if atoms.size()==2:
      o_atom = None
      h_atom = None
      for atom in atoms:
        if (atom.element.strip() == "O"): o_atom = atom
        else:                             h_atom = atom
      assert [o_atom, h_atom].count(None) == 0
      h1_i_seq = h_atom.i_seq
      h1_site=scatterers[h1_i_seq].site
      h1_atom=h_atom
      if h_atom.name.strip().endswith('1'):
        h1=1
      elif h_atom.name.strip().endswith('2'):
        h1=2
    elif atoms.size()==1:
      o_atom = atoms[0]
      h1_site = None
    elif atoms.size()==3:
      continue
    else:
      assert False
    o_i = o_atom.i_seq
    if o_i in pks:
      o_site = scatterers[o_i].site
      o_u = scatterers[o_i].u_iso_or_equiv(unit_cell)
      h_sites = pks[o_i]
      hh = choose_h_for_water(unit_cell, o_site, h_sites, h1_site=h1_site,
          min_dod_angle=min_dod_angle, max_dod_angle=max_dod_angle)
      nats = atoms.size() + len(hh)
      if nats==2:
        if len(hh)==0:
          h_swap = h1_site
        else:
          h_swap = hh[0]
        assert o_i in pkss
        h_sitess = pkss[o_i]
        hhs = choose_h_for_water(unit_cell, h_swap, h_sitess, h1_site=o_site,
            min_dod_angle=min_dod_angle, max_dod_angle=max_dod_angle)
        if len(hhs)>0:
          assert len(hhs)==1
          scatterers[o_i].site = h_swap
          o_atom.xyz = unit_cell.orthogonalize(h_swap)
          if h1_site is not None:
            scatterers[h1_i_seq].site = o_site
            h1_atom.xyz = unit_cell.orthogonalize(o_site)
          else:
            hhs.append(o_site)
            assert len(hhs)==2
          hh = hhs
          assert (atoms.size() + len(hh)) == 3
      for i,site_frac in enumerate(hh):
        assert (h1>0 and i<1) or (h1==0 and i<2)
        if h1==1: j=2
        elif h1==2: j=1
        else: j=i+1
        name = element+str(j)
        i_seq = o_atom.i_seq
        # this breaks atom sequence: o_atom.i_seq
        insert_atom_into_model(xs, atom=o_atom, atom_name=name, site_frac=site_frac,
          occupancy=1, uiso=o_u, element=element)
        next_to_i_seqs.append(i_seq)
  if( model.refinement_flags is not None and len(next_to_i_seqs)!=0):
    # TODO: adp_group=True according to params.dod_and_od_group_adp
    model.refinement_flags.add(
      next_to_i_seqs=next_to_i_seqs, # [i_seq], # ,
      sites_individual = True,
      s_occupancies    = False,
      adp_individual_iso=True)
  print("Number of H added:", len(next_to_i_seqs), file=log)
  # print "DEBUG! ", dir(model.refinement_flags) #.size()
  # print "DEBUG! ", dir(model.refinement_flags.sites_individual) #.size()
  #print "DEBUG! ", model.refinement_flags.sites_individual.size()
  model.reprocess_pdb_hierarchy_inefficient()
  np =  model.refinement_flags.sites_individual.size()
  assert np == model.get_number_of_atoms()
  assert model.refinement_flags.sites_individual.count(True) == np
  mmtbx.utils.assert_model_is_consistent(model)
  sol_sel = model.solvent_selection()
  hd_sel = sol_sel & model.get_hd_selection()
  assert hd_sel.count(True) >= len(next_to_i_seqs)
  return model

def select_one_water(water_residue_group, n_atoms):
  rg = water_residue_group
  if (rg.atom_groups_size() != 1):
    raise RuntimeError(
      "Not implemented: cannot handle water with alt. conf.")
  ag = rg.only_atom_group()
  atoms = ag.atoms()
  ws = []
  for atom in atoms:
    i = atom.i_seq
    ws.append(i)
  result = flex.bool()
  for j in range(0,n_atoms):
    if j in ws:
      result.append(True)
    else:
      result.append(False)
  nw = result.count(True)
  assert nw>0 and nw <= 3
  return result

def build_water_hydrogens_from_map2(model, fmodel, params=None, log=None):
  # self = model
  xs = model.get_xray_structure()
  unit_cell = xs.unit_cell()
  scatterers = xs.scatterers()
  hier = model.get_hierarchy()
  mmtbx.utils.assert_model_is_consistent(model)
  #assert_water_is_consistent(model)
  model.reprocess_pdb_hierarchy_inefficient()
  assert_water_is_consistent(model)
  if log is None:
    log = model.log
  if params is None:
    params = all_master_params().extract()
  max_od_dist = params.max_od_dist
  min_od_dist = params.min_od_dist
  assert min_od_dist >0.5
  assert max_od_dist >min_od_dist and max_od_dist<1.5
  keep_max = params.map_next_to_model.max_model_peak_dist
  keep_min = params.map_next_to_model.min_model_peak_dist
  params.map_next_to_model.max_model_peak_dist = max_od_dist * 1.8
  params.map_next_to_model.min_model_peak_dist = min_od_dist
  params.peak_search.min_cross_distance = params.min_od_dist # 0.5
  if params.peak_search.min_cross_distance < 0.7:
    params.peak_search.min_cross_distance = 0.7
  #if params.map_next_to_model.min_model_peak_dist < 0.7:
  #  params.map_next_to_model.min_model_peak_dist = 0.7
  params.map_next_to_model.use_hydrogens = True
  params.map_next_to_model.min_peak_peak_dist = min_od_dist
  #if params.map_next_to_model.min_peak_peak_dist <0.7:
  #  params.map_next_to_model.min_peak_peak_dist = 0.7
  max_dod_angle = params.max_dod_angle
  min_dod_angle = params.min_dod_angle
  assert max_dod_angle<180 and min_dod_angle>30 and max_dod_angle>min_dod_angle
  peaks = find_hydrogen_peaks(
    fmodel = fmodel,
    pdb_atoms = model.get_hierarchy().atoms(),
    params = params,
    log = log)
  if peaks is None:
    return model
  params.map_next_to_model.use_hydrogens = False
  hs = peaks.heights
  params.map_next_to_model.max_model_peak_dist = keep_max
  params.map_next_to_model.min_model_peak_dist = keep_min
  sol_O = model.solvent_selection().set_selected(
    model.get_hd_selection(), False)
  print("Number of solvent molecules: ", sol_O.count(True), file=log)
  sol_sel = model.solvent_selection()
  hd_sel = sol_sel & model.get_hd_selection()
  print("Number of water hydrogens: ", hd_sel.count(True), file=log)
  # pks = distances_to_peaks(xs, peaks.sites, hs, max_od_dist, use_selection=sol_O)
  obsmap = obs_map(fmodel, map_type=params.secondary_map_type)
  # filtered_peaks = map_peak_filter(peaks.sites, obsmap)
  #print>>log, "Number of filtered peaks: ", len(filtered_peaks)
  # pkss = distances_to_peaks(xs, peaks.sites, hs, max_od_dist*1.7, use_selection=sol_O)
  #pkss = distances_to_peaks(xs, filtered_peaks, hs, max_od_dist*1.7,
  #    use_selection=sol_O)
  cutoff2 = params.secondary_map_cutoff
  assert cutoff2 > 0. and cutoff2 < 100.
  pkss = make_peak_dict(peaks, sol_O, obsmap, cutoff2)
  npeaks=0
  for pk in pkss.values():
    npeaks = npeaks + len(pk)
  print("Peaks to consider: ", npeaks, file=log)
  water_rgs = model.extract_water_residue_groups()
  water_rgs.reverse()
  element='D'
  next_to_i_seqs = []
  for rg in water_rgs:
    if (rg.atom_groups_size() != 1):
      raise RuntimeError(
        "Not implemented: cannot handle water with alt. conf.")
    ag = rg.only_atom_group()
    atoms = ag.atoms()
    h_atoms = []
    o_atom=None
    if atoms.size()>0:
      for atom in atoms:
        if (atom.element.strip() == "O"):
          o_atom = atom
        else:
          h_atoms.append(atom)
    else:
      assert False
    o_i = o_atom.i_seq
    if o_i in pkss:
      o_site = scatterers[o_i].site
      site_symmetry = sgtbx.site_symmetry(xs.unit_cell(), xs.space_group(),
        o_site, 0.5, True)
      if(site_symmetry.n_matrices() != 1):
        special = True
        continue # TODO: handle this situation

      o_u = scatterers[o_i].u_iso_or_equiv(unit_cell)
      h_sites = pkss[o_i]
      # print_atom(sys.stdout, o_atom)
      val = obsmap.eight_point_interpolation(o_site)
      if val>cutoff2:
        h_sites.append((0., o_site))
      for hatom in h_atoms:
        hsite = scatterers[hatom.i_seq].site
        doh = unit_cell.distance(hsite, o_site)
        assert doh >0.5 and doh < 1.45, "%f\n%s"%(doh,atom_as_str(hatom))
        val = obsmap.eight_point_interpolation(hsite)
        if val>cutoff2:
          h_sites.append((0., hsite))
      dod = match_dod(unit_cell, h_sites, min_od=params.min_od_dist,
          max_od=params.max_od_dist, min_dod_angle=params.min_dod_angle,
          max_dod_angle=params.max_dod_angle)
      if dod is None:
        od= match_od(unit_cell, h_sites, min_od=params.min_od_dist,
            max_od=params.max_od_dist)
        if od is not None:
          scatterers[o_i].site = od[0]
          o_atom.xyz = unit_cell.orthogonalize(od[0])
          h=od[1]
          if len(h_atoms)>0:
            hatom = h_atoms.pop()
            hatom.xyz = unit_cell.orthogonalize(h)
            hatom.occ = 1
            hatom.b = cctbx.adptbx.u_as_b(o_u)
            hatom.name = "D1"
            h_i = hatom.i_seq
            scatterers[h_i].label = "D1"
            scatterers[h_i].site = h
            scatterers[h_i].occupancy = 1
            scatterers[h_i].u_iso = o_u
            if len(h_atoms)>0:
              # mark for deletion
              hatom = h_atoms.pop()
              hatom.name = "D2"
              hatom.occ = 0.
              h_i = hatom.i_seq
              scatterers[h_i].label="D2"
              scatterers[h_i].occupancy=0.
          else:
            insert_atom_into_model(xs, atom=o_atom, atom_name="D1",
              site_frac=h, occupancy=1, uiso=o_u, element='D')
            next_to_i_seqs.append(o_atom.i_seq)
      else:
        scatterers[o_i].site = dod[1]
        o_atom.xyz = unit_cell.orthogonalize(dod[1])
        ii=1
        for h in (dod[0],dod[2]):
          name = "D"+str(ii)
          ii=ii+1
          if len(h_atoms)>0:
            hatom = h_atoms.pop()
            hatom.xyz = unit_cell.orthogonalize(h)
            hatom.occ = 1
            hatom.b = cctbx.adptbx.u_as_b(o_u)
            hatom.name = name
            h_i = hatom.i_seq
            scatterers[h_i].label = name
            scatterers[h_i].site = h
            scatterers[h_i].occupancy = 1
            scatterers[h_i].u_iso = o_u
          else:
            insert_atom_into_model(xs, atom=o_atom, atom_name=name,
              site_frac=h, occupancy=1, uiso=o_u, element='D')
            next_to_i_seqs.append(o_atom.i_seq)
  if( model.refinement_flags is not None and len(next_to_i_seqs)!=0):
    # TODO: adp_group=True according to params.dod_and_od_group_adp
    model.refinement_flags.add(
      next_to_i_seqs=next_to_i_seqs, # [i_seq], # ,
      sites_individual = True,
      s_occupancies    = False,
      adp_individual_iso=True)
  print("Number of H added:", len(next_to_i_seqs), file=log)
  # print "DEBUG! ", dir(model.refinement_flags) #.size()
  # print "DEBUG! ", dir(model.refinement_flags.sites_individual) #.size()
  #print "DEBUG! ", model.refinement_flags.sites_individual.size()
  model.reprocess_pdb_hierarchy_inefficient()
  if model.refinement_flags.sites_individual is not None:
    np =  model.refinement_flags.sites_individual.size()
    assert np == model.get_number_of_atoms()
    assert model.refinement_flags.sites_individual.count(True) == np
  mmtbx.utils.assert_model_is_consistent(model)
  sol_sel = model.solvent_selection()
  hd_sel = sol_sel & model.get_hd_selection()
  assert hd_sel.count(True) >= len(next_to_i_seqs)
  assert_water_is_consistent(model)
  if False:
    model.idealize_h_minimization()
    model.get_hierarchy()
    mmtbx.utils.assert_model_is_consistent(model)
    assert_water_is_consistent(model)
  return model


def get_pdb_oxygen(water_residue_group):
  rg = water_residue_group
  if (rg.atom_groups_size() != 1):
    raise RuntimeError(
      "Not implemented: cannot handle water with alt. conf.")
  ag = rg.only_atom_group()
  atoms = ag.atoms()
  for atom in atoms:
    if atom.element.strip() == 'O':
      return atom
  assert False

def one_water_correlation(model, fmodels, water):
  import mmtbx.solvent.ordered_solvent as ordered_solvent
  from mmtbx import real_space_correlation
  params = ordered_solvent.master_params().extract()
  par = params.secondary_map_and_map_cc_filter
  rcparams = real_space_correlation.master_params().extract()
  rcparams.detail = "residue"
  if fmodels.fmodel_n is not None:
    fmodel = fmodels.fmodel_neutron()
  else:
    fmodel = fmodels.fmodel_xray()
  title = "xray"
  if fmodel.xray_structure.guess_scattering_type_neutron():
    title="neutron"
  scatterers = model.get_xray_structure().scatterers()
  assert scatterers is fmodel.xray_structure.scatterers()
  results = real_space_correlation.map_statistics_for_atom_selection(
    atom_selection = water,
    fmodel = fmodel,
    map1_type="Fo",
    map2_type="Fmodel"
  )
  return results.cc

def scatterers_info(scatterers, selection):
  r = str()
  for s,u in zip(scatterers,selection):
    if u:
      r += s.element_symbol().strip()
      r += " : "
      r += ("%4.2f %6.3f"%(s.occupancy,s.u_iso))
      r += " = "
      r += s.label
      r += ";   "
  return r

def obs_map(
    fmodel,
    map_type,
    resolution_factor=0.25):
  map_coeffs = fmodel.electron_density_map().map_coefficients(map_type)
  return map_coeffs.fft_map(
    resolution_factor=resolution_factor).apply_sigma_scaling().real_map()


def map_peak_filter(sites_frac, obs_map, cutoff):
  result = flex.vec3_double()
  for site_frac in sites_frac:
    val = obs_map.eight_point_interpolation(site_frac)
    if val>cutoff:
      result.append(site_frac)
  return result


def water_map_correlations(model, fmodels, log=None):
  print_statistics.make_header("Water real space correlations", out=log)
  fmodels.update_xray_structure(xray_structure = model.get_xray_structure(),
    update_f_calc=True, update_f_mask=True)
  fmodels.show_short()
  scatterers = model.get_xray_structure().scatterers()
  waters = model.solvent_selection()
  water_rgs = model.extract_water_residue_groups()
  n_atoms = len(scatterers)
  for rg in water_rgs:
    o_atom = get_pdb_oxygen(rg)
    o_scat = scatterers[o_atom.i_seq]
    water = select_one_water(rg, n_atoms)
    if water.count(True) < 2:
      continue
    for s,u in zip(scatterers,water):
      if u:
        e = s.element_symbol().strip()
        if e=='D':
          if s.occupancy <= 0.02 or s.occupancy >=0.98:
            keep_occ = s.occupancy
            neutron_cc = one_water_correlation(model, fmodels, water)
            if s.occupancy <= 0.02:
              s.occupancy = 1.0
              s.u_iso = o_scat.u_iso
            else:
              s.occupancy = 0.0
            fmodels.update_xray_structure(xray_structure = model.get_xray_structure(),
              update_f_calc=True, update_f_mask=True)
            ncc = one_water_correlation(model, fmodels, water)
            if ncc < neutron_cc:
              s.occupancy = keep_occ
              fmodels.update_xray_structure(xray_structure = model.get_xray_structure(),
                update_f_calc=True, update_f_mask=True)
            else:
              neutron_cc = ncc
  return True


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/neutron_utils.py
from __future__ import division
from string import ascii_uppercase

import iotbx
from mmtbx.chemical_components import get_bond_pairs

def add_side_chain_hydrogen(atom_group):
  def _get_side_chain_hydrogen_xyz(atom_names):
    from elbow.chemistry.xyzClass import xyzClass
    vec_oo = xyzClass(atom_names[0].xyz) - xyzClass(atom_names[2].xyz)
    mid = xyzClass(atom_names[0].xyz) - vec_oo/2
    vec_cm = mid - xyzClass(atom_names[1].xyz)
    h_xyz = xyzClass(atom_names[2].xyz) + vec_cm*1/abs(vec_cm)
    return h_xyz
  #
  heavy_name = None
  if atom_group.resname == "ASP":
    atom_names = ["OD1", "CG", "OD2", "HD2"]
  elif atom_group.resname == "GLU":
    atom_names = ["OE1", "CD", "OE2", "HE2"]
  else:
    raise Sorry("residue %s has no side chain acid group" % atom_group.resname)
  count=0
  for i, name in enumerate(atom_names):
    for atom in atom_group.atoms():
      if atom.name.strip()==name:
        atom_names[i]=atom
        count+=1
        break
  if count!=3: return None
  h_xyz = _get_side_chain_hydrogen_xyz(atom_names)
  new_atom = iotbx.pdb.hierarchy.atom()
  new_atom.element = "H"
  new_atom.name = atom_names[3]
  new_atom.xyz = h_xyz
  atom_group.insert_atom(-1, new_atom)
  return new_atom

def neutron_exchange_hydrogens(hierarchy,
                               cifs=None,
                               exchange_sites_only=True,
                               perdeuterate=False,
                               only_chain_id=None,
                               only_resseq=None,
                               side_chain_acids=False,
                               verbose=False,
                               ):
  if verbose:
    print("""neutron_exchange_hydrogens
    hierarchy : %s
    cifs : %s
    exchange_sites_only : %s
    perdeuterate : %s
    """ % (hierarchy,
           cifs,
           exchange_sites_only,
           perdeuterate,
           ))
  def _get_exchange_sites(atom_group, side_chain_acids=False, verbose=False):
    exchanges = []
    for atom in atom_group.atoms():
      # if atom.hetero: continue
      if atom.element.strip() == "":
        raise Sorry("Need element columns in input PDB")
      if atom.element.strip() in ["H"]:
        for a1, a2 in bonds1:
          other = None
          if atom.name.strip()==a1:
            other = a2
            break
          elif atom.name.strip()==a2:
            other = a1
            break
        else:
          for a1, a2 in bonds2:
            if atom.name.strip()==a1:
              other = a2
              break
            elif atom.name.strip()==a2:
              other = a1
              break
        if other:
          for heavy in atom_group.atoms():
            if heavy.element.strip() in ["H"]: continue
            if heavy.name.strip() == other.strip():
              break
          else:
            continue
          if verbose: print('heavy :%s: :%s:' % (heavy.quote(),
                                                 heavy.element.strip()))
          if heavy.element.strip() in ["C"]: continue
          exchanges.append(atom)
    if side_chain_acids:
      rc = add_side_chain_hydrogen(atom_group)
      if rc:
        exchanges.append(rc)
    return exchanges
  ##############################################
  def _get_hydrogens(atom_group, verbose=False):
    exchanges = []
    for atom in atom_group.atoms():
      # if atom.hetero: continue
      if atom.element.strip() == "":
        raise Sorry("Need element columns in input PDB")
      if not atom.element.strip() in ["H", "D"]: continue
      exchanges.append(atom)
    return exchanges
  ############################
  if verbose: hierarchy.show()
  exchange_count = 0
  for model in hierarchy.models():
    if verbose: print('model: "%s"' % model.id)
    for chain in model.chains():
      if only_chain_id is not None and chain.id!=only_chain_id: continue
      if verbose: print('chain: "%s"' % chain.id)
      for residue_group in chain.residue_groups():
        if ( only_resseq is not None and
             residue_group.resseq.strip()!=only_resseq
             ):
          continue
        if verbose: print('  residue_group: resseq="%s" icode="%s"' % (
          residue_group.resseq, residue_group.icode))
        altlocs = []
        for atom_group in residue_group.atom_groups():
          altlocs.append(atom_group.altloc)
        for atom_group in residue_group.atom_groups():
          if verbose: print('  atom_group: resname="%s" altloc="%s"' % (
            atom_group.resname, atom_group.altloc))
          bonds1 = get_bond_pairs(atom_group.resname)
          bonds2 = get_bond_pairs(atom_group.resname,
                                  alternate=True)
          if 0: # PVA: This triggers a bug. Added 13-MAR-2025, modules/phenix_regression/refinement/neutron/tst_ready_set_all_d.py
          #if cifs:
            bonds3 = get_bond_pairs_from_cif(cifs.get(atom_group.resname, None))
            if bonds3:
              bonds1 = bonds3
              bonds2 = bonds3
            else:
              if bonds1 is None: continue
              if bonds2 is None: continue
          else:
            if bonds1 is None: continue
            if bonds2 is None: continue
          if verbose: print('    atom_group: altloc="%s" resname="%s"' % (
            atom_group.altloc, atom_group.resname))

          # for deuteriums
          deuteriums=True
          for atom in atom_group.atoms():
            if atom.hetero: continue
            if atom.element.strip() in ["D"]:
              break
          else:
            deuteriums=False
          if deuteriums: break

          if exchange_sites_only:
            exchanges = _get_exchange_sites(atom_group,
                                            side_chain_acids=side_chain_acids,
                                            verbose=verbose,
            )
          else:
            exchanges = _get_hydrogens(atom_group, verbose=verbose)

          for u, l in enumerate(ascii_uppercase):
            if l not in altlocs:
              break
          else:
            assert 0

          if perdeuterate:
            for atom in atom_group.atoms():
              if atom.element.strip() not in ["H", "D"]: continue
              if atom in exchanges: continue
              atom.element = " D"
              atom.name = atom.name.replace("H","D", 1)

          if exchanges and not atom_group.altloc.strip():
            for i_exchange, exchange in enumerate(exchanges):
              if verbose:
                print('Exchanging',exchange.quote())
              exchange.occ=0.5
              atom_group.remove_atom(exchange)
              if i_exchange==0:
                new_atom_group = iotbx.pdb.hierarchy.atom_group()
                new_atom_group.altloc = l
                new_atom_group.resname = atom_group.resname
              new_atom_group.append_atom(exchange)
              exchange_count += 1
            residue_group.append_atom_group(new_atom_group)
            other = new_atom_group.detached_copy()
            other.altloc = ascii_uppercase[u+1]
            for exchange in other.atoms():
              exchange.element = " D"
              exchange.name = exchange.name.replace("H","D", 1)
            residue_group.append_atom_group(other)
  hierarchy.atoms().reset_serial()
  # hierarchy.overall_counts().show()
  if verbose: print("    Deuterium exchange count : %d" % exchange_count)
  return hierarchy


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/parameterization.py
from __future__ import absolute_import, division, print_function
from scitbx import matrix
import math
from scitbx.math import dihedral_angle
from mmtbx_hydrogens_ext import *
from libtbx.utils import Sorry
from six.moves import zip

class manager(object):
  def __init__(self,
      h_connectivity,
      sites_cart,
      use_ideal_bonds_angles,
      site_labels,
      use_ideal_dihedral = False,
      ignore_h_with_dof  = False):
    self.h_connectivity = h_connectivity
    self.sites_cart = sites_cart
    self.use_ideal_bonds_angles = use_ideal_bonds_angles
    self.site_labels = site_labels
    self.use_ideal_dihedral = use_ideal_dihedral
    self.ignore_h_with_dof = ignore_h_with_dof
    self.determine_parameterization()

#-------------------------------------------------------------------------------

  def determine_parameterization(self):
    """
    For every H atom, determine the type of geometry
    """
    self.unk_list, self.unk_ideal_list = [], []
    self.h_parameterization = [None]*len(self.h_connectivity)
    for neighbors in self.h_connectivity:
      if (neighbors is None): continue
      ih = neighbors.ih
      if self.h_parameterization[ih] is not None:
        continue
      number_h_neighbors = neighbors.number_h_neighbors
      number_non_h_neighbors = neighbors.number_non_h_neighbors
      # alg2a, 2tetra, 2neigbs
      if (number_non_h_neighbors == 2):
        self.process_2_neighbors(neighbors = neighbors)
      # tetragonal geometry: 3neigbs
      elif (number_non_h_neighbors == 3 and number_h_neighbors == 0):
        self.process_3_neighbors(neighbors = neighbors)
      # Free rotation and propeller groups
      elif(number_non_h_neighbors == 1 and
        (number_h_neighbors == 0 or number_h_neighbors == 2) and
        not self.ignore_h_with_dof):
        self.process_1_neighbor(neighbors = neighbors)
      # planar Y-X-H2 groups such as in ARG head
      elif(number_non_h_neighbors == 1 and number_h_neighbors == 1):
        self.process_1_neighbor_type_arg(neighbors = neighbors)
      else:
        self.unk_list.append(ih)

#-------------------------------------------------------------------------------

  def process_1_neighbor(self, neighbors):
    ih = neighbors.ih
    # if used for hydrogenate, make sure that first we use the H with dihedral angle
    # However, this needs some tweaking for neutron H/D situations
    if (neighbors.number_h_neighbors == 2):
      i_h1, i_h2 = neighbors.h1['iseq'], neighbors.h2['iseq']
      if ('dihedral_ideal' in neighbors.b1):
        neighbors = self.h_connectivity[ih]
      elif ('dihedral_ideal' in self.h_connectivity[i_h1].b1):
        if self.h_parameterization[i_h1] is None:
          neighbors = self.h_connectivity[i_h1]
      elif ('dihedral_ideal' in self.h_connectivity[i_h2].b1):
        if self.h_parameterization[i_h2] is None:
          neighbors = self.h_connectivity[i_h2]
    ih = neighbors.ih
    #print(self.site_labels[ih])
    i_a0 = neighbors.a0['iseq']
    rh = matrix.col(self.sites_cart[ih])
    r0 = matrix.col(self.sites_cart[i_a0])
    if self.use_ideal_bonds_angles:
      disth = neighbors.a0['dist_ideal']
    else:
      disth = (r0 - rh).length()
    if (not neighbors.a1 or not neighbors.b1):
      self.unk_list.append(ih)
      return
    i_a1 = neighbors.a1['iseq']
    i_b1 = neighbors.b1['iseq']
    r1 = matrix.col(self.sites_cart[i_a1])
    rb1 = matrix.col(self.sites_cart[i_b1])
    self.check_if_atoms_superposed(rh, r0, ih, i_a0)
    self.check_if_atoms_superposed(r1, r0, i_a1, i_a0)
    uh0 = (rh - r0).normalize()
    u10 = (r1 - r0).normalize()
    dihedral = dihedral_angle(
      sites=[self.sites_cart[ih], self.sites_cart[i_a0],
      self.sites_cart[i_a1],self.sites_cart[i_b1]])
    if self.use_ideal_bonds_angles:
      alpha = math.radians(neighbors.a1['angle_ideal'])
      #allow for rotation even for idealize = True
      phi = dihedral
      if self.use_ideal_dihedral:
        #phi = math.radians(b1.dihedral_ideal)
        if 'dihedral_ideal' in neighbors.b1:
          phi = math.radians(neighbors.b1['dihedral_ideal'])
    else:
      alpha = (u10).angle(uh0)
      phi = dihedral
    #print(math.degrees(phi))
    u1 = (r0 - r1).normalize()
    rb10 = rb1 - r1
    # TODO check needed?
    u2 = (rb10 - ((rb10).dot(u1)) * u1).normalize()
    u3 = u1.cross(u2)
    if (neighbors.number_h_neighbors == 0):
      self.h_parameterization[ih] = riding_coefficients(
        htype  = 'alg1b',
        ih     = ih,
        a0     = i_a0,
        a1     = i_a1,
        a2     = i_b1,
        a3     = -1,
        a      = alpha,
        b      = phi,
        h      = 0,
        n      = 0,
        disth = disth)
    if (neighbors.number_h_neighbors == 2):
      i_h1, i_h2 = neighbors.h1['iseq'], neighbors.h2['iseq']
      i_h1, i_h2 = self.check_propeller_order(
        i_a0 = i_a0,
        i_a1 = i_a1,
        ih   = ih,
        i_h1 = i_h1,
        i_h2 = i_h2)
      for nprop, hprop in zip([0,1,2],[ih,i_h1,i_h2]):
        self.h_parameterization[hprop] = riding_coefficients(
          htype  = 'prop',
          ih     = hprop,
          a0     = i_a0,
          a1     = i_a1,
          a2     = i_b1,
          a3     = -1,
          a      = alpha,
          n      = nprop,
          b      = phi,
          h      = 0,
          disth = disth)
#a0.dihedral : dihedral angle between angle ideal and actual position

#-------------------------------------------------------------------------------

  def process_1_neighbor_type_arg(self, neighbors):
    """
      alg1a: X-H2 planar groups, such as in ARG, ASN, GLN
      requires that dihedral angle restraint exists for at least one H atom
    """
    ih = neighbors.ih
    i_h1 = neighbors.h1['iseq']
    i_a0 = neighbors.a0['iseq']
    rh = matrix.col(self.sites_cart[ih])
    r0 = matrix.col(self.sites_cart[i_a0])
    if self.use_ideal_bonds_angles:
      disth = neighbors.a0['dist_ideal']
    else:
      disth = (r0 - rh).length()
    i_a1 = neighbors.a1['iseq']
    r1 = matrix.col(self.sites_cart[i_a1])
    if ('dihedral_ideal' in neighbors.b1):
      ih_dihedral = ih
      ih_no_dihedral = i_h1
    else:
      if ('dihedral_ideal' in self.h_connectivity[i_h1].b1):
        ih_dihedral = i_h1
        ih_no_dihedral = ih
      else:
        self.unk_list.append(ih)
        return
    i_b1 = self.h_connectivity[ih_dihedral].b1['iseq']
    rb1 = matrix.col(self.sites_cart[i_b1])
    # check if angle is typical for propeller
    # catches case of missing propeller atom
    if (neighbors.h1['angle_ideal'] >107 and neighbors.h1['angle_ideal'] <111):
      self.unk_list.append(ih)
    else:
      dihedral = dihedral_angle(
        sites=[self.sites_cart[i_b1], self.sites_cart[i_a1],
        self.sites_cart[i_a0], self.sites_cart[ih_dihedral]])
      self.check_if_atoms_superposed(rh, r0, ih, i_a0)
      self.check_if_atoms_superposed(r1, r0, i_a1, i_a0)
      uh0 = (rh - r0).normalize()
      u10 = (r1 - r0).normalize()
      if self.use_ideal_bonds_angles:
        alpha = math.radians(neighbors.a1['angle_ideal'])
        phi = math.radians(self.h_connectivity[ih_dihedral].b1['dihedral_ideal'])
      else:
        alpha = (u10).angle(uh0)
        phi = dihedral
      u1 = (r0 - r1).normalize()
      rb10 = rb1 - r1
      # TODO check needed?
      u2 = (rb10 - ((rb10).dot(u10)) * u10).normalize()
      u3 = u1.cross(u2)
      for ih_alg1a, phi_alg1a in zip(
        [ih_dihedral,ih_no_dihedral],[phi, phi+math.pi]):
        if self.h_parameterization[ih_alg1a] is None:
          self.h_parameterization[ih_alg1a] = riding_coefficients(
            htype  = 'alg1a',
            ih     = ih_alg1a,
            a0     = i_a0,
            a1     = i_a1,
            a2     = i_b1,
            a3     = -1,
            a      = alpha,
            b      = phi_alg1a,
            n      = 0,
            h      = 0,
            disth = disth)

  # alg2a, 2tetra, 2neigbs
  def process_2_neighbors(self, neighbors):
    ih = neighbors.ih
    i_a0 = neighbors.a0['iseq']
    rh = matrix.col(self.sites_cart[ih])
    r0 = matrix.col(self.sites_cart[i_a0])
    if self.use_ideal_bonds_angles:
      disth = neighbors.a0['dist_ideal']
    else:
      disth = (r0 - rh).length()
    # if H is second neighbor, get its index
    if (neighbors.number_h_neighbors == 1):
      i_h1 = neighbors.h1['iseq']
    else:
      i_h1 = None
    sumang, a, b, h, root = self.get_coefficients(ih = ih)
    # alg2a
    if (sumang > (2*math.pi + 0.05) and root < 0):
      self.unk_ideal_list.append(ih)
      return
    elif (sumang < (2*math.pi + 0.05) and (sumang > 2*math.pi - 0.05)):
      htype = 'flat_2neigbs'
    else:
      if (neighbors.number_h_neighbors == 1):
      # 2 tetragonal geometry
        htype = '2tetra'
        self.h_parameterization[i_h1] = riding_coefficients(
          ih     = i_h1,
          a0     = neighbors.a0['iseq'],
          a1     = neighbors.a1['iseq'],
          a2     = neighbors.a2['iseq'],
          a3     = -1,
          a      = a,
          b      = b,
          h      = -h,
          n      = 0,
          disth  = disth,
          htype  = '2tetra')
      else:
        # 2neigbs
        htype = '2neigbs'
    if (h is None):
      h = 0
    self.h_parameterization[ih] = riding_coefficients(
      htype = htype,
      ih    = ih,
      a0    = neighbors.a0['iseq'],
      a1    = neighbors.a1['iseq'],
      a2    = neighbors.a2['iseq'],
      a3    = -1,
      a     = a,
      b     = b,
      h     = h,
      n     = 0,
      disth = disth)

#-------------------------------------------------------------------------------

  def process_3_neighbors(self, neighbors):
    ih = neighbors.ih
    i_a0 = neighbors.a0['iseq']
    rh = matrix.col(self.sites_cart[ih])
    r0 = matrix.col(self.sites_cart[i_a0])
    if self.use_ideal_bonds_angles:
      disth = neighbors.a0['dist_ideal']
    else:
      disth = (r0 - rh).length()
    a, b, h = self.get_coefficients_alg3(ih = ih)
    self.h_parameterization[ih] = riding_coefficients(
      ih     = ih,
      a0     = neighbors.a0['iseq'],
      a1     = neighbors.a1['iseq'],
      a2     = neighbors.a2['iseq'],
      a3     = neighbors.a3['iseq'],
      a      = a,
      b      = b,
      h      = h,
      n      = 0,
      disth = disth,
      htype  = '3neigbs')

#-------------------------------------------------------------------------------

  def get_coefficients(self, ih):
    """
    This function determines parameters for three cases:
    1. planar geometry
    2. two tetragonal CH2 geometry
    3. H out of plane of its 3 neighbors (should be rare and not in AA)
    """
    neighbors = self.h_connectivity[ih]
    if (neighbors.number_h_neighbors == 1):
      i_h1 = neighbors.h1['iseq']
    else:
      i_h1 = None
    i_a0 = neighbors.a0['iseq']
    i_a1 = neighbors.a1['iseq']
    i_a2 = neighbors.a2['iseq']
    rh = matrix.col(self.sites_cart[ih])
    r0 = matrix.col(self.sites_cart[i_a0])
    r1 = matrix.col(self.sites_cart[i_a1])
    r2 = matrix.col(self.sites_cart[i_a2])
    self.check_if_atoms_superposed(rh, r0, ih, i_a0)
    self.check_if_atoms_superposed(r1, r0, i_a1, i_a0)
    self.check_if_atoms_superposed(r2, r0, i_a2, i_a0)
    uh0 = (rh - r0).normalize()
    u10 = (r1 - r0).normalize()
    u20 = (r2 - r0).normalize()
    if self.use_ideal_bonds_angles:
      alpha0 = math.radians(neighbors.a0['angle_a1a0a2'])
      alpha1 = math.radians(neighbors.a1['angle_ideal'])
      alpha2 = math.radians(neighbors.a2['angle_ideal'])
      c0, c1, c2 = math.cos(alpha0), math.cos(alpha1), math.cos(alpha2)
    else:
      alpha0 = (u10).angle(u20)
      alpha0 = math.acos(u10.dot(u20))
      alpha1 = (u10).angle(uh0)
      alpha2 = (uh0).angle(u20)
      c0 = (u10).dot(u20)
      c1 = (u10).dot(uh0)
      c2 = (uh0).dot(u20)
    sumang = alpha0 + alpha1 + alpha2
    denom = (1.0-c0**2)
    if(denom==0):
      self.broadcast_problem(ih = ih, i_a0 = i_a0)
      #raise RuntimeError(
      #  "Denominator zero: (1-c0*c0) in get_h_parameterization.")
    a = (c1-c0*c2)/(1-c0*c0)
    b = (c2-c0*c1)/(1-c0*c0)
    root = None
  #  # check if H, A0, A1, A2 are in a plane
    if (sumang < (2*math.pi + 0.05) and (sumang > 2*math.pi - 0.05)):
      h = None
    elif (sumang > (2*math.pi + 0.05) and 1-c1*c1-c2*c2-c0*c0+2*c0*c1*c2 < 0):
      root = 1-c1*c1-c2*c2-c0*c0+2*c0*c1*c2
      h = None
      return sumang, a, b, h, root
    else:
      # two tetragonal geometry: e.g. CH2 group
      if (i_h1 is not None):
        rh2 = matrix.col(self.sites_cart[neighbors.h1['iseq']])
        #print(i_h1, neighbors.h1['iseq'], i_a0)
        self.check_if_atoms_superposed(rh2, r0, neighbors.h1['iseq'], i_a0)
        uh02 = (rh2 - r0).normalize()
        if self.use_ideal_bonds_angles:
          h = math.radians(neighbors.h1['angle_ideal']) * 0.5
        else:
          h = (uh0).angle(uh02) * 0.5
        #test if vector v points to same 'side' as uh0
        if((u10.cross(u20)).dot(uh0) < 0):
          h =  -h
      else:
      # if H is out of plane, but not in tetrahedral geometry
        root = 1-c1*c1-c2*c2-c0*c0+2*c0*c1*c2
        if(root < 0):
          self.broadcast_problem(ih = ih, i_a0 = i_a0,
            msg='(Square root of zero in get_coefficients: H out of plane)')
        denom = math.sin(alpha0)
        if(denom==0):
          self.broadcast_problem(ih = ih, i_a0 = i_a0,
            msg='(Denominator zero in get_coefficients: H out of plane)')
        cz = (math.sqrt(1-c1*c1-c2*c2-c0*c0+2*c0*c1*c2))/math.sin(alpha0)
        h = cz
        #test if vector v points to same 'side' as uh0
        if((u10.cross(u20)).dot(uh0) < 0):
          h = -h
    return sumang, a, b, h, root

#-------------------------------------------------------------------------------

  def get_coefficients_alg3(self, ih):
    """
    Obtain coefficients for tetragonal H (such as HA) using Cramer's rule
    """
    neighbors = self.h_connectivity[ih]
    i_a0 = neighbors.a0['iseq']
    i_a1 = neighbors.a1['iseq']
    i_a2 = neighbors.a2['iseq']
    i_a3 = neighbors.a3['iseq']
    rh = matrix.col(self.sites_cart[ih])
    r0 = matrix.col(self.sites_cart[i_a0])
    r1 = matrix.col(self.sites_cart[i_a1])
    r2 = matrix.col(self.sites_cart[i_a2])
    r3 = matrix.col(self.sites_cart[i_a3])
    self.check_if_atoms_superposed(rh, r0, ih, i_a0)
    self.check_if_atoms_superposed(r1, r0, i_a1, i_a0)
    self.check_if_atoms_superposed(r2, r0, i_a2, i_a0)
    self.check_if_atoms_superposed(r3, r0, i_a3, i_a0)
    uh0 = (rh - r0).normalize()
    u10 = (r1 - r0).normalize()
    u20 = (r2 - r0).normalize()
    u30 = (r3 - r0).normalize()
    if self.use_ideal_bonds_angles:
      alpha0 = math.radians(neighbors.a1['angle_ideal'])
      alpha1 = math.radians(neighbors.a2['angle_ideal'])
      alpha2 = math.radians(neighbors.a3['angle_ideal'])
      c1, c2, c3 = math.cos(alpha0), math.cos(alpha1), math.cos(alpha2)
      omega0 = math.radians(neighbors.a0['angle_a1a0a2'])
      omega1 = math.radians(neighbors.a0['angle_a2a0a3'])
      omega2 = math.radians(neighbors.a0['angle_a3a0a1'])
      w12, w23, w13 = math.cos(omega0), math.cos(omega1), math.cos(omega2)
    else:
      c1 = (uh0).dot(u10)
      c2 = (uh0).dot(u20)
      c3 = (uh0).dot(u30)
      w12 = (u10).dot(u20)
      w23 = (u20).dot(u30)
      w13 = (u10).dot(u30)
    matrix_d = matrix.sqr([
      1,   w12, w13,
      w12, 1,   w23,
      w13, w23, 1   ])
    #
    matrix_x = matrix.sqr([
      c1, w12, w13,
      c2, 1,   w23,
      c3, w23, 1   ])
    #
    matrix_y = matrix.sqr([
      1,   c1,  w13,
      w12, c2,  w23,
      w13, c3,  1   ])
    #
    matrix_z = matrix.sqr([
      1,   w12,  c1,
      w12, 1,    c2,
      w13, w23,  c3 ])
    if(matrix_d.determinant()==0):
      self.broadcast_problem(ih = ih, i_a0 = i_a0)
      #raise RuntimeError(
      #  "Denominator zero: matrix_d in get_h_parameterization.")
    a = matrix_x.determinant()/matrix_d.determinant()
    b = matrix_y.determinant()/matrix_d.determinant()
    c = matrix_z.determinant()/matrix_d.determinant()
    return a, b, c

#-------------------------------------------------------------------------------

  def check_propeller_order(self, i_a0, i_a1, ih, i_h1, i_h2):
    rh = matrix.col(self.sites_cart[ih])
    rh_2 = matrix.col(self.sites_cart[i_h2])
    r0 = matrix.col(self.sites_cart[i_a0])
    r1 = matrix.col(self.sites_cart[i_a1])
    if (((rh-r0).cross(rh_2-r0)).dot(r1-r0) >= 0):
      return i_h1, i_h2
    else:
      return i_h2, i_h1

#-------------------------------------------------------------------------------

  def check_if_atoms_superposed(self,r1, r2, i1, i2):
    if abs((r1-r2).length()) < 0.001:
      sorry_str = '''Atoms %s and %s are superposed or very close.
Fix your model before proceeding.''' % (self.site_labels[i1], self.site_labels[i2])
      raise Sorry(sorry_str)

#-------------------------------------------------------------------------------

  def broadcast_problem(self, ih, i_a0, msg=None,):
    default_msg = '''Please double check atom %s, bound to %s
as well as nearest neighbors. The input geometry is most likely wrong.
Solution: Fix the geometry or delete the H atom.'''
    #if msg is not None:
    #  default_msg = default_msg + '\n' + msg
    raise Sorry(default_msg % (self.site_labels[ih], self.site_labels[i_a0]))


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/reduce_hydrogen.py
from __future__ import absolute_import, division, print_function
import six
import sys, time
from libtbx.utils import Sorry
import mmtbx.model
import iotbx.pdb
import boost_adaptbx.boost.python as bp
from libtbx.utils import null_out
from libtbx import group_args
from scitbx import matrix
from cctbx.array_family import flex
from mmtbx.ligands.ready_set_utils import add_n_terminal_hydrogens_to_residue_group
from cctbx.geometry_restraints.linking_class import linking_class
#
from cctbx.maptbx.box import shift_and_box_model

ext = bp.import_ext("cctbx_geometry_restraints_ext")
get_class = iotbx.pdb.common_residue_names_get_class

# ==============================================================================

def get_h_restraints(resname, strict=True):
  from mmtbx.monomer_library import cif_types
  from mmtbx.chemical_components import get_cif_dictionary
  from mmtbx.ligands.rdkit_utils import get_molecule_from_resname
  molecule = get_molecule_from_resname(resname)
  if molecule is None: return None
  cc_cif = get_cif_dictionary(resname)
  cc = cc_cif['_chem_comp'][0]
  hs = []
  hsi = []
  chem_comp = cif_types.chem_comp(
    id=cc.id,
    three_letter_code=cc.three_letter_code,
    name=cc.name,
    group=cc.type,
    number_atoms_all=0, #cc.number_atoms_all,
    number_atoms_nh=0, #cc.number_atoms_nh,
    desc_level=".")
  comp_comp_id = cif_types.comp_comp_id(source_info=None, chem_comp=chem_comp)
  lookup = {}
  for i, a in enumerate(cc_cif.get('_chem_comp_atom',[])):
    lookup[a.atom_id]=i
    lookup[i]=a.atom_id
    if a.type_symbol in ['H', 'D']:
      hs.append(a.atom_id)
      hsi.append(i)
    comp_comp_id.atom_list.append(cif_types.chem_comp_atom(
      atom_id=a.atom_id,
      type_symbol=a.type_symbol,
      # type_energy=a.type_energy,
      # partial_charge=a.partial_charge,
      ))
  conf =  molecule.GetConformer()
  from rdkit import Chem # needed import
  from rdkit.Chem import rdMolTransforms
  for b in cc_cif.get('_chem_comp_bond',[]):
    if strict:
      if (b.atom_id_1 not in hs and
          b.atom_id_2 not in hs): continue
    if ( b.atom_id_1 not in lookup or
         b.atom_id_2 not in lookup): continue
    atom_idx1=lookup[b.atom_id_1]
    atom_idx2=lookup[b.atom_id_2]
    bl = rdMolTransforms.GetBondLength(conf, atom_idx1, atom_idx2)
    comp_comp_id.bond_list.append(cif_types.chem_comp_bond(
      atom_id_1=b.atom_id_1,
      atom_id_2=b.atom_id_2,
      type=b.value_order,
      value_dist='%0.3f' % (bl*.9),
      value_dist_esd=".1"))

  from mmtbx.ligands.rdkit_utils import enumerate_angles
  for angle in enumerate_angles(molecule):
    if strict:
      if angle[0] in hsi or angle[2] in hsi:
        av = rdMolTransforms.GetAngleDeg(conf, angle[0], angle[1], angle[2])
      else: continue
    else:
      av = rdMolTransforms.GetAngleDeg(conf, angle[0], angle[1], angle[2])
    if ( angle[0] not in lookup or
         angle[2] not in lookup): continue
    comp_comp_id.angle_list.append(cif_types.chem_comp_angle(
      atom_id_1=lookup[angle[0]],
      atom_id_2=lookup[angle[1]],
      atom_id_3=lookup[angle[2]],
      value_angle='%0.1f' % av,
      value_angle_esd="1"))

  from mmtbx.ligands.rdkit_utils import enumerate_torsions
  for i, angle in enumerate(enumerate_torsions(molecule)):
    if strict:
      if angle[0] in hsi or angle[3] in hsi:
        av = rdMolTransforms.GetDihedralDeg(conf, angle[0], angle[1], angle[2], angle[3])
      else: continue
    else:
      av = rdMolTransforms.GetDihedralDeg(conf, angle[0], angle[1], angle[2], angle[3])
    if ( angle[0] not in lookup or
         angle[3] not in lookup): continue
    comp_comp_id.tor_list.append(cif_types.chem_comp_tor(
      id='Var_%03d' % i,
      atom_id_1=lookup[angle[0]],
      atom_id_2=lookup[angle[1]],
      atom_id_3=lookup[angle[2]],
      atom_id_4=lookup[angle[3]],
      value_angle='%0.1f' % av,
      value_angle_esd='1',
      period='1'))
  return comp_comp_id

# ==============================================================================

def mon_lib_query(residue, mon_lib_srv, construct_h_restraints=True):
  # if get_class(residue.resname) in ['common_rna_dna']:
  #   md = get_h_restraints(residue.resname)
  #   return md
  # if print_time: print(residue.resname, get_class(residue.resname))
  if residue.resname == 'UNL':
    return None
  md, ani = mon_lib_srv.get_comp_comp_id_and_atom_name_interpretation(
    residue_name=residue.resname,
    atom_names=residue.atoms().extract_name())
  cif_object=None
  # if md is None:
  #   md, ani = mon_lib_srv.get_comp_comp_id_and_atom_name_interpretation(
  #     residue_name='%s_EL' % residue.resname,
  #     atom_names=residue.atoms().extract_name(),
  #     ad_hoc_single_atom_residues=True)
  if md is None:
    md = get_h_restraints(residue.resname, strict=False)
    if md is None:
      raise Sorry('Entity "%s" not found in CCD (or GeoStd). Please supply restraints.' % residue.resname)
    from six.moves import cStringIO as StringIO
    input_string='data_comp_list\n'
    input_string+=str(md.chem_comp.as_cif_loop())
    f=StringIO()
    md.show(f=f)
    # use strip in case 3-letter code has only 2 letters (e.g. DI)
    input_string += '\ndata_comp_%s\n' % residue.resname.strip()
    input_string += '\n%s' % f.getvalue()
    cif_object = iotbx.cif.reader(input_string=input_string).model()
  return md, cif_object

# ==============================================================================

def get_reduce_pdb_interpretation_params(use_neutron_distances):
  '''
  Create pdb_interpretation parameter scope.
  Do this in a function so other programs (reduce2) can use the same parameters
  '''
  p = mmtbx.model.manager.get_default_pdb_interpretation_params()
  p.pdb_interpretation.restraints_library.cdl=False # XXX this triggers a bug !=360
  p.pdb_interpretation.clash_guard.nonbonded_distance_threshold=None
  p.pdb_interpretation.disable_uc_volume_vs_n_atoms_check=True
  p.pdb_interpretation.use_neutron_distances = use_neutron_distances
  p.pdb_interpretation.proceed_with_excessive_length_bonds=True
  p.pdb_interpretation.allow_polymer_cross_special_position=True
  #p.pdb_interpretation.automatic_linking.link_metals = True
  p.pdb_interpretation.automatic_linking.link_residues = True
  p.pdb_interpretation.automatic_linking.exclude_hydrogens_from_bonding_decisions = True
  #
  return p

# ==============================================================================

class place_hydrogens():
  '''
  Add H atoms to a model

  Parameters
  ----------
  use_neutron_distances : bool
    use neutron distances instead of X-ray

  adp_scale : float
    scale factor for isotropic B of H atoms.
    B(H-atom) = adp_scale * B(parent non-H atom)

  keep_existing_H : bool
    keep existing H atoms in model, only place missing H
  '''

# ------------------------------------------------------------------------------

  def __init__(self,
               model,
               use_neutron_distances = False,
               n_terminal_charge     = 'residue_one',
               adp_scale             = 1,
               exclude_water         = True,
               stop_for_unknowns     = False,
               keep_existing_H       = False,
               validate_e            = False,
               print_time            = False):

    self.model                 = model
    self.use_neutron_distances = use_neutron_distances
    self.n_terminal_charge     = n_terminal_charge
    self.adp_scale             = adp_scale
    self.exclude_water         = exclude_water
    self.stop_for_unknowns     = stop_for_unknowns
    self.keep_existing_H       = keep_existing_H
    self.validate_e            = validate_e
    self.print_time            = print_time
    #
    self.no_H_placed_mlq        = list()
    self.site_labels_disulfides = list()
    self.site_labels_no_para    = list()
    #self.charged_atoms          = list()
    self.sl_removed             = list()
    self.n_H_initial            = 0
    self.n_H_final              = 0

    if self.print_time:
      self.time_rebox_model        = None
      self.time_remove_element_X   = None
      self.time_add_missing_H      = None
      self.time_terminal_propeller = None
      self.time_make_grm           = None
      self.time_remove_isolated    = None
      self.time_riding_manager     = None
      self.time_remove_H_nopara    = None
      self.time_reset              = None
      self.time_idealize           = None
      self.time_remove_H_on_links  = None

# ------------------------------------------------------------------------------

  def run(self):
    '''
    Function that places H atoms
    '''

    # Create symmetry if necessary
    # ------------------------------
    model_has_bogus_cs = False
    t0 = time.time()
    cs = self.model.crystal_symmetry()
    if (cs is None) or (cs.unit_cell() is None):
      self.model = shift_and_box_model(model = self.model)
      model_has_bogus_cs = True
      #self.model.add_crystal_symmetry_if_necessary() # this is slower than shift_and_box_model!!!!
    self.time_rebox_model = round(time.time()-t0, 2)


    # Don't stop if model contains element X atoms
    # This needs more discussion before being made final
    # ---------------------------------------------
    t0 = time.time()
    if ' X' in self.model.get_hierarchy().atoms().extract_element():
      self.model = self.model.select(~self.model.selection('element X'))
    self.time_remove_element_X = round(time.time()-t0, 2)


    # Remove existing H if requested
    # ------------------------------
    self.model.get_xray_structure()
    self.n_H_initial = self.model.get_hd_selection().count(True)
    if not self.keep_existing_H:
      self.model = self.model.select(~self.model.get_hd_selection())

    # Add missing H atoms and place them at bogus position
    # ----------------------------------------------------
    t0 = time.time()
    pdb_hierarchy = self.add_missing_H_atoms_at_bogus_position()
    self.time_add_missing_H = round(time.time()-t0, 2)
    # DEBUG
    #print(pdb_hierarchy.composition().n_hd)
    #f = open("intermediate1.pdb","w")
    #f.write(self.model.model_as_pdb())

    # Place N-terminal propeller hydrogens
    # TODO double check N-terminal position for PRO residues
    # ------------------------------------
    if self.n_terminal_charge in ['residue_one', 'first_in_chain']:
      t0 = time.time()
      self.place_n_terminal_propeller(pdb_hierarchy = pdb_hierarchy)
      self.time_terminal_propeller = round(time.time()-t0, 2)

    pdb_hierarchy.sort_atoms_in_place()
    pdb_hierarchy.atoms().reset_serial()

    # DEBUG
    #f = open("intermediate2.pdb","w")
    #f.write(self.model.model_as_pdb())

    # Make new model obj and get restraints manager
    # ---------------------------------------------
    p = get_reduce_pdb_interpretation_params(self.use_neutron_distances)
    ro = self.model.get_restraint_objects()
    t0 = time.time()
    self.model = mmtbx.model.manager(
      model_input       = None,
      pdb_hierarchy     = pdb_hierarchy,
      stop_for_unknowns = self.stop_for_unknowns,
      crystal_symmetry  = self.model.crystal_symmetry(),
      restraint_objects = ro,
      log               = null_out())
    self.model.process(pdb_interpretation_params=p,
                       make_restraints=True)
    #self.model.idealize_h_minimization()
    #STOP()
    self.time_make_grm = round(time.time()-t0, 2)

    #f = open("intermediate3.pdb","w")
    #f.write(self.model.model_as_pdb())

    # Return if no H have been placed
    sel_h = self.model.get_hd_selection()
    if sel_h.count(True) == 0: return

    # Remove isolated H atoms
    # -----------------------
    # (when heavy atom is missing, H needs not to be placed)
    t0 = time.time()
    sel_isolated = self.model.isolated_atoms_selection()
    sel_lone_H = sel_h & sel_isolated
    # As h_parameterization will not include these, they can be removed in the
    # next step; for book-keeping it is useful to keep track of lone H as a
    # selection
    #if not sel_lone_H.all_eq(False):
    #  self.model = self.model.select(~sel_lone_H)
    self.time_remove_isolated = round(time.time()-t0, 2)

    sel_h = self.model.get_hd_selection()

    # Setup riding H manager
    # ----------------------
    t0 = time.time()
    self.model.setup_riding_h_manager(use_ideal_dihedral = True)
    riding_h_manager = self.model.riding_h_manager
    if riding_h_manager is None:
      return
    self.time_riding_manager = round(time.time()-t0, 2)

    # Remove H that could not be parameterized
    # ----------------------------------------
    t0 = time.time()
    sel_h_in_para = flex.bool(
      [bool(x) for x in riding_h_manager.h_parameterization])
    sel_h_not_in_para = sel_h_in_para.exclusive_or(sel_h)
    # no need to display lone H atoms in the log, so remove from labels
    sel_h_not_in_para_but_not_lone = sel_h_not_in_para.exclusive_or(sel_lone_H)
    self.site_labels_no_para = [atom.id_str().replace('pdb=','').replace('"','')
      for atom in self.model.get_hierarchy().atoms().select(sel_h_not_in_para_but_not_lone)]
    if not sel_h_not_in_para.all_eq(False):
      self.model = self.model.select(~sel_h_not_in_para)
    self.time_remove_H_nopara = round(time.time()-t0, 2)

  #  f = open("intermediate4.pdb","w")
  #  f.write(model.model_as_pdb())

# to be removed; was for curiosity only
#    if self.validate_e:
#      t0 = time.time()
#      self.validate_electrons()
#      if self.print_time:
#        print("validate electrons:", round(time.time()-t0, 2))

    # Reset occupancies, ADPs and idealize H atom positions
    # -----------------------------------------------------
    t0 = time.time()
    self.model.reset_adp_for_hydrogens(scale = self.adp_scale)
    self.model.reset_occupancy_for_hydrogens_simple()
    self.time_reset = round(time.time()-t0, 2)
    t0 = time.time()
    self.model.idealize_h_riding()
    self.time_idealize = round(time.time()-t0, 2)

    # Remove H atoms that are involved in links (bonds, metal coordination, etc)
    # --------------------------------------------------------------------------
    t0 = time.time()
    self.exclude_H_on_links()
    self.time_remove_H_on_links = round(time.time()-t0, 2)


    # TODO: this should be ideally done *after* reduce optimization
    if not self.exclude_water:
      self.model.add_hydrogens(1., occupancy=0.)

    self.n_H_final = self.model.get_hd_selection().count(True)

    if self.print_time:
      self.print_times()

  # ----------------------------------------------------------------------------

  def place_n_terminal_propeller(self, pdb_hierarchy):
    '''
    Place NH3 at residue #1 or at first residue in chain
    Changes hierarchy in place
    '''
    for m in pdb_hierarchy.models():
      for chain in m.chains():
        rgs = chain.residue_groups()[0]
        # by default, place NH3 only at residue with resseq 1
        if (self.n_terminal_charge == 'residue_one' and rgs.resseq_as_int() != 1):
          continue
        elif (self.n_terminal_charge == 'first_in_chain'):
          pass
        for ag in rgs.atom_groups():
          #if ag.resname == 'AYA': return
          if (get_class(name=ag.resname) in
              ['common_amino_acid', 'modified_amino_acid', 'd_amino_acid']):
            if ag.get_atom('H'):
              ag.remove_atom(ag.get_atom('H'))
          # TODO make the function below smart, so it
          # 1) knows when to add H1H2H3 or not
          # 2) renames H to H1 (so no need to remove it beforehand)
          rc = add_n_terminal_hydrogens_to_residue_group(rgs) # rc is always empty list?

  # ----------------------------------------------------------------------------

  def add_missing_H_atoms_at_bogus_position(self):
    '''
    Add missing H atoms at bogus positions to the pdb_hierarchy

    This procedure changes the hierarchy in place.
    All H atoms are placed at center of coordinates + (0.5, 0.5, 0.5)
    The translation is necessary because sometimes the center of coordinates
    coincides with the position of a heavy atom.

    In one residue/entity, all newly placed H are superposed, they will be
    moved to their expected position later.
    '''
    # TODO temporary fix until v3 names are in mon lib
    alternative_names = [
      ('HA1', 'HA2', 'HA3'),
      ('HB1', 'HB2', 'HB3'),
      ('HG1', 'HG2', 'HG3'),
      ('HD1', 'HD2', 'HD3'),
      ('HE1', 'HE2', 'HE3'),
      ('HG11', 'HG12', 'HG13')
      ]
    # end TODO
    pdb_hierarchy = self.model.get_hierarchy()
    mon_lib_srv = self.model.get_mon_lib_srv()
    #XXX This breaks for 1jxt, residue 2, TYR
    for m in pdb_hierarchy.models():
      for chain in m.chains():
        for rg in chain.residue_groups():
          n_atom_groups = len(rg.atom_groups())
          for ag in rg.atom_groups():
            if n_atom_groups > 2 and ag.altloc == '':
              continue
            #print list(ag.atoms().extract_name())
            if(get_class(name=ag.resname) == "common_water"): continue
            actual = [a.name.strip().upper() for a in ag.atoms()]
            #
            mlq, cif_object = mon_lib_query(residue=ag, mon_lib_srv=mon_lib_srv)
            if mlq is None:
              self.no_H_placed_mlq.append(ag.resname)
              continue

            if cif_object:
              ro = self.model.get_restraint_objects()
              if ro is None: ro=[]
              ro.append(('auto_%s' % ag.resname, cif_object))
              self.model.set_restraint_objects(ro)

            expected_h = []
            #expected_ha = []
            atom_dict = mlq.atom_dict()
            def _remove_atoms(atom_dict, names):
              remove=[]
              for k,v in atom_dict.items():
                if k in names:
                  remove.append(k)
              if remove:
                for r in remove:
                  del atom_dict[r]
              return atom_dict
            #
            # don't add polymer H atoms. Terminal H atoms added elsewhere
            #
            if mlq.test_for_peptide(atom_dict):
              atom_dict = _remove_atoms(atom_dict, ['H2', 'HXT'])
            elif mlq.test_for_rna_dna(atom_dict):
              atom_dict = _remove_atoms(atom_dict, ["HO3'", 'HO3*'])
            for k, v in six.iteritems(atom_dict):
              if(v.type_symbol=="H"):
                expected_h.append(k)
              #else:
              #  expected_ha.append(k)
            #print('expected H', expected_h)
            #
            # TODO start
            # temporary fix until v3 names are in mon lib
            if (get_class(name=ag.resname) in
                ['common_amino_acid', 'modified_amino_acid', 'd_amino_acid']):
              for altname in alternative_names:
                if (altname[0] in expected_h and altname[1] in expected_h):
                  if (atom_dict[altname[0]].type_energy == 'HCH2' and
                      atom_dict[altname[1]].type_energy == 'HCH2'):
                    expected_h.append(altname[2])
                    expected_h.remove(altname[0])
                    #print('renamed %s to %s' % (altname[0], altname[2]))
            # TODO end
            missing_h = list(set(expected_h).difference(set(actual)))
            if 0: print(ag.resname, missing_h)
            #new_xyz = ag.atoms().extract_xyz().mean()
            new_xyz = flex.double(ag.atoms().extract_xyz().mean()) + \
              flex.double([0.5,0.5,0.5])
            new_xyz = tuple(new_xyz)

            hetero = ag.atoms()[0].hetero
            segid = ag.atoms()[0].segid

            for mh in missing_h:
              if len(mh) < 4: mh = (' ' + mh).ljust(4)
              a = (iotbx.pdb.hierarchy.atom()
                .set_name(new_name=mh)
                .set_element(new_element="H")
                .set_xyz(new_xyz=new_xyz)
                .set_hetero(new_hetero=hetero)
                .set_segid(new_segid=segid))

              ag.append_atom(a)

    return pdb_hierarchy

# ------------------------------------------------------------------------------
#
#  def validate_electrons(self):
#    from elbow.quantum import electrons
#    atom_valences = electrons.electron_distribution(
#      self.model.get_hierarchy(), # needs to be altloc free
#      self.model.get_restraints_manager().geometry,
#      verbose=False,
#    )
#    atom_valences.validate(ignore_water=True, raise_if_error=False)
#    self.charged_atoms = atom_valences.get_charged_atoms()

# ------------------------------------------------------------------------------

  def exclude_H_on_links(self, verbose=False):
    """Remove H atoms bound to heavy atoms that form a link

    An exception are HD1 and HE2 of HIS. The mover functionality in reduce will
    take care of those.

    TODO: Could restraints manager have a list of links with relevant information?
          Then we don't have to loop through all proxies here.
    """
    from mmtbx.ligands.chemistry import get_valences
    origin_ids = linking_class()
    grm = self.model.get_restraints_manager()
    bond_proxies_simple, asu = grm.geometry.get_all_bond_proxies(
      sites_cart = self.model.get_sites_cart())
    atoms = self.model.get_atoms()
    elements = self.model.get_hierarchy().atoms().extract_element()
    exclusion_iseqs = list()
    exclusion_dict = dict()
    all_proxies = [p for p in bond_proxies_simple]
    for proxy in asu:
      all_proxies.append(proxy)
    # Loop through bond proxies to find links (i.e. proxies with origin_id != 0)
    for proxy in all_proxies:
      if(  isinstance(proxy, ext.bond_simple_proxy)): i,j=proxy.i_seqs
      elif(isinstance(proxy, ext.bond_asu_proxy)):    i,j=proxy.i_seq,proxy.j_seq
      else: assert 0 # never goes here
      if proxy.origin_id != 0:
        exclusion_iseqs.extend([i,j])
        exclusion_dict[i] = proxy.origin_id
        exclusion_dict[j] = proxy.origin_id
    sel_remove = flex.size_t()

    # Find H atoms bound to linked atoms
    removed_dict = {}
    parent_dict = {}
    bonds = {}
    bond_lengths = {}
    for proxy in all_proxies:
      if(  isinstance(proxy, ext.bond_simple_proxy)): i,j=proxy.i_seqs
      elif(isinstance(proxy, ext.bond_asu_proxy)):    i,j=proxy.i_seq,proxy.j_seq
      else: assert 0 # never goes here
      bonds.setdefault(i,[])
      bonds[i].append(j)
      bonds.setdefault(j,[])
      bonds[j].append(i)
      # Exception for HIS HD1 and HE2
      if (atoms[i].parent().resname == 'HIS' and
        atoms[i].name.strip() in ['HD1','DD1', 'HE2', 'DE2']): continue
      if (atoms[j].parent().resname == 'HIS' and
        atoms[j].name.strip() in ['HD1','DD1', 'HE2', 'DE2']): continue
      if(elements[i] in ["H","D"] and j in exclusion_iseqs):
        if i not in sel_remove:
          sel_remove.append(i)
          bond_lengths[i] = proxy.distance_ideal
          removed_dict[i] = exclusion_dict[j]
          parent_dict[i]=j
      if(elements[j] in ["H","D"] and i in exclusion_iseqs):
        if j not in sel_remove:
          sel_remove.append(j)
          bond_lengths[j] = proxy.distance_ideal
          removed_dict[j] = exclusion_dict[i]
          parent_dict[j]=i
    # remove H atoms NOT to remove - double negative!
    #verbose=True
    if verbose:
      print('removed_dict',removed_dict)
      for i_seq in sel_remove:
        print('remove?',atoms[i_seq].quote())
    remove_from_sel_remove=[]
    for ii, i_seq in reversed(list(enumerate(sel_remove))):
      j_seq=parent_dict[i_seq]
      # need to add the use of atomic charge
      valences=get_valences(elements[j_seq])
      number_of_bonds=len(bonds[j_seq])
      if number_of_bonds in valences:
        # remove this H from delection
        remove_from_sel_remove.append(i_seq) # ??
        del removed_dict[i_seq]
      else:
        bonds[j_seq].remove(i_seq)
        bonds[i_seq].remove(j_seq)

    #print(remove_from_sel_remove)
    fsc0=grm.geometry.shell_sym_tables[0].full_simple_connectivity()
    fsc1=grm.geometry.shell_sym_tables[1].full_simple_connectivity()
    #fsc2=grm.geometry.shell_sym_tables[2].full_simple_connectivity()
    for _i in remove_from_sel_remove:
      #print(list(fsc0[_i]))
      parent = fsc0[_i][0]
      #print('origin_id', exclusion_dict[parent], origin_ids.get_origin_key(exclusion_dict[parent]))
      first_neighbors = fsc1[_i]
      fn_filtered = [item for item in first_neighbors if item not in sel_remove]
      #print(list(first_neighbors), list(sel_remove), fn_filtered )
      # now improve geometry of the H being kept
      # TODO make sure all atoms are in same conformer
      # TODO check that neighbor atoms are all non H
      # TODO what about two tetrahedral geometry?
      if len(fn_filtered) == 3:
        #print('tetrahedral geometry')
        coord1 = matrix.col(atoms[fn_filtered[0]].xyz)
        coord2 = matrix.col(atoms[fn_filtered[1]].xyz)
        coord3 = matrix.col(atoms[fn_filtered[2]].xyz)
        coordp = matrix.col(atoms[parent].xyz)
        orth = (coord2-coord1).cross(coord3-coord1).normalize()
        vol = orth.dot(coordp-coord1)
        if vol > 0: orth = -orth
        atoms[_i].xyz = coordp - orth*bond_lengths[_i]
      if len(fn_filtered) == 2:
        #print('flat geometry')
        coord1 = matrix.col(atoms[fn_filtered[0]].xyz)
        coord2 = matrix.col(atoms[fn_filtered[1]].xyz)
        coordp = matrix.col(atoms[parent].xyz)
        half = ((coord1 - coordp).normalize() + (coord2 - coordp).normalize())
        atoms[_i].xyz = coordp-half.normalize()*bond_lengths[_i]

    if remove_from_sel_remove:
      sel_remove=list(sel_remove)
      for r in remove_from_sel_remove:
        sel_remove.remove(r)
        if verbose: print('keep',atoms[r].quote())
      sel_remove=flex.size_t(sel_remove)
    #
    sl_removed = [(atom.id_str().replace('pdb=','').replace('"',''),
                   origin_ids.get_origin_key(removed_dict[atom.i_seq]))
        for atom in self.model.get_hierarchy().atoms().select(sel_remove)]
    #
    if sel_remove:
      self.model = self.model.select(~flex.bool(self.model.size(), sel_remove))
    self.sl_removed = sl_removed
    self.exclusion_iseqs = exclusion_iseqs


# ------------------------------------------------------------------------------

  def show(self, log):
    '''
    Informative output
    '''
    if log is None: log = sys.stdout
    #
    if (not self.keep_existing_H and self.n_H_initial):
      msg = 'Number of hydrogen atoms trimmed from input model: %s \n'
      print(msg % self.n_H_initial, file=log)
    #
    msg = 'Number of hydrogen atoms added to the input model: %s \n'
    print(msg % self.n_H_final, file=log)
    #
    if self.no_H_placed_mlq:
      msg = '''
No H atoms were placed on the following residues because no restraints
were found:'''
      print(msg, file=log)
      for resname in self.no_H_placed_mlq:
        print(resname, file=log)
    #
    if self.site_labels_disulfides:
      msg = '''
The following cysteine HG atoms were not placed because the sulfur atom is
involved in a disulfide bond'''
      print(msg, file=log)
      for label in self.site_labels_disulfides:
        print(label, file=log)
    #
    if self.site_labels_no_para:
      msg = '''
The following H atoms were not placed because they could not be parameterized
(not enough restraints information)'''
      print(msg, file=log)
      for label in self.site_labels_no_para:
        print(label, file=log)
#    if self.charged_atoms:
#      msg = '''
#The following heavy atom have an unusual electron count. This could be because
#heavy atoms or H atoms are missing.'''
#      print(msg, file=log)
#      for item in self.charged_atoms:
#        idstr = item[0].id_str().replace('pdb=','').replace('"','')
#        if 'HOH' in idstr: continue
#        print(idstr, item[1])

    if self.sl_removed:
      print()
      msg = '''Atom %s was not placed because it is involved in %s'''
      for item in self.sl_removed:
        print(msg % (item[0], item[1]), file=log)

# ------------------------------------------------------------------------------

  def get_model(self):
    return self.model

# ------------------------------------------------------------------------------

  def get_counts(self):
    return group_args(
      number_h_final  = self.n_H_final,
      no_H_placed_mlq = self.no_H_placed_mlq,
      site_labels_disulfides = self.site_labels_disulfides,
      site_labels_no_para = self.site_labels_no_para)

# ------------------------------------------------------------------------------

  def get_times(self):
    return group_args(
      time_rebox_model        = self.time_rebox_model,
      time_remove_element_X   = self.time_remove_element_X,
      time_add_missing_H      = self.time_add_missing_H,
      time_terminal_propeller = self.time_terminal_propeller,
      time_make_grm           = self.time_make_grm,
      time_remove_isolated    = self.time_remove_isolated,
      time_riding_manager     = self.time_riding_manager,
      time_remove_H_nopara    = self.time_remove_H_nopara,
      time_reset              = self.time_reset,
      time_idealize           = self.time_idealize,
      time_remove_H_on_links  = self.time_remove_H_on_links)

# ------------------------------------------------------------------------------

  def print_times(self):
    print('Detailed timings:')
    print("Rebox model:", self.time_rebox_model)
    print('Remove element X:', self.time_remove_element_X)
    print("Add missing H at bogus position:", self.time_add_missing_H)
    print('Add N-terminal propeller:', self.time_terminal_propeller)
    print("Get new model obj and grm:", self.time_make_grm )
    print("Remove isolated H:", self.time_remove_isolated)
    print("Setup Riding manager:", self.time_riding_manager)
    print("Remove H that were not parameterized:", self.time_remove_H_nopara)
    print("Reset adp, occ:", self.time_reset)
    print("idealize H positions:", self.time_idealize)
    print("Remove H on links:", self.time_remove_H_on_links)
    print()

# ==============================================================================

## stub for reduce parameters
## TODO can be parameters or phil, depending on how many options are really needed
#reduce_master_params_str = """
#flip_NQH = True
#  .type = bool
#  .help = add H and rotate and flip NQH groups
#search_time_limit = 600
#  .type = int
#  .help = max seconds to spend in exhaustive search (default=600)
#"""
#
#def optimize(model):
#  """
#  Carry out reduce optimization
#
#  Parameters
#  ----------
#  model
#      mmtbx model object that contains H atoms
#      H atoms should be at approprite distances
#
#  Returns
#  -------
#  model
#      mmtbx model object with optimized H atoms
#  """
#  # hierarchy object --> has hierarchy of structure
#  pdb_hierarchy = model.get_hierarchy()
#  # geometry restraints manager --> info about ideal bonds, angles; what atoms are bonded, etc.
#  grm = model.get_restraints_manager()
#
#  print("Reduce optimization happens here")
#
#  return model


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/riding.py
from __future__ import absolute_import, division, print_function
from libtbx import group_args
from scitbx import matrix
from cctbx.array_family import flex
from scitbx_array_family_flex_ext import reindexing_array
from mmtbx.hydrogens import connectivity
from mmtbx.hydrogens import parameterization
from mmtbx_hydrogens_ext import *

class manager(object):
  def __init__(self,
      pdb_hierarchy,
      geometry_restraints,
      use_ideal_bonds_angles = True,
      process_manager        = True,
      use_ideal_dihedral = False,
      ignore_h_with_dof  = False):
    self.pdb_hierarchy = pdb_hierarchy
    self.geometry_restraints = geometry_restraints
    self.use_ideal_bonds_angles = use_ideal_bonds_angles
    self.ignore_h_with_dof = ignore_h_with_dof
    #
    self.hd_selection = self.pdb_hierarchy.atom_selection_cache().\
      selection("element H or element D")
    self.not_hd_selection = ~self.hd_selection
    self.h_parameterization = []
    self.parameterization_cpp = []
    if process_manager is True:
      connectivity_manager = connectivity.determine_connectivity(
        pdb_hierarchy       = self.pdb_hierarchy,
        geometry_restraints = geometry_restraints)
      h_connectivity = connectivity_manager.h_connectivity
      diagnostics_connectivity = connectivity_manager.get_diagnostics()
      parameterization_manager = parameterization.manager(
        h_connectivity         = h_connectivity,
        sites_cart             = self.pdb_hierarchy.atoms().extract_xyz(),
        use_ideal_bonds_angles = use_ideal_bonds_angles,
        site_labels         = [atom.id_str().replace('pdb=','').replace('"','')
                                  for atom in pdb_hierarchy.atoms()],
        use_ideal_dihedral = use_ideal_dihedral,
        ignore_h_with_dof  = self.ignore_h_with_dof)
      self.h_parameterization = parameterization_manager.h_parameterization
      self.parameterization_cpp = self.get_parameterization_cpp(
        h_parameterization = self.h_parameterization)

  def copy_h_parameterization(self, h_parameterization):
    new_h_parameterization = []
    for rc in h_parameterization:
      if rc is not None:
        rc_copy = riding_coefficients(rc)
        new_h_parameterization.append(rc_copy)
      else:
        new_h_parameterization.append(None)
    return new_h_parameterization

  def update(self, pdb_hierarchy, geometry_restraints, n_new_atoms):
    new_h_parameterization = self.copy_h_parameterization(
      h_parameterization = self.h_parameterization)
    new_h_parameterization + [None]*n_new_atoms
    new_manager = manager(
      pdb_hierarchy = pdb_hierarchy,
      geometry_restraints = geometry_restraints,
      use_ideal_bonds_angles = self.use_ideal_bonds_angles,
      process_manager = False)
    new_manager.h_parameterization = new_h_parameterization
    new_manager.parameterization_cpp = \
      self.get_parameterization_cpp(h_parameterization = new_h_parameterization)
    return new_manager

  def deep_copy(self):
    size = self.pdb_hierarchy.atoms_size()
    return self.select(selection=flex.bool(size, True))

  def select(self, selection):
    h_parameterization = self.copy_h_parameterization(self.h_parameterization)
    new_manager = manager(
      pdb_hierarchy = self.pdb_hierarchy.deep_copy(),
      geometry_restraints = self.geometry_restraints,
      use_ideal_bonds_angles = self.use_ideal_bonds_angles,
      process_manager = False)
    # Properties from current manager
    n_atoms = new_manager.pdb_hierarchy.atoms_size()
    iselection_original = new_manager.pdb_hierarchy.atoms().extract_i_seq()
    # Properties for the new (selected) manager
    #new_hierachy = new_manager.pdb_hierarchy.deep_copy()
    new_hierachy = new_manager.pdb_hierarchy.select(selection)
    #new_hierachy.select(selection)

    new_geometry_restraints = new_manager.geometry_restraints.select(selection)
    pdb_atoms = new_hierachy.atoms()
    pdb_atoms.reset_i_seq()
    hd_selection_new = new_hierachy.atom_selection_cache().\
          selection("element H or element D")
    new_manager.pdb_hierarchy = new_hierachy

    new_manager.hd_selection = hd_selection_new
    new_manager.not_hd_selection = ~hd_selection_new
    new_manager.geometry_restraints = new_geometry_restraints
    if selection.count(True) == n_atoms:
      new_h_parameterization = h_parameterization
    else:
      new_h_parameterization = self.reindex_h_parameterization(
        selection           = selection,
        iselection_original = iselection_original,
        n_atoms             = n_atoms,
        h_para              = h_parameterization)
    new_manager.h_parameterization = new_h_parameterization
    new_manager.parameterization_cpp = \
      self.get_parameterization_cpp(h_parameterization = new_h_parameterization)
    return new_manager

  def reindex_h_parameterization(
      self, selection, iselection_original, n_atoms, h_para):
    iselection = selection.iselection().as_int()
    r_a = list(reindexing_array(n_atoms, iselection))
    reindexing_dict = {}
    for index, i_seq in enumerate(iselection_original):
      reindexing_dict[iselection_original[index]] = r_a[index]
    # Change h_parameterization (contains i_seq --> have to be updated)
    new_h_parameterization = []
    for index, rc in enumerate(h_para):
      key = iselection_original[index]
      # No entry for non-selected atoms (H or non-H)
      if reindexing_dict[key] == n_atoms: continue
      # Non-H atoms (if included in selection) have entry None
      if rc is None:
        new_h_parameterization.append(None)
        continue
      # For other entries: 2 possibilities
      # a) update all i_seqs according to reindexing dictionary
      # b) if any neighbors of H is not in selection --> change this
      #    entry to None (because if neighbor is missing, H cannot be built)
      if reindexing_dict[rc.ih] != n_atoms:
        rc.ih = reindexing_dict[rc.ih]
      else:
        new_h_parameterization.append(None)
        continue
      if reindexing_dict[rc.a0] != n_atoms:
        rc.a0 = reindexing_dict[rc.a0]
      else:
        new_h_parameterization.append(None)
        continue
      if reindexing_dict[rc.a1] != n_atoms:
        rc.a1 = reindexing_dict[rc.a1]
      else:
        new_h_parameterization.append(None)
        continue
      if reindexing_dict[rc.a2] != n_atoms:
        rc.a2 = reindexing_dict[rc.a2]
      else:
        new_h_parameterization.append(None)
        continue
      # a3 only exists for htype "3neigbs"
      if rc.a3 != -1:
        if reindexing_dict[rc.a3] != n_atoms:
          rc.a3 = reindexing_dict[rc.a3]
        else:
          new_h_parameterization.append(None)
          continue
      new_h_parameterization.append(rc)
    return new_h_parameterization

  def get_parameterization_cpp(self, h_parameterization):
    parameterization_cpp = []
    for hp in h_parameterization:
      if (hp is not None):
        parameterization_cpp.append(hp)
    return parameterization_cpp

  def refinable_parameters_init(self):
    return flex.double(self.n_parameters(), 0)

  def n_parameters(self):
    return self.not_hd_selection.count(True)*3

  def idealize_riding_h_positions(self,
               sites_cart = None,
               pdb_hierarchy = None,
               xray_structure = None,
               selection_bool = None):
    assert [sites_cart, pdb_hierarchy, xray_structure].count(None) in [2,3]
    # prevent idealization if refinement flag for xyz is False
    if selection_bool:
      para_cpp = list()
      for p in self.parameterization_cpp:
        if selection_bool[p.ih]:
          para_cpp.append(p)
      self.parameterization_cpp = para_cpp
    #
    if(xray_structure is not None):
      sites_cart = xray_structure.sites_cart()
      apply_new_H_positions(
        sites_cart = sites_cart,
        parameterization = self.parameterization_cpp)
      xray_structure.set_sites_cart(sites_cart)
    elif(pdb_hierarchy is not None):
      sites_cart = pdb_hierarchy.atoms().extract_xyz()
      apply_new_H_positions(
        sites_cart = sites_cart,
        parameterization = self.parameterization_cpp)
      pdb_hierarchy.atoms().set_xyz(sites_cart)
    elif(sites_cart is not None):
      apply_new_H_positions(
        sites_cart = sites_cart,
        parameterization = self.parameterization_cpp)
    else:
      sites_cart = self.pdb_hierarchy.atoms().extract_xyz()
      apply_new_H_positions(
        sites_cart = sites_cart,
        parameterization = self.parameterization_cpp)
      self.pdb_hierarchy.atoms().set_xyz(sites_cart)

  def gradients_reduced_cpp(self, gradients, sites_cart, hd_selection):
    new_gradients = modify_gradients_cpp(
      gradients         = gradients,
      sites_cart        = sites_cart,
      parameterization  = self.parameterization_cpp)
    new_gradients = new_gradients.select(~hd_selection)
    return new_gradients

  def print_parameterization_info(self, log):
    list_h = []
    for rc in self.parameterization_cpp:
      ih = rc.ih
      list_h.append(ih)
    atoms = self.pdb_hierarchy.atoms()

    all_H_model = \
      list(self.pdb_hierarchy.select(self.hd_selection).atoms().extract_i_seq())
    unk_list = [x for x in all_H_model if x not in list_h]

    if unk_list:
      number = len(unk_list)
      m = """  The following atoms are not used in the riding H procedure. This typically
  happens when
  - A neighboring atom (H or non H) is missing.
  - Restraints involving the H atom are incomplete (this occurs most likely when
    custom restraints are supplied).
  - An H atom has less than 3 non-H covalently bound partners.
  It is not worrysome if a few atoms are listed here; but it is always helpful
  to check the environment of these H atoms, as it might hint to missing atoms
  or restraints.\n"""
      print(m, file=log)
      print('  Number of H atoms not used in the riding H procedure: ', \
        number, '\n', file=log)
      for ih in unk_list:
        atom = atoms[ih]
        labels = atom.fetch_labels()
        if (labels.resname in ['DOD', 'WAT', 'HOH']):
          continue
        print('\t', atom.id_str(), file=log)

  def diagnostics(self, sites_cart, threshold):
    h_distances = {}
    long_distance_list, list_h, type_list = [], [], []
    for rc in self.parameterization_cpp:
      ih = rc.ih
      list_h.append(ih)
      rh = matrix.col(sites_cart[ih])
      rh_calc = matrix.col(compute_h_position(
        riding_coefficients = rc,
        sites_cart          = sites_cart))
      # add safeguard? What if no coordinates?
      h_distance = (rh_calc - rh).length()
      h_distances[ih] = h_distance
      type_list.append(rc.htype)
      if (h_distance > threshold):
        long_distance_list.append(ih)

    return group_args(
      h_distances          = h_distances,
      long_distance_list   = long_distance_list,
      type_list            = type_list)



 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/specialised_hydrogen_atoms.py
from __future__ import absolute_import, division, print_function
from scitbx.math import dihedral_angle
from mmtbx.ligands.ready_set_basics import construct_xyz
from mmtbx.ligands.ready_set_basics import generate_atom_group_atom_names
from mmtbx.ligands.ready_set_basics import get_proton_info
from mmtbx.ligands.hierarchy_utils import new_atom_with_inheritance
from mmtbx.ligands.hierarchy_utils import add_hydrogens_to_atom_group_using_bad

from cctbx.geometry_restraints.linking_class import linking_class
origin_ids = linking_class()

def _generate_bonds_with_origin_ids_in_list(bond_proxies, specific_origin_ids=None):
  assert specific_origin_ids
  for specific_origin_id in specific_origin_ids:
    for p in bond_proxies.get_proxies_with_origin_id(specific_origin_id):
      yield p

def add_side_chain_acid_hydrogens_to_atom_group(atom_group,
                                                anchors=None,
                                                configuration_index=0,
                                                bond_length=0.95,
                                                element='H',
                                                ):
  """Add hydrogen atoms to side-chain acid in place

  Args:
      atom_group (TYPE): Atom group
      anchors (None, optional): Atoms that specify the acids moeity
      configuration_index (int, optional): Configuration to return

  """
  assert element in ['H', 'D']
  c, o1, o2 = anchors
  if configuration_index>=2:
    tmp = o1.name
    o1.name = o2.name
    o2.name = tmp
    tmp = o1
    o1 = o2
    o2 = tmp
    configuration_index=configuration_index%2
  if o2.name==' OD2':
    name = ' HD2'
    atom = atom_group.get_atom('CB')
  elif o2.name==' OE2':
    name = ' HE2'
    atom = atom_group.get_atom('CG')
  else: assert 0
  if element=='D': name = name.replace('H', 'D')
  dihedral = dihedral_angle(sites=[atom.xyz,
                                   c.xyz,
                                   o1.xyz,
                                   o2.xyz,
                                 ],
                            deg=True)
  ro2 = construct_xyz(o2, bond_length,
                      c, 120.,
                      o1, dihedral,
                      period=2,
                     )
  i = configuration_index
  atom = atom_group.get_atom(name.strip())
  if atom:
    pass #atom.xyz = ro2[i]
  else:
    atom = new_atom_with_inheritance(name, element, ro2[i], o2)
    atom_group.append_atom(atom)

def add_side_chain_acid_hydrogens_to_residue_group(residue_group,
                                                   configuration_index=0,
                                                   element='H',
                                                   ):
  """Adds hydrogen atoms to side-chain acid.

  Args:
      residue_group (TYPE): Specific residue group
  """
  def _get_atom_names(residue_group):
    assert len(residue_group.atom_groups())==1
    atom_group = residue_group.atom_groups()[0]
    lookup = {'ASP' : ['CG', 'OD1', 'OD2'],
              'GLU' : ['CD', 'OE1', 'OE2'],
    }
    return lookup.get(atom_group.resname, [])
  #
  if element=='H': bond_length=0.95
  elif element=='D': bond_length=1.00
  else: assert 0
  atoms = _get_atom_names(residue_group)
  for atom_group, atoms in generate_atom_group_atom_names(residue_group,
                                                          atoms,
                                                          ):
    if atom_group is None: continue
    tmp = add_side_chain_acid_hydrogens_to_atom_group(
      atom_group,
      # append_to_end_of_model=append_to_end_of_model,
      anchors = atoms,
      configuration_index=configuration_index,
      bond_length=bond_length,
      element=element,
    )

def add_side_chain_acid_hydrogens(hierarchy,
                                  configuration_index=0,
                                  element='H',
                                  ):
  """Add hydrogen atoms to every side-chain acid (ASP and GLU). Not very
  useful as adding to a single residue group (below) would be more prectical.

  Args:
      hierarchy (TYPE): Model hierarchy
      configuration_index (int, optional): Defaults to zero. Determines which
        of the four configurations the added hydrogen will be:
          0 - Current Ox2 gets Hx2 (x=D,E) pointing out
          1 - Current Ox2 gets Hx2 (x=D,E) pointing in
          2 - Current Ox1 gets swapped with Ox2, gets Hx2 (x=D,E) pointing out
          3 - Current Ox1 gets swapped with Ox2, gets Hx2 (x=D,E) pointing in
  """
  for residue_group in hierarchy.residue_groups():
    for atom_group in residue_group.atom_groups():
      if atom_group.resname in ['ASP', 'GLU']:
        add_side_chain_acid_hydrogens_to_residue_group(
          residue_group,
          configuration_index=configuration_index,
          element=element,
          )

#
# isolated CYS need HG
#
def add_cys_hg_to_atom_group(atom_group,
                             append_to_end_of_model=False,
                             element='H',
                             ):
  """Adds hydrogen to CYS

  Args:
      atom_group (TYPE): atom_group in hirarchy
      append_to_end_of_model (bool, optional): Some programs like the additional
        atoms added at end of PDB

  Returns:
      TYPE: New chains, if any
  """
  assert element in ['H', 'D']
  rc = add_hydrogens_to_atom_group_using_bad(
    atom_group,
    ' HG '.replace('H', element),
    element,
    'SG',
    'CB',
    'CA',
    1.2,
    120.,
    160.,
    append_to_end_of_model=append_to_end_of_model,
   )
  return rc

def add_cys_hg_to_residue_group(residue_group,
                                append_to_end_of_model=False,
                                element='H',
                               ):
  rc=[]
  for atom_group in residue_group.atom_groups():
    if atom_group.resname not in ['CYS']: continue
    rc += add_cys_hg_to_atom_group(
      atom_group,
      append_to_end_of_model=append_to_end_of_model,
      element=element,
    )
  return rc

def conditional_add_cys_hg_to_atom_group(geometry_restraints_manager,
                                         residue_group,
                                         element='H',
                                         append_to_end_of_model=False,
                                         ):
  """Adds HG atom to CYS if no disulfur bridge

  Args:
      geometry_restraints_manager (TYPE): GRM
      residue_group (TYPE): CYS residue group
  """
  # could be more general to include other disulphide amino acids
  resnames = []
  for atom_group in residue_group.atom_groups():
    resnames.append(atom_group.resname)
  if 'CYS' not in resnames: return None
  sgs = []
  for atom in residue_group.atoms():
    if atom.name.strip()=='SG' and atom.parent().resname=='CYS':
      sgs.append(atom.i_seq)
  assert len(sgs) in [0, 1]
  sg_bonds = []
  if sgs:
    specific_origin_ids = [origin_ids.get_origin_id('SS BOND'),
                           origin_ids.get_origin_id('metal coordination'),
                           origin_ids.get_origin_id('Misc. bond'),
      ]
    for bond in geometry_restraints_manager.get_all_bond_proxies():
      if not hasattr(bond, 'get_proxies_with_origin_id'): continue
      for p in _generate_bonds_with_origin_ids_in_list(bond, specific_origin_ids):
        assert p.origin_id in specific_origin_ids
        if sgs[0] in p.i_seqs:
          sg_bonds.append(p.i_seqs)
  rc = []
  if len(sg_bonds)==0:
    rc += add_cys_hg_to_residue_group(residue_group,
                                      element=element,
                                      append_to_end_of_model=append_to_end_of_model,
                                      )
  return rc

def add_disulfur_hydrogen_atoms(geometry_restraints_manager,
                                hierarchy,
                                element='H',
                                ):
  """Example of usage

  """
  for residue_group in hierarchy.residue_groups():
    resnames=[]
    for atom_group in residue_group.atom_groups():
      resnames.append(atom_group.resname)
    if 'CYS' in resnames:
      rc = conditional_add_cys_hg_to_atom_group(geometry_restraints_manager,
                                                residue_group,
                                                element=element,
                                                )

def remove_cys_hg_from_residue_group(rg):
  proton_element, proton_name = get_proton_info(rg)
  for ag in rg.atom_groups():
    if ag.resname not in ['CYS']: continue
    for atom in ag.atoms():
      if atom.name==' %sG ' % proton_element:
        ag.remove_atom(atom)
        break

def generate_bonded_i_seqs(geometry_restraints_manager, rg, j_seq):
  def _not_j_seq(j_seq, i_seqs):
    i_seqs.remove(j_seq)
    return i_seqs[0]
  bonds = []
  for bond in geometry_restraints_manager.pair_proxies().bond_proxies.simple:
    if j_seq in bond.i_seqs:
      bonds.append(_not_j_seq(j_seq, list(bond.i_seqs)))
  for bond in geometry_restraints_manager.pair_proxies().bond_proxies.asu:
    if j_seq in [bond.i_seq, bond.j_seq]:
      bonds.append(_not_j_seq(j_seq, [bond.i_seq, bond.j_seq]))
  return bonds

def conditional_remove_cys_hg_to_atom_group(geometry_restraints_manager,
                                            rg,
                                            ):
  sgs = None
  for atom in rg.atoms():
    if atom.name.strip()=='SG' and atom.parent().resname=='CYS':
      sgs = atom.i_seq
      break
  if sgs:
    sg_bonds = generate_bonded_i_seqs(geometry_restraints_manager, rg, sgs)
    if len(sg_bonds)>2:
      remove_cys_hg_from_residue_group(rg)

def process_disulphide_hydrogen_atoms(geometry_restraints_manager,
                                      residue_group,
                                      element='H',
                                      append_to_end_of_model=False,
                                      ):
  rc = conditional_add_cys_hg_to_atom_group(geometry_restraints_manager,
                                            residue_group,
                                            element=element,
                                            append_to_end_of_model=append_to_end_of_model)
  assert not rc, '%s' % rc
  conditional_remove_cys_hg_to_atom_group(geometry_restraints_manager,
                                          residue_group)
  return rc


 *******************************************************************************


 *******************************************************************************
mmtbx/hydrogens/tst.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb
from mmtbx import hydrogens
from mmtbx import monomer_library
import mmtbx.restraints
from cctbx.array_family import flex
import time
from libtbx.utils import null_out

m1_str = """\
CRYST1    9.756    9.585    9.568  90.00  90.00  90.00 P 1
ATOM      1  N   SER H   7       4.184   4.600   6.227  1.00 10.00           N
ATOM      2  CA  SER H   7       4.535   3.950   4.970  1.00 10.00           C
ATOM      3  C   SER H   7       6.049   3.863   4.811  1.00 10.00           C
ATOM      4  O   SER H   7       6.790   4.650   5.400  1.00 10.00           O
ATOM      5  CB  SER H   7       3.931   4.713   3.791  1.00 10.00           C
ATOM      6  OG  SER H   7       4.412   6.045   3.745  1.00 10.00           O
ATOM      8  HA  SER H   7       4.176   3.049   4.965  1.00 10.00           H
ATOM      9  HB2 SER H   7       4.173   4.263   2.966  1.00 10.00           H
ATOM     10  HB3 SER H   7       2.966   4.730   3.887  1.00 10.00           H
ATOM     11  HG  SER H   7       4.200   6.456   4.459  1.00 10.00           H
"""

m2_str = """\
CRYST1    9.756    9.585    9.568  90.00  90.00  90.00 P 1
ATOM      1  N   SER H   7       4.184   4.600   6.227  1.00 10.00           N
ATOM      2  CA  SER H   7       4.535   3.950   4.970  1.00 10.00           C
ATOM      3  C   SER H   7       6.049   3.863   4.811  1.00 10.00           C
ATOM      4  O   SER H   7       6.790   4.650   5.400  1.00 10.00           O
ATOM      5  CB  SER H   7       3.931   4.713   3.791  1.00 10.00           C
ATOM      6  OG  SER H   7       4.412   6.045   3.745  1.00 10.00           O
ATOM      8  HA  SER H   7       4.176   3.049   4.965  1.00 10.00           H
ATOM      9  HB2 SER H   7       4.173   4.263   2.966  1.00 10.00           H
ATOM     10  HB3 SER H   7       2.966   4.730   3.887  1.00 10.00           H
ATOM     11  HG ASER H   7       4.200   6.456   4.459  0.50 10.00           H
ATOM     11  DG BSER H   7       4.200   6.456   4.459  0.50 10.00           D
"""

m3_str = """
CRYST1    9.756    9.585    9.568  90.00  90.00  90.00 P 1
ATOM      1  N   SER H   7       4.184   4.600   6.227  1.00 10.00           N
ATOM      2  CA  SER H   7       4.535   3.950   4.970  1.00 10.00           C
ATOM      3  C   SER H   7       6.049   3.863   4.811  1.00 10.00           C
ATOM      4  O   SER H   7       6.790   4.650   5.400  1.00 10.00           O
ATOM      5  CB  SER H   7       3.931   4.713   3.791  1.00 10.00           C
ATOM      6  OG ASER H   7       4.412   6.045   3.745  0.50 10.00           O
ATOM      6  OG BSER H   7       2.515   4.664   3.823  0.50 10.00           O
ATOM      0  HA  SER H   7       4.173   3.050   4.984  1.00 10.00           H
ATOM      0  HG ASER H   7       4.483   6.348   4.536  0.50 10.00           H
ATOM      0  HG BSER H   7       2.253   4.558   4.625  0.50 10.00           H
"""

m4_str = """
CRYST1    8.942    9.538    9.274  90.00  90.00  90.00 P 1
ATOM      1  N   THR H  21       6.000   3.103   5.518  1.00 10.00           N
ATOM      2  CA  THR H  21       5.114   4.258   5.439  1.00 10.00           C
ATOM      3  C   THR H  21       3.895   4.074   6.337  1.00 10.00           C
ATOM      4  O   THR H  21       3.236   3.035   6.301  1.00 10.00           O
ATOM      5  CB  THR H  21       4.646   4.511   3.992  1.00 10.00           C
ATOM      6  OG1 THR H  21       5.786   4.660   3.137  1.00 10.00           O
ATOM      7  CG2 THR H  21       3.792   5.769   3.916  1.00 10.00           C
ATOM      8  H1  THR H  21       6.394   2.977   4.730  1.00 10.00           H
ATOM      9  H2  THR H  21       6.620   3.247   6.140  1.00 10.00           H
ATOM     10  H3  THR H  21       5.527   2.380   5.733  1.00 10.00           H
ATOM      8 DG21 THR H  21       3.708   6.055   2.993  1.00 10.00           D
ATOM      9 DG22 THR H  21       2.906   5.595   4.272  1.00 10.00           D
ATOM     10 DG23 THR H  21       4.205   6.482   4.429  1.00 10.00           D
"""

m5_str = """
CRYST1   19.756   19.585   19.568  90.00  90.00  90.00 P 1
ATOM      1  N   SER H   1       7.561   4.409   2.370  1.00 10.00           N
ATOM      2  CA  SER H   1       6.281   4.192   3.051  1.00 10.00           C
ATOM      3  C   SER H   1       6.112   3.781   4.520  1.00 10.00           C
ATOM      4  O   SER H   1       6.620   2.744   4.947  1.00 10.00           O
ATOM      5  CB  SER H   1       5.067   3.972   2.131  1.00 10.00           C
ATOM      6  HA  SER H   1       6.473   3.250   2.923  1.00 10.00           H
ATOM      7  OG ASER H   1       3.884   3.774   2.885  0.50 10.00           O
ATOM      8  HG ASER H   1       3.729   4.456   3.369  0.50 10.00           H
ATOM      9  OG BSER H   1       5.247   2.836   1.302  0.50 10.00           O
ATOM     10  HG BSER H   1       5.189   2.125   1.764  0.50 10.00           H
ATOM     11  N   THR H   2       5.397   4.602   5.281  1.00 10.00           N
ATOM     12  CA  THR H   2       5.161   4.328   6.694  1.00 10.00           C
ATOM     13  C   THR H   2       3.963   3.404   6.887  1.00 10.00           C
ATOM     14  O   THR H   2       4.113   2.257   7.310  1.00 10.00           O
ATOM     15  CB  THR H   2       4.938   5.627   7.495  1.00 10.00           C
ATOM     16  OG1 THR H   2       4.686   5.308   8.869  1.00 10.00           O
ATOM     17  CG2 THR H   2       3.757   6.410   6.935  1.00 10.00           C
ATOM     18 DG21 THR H   2       3.891   6.587   5.991  1.00 10.00           D
ATOM     19 DG22 THR H   2       2.937   5.904   7.048  1.00 10.00           D
ATOM     20 DG23 THR H   2       3.670   7.255   7.403  1.00 10.00           D
"""

m6_str = """
CRYST1    4.870   17.281   23.045  90.00  90.00  90.00 P 21 21 21
ATOM      1  N   PHE A   1       2.305   1.496  17.812  1.00  1.22           N
ATOM      2  CA  PHE A   1       1.374   2.648  17.647  1.00  1.07           C
ATOM      3  C   PHE A   1       2.067   3.806  16.938  1.00  1.09           C
ATOM      4  O   PHE A   1       3.294   3.909  16.951  1.00  1.16           O
ATOM      5  CB  PHE A   1       0.850   3.108  19.009  1.00  1.41           C
ATOM      6  CG  PHE A   1       1.930   3.539  19.961  1.00  1.13           C
ATOM      7  CD1 PHE A   1       2.323   4.866  20.029  1.00  1.42           C
ATOM      8  CD2 PHE A   1       2.552   2.618  20.787  1.00  1.48           C
ATOM      9  CE1 PHE A   1       3.316   5.265  20.903  1.00  1.70           C
ATOM     10  CE2 PHE A   1       3.546   3.011  21.663  1.00  1.44           C
ATOM     11  CZ  PHE A   1       3.928   4.336  21.721  1.00  1.76           C
ATOM     12  H1  PHE A   1       2.118   1.070  18.571  1.00  1.40           H
ATOM     13  H2  PHE A   1       2.210   0.937  17.126  1.00  1.40           H
ATOM     14  H3  PHE A   1       3.143   1.794  17.838  1.00  1.40           H
ATOM     15  HA  PHE A   1       0.616   2.372  17.108  1.00  1.25           H
ATOM     16  HB2 PHE A   1       0.254   3.862  18.877  1.00  1.49           H
ATOM     17  HB3 PHE A   1       0.367   2.375  19.422  1.00  1.49           H
ATOM     18  HD1 PHE A   1       1.914   5.495  19.480  1.00  1.59           H
ATOM     19  HD2 PHE A   1       2.298   1.724  20.752  1.00  1.70           H
ATOM     20  HE1 PHE A   1       3.572   6.158  20.941  1.00  1.89           H
ATOM     21  HE2 PHE A   1       3.956   2.384  22.213  1.00  1.75           H
ATOM     22  HZ  PHE A   1       4.597   4.603  22.310  1.00  1.98           H
ATOM     23  N   PHE A   2      -0.321   5.485  15.641  1.00  1.12           N
ATOM     24  CA  PHE A   2       0.601   6.613  15.605  1.00  1.21           C
ATOM     25  C   PHE A   2      -0.083   7.886  16.091  1.00  1.63           C
ATOM     26  O   PHE A   2      -1.310   7.980  16.107  1.00  1.87           O
ATOM     27  CB  PHE A   2       1.137   6.817  14.186  1.00  1.37           C
ATOM     28  CG  PHE A   2       0.066   7.076  13.165  1.00  1.31           C
ATOM     29  CD1 PHE A   2      -0.313   8.371  12.851  1.00  1.43           C
ATOM     30  CD2 PHE A   2      -0.561   6.025  12.517  1.00  1.58           C
ATOM     31  CE1 PHE A   2      -1.297   8.612  11.912  1.00  1.85           C
ATOM     32  CE2 PHE A   2      -1.546   6.259  11.577  1.00  1.91           C
ATOM     33  CZ  PHE A   2      -1.914   7.555  11.274  1.00  1.83           C
ATOM     34  OXT PHE A   2       0.576   8.850  16.480  1.00  1.73           O
ATOM     35  H   PHE A   2       0.025   4.742  15.380  1.00  1.22           H
ATOM     36  HA  PHE A   2       1.353   6.430  16.190  1.00  1.44           H
ATOM     37  HB2 PHE A   2       1.738   7.579  14.186  1.00  1.52           H
ATOM     38  HB3 PHE A   2       1.618   6.019  13.916  1.00  1.52           H
ATOM     39  HD1 PHE A   2       0.100   9.087  13.278  1.00  1.62           H
ATOM     40  HD2 PHE A   2      -0.316   5.150  12.718  1.00  1.67           H
ATOM     41  HE1 PHE A   2      -1.544   9.485  11.709  1.00  2.06           H
ATOM     42  HE2 PHE A   2      -1.960   5.545  11.149  1.00  2.14           H
ATOM     43  HZ  PHE A   2      -2.577   7.715  10.642  1.00  2.02           H
"""

m7_str = """
CRYST1    4.870   17.281   23.045  90.00  90.00  90.00 P 21 21 21
ATOM     45  O   MOH B   1       4.618   8.936  19.345  1.00  1.81           O
ATOM     44  C   MOH B   1       5.441   7.889  19.813  1.00  2.23           C
ATOM     46  H1  MOH B   1       5.160   7.047  19.406  1.00  2.30           H
ATOM     47  H2  MOH B   1       6.369   8.073  19.573  1.00  2.30           H
ATOM     48  H3  MOH B   1       5.363   7.822  20.784  1.00  2.30           H
ATOM     49  HO  MOH B   1       4.367   9.444  20.029  1.00  2.16           H
"""

m8_str = """
CRYST1   59.186   87.431   46.405  90.00  90.00  90.00 P 21 21 2
ATOM   2815  N   ASP B  25      16.862 -16.381 -24.728  1.00 13.97           N
ATOM   2816  CA  ASP B  25      16.773 -16.667 -23.301  1.00 15.05           C
ATOM   2817  DA  ASP B  25      16.336 -15.824 -22.767  1.00 14.51           D
ATOM   2818  CB  ASP B  25      15.862 -17.877 -23.090  1.00 15.17           C
ATOM   2819  DB2 ASP B  25      14.945 -17.731 -23.662  1.00 14.33           D
ATOM   2820  CG  ASP B  25      15.482 -18.081 -21.642  1.00 14.41           C
ATOM   2821  OD2 ASP B  25      16.126 -17.476 -20.764  1.00 14.08           O
ATOM   2822  OD1 ASP B  25      14.530 -18.848 -21.383  1.00 15.02           O
ATOM   2823  C   ASP B  25      18.154 -16.938 -22.706  1.00 14.49           C
ATOM   2824  O   ASP B  25      18.682 -18.044 -22.810  1.00 14.50           O
ATOM   2828  HN BASP B  25      17.321 -17.116 -25.265  1.00 15.02           H
ATOM   2829  HB1BASP B  25      16.379 -18.773 -23.430  1.00 14.52           H
ATOM   2830  DD2BASP B  25      15.766 -17.709 -19.919  1.00 14.05           D
END
"""

m9_str = """
CRYST1   26.468   33.148   34.654  90.00  90.00  90.00 P 1
ATOM     99  N   THR C  12       9.083  21.642  26.327  1.00 20.97           N
ATOM    100  CA  THR C  12       9.725  22.948  26.407  1.00 21.31           C
ATOM    101  CB  THR C  12      11.241  22.810  26.634  1.00 20.73           C
ATOM    102  OG1 THR C  12      11.823  22.052  25.565  1.00 23.32           O
ATOM    103  CG2 THR C  12      11.523  22.114  27.957  1.00 21.87           C
ATOM    104  C   THR C  12       9.495  23.750  25.125  1.00 20.19           C
ATOM    105  O   THR C  12      10.403  23.870  24.304  1.00 21.54           O
ATOM      0  HA  THR C  12       9.361  23.440  27.158  1.00 21.31           H
ATOM      0  HB  THR C  12      11.645  23.691  26.660  1.00 20.73           H
ATOM      0  HG1 THR C  12      11.728  22.460  24.837  1.00 23.32           H
ATOM      0 HG21 THR C  12      12.480  22.046  28.098  1.00 21.87           H
ATOM      0 HG22 THR C  12      11.132  22.619  28.687  1.00 21.87           H
ATOM      0 HG23 THR C  12      11.141  21.222  27.951  1.00 21.87           H
TER
END
"""

m10_str = """
CRYST1   26.468   33.148   34.654  90.00  90.00  90.00 P 1
ATOM    106  N   ILE C  13       8.293  24.298  24.942  1.00 20.53           N
ATOM    107  CA  ILE C  13       7.196  24.182  25.901  1.00 21.71           C
ATOM    108  CB  ILE C  13       7.277  25.278  26.988  1.00 21.47           C
ATOM    109  CG1 ILE C  13       6.236  25.036  28.086  1.00 20.24           C
ATOM    110  CG2 ILE C  13       7.086  26.658  26.373  1.00 20.55           C
ATOM    111  CD1 ILE C  13       6.447  23.754  28.867  1.00 20.37           C
ATOM    112  C   ILE C  13       5.861  24.302  25.175  1.00 21.07           C
ATOM    113  O   ILE C  13       5.000  23.429  25.290  1.00 22.22           O
ATOM      0  H   ILE C  13       8.085  24.758  24.246  1.00 20.53           H
ATOM      0  HA  ILE C  13       7.213  23.314  26.329  1.00 21.71           H
ATOM      0  HB  ILE C  13       8.158  25.248  27.392  1.00 21.47           H
ATOM      0 HG12 ILE C  13       6.276  25.772  28.716  1.00 20.24           H
ATOM      0 HG13 ILE C  13       5.354  24.998  27.686  1.00 20.24           H
ATOM      0 HG21 ILE C  13       7.378  27.329  27.009  1.00 20.55           H
ATOM      0 HG22 ILE C  13       7.615  26.720  25.562  1.00 20.55           H
ATOM      0 HG23 ILE C  13       6.147  26.787  26.165  1.00 20.55           H
ATOM      0 HD11 ILE C  13       5.881  23.770  29.654  1.00 20.37           H
ATOM      0 HD12 ILE C  13       6.211  22.998  28.306  1.00 20.37           H
ATOM      0 HD13 ILE C  13       7.378  23.695  29.131  1.00 20.37           H
TER
END
"""

m11_str = """
CRYST1   26.468   33.148   34.654  90.00  90.00  90.00 P 1
ATOM     99  N   THR C  12       9.083  21.642  26.327  1.00 20.97           N
ATOM    100  CA  THR C  12       9.725  22.948  26.407  1.00 21.31           C
ATOM    101  CB  THR C  12      11.241  22.810  26.634  1.00 20.73           C
ATOM    102  OG1 THR C  12      11.823  22.052  25.565  1.00 23.32           O
ATOM    103  CG2 THR C  12      11.523  22.114  27.957  1.00 21.87           C
ATOM    104  C   THR C  12       9.495  23.750  25.125  1.00 20.19           C
ATOM    105  O   THR C  12      10.403  23.870  24.304  1.00 21.54           O
ATOM      0  HA  THR C  12       9.361  23.440  27.158  1.00 21.31           H
ATOM      0  HB  THR C  12      11.645  23.691  26.660  1.00 20.73           H
ATOM      0  HG1 THR C  12      11.728  22.460  24.837  1.00 23.32           H
ATOM      0 HG21 THR C  12      12.480  22.046  28.098  1.00 21.87           H
ATOM      0 HG22 THR C  12      11.132  22.619  28.687  1.00 21.87           H
ATOM      0 HG23 THR C  12      11.141  21.222  27.951  1.00 21.87           H
ATOM    106  N   ILE C  13       8.293  24.298  24.942  1.00 20.53           N
ATOM    107  CA  ILE C  13       7.196  24.182  25.901  1.00 21.71           C
ATOM    108  CB  ILE C  13       7.277  25.278  26.988  1.00 21.47           C
ATOM    109  CG1 ILE C  13       6.236  25.036  28.086  1.00 20.24           C
ATOM    110  CG2 ILE C  13       7.086  26.658  26.373  1.00 20.55           C
ATOM    111  CD1 ILE C  13       6.447  23.754  28.867  1.00 20.37           C
ATOM    112  C   ILE C  13       5.861  24.302  25.175  1.00 21.07           C
ATOM    113  O   ILE C  13       5.000  23.429  25.290  1.00 22.22           O
ATOM      0  H   ILE C  13       8.085  24.758  24.246  1.00 20.53           H
ATOM      0  HA  ILE C  13       7.213  23.314  26.329  1.00 21.71           H
ATOM      0  HB  ILE C  13       8.158  25.248  27.392  1.00 21.47           H
ATOM      0 HG12 ILE C  13       6.276  25.772  28.716  1.00 20.24           H
ATOM      0 HG13 ILE C  13       5.354  24.998  27.686  1.00 20.24           H
ATOM      0 HG21 ILE C  13       7.378  27.329  27.009  1.00 20.55           H
ATOM      0 HG22 ILE C  13       7.615  26.720  25.562  1.00 20.55           H
ATOM      0 HG23 ILE C  13       6.147  26.787  26.165  1.00 20.55           H
ATOM      0 HD11 ILE C  13       5.881  23.770  29.654  1.00 20.37           H
ATOM      0 HD12 ILE C  13       6.211  22.998  28.306  1.00 20.37           H
ATOM      0 HD13 ILE C  13       7.378  23.695  29.131  1.00 20.37           H
TER
END
"""

m12_str = """\
CRYST1    9.756    9.585    9.568  90.00  90.00  90.00 P 1
ATOM     10  HB3 SER H   7       2.966   4.730   3.887  1.00 10.00           H
ATOM      1  N   SER H   7       4.184   4.600   6.227  1.00 10.00           N
ATOM      6  OG  SER H   7       4.412   6.045   3.745  1.00 10.00           O
ATOM      3  C   SER H   7       6.049   3.863   4.811  1.00 10.00           C
ATOM      5  CB  SER H   7       3.931   4.713   3.791  1.00 10.00           C
ATOM      8  HA  SER H   7       4.176   3.049   4.965  1.00 10.00           H
ATOM      4  O   SER H   7       6.790   4.650   5.400  1.00 10.00           O
ATOM      9  HB2 SER H   7       4.173   4.263   2.966  1.00 10.00           H
ATOM      2  CA  SER H   7       4.535   3.950   4.970  1.00 10.00           C
ATOM     11  HG  SER H   7       4.200   6.456   4.459  1.00 10.00           H
"""

m13_str = """
CRYST1   19.756   19.585   19.568  90.00  90.00  90.00 P 1
ATOM      8  HG ASER H   7       3.729   4.456   3.369  0.50 10.00           H
ATOM      4  O   SER H   7       6.620   2.744   4.947  1.00 10.00           O
ATOM      5  CB  SER H   7       5.067   3.972   2.131  1.00 10.00           C
ATOM      6  HA  SER H   7       6.473   3.250   2.923  1.00 10.00           H
ATOM      2  CA  SER H   7       6.281   4.192   3.051  1.00 10.00           C
ATOM      7  OG ASER H   7       3.884   3.774   2.885  0.50 10.00           O
ATOM      1  N   SER H   7       7.561   4.409   2.370  1.00 10.00           N
ATOM      9  OG BSER H   7       5.247   2.836   1.302  0.50 10.00           O
ATOM     10  HG BSER H   7       5.189   2.125   1.764  0.50 10.00           H
ATOM      3  C   SER H   7       6.112   3.781   4.520  1.00 10.00           C
ATOM     19 DG22 THR H   8       2.937   5.904   7.048  1.00 10.00           D
ATOM     11  N   THR H   8       5.397   4.602   5.281  1.00 10.00           N
ATOM     16  OG1 THR H   8       4.686   5.308   8.869  1.00 10.00           O
ATOM     13  C   THR H   8       3.963   3.404   6.887  1.00 10.00           C
ATOM     15  CB  THR H   8       4.938   5.627   7.495  1.00 10.00           C
ATOM     17  CG2 THR H   8       3.757   6.410   6.935  1.00 10.00           C
ATOM     14  O   THR H   8       4.113   2.257   7.310  1.00 10.00           O
ATOM     18 DG21 THR H   8       3.891   6.587   5.991  1.00 10.00           D
ATOM     12  CA  THR H   8       5.161   4.328   6.694  1.00 10.00           C
ATOM     20 DG23 THR H   8       3.670   7.255   7.403  1.00 10.00           D
"""

m14_str = """
CRYST1   13.051   13.521   12.472  90.00  90.00  90.00 P 1
HETATM  875  C1  IPA A 117       5.585   5.769   5.650  1.00 56.50           C
HETATM  876  C2  IPA A 117       6.580   6.709   6.074  1.00 57.10           C
HETATM  877  C3  IPA A 117       5.961   7.904   6.698  1.00 57.31           C
HETATM  878  O2  IPA A 117       7.451   6.016   6.974  1.00 57.41           O
HETATM    0  HO2 IPA A 117       8.051   6.539   7.243  1.00 57.41           H
HETATM    0  H33 IPA A 117       5.379   8.340   6.056  1.00 57.31           H
HETATM    0  H32 IPA A 117       5.443   7.633   7.472  1.00 57.31           H
HETATM    0  H31 IPA A 117       6.656   8.521   6.975  1.00 57.31           H
HETATM    0  H2  IPA A 117       7.085   7.045   5.317  1.00 57.10           H
HETATM    0  H13 IPA A 117       5.064   5.482   6.416  1.00 56.50           H
HETATM    0  H12 IPA A 117       5.000   6.188   5.000  1.00 56.50           H
HETATM    0  H11 IPA A 117       6.017   5.000   5.247  1.00 56.50           H
TER
END
"""

m5_str_HD_rotated = """
CRYST1   19.756   19.585   19.568  90.00  90.00  90.00 P 1
ATOM      1  N   SER H   7       7.561   4.409   2.370  1.00 10.00           N
ATOM      2  CA  SER H   7       6.281   4.192   3.051  1.00 10.00           C
ATOM      3  C   SER H   7       6.112   3.781   4.520  1.00 10.00           C
ATOM      4  O   SER H   7       6.620   2.744   4.947  1.00 10.00           O
ATOM      5  CB  SER H   7       5.067   3.972   2.131  1.00 10.00           C
ATOM      6  HA  SER H   7       6.473   3.250   2.923  1.00 10.00           H
ATOM      7  OG ASER H   7       3.884   3.774   2.885  0.50 10.00           O
ATOM      8  HG ASER H   7       3.210   4.055   2.449  0.50 10.00           H
ATOM      9  OG BSER H   7       5.247   2.836   1.302  0.50 10.00           O
ATOM     10  HG BSER H   7       5.379   3.079   0.498  0.50 10.00           H
ATOM     11  N   THR H   8       5.397   4.602   5.281  1.00 10.00           N
ATOM     12  CA  THR H   8       5.161   4.328   6.694  1.00 10.00           C
ATOM     13  C   THR H   8       3.963   3.404   6.887  1.00 10.00           C
ATOM     14  O   THR H   8       4.113   2.257   7.310  1.00 10.00           O
ATOM     15  CB  THR H   8       4.938   5.627   7.495  1.00 10.00           C
ATOM     16  OG1 THR H   8       4.686   5.308   8.869  1.00 10.00           O
ATOM     17  CG2 THR H   8       3.757   6.410   6.935  1.00 10.00           C
ATOM     18 DG21 THR H   8       3.078   5.801   6.606  1.00 10.00           D
ATOM     19 DG22 THR H   8       3.370   6.971   7.626  1.00 10.00           D
ATOM     20 DG23 THR H   8       4.053   6.974   6.204  1.00 10.00           D
"""

exercise_02_str = """
CRYST1   26.468   33.148   34.654  90.00  90.00  90.00 P 1
ATOM      1  N   PRO A   1      14.232  25.725  10.396  1.00 20.59           N
ATOM      2  CA  PRO A   1      15.656  25.573  10.083  1.00 20.69           C
ATOM      3  CB  PRO A   1      15.798  26.331   8.761  1.00 22.63           C
ATOM      4  CG  PRO A   1      14.742  27.375   8.819  1.00 21.05           C
ATOM      5  CD  PRO A   1      13.588  26.749   9.553  1.00 21.65           C
ATOM      6  C   PRO A   1      16.549  26.194  11.163  1.00 20.54           C
ATOM      7  O   PRO A   1      16.890  27.370  11.033  1.00 20.15           O
ATOM      8  H2  PRO A   1      14.131  25.778  11.248  1.00 20.59           H   std
ATOM      9  H3  PRO A   1      13.995  24.943  10.127  1.00 20.59           H   std
ATOM     10  HA  PRO A   1      15.881  24.641   9.935  1.00 20.69           H   std
ATOM     11  HB2 PRO A   1      16.680  26.729   8.691  1.00 22.63           H   std
ATOM     12  HB3 PRO A   1      15.638  25.725   8.020  1.00 22.63           H   std
ATOM     13  HG2 PRO A   1      15.075  28.148   9.302  1.00 21.05           H   std
ATOM     14  HG3 PRO A   1      14.480  27.622   7.918  1.00 21.05           H   std
ATOM     15  HD2 PRO A   1      13.141  27.409  10.106  1.00 21.65           H   std
ATOM     16  HD3 PRO A   1      12.974  26.334   8.927  1.00 21.65           H   std
ATOM     17  N   CYS A   2      16.920  25.451  12.208  1.00 19.39           N
ATOM     18  CA  CYS A   2      16.531  24.056  12.415  1.00 18.94           C
ATOM     19  C   CYS A   2      16.244  23.839  13.900  1.00 20.59           C
ATOM     20  O   CYS A   2      16.957  24.403  14.730  1.00 19.50           O
ATOM     21  H   CYS A   2      17.421  25.751  12.839  1.00 19.39           H   std
ATOM     22  HA  CYS A   2      15.742  23.845  11.891  1.00 18.94           H   std
ATOM     23  CB  CYS A   2      17.623  23.101  11.929  1.00 20.00           C
ATOM     24  SG  CYS A   2      17.898  23.129  10.143  1.00 20.00           S
ATOM      0  HB2 CYS A   2      18.454  23.323  12.377  1.00 20.00           H   new
ATOM      0  HB3 CYS A   2      17.390  22.198  12.195  1.00 20.00           H   new
ATOM      0  HG  CYS A   2      18.769  22.353   9.860  1.00 20.00           H   new
ATOM     25  N   ILE A   3      15.232  23.049  14.280  1.00 18.74           N
ATOM     26  CA  ILE A   3      14.277  22.348  13.402  1.00 17.42           C
ATOM     27  CB  ILE A   3      13.316  23.325  12.664  1.00 18.24           C
ATOM     28  CG1 ILE A   3      12.907  24.472  13.592  1.00 18.08           C
ATOM     29  CG2 ILE A   3      12.088  22.576  12.161  1.00 17.65           C
ATOM     30  CD1 ILE A   3      11.879  25.414  12.996  1.00 18.72           C
ATOM     31  C   ILE A   3      14.903  21.352  12.416  1.00 17.75           C
ATOM     32  O   ILE A   3      15.097  21.655  11.238  1.00 17.97           O
ATOM     33  H   ILE A   3      15.069  22.892  15.110  1.00 18.74           H   std
ATOM     34  HA  ILE A   3      13.711  21.816  13.984  1.00 17.42           H   std
ATOM     35  HB  ILE A   3      13.760  23.703  11.889  1.00 18.24           H   std
ATOM     36 HG12 ILE A   3      12.530  24.098  14.404  1.00 18.08           H   std
ATOM     37 HG13 ILE A   3      13.693  24.998  13.807  1.00 18.08           H   std
ATOM     38 HG21 ILE A   3      11.575  23.159  11.581  1.00 17.65           H   std
ATOM     39 HG22 ILE A   3      12.374  21.792  11.666  1.00 17.65           H   std
ATOM     40 HG23 ILE A   3      11.550  22.307  12.922  1.00 17.65           H   std
ATOM     41 HD11 ILE A   3      11.824  26.210  13.548  1.00 18.72           H   std
ATOM     42 HD12 ILE A   3      12.153  25.653  12.097  1.00 18.72           H   std
ATOM     43 HD13 ILE A   3      11.018  24.969  12.971  1.00 18.72           H   std
ATOM     44  N   THR A   4      15.190  20.152  12.916  1.00 16.98           N
ATOM     45  CA  THR A   4      15.689  19.051  12.095  1.00 18.61           C
ATOM     46  CB  THR A   4      17.201  18.838  12.300  1.00 18.25           C
ATOM     47  OG1 THR A   4      17.928  19.919  11.704  1.00 18.31           O
ATOM     48  CG2 THR A   4      17.655  17.530  11.668  1.00 18.01           C
ATOM     49  C   THR A   4      14.963  17.756  12.477  1.00 17.76           C
ATOM     50  O   THR A   4      15.199  17.248  13.574  1.00 16.77           O
ATOM     51  H   THR A   4      15.101  19.947  13.746  1.00 16.98           H   std
ATOM     52  HA  THR A   4      15.554  19.265  11.159  1.00 18.61           H   std
ATOM     53  HB  THR A   4      17.396  18.804  13.250  1.00 18.25           H   std
ATOM     54  HG1 THR A   4      17.765  19.954  10.881  1.00 18.31           H   std
ATOM     55 HG21 THR A   4      18.614  17.550  11.524  1.00 18.01           H   std
ATOM     56 HG22 THR A   4      17.443  16.784  12.250  1.00 18.01           H   std
ATOM     57 HG23 THR A   4      17.214  17.403  10.814  1.00 18.01           H   std
ATOM     58  N   LEU A   5      14.092  17.196  11.629  1.00 16.14           N
ATOM     59  CA  LEU A   5      13.724  17.691  10.292  1.00 17.00           C
ATOM     60  CB  LEU A   5      12.978  19.035  10.373  1.00 16.17           C
ATOM     61  CG  LEU A   5      11.564  19.020  10.967  1.00 16.47           C
ATOM     62  CD1 LEU A   5      11.570  18.554  12.417  1.00 16.13           C
ATOM     63  CD2 LEU A   5      10.630  18.155  10.130  1.00 17.36           C
ATOM     64  C   LEU A   5      14.894  17.771   9.296  1.00 17.30           C
ATOM     65  O   LEU A   5      15.227  18.857   8.821  1.00 18.08           O
ATOM     66  H   LEU A   5      13.670  16.472  11.824  1.00 16.14           H   std
ATOM     67  HA  LEU A   5      13.089  17.062   9.915  1.00 17.00           H   std
ATOM     68  HB2 LEU A   5      13.493  19.660  10.907  1.00 16.17           H   std
ATOM     69  HB3 LEU A   5      12.893  19.384   9.472  1.00 16.17           H   std
ATOM     70  HG  LEU A   5      11.214  19.924  10.953  1.00 16.47           H   std
ATOM     71 HD11 LEU A   5      10.724  18.793  12.827  1.00 16.13           H   std
ATOM     72 HD12 LEU A   5      11.687  17.591  12.441  1.00 16.13           H   std
ATOM     73 HD13 LEU A   5      12.298  18.991  12.886  1.00 16.13           H   std
ATOM     74 HD21 LEU A   5       9.717  18.298  10.426  1.00 17.36           H   std
ATOM     75 HD22 LEU A   5      10.718  18.408   9.198  1.00 17.36           H   std
ATOM     76 HD23 LEU A   5      10.872  17.223  10.244  1.00 17.36           H   std
ATOM     77  N   TRP A   6      15.507  16.634   8.960  1.00 16.90           N
ATOM     78  CA  TRP A   6      15.125  15.315   9.469  1.00 17.53           C
ATOM     79  CB  TRP A   6      15.441  14.230   8.431  1.00 17.50           C
ATOM     80  CG  TRP A   6      16.901  14.093   8.068  1.00 18.12           C
ATOM     81  CD1 TRP A   6      17.948  14.834   8.543  1.00 18.89           C
ATOM     82  CD2 TRP A   6      17.467  13.151   7.147  1.00 18.05           C
ATOM     83  NE1 TRP A   6      19.125  14.411   7.976  1.00 18.60           N
ATOM     84  CE2 TRP A   6      18.857  13.379   7.115  1.00 20.37           C
ATOM     85  CE3 TRP A   6      16.932  12.136   6.347  1.00 19.14           C
ATOM     86  CZ2 TRP A   6      19.719  12.631   6.315  1.00 19.76           C
ATOM     87  CZ3 TRP A   6      17.789  11.395   5.553  1.00 18.94           C
ATOM     88  CH2 TRP A   6      19.167  11.646   5.544  1.00 18.61           C
ATOM     89  C   TRP A   6      15.823  14.992  10.787  1.00 18.02           C
ATOM     90  O   TRP A   6      15.469  14.030  11.469  1.00 17.00           O
ATOM     91  H   TRP A   6      16.169  16.606   8.412  1.00 16.90           H   std
ATOM     92  HA  TRP A   6      14.168  15.277   9.623  1.00 17.53           H   std
ATOM     93  HB2 TRP A   6      15.146  13.375   8.781  1.00 17.50           H   std
ATOM     94  HB3 TRP A   6      14.955  14.432   7.616  1.00 17.50           H   std
ATOM     95  HD1 TRP A   6      17.873  15.524   9.161  1.00 18.89           H   std
ATOM     96  HE1 TRP A   6      19.903  14.741   8.135  1.00 18.60           H   std
ATOM     97  HE3 TRP A   6      16.018  11.964   6.348  1.00 19.14           H   std
ATOM     98  HZ2 TRP A   6      20.634  12.795   6.307  1.00 19.76           H   std
ATOM     99  HZ3 TRP A   6      17.445  10.718   5.017  1.00 18.94           H   std
ATOM    100  HH2 TRP A   6      19.719  11.132   5.000  1.00 18.61           H   std
TER     101      TRP A   6
ATOM    102  N   LYS B   7      16.104  11.520  14.704  1.00 18.31           N
ATOM    103  CA  LYS B   7      16.294  11.108  16.089  1.00 18.17           C
ATOM    104  CB  LYS B   7      17.578  11.718  16.655  1.00 17.67           C
ATOM    105  CG  LYS B   7      18.833  11.386  15.859  1.00 19.54           C
ATOM    106  CD  LYS B   7      19.123   9.893  15.862  1.00 20.73           C
ATOM    107  CE  LYS B   7      20.411   9.576  15.119  1.00 22.48           C
ATOM    108  NZ  LYS B   7      20.711   8.117  15.116  1.00 24.00           N
ATOM    109  C   LYS B   7      15.100  11.526  16.941  1.00 16.04           C
ATOM    110  O   LYS B   7      15.263  11.950  18.085  1.00 16.51           O
ATOM    111  HA  LYS B   7      16.370  10.142  16.129  1.00 18.17           H   std
ATOM    112  HB2 LYS B   7      17.484  12.683  16.668  1.00 17.67           H   std
ATOM    113  HB3 LYS B   7      17.708  11.389  17.558  1.00 17.67           H   std
ATOM    114  HG2 LYS B   7      18.713  11.670  14.939  1.00 19.54           H   std
ATOM    115  HG3 LYS B   7      19.592  11.843  16.254  1.00 19.54           H   std
ATOM    116  HD2 LYS B   7      19.217   9.586  16.777  1.00 20.73           H   std
ATOM    117  HD3 LYS B   7      18.397   9.423  15.423  1.00 20.73           H   std
ATOM    118  HE2 LYS B   7      20.327   9.869  14.198  1.00 22.48           H   std
ATOM    119  HE3 LYS B   7      21.149  10.035  15.550  1.00 22.48           H   std
ATOM    120  HZ1 LYS B   7      21.469   7.964  14.676  1.00 24.00           H   std
ATOM    121  HZ2 LYS B   7      20.797   7.824  15.952  1.00 24.00           H   std
ATOM    122  HZ3 LYS B   7      20.050   7.672  14.720  1.00 24.00           H   std
ATOM    123  N   TYR B   8      13.905  11.402  16.370  1.00 16.27           N
ATOM    124  CA  TYR B   8      12.667  11.763  17.057  1.00 16.41           C
ATOM    125  C   TYR B   8      12.691  13.213  17.539  1.00 17.10           C
ATOM    126  O   TYR B   8      12.799  13.464  18.740  1.00 18.90           O
ATOM    127  CB  TYR B   8      12.416  10.823  18.239  1.00 20.00           C
ATOM    128  CG  TYR B   8      12.300   9.367  17.847  1.00 20.00           C
ATOM    129  CD1 TYR B   8      11.070   8.814  17.514  1.00 20.00           C
ATOM    130  CD2 TYR B   8      13.419   8.547  17.809  1.00 20.00           C
ATOM    131  CE1 TYR B   8      10.959   7.484  17.155  1.00 20.00           C
ATOM    132  CE2 TYR B   8      13.317   7.216  17.451  1.00 20.00           C
ATOM    133  CZ  TYR B   8      12.085   6.690  17.125  1.00 20.00           C
ATOM    134  OH  TYR B   8      11.979   5.365  16.768  1.00 20.00           O
ATOM    135  H   TYR B   8      13.782  11.106  15.572  1.00 16.27           H   std
ATOM    136  HA  TYR B   8      11.924  11.664  16.441  1.00 16.41           H   std
ATOM    137  HB2 TYR B   8      13.148  10.901  18.870  1.00 20.00           H   std
ATOM    138  HB3 TYR B   8      11.585  11.079  18.669  1.00 20.00           H   std
ATOM    139  HD1 TYR B   8      10.308   9.347  17.534  1.00 20.00           H   std
ATOM    140  HD2 TYR B   8      14.251   8.899  18.028  1.00 20.00           H   std
ATOM    141  HE1 TYR B   8      10.129   7.127  16.935  1.00 20.00           H   std
ATOM    142  HE2 TYR B   8      14.076   6.678  17.430  1.00 20.00           H   std
ATOM    143  HH  TYR B   8      12.735   5.000  16.791  1.00 20.00           H   std
ATOM    144  N   PRO B   9      12.608  14.170  16.597  1.00 16.48           N
ATOM    145  CA  PRO B   9      12.577  15.606  16.896  1.00 17.55           C
ATOM    146  CB  PRO B   9      12.059  16.223  15.593  1.00 16.00           C
ATOM    147  CG  PRO B   9      12.367  15.223  14.516  1.00 15.64           C
ATOM    148  CD  PRO B   9      12.758  13.918  15.153  1.00 16.47           C
ATOM    149  C   PRO B   9      11.635  15.961  18.044  1.00 18.40           C
ATOM    150  O   PRO B   9      10.513  15.458  18.098  1.00 17.31           O
ATOM    151  HA  PRO B   9      13.468  15.939  17.085  1.00 17.55           H   std
ATOM    152  HB2 PRO B   9      11.102  16.368  15.660  1.00 16.00           H   std
ATOM    153  HB3 PRO B   9      12.520  17.059  15.424  1.00 16.00           H   std
ATOM    154  HG2 PRO B   9      11.578  15.100  13.966  1.00 15.64           H   std
ATOM    155  HG3 PRO B   9      13.099  15.559  13.975  1.00 15.64           H   std
ATOM    156  HD2 PRO B   9      12.154  13.216  14.863  1.00 16.47           H   std
ATOM    157  HD3 PRO B   9      13.680  13.702  14.943  1.00 16.47           H   std
ATOM    158  N   LEU B  10      12.094  16.821  18.947  1.00 20.07           N
ATOM    159  CA  LEU B  10      11.289  17.237  20.089  1.00 19.87           C
ATOM    160  CB  LEU B  10      11.231  16.120  21.134  1.00 18.03           C
ATOM    161  CG  LEU B  10      10.403  16.407  22.389  1.00 20.45           C
ATOM    162  CD1 LEU B  10       8.948  16.673  22.031  1.00 19.06           C
ATOM    163  CD2 LEU B  10      10.511  15.252  23.373  1.00 20.13           C
ATOM    164  C   LEU B  10      11.859  18.506  20.713  1.00 19.53           C
ATOM    165  O   LEU B  10      12.918  18.479  21.340  1.00 21.35           O
ATOM    166  H   LEU B  10      12.875  17.180  18.921  1.00 20.07           H   std
ATOM    167  HA  LEU B  10      10.385  17.425  19.791  1.00 19.87           H   std
ATOM    168  HB2 LEU B  10      10.855  15.330  20.715  1.00 18.03           H   std
ATOM    169  HB3 LEU B  10      12.137  15.929  21.424  1.00 18.03           H   std
ATOM    170  HG  LEU B  10      10.752  17.200  22.824  1.00 20.45           H   std
ATOM    171 HD11 LEU B  10       8.432  16.749  22.849  1.00 19.06           H   std
ATOM    172 HD12 LEU B  10       8.892  17.500  21.528  1.00 19.06           H   std
ATOM    173 HD13 LEU B  10       8.614  15.935  21.497  1.00 19.06           H   std
ATOM    174 HD21 LEU B  10       9.980  15.456  24.159  1.00 20.13           H   std
ATOM    175 HD22 LEU B  10      10.180  14.445  22.950  1.00 20.13           H   std
ATOM    176 HD23 LEU B  10      11.441  15.137  23.623  1.00 20.13           H   std
ATOM    177  N   VAL B  11      11.150  19.617  20.535  1.00 20.16           N
ATOM    178  CA  VAL B  11      11.583  20.898  21.081  1.00 18.60           C
ATOM    179  CB  VAL B  11      10.740  22.063  20.522  1.00 19.39           C
ATOM    180  CG1 VAL B  11       9.284  21.932  20.952  1.00 18.61           C
ATOM    181  CG2 VAL B  11      10.853  22.120  19.005  1.00 19.71           C
ATOM    182  C   VAL B  11      11.486  20.900  22.603  1.00 19.78           C
ATOM    183  O   VAL B  11      12.498  20.808  23.299  1.00 20.36           O
ATOM    184  H   VAL B  11      10.410  19.654  20.098  1.00 20.16           H   std
ATOM    185  HA  VAL B  11      12.509  21.051  20.837  1.00 18.60           H   std
ATOM    186  HB  VAL B  11      11.083  22.898  20.878  1.00 19.39           H   std
ATOM    187 HG11 VAL B  11       8.747  22.553  20.435  1.00 18.61           H   std
ATOM    188 HG12 VAL B  11       8.984  21.024  20.791  1.00 18.61           H   std
ATOM    189 HG13 VAL B  11       9.210  22.140  21.897  1.00 18.61           H   std
ATOM    190 HG21 VAL B  11      10.356  22.887  18.681  1.00 19.71           H   std
ATOM    191 HG22 VAL B  11      11.788  22.204  18.762  1.00 19.71           H   std
ATOM    192 HG23 VAL B  11      10.485  21.305  18.630  1.00 19.71           H   std
TER     193      VAL B  11
ATOM    194  N   THR C  12       9.083  21.642  26.327  1.00 20.97           N
ATOM    195  CA  THR C  12       9.725  22.948  26.407  1.00 21.31           C
ATOM    196  CB  THR C  12      11.241  22.810  26.634  1.00 20.73           C
ATOM    197  OG1 THR C  12      11.823  22.052  25.565  1.00 23.32           O
ATOM    198  CG2 THR C  12      11.523  22.114  27.957  1.00 21.87           C
ATOM    199  C   THR C  12       9.495  23.750  25.125  1.00 20.19           C
ATOM    200  O   THR C  12      10.403  23.870  24.304  1.00 21.54           O
ATOM    201  HA  THR C  12       9.361  23.441  27.159  1.00 21.31           H   std
ATOM    202  HB  THR C  12      11.645  23.691  26.660  1.00 20.73           H   std
ATOM    203  HG1 THR C  12      11.728  22.460  24.837  1.00 23.32           H   std
ATOM    204 HG21 THR C  12      12.480  22.046  28.098  1.00 21.87           H   std
ATOM    205 HG22 THR C  12      11.132  22.619  28.687  1.00 21.87           H   std
ATOM    206 HG23 THR C  12      11.141  21.222  27.951  1.00 21.87           H   std
ATOM    207  N   ILE C  13       8.293  24.298  24.942  1.00 20.53           N
ATOM    208  CA  ILE C  13       7.196  24.182  25.901  1.00 21.71           C
ATOM    209  CB  ILE C  13       7.277  25.278  26.988  1.00 21.47           C
ATOM    210  CG1 ILE C  13       6.236  25.036  28.086  1.00 20.24           C
ATOM    211  CG2 ILE C  13       7.086  26.658  26.373  1.00 20.55           C
ATOM    212  CD1 ILE C  13       6.447  23.754  28.867  1.00 20.37           C
ATOM    213  C   ILE C  13       5.861  24.302  25.175  1.00 21.07           C
ATOM    214  O   ILE C  13       5.000  23.429  25.290  1.00 22.22           O
ATOM    215  H   ILE C  13       8.085  24.758  24.246  1.00 20.53           H   std
ATOM    216  HA  ILE C  13       7.213  23.312  26.330  1.00 21.71           H   std
ATOM    217  HB  ILE C  13       8.158  25.248  27.392  1.00 21.47           H   std
ATOM    218 HG12 ILE C  13       6.276  25.772  28.716  1.00 20.24           H   std
ATOM    219 HG13 ILE C  13       5.353  24.998  27.686  1.00 20.24           H   std
ATOM    220 HG21 ILE C  13       7.378  27.329  27.009  1.00 20.55           H   std
ATOM    221 HG22 ILE C  13       7.615  26.720  25.562  1.00 20.55           H   std
ATOM    222 HG23 ILE C  13       6.147  26.787  26.165  1.00 20.55           H   std
ATOM    223 HD11 ILE C  13       5.881  23.770  29.654  1.00 20.37           H   std
ATOM    224 HD12 ILE C  13       6.211  22.998  28.306  1.00 20.37           H   std
ATOM    225 HD13 ILE C  13       7.378  23.695  29.131  1.00 20.37           H   std
TER     226      ILE C  13
END
"""

m15_str="""
CRYST1   94.040   99.520  102.470  90.00  90.00  90.00 I 2 2 2       8
ATOM   1132  N   ARG A  74     -19.326 -37.600 -34.577  1.00 26.20           N
ATOM   1133  CA  ARG A  74     -18.130 -37.395 -33.759  1.00 25.89           C
ATOM   1134  C   ARG A  74     -18.042 -35.939 -33.320  1.00 24.08           C
ATOM   1135  O   ARG A  74     -17.750 -35.641 -32.160  1.00 23.39           O
ATOM   1136  CB  ARG A  74     -16.849 -37.735 -34.533  1.00 28.75           C
ATOM   1137  CG  ARG A  74     -16.608 -39.205 -34.790  1.00 33.03           C
ATOM   1138  CD  ARG A  74     -15.231 -39.442 -35.435  1.00 36.08           C
ATOM   1139  NE  ARG A  74     -14.118 -39.145 -34.528  1.00 37.90           N
ATOM   1140  CZ  ARG A  74     -13.275 -38.122 -34.667  1.00 38.74           C
ATOM   1141  NH1 ARG A  74     -13.430 -37.239 -35.652  1.00 38.21           N
ATOM   1142  NH2 ARG A  74     -12.270 -37.980 -33.806  1.00 38.01           N
ATOM   1143  D   ARG A  74     -19.235 -37.934 -35.490  0.81 26.33           D
ATOM   1144  HA  ARG A  74     -18.194 -38.026 -32.882  1.00 26.28           H
ATOM   1145  HB2 ARG A  74     -16.885 -37.231 -35.488  1.00 29.24           H
ATOM   1146  HB3 ARG A  74     -16.006 -37.351 -33.972  1.00 28.50           H
ATOM   1147  HG2 ARG A  74     -16.657 -39.745 -33.856  1.00 33.30           H
ATOM   1148  HG3 ARG A  74     -17.373 -39.565 -35.457  1.00 32.25           H
ATOM   1149  HD2 ARG A  74     -15.163 -40.473 -35.726  1.00 36.76           H
ATOM   1150  HD3 ARG A  74     -15.142 -38.814 -36.306  1.00 36.58           H
ATOM   1151  DE  ARG A  74     -13.981 -39.762 -33.774  0.24 37.60           D
ATOM   1152 DH11 ARG A  74     -14.186 -37.340 -36.302  0.17 38.08           D
ATOM   1153 DH12 ARG A  74     -12.793 -36.467 -35.747  1.00 36.47           D
ATOM   1154 DH21 ARG A  74     -11.634 -37.223 -33.911  0.05 38.56           D
ATOM   1155 DH22 ARG A  74     -12.148 -38.635 -33.057  0.77 39.36           D
END
"""

m16_str="""
CRYST1   94.040   99.520  102.470  90.00  90.00  90.00 I 2 2 2       8
ATOM   1110  N   ALA A  73     -21.444 -37.009 -36.391  1.00 28.60           N
ATOM   1111  CA  ALA A  73     -21.705 -37.562 -35.064  1.00 30.00           C
ATOM   1112  C   ALA A  73     -20.540 -37.326 -34.112  1.00 27.41           C
ATOM   1113  O   ALA A  73     -20.742 -36.891 -32.978  1.00 28.01           O
ATOM   1132  N   ARG A  74     -19.326 -37.600 -34.577  1.00 26.20           N
ATOM   1133  CA  ARG A  74     -18.130 -37.395 -33.759  1.00 25.89           C
ATOM   1134  C   ARG A  74     -18.042 -35.939 -33.320  1.00 24.08           C
ATOM   1135  O   ARG A  74     -17.750 -35.641 -32.160  1.00 23.39           O
ATOM   1136  CB  ARG A  74     -16.849 -37.735 -34.533  1.00 28.75           C
ATOM   1137  CG  ARG A  74     -16.608 -39.205 -34.790  1.00 33.03           C
ATOM   1138  CD  ARG A  74     -15.231 -39.442 -35.435  1.00 36.08           C
ATOM   1139  NE  ARG A  74     -14.118 -39.145 -34.528  1.00 37.90           N
ATOM   1140  CZ  ARG A  74     -13.275 -38.122 -34.667  1.00 38.74           C
ATOM   1141  NH1 ARG A  74     -13.430 -37.239 -35.652  1.00 38.21           N
ATOM   1142  NH2 ARG A  74     -12.270 -37.980 -33.806  1.00 38.01           N
ATOM   1143  D   ARG A  74     -19.235 -37.934 -35.490  0.81 26.33           D
ATOM   1144  HA  ARG A  74     -18.194 -38.026 -32.882  1.00 26.28           H
ATOM   1145  HB2 ARG A  74     -16.885 -37.231 -35.488  1.00 29.24           H
ATOM   1146  HB3 ARG A  74     -16.006 -37.351 -33.972  1.00 28.50           H
ATOM   1147  HG2 ARG A  74     -16.657 -39.745 -33.856  1.00 33.30           H
ATOM   1148  HG3 ARG A  74     -17.373 -39.565 -35.457  1.00 32.25           H
ATOM   1149  HD2 ARG A  74     -15.163 -40.473 -35.726  1.00 36.76           H
ATOM   1150  HD3 ARG A  74     -15.142 -38.814 -36.306  1.00 36.58           H
ATOM   1151  DE  ARG A  74     -13.981 -39.762 -33.774  0.24 37.60           D
ATOM   1152 DH11 ARG A  74     -14.186 -37.340 -36.302  0.17 38.08           D
ATOM   1153 DH12 ARG A  74     -12.793 -36.467 -35.747  1.00 36.47           D
ATOM   1154 DH21 ARG A  74     -11.634 -37.223 -33.911  0.05 38.56           D
ATOM   1155 DH22 ARG A  74     -12.148 -38.635 -33.057  0.77 39.36           D
ATOM   1156  N   PHE A  75     -18.266 -35.038 -34.269  1.00 21.63           N
ATOM   1157  CA  PHE A  75     -18.198 -33.602 -34.011  1.00 21.44           C
ATOM   1158  C   PHE A  75     -19.269 -33.200 -32.988  1.00 22.63           C
ATOM   1159  O   PHE A  75     -18.978 -32.496 -32.021  1.00 21.77           O
END
"""

m17_str="""
CRYST1   94.040   99.520  102.470  90.00  90.00  90.00 I 2 2 2       8
ATOM   1132  N   ARG A  74     -19.326 -37.600 -34.577  1.00 26.20           N
ATOM   1133  CA  ARG A  74     -18.130 -37.395 -33.759  1.00 25.89           C
ATOM   1134  C   ARG A  74     -18.042 -35.939 -33.320  1.00 24.08           C
ATOM   1135  O   ARG A  74     -17.750 -35.641 -32.160  1.00 23.39           O
ATOM   1136  CB  ARG A  74     -16.849 -37.735 -34.533  1.00 28.75           C
ATOM   1137  CG  ARG A  74     -16.608 -39.205 -34.790  1.00 33.03           C
ATOM   1138  CD  ARG A  74     -15.231 -39.442 -35.435  1.00 36.08           C
ATOM   1139  NE  ARG A  74     -14.118 -39.145 -34.528  1.00 37.90           N
ATOM   1140  CZ  ARG A  74     -13.275 -38.122 -34.667  1.00 38.74           C
ATOM   1141  NH1 ARG A  74     -13.430 -37.239 -35.652  1.00 38.21           N
ATOM   1142  NH2 ARG A  74     -12.270 -37.980 -33.806  1.00 38.01           N
ATOM   1143  D   ARG A  74     -19.235 -37.934 -35.490  0.81 26.33           D
ATOM   1144  HA  ARG A  74     -18.194 -38.026 -32.882  1.00 26.28           H
ATOM   1145  HB2 ARG A  74     -16.885 -37.231 -35.488  1.00 29.24           H
ATOM   1146  HB3 ARG A  74     -16.006 -37.351 -33.972  1.00 28.50           H
ATOM   1147  HG2 ARG A  74     -16.657 -39.745 -33.856  1.00 33.30           H
ATOM   1148  HG3 ARG A  74     -17.373 -39.565 -35.457  1.00 32.25           H
ATOM   1149  HD2 ARG A  74     -15.163 -40.473 -35.726  1.00 36.76           H
ATOM   1150  HD3 ARG A  74     -15.142 -38.814 -36.306  1.00 36.58           H
ATOM   1151  DE  ARG A  74     -13.981 -39.762 -33.774  0.24 37.60           D
ATOM   1152 DH11 ARG A  74     -14.186 -37.340 -36.302  0.17 38.08           D
ATOM   1153 DH12 ARG A  74     -12.793 -36.467 -35.747  1.00 36.47           D
ATOM   1154 DH21 ARG A  74     -11.634 -37.223 -33.911  0.05 38.56           D
ATOM   1155 DH22 ARG A  74     -12.148 -38.635 -33.057  0.77 39.36           D
ATOM   1156  N   ALA A  75     -18.266 -35.038 -34.269  1.00 21.63           N
ATOM   1157  CA  ALA A  75     -18.198 -33.602 -34.011  1.00 21.44           C
ATOM   1158  C   ALA A  75     -19.269 -33.200 -32.988  1.00 22.63           C
ATOM   1159  O   ALA A  75     -18.978 -32.496 -32.021  1.00 21.77           O
END
"""

m18_str="""
CRYST1   94.040   99.520  102.470  90.00  90.00  90.00 I 2 2 2       8
ATOM   1110  N   LYS A  73     -21.444 -37.009 -36.391  1.00 28.60           N
ATOM   1111  CA  LYS A  73     -21.705 -37.562 -35.064  1.00 30.00           C
ATOM   1112  C   LYS A  73     -20.540 -37.326 -34.112  1.00 27.41           C
ATOM   1113  O   LYS A  73     -20.742 -36.891 -32.978  1.00 28.01           O
ATOM   1132  N   ARG A  74     -19.326 -37.600 -34.577  1.00 26.20           N
ATOM   1133  CA  ARG A  74     -18.130 -37.395 -33.759  1.00 25.89           C
ATOM   1134  C   ARG A  74     -18.042 -35.939 -33.320  1.00 24.08           C
ATOM   1135  O   ARG A  74     -17.750 -35.641 -32.160  1.00 23.39           O
ATOM   1136  CB  ARG A  74     -16.849 -37.735 -34.533  1.00 28.75           C
ATOM   1137  CG  ARG A  74     -16.608 -39.205 -34.790  1.00 33.03           C
ATOM   1138  CD  ARG A  74     -15.231 -39.442 -35.435  1.00 36.08           C
ATOM   1139  NE  ARG A  74     -14.118 -39.145 -34.528  1.00 37.90           N
ATOM   1140  CZ  ARG A  74     -13.275 -38.122 -34.667  1.00 38.74           C
ATOM   1141  NH1 ARG A  74     -13.430 -37.239 -35.652  1.00 38.21           N
ATOM   1142  NH2 ARG A  74     -12.270 -37.980 -33.806  1.00 38.01           N
ATOM   1143  D   ARG A  74     -19.235 -37.934 -35.490  0.81 26.33           D
ATOM   1144  HA  ARG A  74     -18.194 -38.026 -32.882  1.00 26.28           H
ATOM   1145  HB2 ARG A  74     -16.885 -37.231 -35.488  1.00 29.24           H
ATOM   1146  HB3 ARG A  74     -16.006 -37.351 -33.972  1.00 28.50           H
ATOM   1147  HG2 ARG A  74     -16.657 -39.745 -33.856  1.00 33.30           H
ATOM   1148  HG3 ARG A  74     -17.373 -39.565 -35.457  1.00 32.25           H
ATOM   1149  HD2 ARG A  74     -15.163 -40.473 -35.726  1.00 36.76           H
ATOM   1150  HD3 ARG A  74     -15.142 -38.814 -36.306  1.00 36.58           H
ATOM   1151  DE  ARG A  74     -13.981 -39.762 -33.774  0.24 37.60           D
ATOM   1152 DH11 ARG A  74     -14.186 -37.340 -36.302  0.17 38.08           D
ATOM   1153 DH12 ARG A  74     -12.793 -36.467 -35.747  1.00 36.47           D
ATOM   1154 DH21 ARG A  74     -11.634 -37.223 -33.911  0.05 38.56           D
ATOM   1155 DH22 ARG A  74     -12.148 -38.635 -33.057  0.77 39.36           D
END
"""

m19_str = """
CRYST1   14.387   16.193   14.476  90.00  90.00  90.00 P 1
HETATM    1  N   FME A   1     236.245 307.364 304.398  1.00 42.67           N
HETATM    2  CA  FME A   1     237.012 307.961 305.455  1.00 42.67           C
HETATM    3  C   FME A   1     237.071 307.161 306.754  1.00 42.67           C
HETATM    4  O   FME A   1     238.089 307.116 307.330  1.00 42.67           O
HETATM    5  CB  FME A   1     236.594 309.395 305.815  1.00 42.67           C
HETATM    6  CG  FME A   1     237.522 310.450 305.284  1.00 42.67           C
HETATM    7  SD  FME A   1     239.193 310.361 305.969  1.00 42.67           S
HETATM    8  CE  FME A   1     238.948 310.824 307.683  1.00 42.67           C
HETATM    9  CN  FME A   1     236.279 306.173 303.908  1.00 42.67           C
HETATM   10  O1  FME A   1     237.287 305.523 303.668  1.00 42.67           O
HETATM   12  HA  FME A   1     237.923 308.003 305.126  1.00 42.67           H
HETATM   13  HB2 FME A   1     236.551 309.472 306.781  1.00 42.67           H
HETATM   14  HB3 FME A   1     235.701 309.568 305.477  1.00 42.67           H
HETATM   15  HG2 FME A   1     237.152 311.325 305.482  1.00 42.67           H
HETATM   16  HG3 FME A   1     237.577 310.366 304.319  1.00 42.67           H
HETATM   17  HE1 FME A   1     239.802 310.814 308.144  1.00 42.67           H
HETATM   18  HE2 FME A   1     238.347 310.194 308.111  1.00 42.67           H
HETATM   19  HE3 FME A   1     238.570 311.716 307.725  1.00 42.67           H
HETATM   20  HCN FME A   1     235.415 305.803 303.669  1.00 42.67           H
END
"""

all_aa_all_h = """
ATOM      1  N   GLY A   1      -5.398  -1.491 -11.512  1.00  0.00           N
ATOM      2  CA  GLY A   1      -4.707  -0.522 -12.342  1.00  0.00           C
ATOM      3  C   GLY A   1      -4.028  -1.140 -13.548  1.00  0.00           C
ATOM      4  O   GLY A   1      -4.570  -1.108 -14.652  1.00  0.00           O
ATOM      5  H1  GLY A   1      -6.275  -1.348 -11.557  1.00  0.00           H
ATOM      6  H2  GLY A   1      -5.216  -2.313 -11.801  1.00  0.00           H
ATOM      7  H3  GLY A   1      -5.126  -1.407 -10.669  1.00  0.00           H
ATOM      8  HA2 GLY A   1      -5.353   0.124 -12.667  1.00  0.00           H
ATOM      9  HA3 GLY A   1      -4.053  -0.043 -11.812  1.00  0.00           H
ATOM     10  N   PRO A   2      -2.833  -1.701 -13.342  1.00  0.00           N
ATOM     11  CA  PRO A   2      -2.123  -2.328 -14.468  1.00  0.00           C
ATOM     12  C   PRO A   2      -2.829  -3.557 -15.012  1.00  0.00           C
ATOM     13  O   PRO A   2      -2.735  -3.826 -16.216  1.00  0.00           O
ATOM     14  CB  PRO A   2      -0.752  -2.683 -13.871  1.00  0.00           C
ATOM     15  CG  PRO A   2      -0.641  -1.867 -12.615  1.00  0.00           C
ATOM     16  CD  PRO A   2      -2.037  -1.721 -12.104  1.00  0.00           C
ATOM     17  HA  PRO A   2      -2.001  -1.687 -15.185  1.00  0.00           H
ATOM     18  HB2 PRO A   2      -0.721  -3.631 -13.667  1.00  0.00           H
ATOM     19  HB3 PRO A   2      -0.051  -2.444 -14.498  1.00  0.00           H
ATOM     20  HG2 PRO A   2      -0.089  -2.336 -11.970  1.00  0.00           H
ATOM     21  HG3 PRO A   2      -0.261  -0.999 -12.823  1.00  0.00           H
ATOM     22  HD2 PRO A   2      -2.280  -2.483 -11.555  1.00  0.00           H
ATOM     23  HD3 PRO A   2      -2.122  -0.887 -11.617  1.00  0.00           H
ATOM     24  N   ALA A   3      -3.531  -4.309 -14.168  1.00  0.00           N
ATOM     25  CA  ALA A   3      -4.240  -5.508 -14.591  1.00  0.00           C
ATOM     26  C   ALA A   3      -5.691  -5.236 -14.967  1.00  0.00           C
ATOM     27  O   ALA A   3      -6.458  -6.186 -15.156  1.00  0.00           O
ATOM     28  CB  ALA A   3      -4.179  -6.571 -13.492  1.00  0.00           C
ATOM     29  H   ALA A   3      -3.612  -4.140 -13.329  1.00  0.00           H
ATOM     30  HA  ALA A   3      -3.797  -5.871 -15.374  1.00  0.00           H
ATOM     31  HB1 ALA A   3      -4.654  -7.362 -13.791  1.00  0.00           H
ATOM     32  HB2 ALA A   3      -3.250  -6.789 -13.316  1.00  0.00           H
ATOM     33  HB3 ALA A   3      -4.594  -6.219 -12.689  1.00  0.00           H
ATOM     34  N   VAL A   4      -6.084  -3.970 -15.080  1.00  0.00           N
ATOM     35  CA  VAL A   4      -7.445  -3.598 -15.431  1.00  0.00           C
ATOM     36  C   VAL A   4      -7.517  -2.959 -16.812  1.00  0.00           C
ATOM     37  O   VAL A   4      -8.399  -3.291 -17.606  1.00  0.00           O
ATOM     38  CB  VAL A   4      -8.051  -2.664 -14.360  1.00  0.00           C
ATOM     39  CG1 VAL A   4      -9.502  -2.346 -14.689  1.00  0.00           C
ATOM     40  CG2 VAL A   4      -7.936  -3.293 -12.980  1.00  0.00           C
ATOM     41  H   VAL A   4      -5.567  -3.295 -14.955  1.00  0.00           H
ATOM     42  HA  VAL A   4      -7.990  -4.400 -15.455  1.00  0.00           H
ATOM     43  HB  VAL A   4      -7.556  -1.830 -14.352  1.00  0.00           H
ATOM     44 HG11 VAL A   4      -9.909  -1.910 -13.924  1.00  0.00           H
ATOM     45 HG12 VAL A   4      -9.532  -1.757 -15.459  1.00  0.00           H
ATOM     46 HG13 VAL A   4      -9.969  -3.173 -14.885  1.00  0.00           H
ATOM     47 HG21 VAL A   4      -8.407  -2.737 -12.340  1.00  0.00           H
ATOM     48 HG22 VAL A   4      -8.332  -4.178 -13.003  1.00  0.00           H
ATOM     49 HG23 VAL A   4      -6.999  -3.356 -12.737  1.00  0.00           H
ATOM     50  N   LEU A   5      -6.594  -2.044 -17.118  1.00  0.00           N
ATOM     51  CA  LEU A   5      -6.605  -1.378 -18.415  1.00  0.00           C
ATOM     52  C   LEU A   5      -6.149  -2.294 -19.543  1.00  0.00           C
ATOM     53  O   LEU A   5      -6.429  -2.003 -20.711  1.00  0.00           O
ATOM     54  CB  LEU A   5      -5.725  -0.129 -18.373  1.00  0.00           C
ATOM     55  CG  LEU A   5      -6.208   1.011 -17.473  1.00  0.00           C
ATOM     56  CD1 LEU A   5      -5.151   2.100 -17.371  1.00  0.00           C
ATOM     57  CD2 LEU A   5      -7.522   1.580 -17.985  1.00  0.00           C
ATOM     58  H   LEU A   5      -5.958  -1.795 -16.595  1.00  0.00           H
ATOM     59  HA  LEU A   5      -7.512  -1.098 -18.613  1.00  0.00           H
ATOM     60  HB2 LEU A   5      -4.844  -0.388 -18.061  1.00  0.00           H
ATOM     61  HB3 LEU A   5      -5.656   0.225 -19.274  1.00  0.00           H
ATOM     62  HG  LEU A   5      -6.362   0.662 -16.581  1.00  0.00           H
ATOM     63 HD11 LEU A   5      -5.482   2.807 -16.796  1.00  0.00           H
ATOM     64 HD12 LEU A   5      -4.341   1.719 -16.996  1.00  0.00           H
ATOM     65 HD13 LEU A   5      -4.973   2.450 -18.258  1.00  0.00           H
ATOM     66 HD21 LEU A   5      -7.738   2.378 -17.478  1.00  0.00           H
ATOM     67 HD22 LEU A   5      -7.425   1.801 -18.925  1.00  0.00           H
ATOM     68 HD23 LEU A   5      -8.220   0.916 -17.872  1.00  0.00           H
ATOM     69  N   ILE A   6      -5.454  -3.390 -19.225  1.00  0.00           N
ATOM     70  CA  ILE A   6      -4.992  -4.302 -20.263  1.00  0.00           C
ATOM     71  C   ILE A   6      -6.126  -5.159 -20.808  1.00  0.00           C
ATOM     72  O   ILE A   6      -6.024  -5.676 -21.927  1.00  0.00           O
ATOM     73  CB  ILE A   6      -3.853  -5.192 -19.732  1.00  0.00           C
ATOM     74  CG1 ILE A   6      -4.261  -5.852 -18.413  1.00  0.00           C
ATOM     75  CG2 ILE A   6      -2.580  -4.378 -19.554  1.00  0.00           C
ATOM     76  CD1 ILE A   6      -3.337  -6.967 -17.977  1.00  0.00           C
ATOM     77  H   ILE A   6      -5.243  -3.614 -18.424  1.00  0.00           H
ATOM     78  HA  ILE A   6      -4.638  -3.780 -21.000  1.00  0.00           H
ATOM     79  HB  ILE A   6      -3.681  -5.890 -20.383  1.00  0.00           H
ATOM     80 HG12 ILE A   6      -4.256  -5.184 -17.711  1.00  0.00           H
ATOM     81 HG13 ILE A   6      -5.151  -6.224 -18.508  1.00  0.00           H
ATOM     82 HG21 ILE A   6      -1.860  -4.970 -19.288  1.00  0.00           H
ATOM     83 HG22 ILE A   6      -2.361  -3.949 -20.396  1.00  0.00           H
ATOM     84 HG23 ILE A   6      -2.728  -3.707 -18.869  1.00  0.00           H
ATOM     85 HD11 ILE A   6      -3.702  -7.386 -17.182  1.00  0.00           H
ATOM     86 HD12 ILE A   6      -3.270  -7.618 -18.693  1.00  0.00           H
ATOM     87 HD13 ILE A   6      -2.462  -6.596 -17.784  1.00  0.00           H
ATOM     88  N   MET A   7      -7.209  -5.326 -20.047  1.00  0.00           N
ATOM     89  CA  MET A   7      -8.336  -6.128 -20.506  1.00  0.00           C
ATOM     90  C   MET A   7      -9.245  -5.371 -21.465  1.00  0.00           C
ATOM     91  O   MET A   7      -9.999  -6.005 -22.211  1.00  0.00           O
ATOM     92  CB  MET A   7      -9.151  -6.624 -19.310  1.00  0.00           C
ATOM     93  CG  MET A   7      -8.766  -8.014 -18.830  1.00  0.00           C
ATOM     94  SD  MET A   7      -7.227  -8.026 -17.891  1.00  0.00           S
ATOM     95  CE  MET A   7      -7.281  -9.665 -17.172  1.00  0.00           C
ATOM     96  H   MET A   7      -7.313  -4.985 -19.264  1.00  0.00           H
ATOM     97  HA  MET A   7      -7.989  -6.908 -20.966  1.00  0.00           H
ATOM     98  HB2 MET A   7      -9.025  -6.010 -18.569  1.00  0.00           H
ATOM     99  HB3 MET A   7     -10.088  -6.647 -19.560  1.00  0.00           H
ATOM    100  HG2 MET A   7      -9.469  -8.355 -18.256  1.00  0.00           H
ATOM    101  HG3 MET A   7      -8.654  -8.596 -19.598  1.00  0.00           H
ATOM    102  HE1 MET A   7      -6.488  -9.798 -16.630  1.00  0.00           H
ATOM    103  HE2 MET A   7      -8.075  -9.741 -16.621  1.00  0.00           H
ATOM    104  HE3 MET A   7      -7.308 -10.322 -17.885  1.00  0.00           H
ATOM    105  N   MSE A   8      -9.193  -4.043 -21.462  1.00  0.00           N
ATOM    106  CA  MSE A   8     -10.030  -3.242 -22.348  1.00  0.00           C
ATOM    107  C   MSE A   8      -9.310  -2.934 -23.656  1.00  0.00           C
ATOM    108  O   MSE A   8      -9.914  -2.436 -24.606  1.00  0.00           O
ATOM    109  CB  MSE A   8     -10.449  -1.942 -21.659  1.00  0.00           C
ATOM    110  CG  MSE A   8     -11.716  -2.059 -20.827  1.00  0.00           C
ATOM    111 SE   MSE A   8     -11.431  -3.005 -19.146  1.00  0.00          Se
ATOM    112  CE  MSE A   8     -13.097  -2.534 -18.248  1.00  0.00           C
ATOM    113  H   MSE A   8      -8.678  -3.579 -20.953  1.00  0.00           H
ATOM    114  HA  MSE A   8     -10.837  -3.741 -22.549  1.00  0.00           H
ATOM    115  HB2 MSE A   8      -9.734  -1.658 -21.069  1.00  0.00           H
ATOM    116  HB3 MSE A   8     -10.603  -1.266 -22.337  1.00  0.00           H
ATOM    117  HG2 MSE A   8     -12.040  -1.169 -20.618  1.00  0.00           H
ATOM    118  HG3 MSE A   8     -12.385  -2.544 -21.335  1.00  0.00           H
ATOM    119  HE1 MSE A   8     -13.108  -2.943 -17.369  1.00  0.00           H
ATOM    120  HE2 MSE A   8     -13.149  -1.569 -18.165  1.00  0.00           H
ATOM    121  HE3 MSE A   8     -13.843  -2.862 -18.775  1.00  0.00           H
ATOM    122  N   CYS A   9      -8.010  -3.234 -23.698  1.00  0.00           N
ATOM    123  CA  CYS A   9      -7.229  -2.980 -24.904  1.00  0.00           C
ATOM    124  C   CYS A   9      -7.519  -4.012 -25.987  1.00  0.00           C
ATOM    125  O   CYS A   9      -7.559  -3.673 -27.175  1.00  0.00           O
ATOM    126  CB  CYS A   9      -5.737  -2.965 -24.569  1.00  0.00           C
ATOM    127  SG  CYS A   9      -5.172  -1.457 -23.746  1.00  0.00           S
ATOM    128  H   CYS A   9      -7.561  -3.579 -23.052  1.00  0.00           H
ATOM    129  HA  CYS A   9      -7.465  -2.107 -25.253  1.00  0.00           H
ATOM    130  HB2 CYS A   9      -5.543  -3.712 -23.981  1.00  0.00           H
ATOM    131  HB3 CYS A   9      -5.233  -3.058 -25.392  1.00  0.00           H
ATOM    132  HG  CYS A   9      -5.895  -1.207 -22.823  1.00  0.00           H
ATOM    133  N   PHE A  10      -7.723  -5.272 -25.600  1.00  0.00           N
ATOM    134  CA  PHE A  10      -8.009  -6.322 -26.569  1.00  0.00           C
ATOM    135  C   PHE A  10      -9.463  -6.325 -27.020  1.00  0.00           C
ATOM    136  O   PHE A  10      -9.786  -6.978 -28.018  1.00  0.00           O
ATOM    137  CB  PHE A  10      -7.650  -7.690 -25.985  1.00  0.00           C
ATOM    138  CG  PHE A  10      -6.173  -7.906 -25.812  1.00  0.00           C
ATOM    139  CD1 PHE A  10      -5.380  -8.258 -26.891  1.00  0.00           C
ATOM    140  CD2 PHE A  10      -5.579  -7.757 -24.570  1.00  0.00           C
ATOM    141  CE1 PHE A  10      -4.021  -8.457 -26.735  1.00  0.00           C
ATOM    142  CE2 PHE A  10      -4.220  -7.955 -24.407  1.00  0.00           C
ATOM    143  CZ  PHE A  10      -3.441  -8.305 -25.491  1.00  0.00           C
ATOM    144  H   PHE A  10      -7.701  -5.541 -24.784  1.00  0.00           H
ATOM    145  HA  PHE A  10      -7.456  -6.181 -27.354  1.00  0.00           H
ATOM    146  HB2 PHE A  10      -8.067  -7.777 -25.113  1.00  0.00           H
ATOM    147  HB3 PHE A  10      -7.983  -8.381 -26.579  1.00  0.00           H
ATOM    148  HD1 PHE A  10      -5.766  -8.361 -27.731  1.00  0.00           H
ATOM    149  HD2 PHE A  10      -6.100  -7.521 -23.837  1.00  0.00           H
ATOM    150  HE1 PHE A  10      -3.498  -8.693 -27.467  1.00  0.00           H
ATOM    151  HE2 PHE A  10      -3.832  -7.852 -23.568  1.00  0.00           H
ATOM    152  HZ  PHE A  10      -2.527  -8.439 -25.384  1.00  0.00           H
ATOM    153  N   TYR A  11     -10.345  -5.616 -26.312  1.00  0.00           N
ATOM    154  CA  TYR A  11     -11.751  -5.579 -26.697  1.00  0.00           C
ATOM    155  C   TYR A  11     -11.995  -4.659 -27.886  1.00  0.00           C
ATOM    156  O   TYR A  11     -12.913  -4.906 -28.676  1.00  0.00           O
ATOM    157  CB  TYR A  11     -12.610  -5.139 -25.511  1.00  0.00           C
ATOM    158  CG  TYR A  11     -12.819  -6.218 -24.471  1.00  0.00           C
ATOM    159  CD1 TYR A  11     -12.576  -7.553 -24.768  1.00  0.00           C
ATOM    160  CD2 TYR A  11     -13.261  -5.901 -23.193  1.00  0.00           C
ATOM    161  CE1 TYR A  11     -12.766  -8.541 -23.821  1.00  0.00           C
ATOM    162  CE2 TYR A  11     -13.454  -6.883 -22.240  1.00  0.00           C
ATOM    163  CZ  TYR A  11     -13.205  -8.201 -22.559  1.00  0.00           C
ATOM    164  OH  TYR A  11     -13.396  -9.182 -21.613  1.00  0.00           O
ATOM    165  H   TYR A  11     -10.155  -5.154 -25.612  1.00  0.00           H
ATOM    166  HA  TYR A  11     -12.024  -6.460 -26.988  1.00  0.00           H
ATOM    167  HB2 TYR A  11     -12.179  -4.387 -25.075  1.00  0.00           H
ATOM    168  HB3 TYR A  11     -13.483  -4.872 -25.840  1.00  0.00           H
ATOM    169  HD1 TYR A  11     -12.280  -7.795 -25.614  1.00  0.00           H
ATOM    170  HD2 TYR A  11     -13.430  -5.013 -22.975  1.00  0.00           H
ATOM    171  HE1 TYR A  11     -12.599  -9.431 -24.034  1.00  0.00           H
ATOM    172  HE2 TYR A  11     -13.750  -6.656 -21.388  1.00  0.00           H
ATOM    173  HH  TYR A  11     -13.663  -8.840 -20.894  1.00  0.00           H
ATOM    174  N   TRP A  12     -11.194  -3.602 -28.031  1.00  0.00           N
ATOM    175  CA  TRP A  12     -11.371  -2.680 -29.147  1.00  0.00           C
ATOM    176  C   TRP A  12     -10.822  -3.245 -30.451  1.00  0.00           C
ATOM    177  O   TRP A  12     -11.324  -2.905 -31.528  1.00  0.00           O
ATOM    178  CB  TRP A  12     -10.703  -1.340 -28.835  1.00  0.00           C
ATOM    179  CG  TRP A  12     -11.507  -0.468 -27.920  1.00  0.00           C
ATOM    180  CD1 TRP A  12     -11.397  -0.382 -26.563  1.00  0.00           C
ATOM    181  CD2 TRP A  12     -12.545   0.445 -28.297  1.00  0.00           C
ATOM    182  NE1 TRP A  12     -12.302   0.527 -26.071  1.00  0.00           N
ATOM    183  CE2 TRP A  12     -13.019   1.049 -27.116  1.00  0.00           C
ATOM    184  CE3 TRP A  12     -13.120   0.810 -29.519  1.00  0.00           C
ATOM    185  CZ2 TRP A  12     -14.040   1.997 -27.120  1.00  0.00           C
ATOM    186  CZ3 TRP A  12     -14.133   1.751 -29.520  1.00  0.00           C
ATOM    187  CH2 TRP A  12     -14.583   2.334 -28.329  1.00  0.00           C
ATOM    188  H   TRP A  12     -10.548  -3.400 -27.501  1.00  0.00           H
ATOM    189  HA  TRP A  12     -12.319  -2.517 -29.270  1.00  0.00           H
ATOM    190  HB2 TRP A  12      -9.847  -1.508 -28.410  1.00  0.00           H
ATOM    191  HB3 TRP A  12     -10.569  -0.856 -29.665  1.00  0.00           H
ATOM    192  HD1 TRP A  12     -10.796  -0.868 -26.046  1.00  0.00           H
ATOM    193  HE1 TRP A  12     -12.402   0.735 -25.243  1.00  0.00           H
ATOM    194  HE3 TRP A  12     -12.827   0.428 -30.314  1.00  0.00           H
ATOM    195  HZ2 TRP A  12     -14.341   2.386 -26.331  1.00  0.00           H
ATOM    196  HZ3 TRP A  12     -14.523   2.001 -30.326  1.00  0.00           H
ATOM    197  HH2 TRP A  12     -15.266   2.964 -28.361  1.00  0.00           H
ATOM    198  N   HIS A  13      -9.801  -4.102 -30.378  1.00  0.00           N
ATOM    199  CA  HIS A  13      -9.227  -4.680 -31.587  1.00  0.00           C
ATOM    200  C   HIS A  13     -10.095  -5.793 -32.159  1.00  0.00           C
ATOM    201  O   HIS A  13     -10.031  -6.065 -33.363  1.00  0.00           O
ATOM    202  CB  HIS A  13      -7.820  -5.207 -31.301  1.00  0.00           C
ATOM    203  CG  HIS A  13      -6.792  -4.131 -31.142  1.00  0.00           C
ATOM    204  ND1 HIS A  13      -6.302  -3.406 -32.207  1.00  0.00           N
ATOM    205  CD2 HIS A  13      -6.161  -3.656 -30.042  1.00  0.00           C
ATOM    206  CE1 HIS A  13      -5.414  -2.531 -31.770  1.00  0.00           C
ATOM    207  NE2 HIS A  13      -5.310  -2.662 -30.459  1.00  0.00           N
ATOM    208  H   HIS A  13      -9.428  -4.361 -29.647  1.00  0.00           H
ATOM    209  HA  HIS A  13      -9.153  -3.986 -32.261  1.00  0.00           H
ATOM    210  HB2 HIS A  13      -7.840  -5.721 -30.479  1.00  0.00           H
ATOM    211  HB3 HIS A  13      -7.543  -5.775 -32.037  1.00  0.00           H
ATOM    212  HD2 HIS A  13      -6.282  -3.948 -29.167  1.00  0.00           H
ATOM    213  HE1 HIS A  13      -4.942  -1.926 -32.295  1.00  0.00           H
ATOM    214  HE2 HIS A  13      -4.793  -2.200 -29.950  1.00  0.00           H
ATOM    215  N   LYS A  14     -10.905  -6.444 -31.322  1.00  0.00           N
ATOM    216  CA  LYS A  14     -11.763  -7.520 -31.805  1.00  0.00           C
ATOM    217  C   LYS A  14     -12.981  -6.978 -32.543  1.00  0.00           C
ATOM    218  O   LYS A  14     -13.417  -7.564 -33.540  1.00  0.00           O
ATOM    219  CB  LYS A  14     -12.196  -8.410 -30.640  1.00  0.00           C
ATOM    220  CG  LYS A  14     -11.091  -9.298 -30.092  1.00  0.00           C
ATOM    221  CD  LYS A  14     -11.589 -10.150 -28.936  1.00  0.00           C
ATOM    222  CE  LYS A  14     -10.476 -11.017 -28.371  1.00  0.00           C
ATOM    223  NZ  LYS A  14     -10.943 -11.837 -27.219  1.00  0.00           N
ATOM    224  H   LYS A  14     -10.974  -6.283 -30.480  1.00  0.00           H
ATOM    225  HA  LYS A  14     -11.259  -8.068 -32.426  1.00  0.00           H
ATOM    226  HB2 LYS A  14     -12.507  -7.845 -29.916  1.00  0.00           H
ATOM    227  HB3 LYS A  14     -12.917  -8.986 -30.939  1.00  0.00           H
ATOM    228  HG2 LYS A  14     -10.778  -9.890 -30.794  1.00  0.00           H
ATOM    229  HG3 LYS A  14     -10.363  -8.743 -29.770  1.00  0.00           H
ATOM    230  HD2 LYS A  14     -11.914  -9.572 -28.228  1.00  0.00           H
ATOM    231  HD3 LYS A  14     -12.299 -10.732 -29.249  1.00  0.00           H
ATOM    232  HE2 LYS A  14     -10.158 -11.619 -29.062  1.00  0.00           H
ATOM    233  HE3 LYS A  14      -9.753 -10.448 -28.064  1.00  0.00           H
ATOM    234  HZ1 LYS A  14     -10.273 -12.334 -26.908  1.00  0.00           H
ATOM    235  HZ2 LYS A  14     -11.236 -11.306 -26.567  1.00  0.00           H
ATOM    236  HZ3 LYS A  14     -11.606 -12.373 -27.476  1.00  0.00           H
ATOM    237  N   ARG A  15     -13.543  -5.865 -32.069  1.00  0.00           N
ATOM    238  CA  ARG A  15     -14.709  -5.275 -32.714  1.00  0.00           C
ATOM    239  C   ARG A  15     -14.360  -4.533 -33.997  1.00  0.00           C
ATOM    240  O   ARG A  15     -15.237  -4.351 -34.848  1.00  0.00           O
ATOM    241  CB  ARG A  15     -15.421  -4.324 -31.749  1.00 10.00           C
ATOM    242  CG  ARG A  15     -16.040  -5.012 -30.543  1.00 10.00           C
ATOM    243  CD  ARG A  15     -17.207  -5.897 -30.950  1.00 10.00           C
ATOM    244  NE  ARG A  15     -18.309  -5.123 -31.513  1.00 10.00           N
ATOM    245  CZ  ARG A  15     -19.293  -5.644 -32.240  1.00 10.00           C
ATOM    246  NH1 ARG A  15     -19.314  -6.945 -32.495  1.00 10.00           N
ATOM    247  NH2 ARG A  15     -20.256  -4.864 -32.712  1.00 10.00           N
ATOM    248  H   ARG A  15     -13.267  -5.436 -31.377  1.00  0.00           H
ATOM    249  HA  ARG A  15     -15.325  -5.985 -32.950  1.00  0.00           H
ATOM    250  HB2 ARG A  15     -14.779  -3.676 -31.421  1.00 10.00           H
ATOM    251  HB3 ARG A  15     -16.131  -3.868 -32.228  1.00 10.00           H
ATOM    252  HG2 ARG A  15     -15.372  -5.568 -30.113  1.00 10.00           H
ATOM    253  HG3 ARG A  15     -16.368  -4.341 -29.924  1.00 10.00           H
ATOM    254  HD2 ARG A  15     -16.912  -6.538 -31.613  1.00 10.00           H
ATOM    255  HD3 ARG A  15     -17.538  -6.361 -30.165  1.00 10.00           H
ATOM    256  HE  ARG A  15     -18.323  -4.276 -31.365  1.00 10.00           H
ATOM    257 HH11 ARG A  15     -18.694  -7.458 -32.192  1.00 10.00           H
ATOM    258 HH12 ARG A  15     -19.952  -7.278 -32.966  1.00 10.00           H
ATOM    259 HH21 ARG A  15     -20.245  -4.020 -32.548  1.00 10.00           H
ATOM    260 HH22 ARG A  15     -20.892  -5.202 -33.182  1.00 10.00           H
ATOM    261  N   GLN A  16     -13.107  -4.104 -34.155  1.00  0.00           N
ATOM    262  CA  GLN A  16     -12.715  -3.387 -35.363  1.00  0.00           C
ATOM    263  C   GLN A  16     -12.453  -4.341 -36.522  1.00  0.00           C
ATOM    264  O   GLN A  16     -12.768  -4.023 -37.674  1.00  0.00           O
ATOM    265  CB  GLN A  16     -11.477  -2.531 -35.087  1.00  0.00           C
ATOM    266  CG  GLN A  16     -11.109  -1.586 -36.219  1.00  0.00           C
ATOM    267  CD  GLN A  16      -9.920  -0.708 -35.881  1.00  0.00           C
ATOM    268  OE1 GLN A  16      -9.334  -0.824 -34.804  1.00  0.00           O
ATOM    269  NE2 GLN A  16      -9.557   0.177 -36.802  1.00  0.00           N
ATOM    270  H   GLN A  16     -12.474  -4.214 -33.584  1.00  0.00           H
ATOM    271  HA  GLN A  16     -13.436  -2.793 -35.624  1.00  0.00           H
ATOM    272  HB2 GLN A  16     -11.640  -1.994 -34.295  1.00  0.00           H
ATOM    273  HB3 GLN A  16     -10.720  -3.118 -34.935  1.00  0.00           H
ATOM    274  HG2 GLN A  16     -10.883  -2.106 -37.006  1.00  0.00           H
ATOM    275  HG3 GLN A  16     -11.865  -1.008 -36.408  1.00  0.00           H
ATOM    276 HE21 GLN A  16      -9.991   0.229 -37.543  1.00  0.00           H
ATOM    277 HE22 GLN A  16      -8.888   0.698 -36.658  1.00  0.00           H
ATOM    278  N   ASN A  17     -11.882  -5.514 -36.238  1.00  0.00           N
ATOM    279  CA  ASN A  17     -11.600  -6.473 -37.300  1.00  0.00           C
ATOM    280  C   ASN A  17     -12.869  -7.154 -37.797  1.00  0.00           C
ATOM    281  O   ASN A  17     -12.953  -7.519 -38.975  1.00  0.00           O
ATOM    282  CB  ASN A  17     -10.595  -7.517 -36.813  1.00  0.00           C
ATOM    283  CG  ASN A  17      -9.203  -6.944 -36.631  1.00  0.00           C
ATOM    284  OD1 ASN A  17      -8.725  -6.169 -37.460  1.00  0.00           O
ATOM    285  ND2 ASN A  17      -8.544  -7.324 -35.543  1.00  0.00           N
ATOM    286  H   ASN A  17     -11.653  -5.773 -35.451  1.00  0.00           H
ATOM    287  HA  ASN A  17     -11.202  -6.003 -38.049  1.00  0.00           H
ATOM    288  HB2 ASN A  17     -10.891  -7.866 -35.958  1.00  0.00           H
ATOM    289  HB3 ASN A  17     -10.542  -8.234 -37.464  1.00  0.00           H
ATOM    290 HD21 ASN A  17      -7.751  -7.026 -35.395  1.00  0.00           H
ATOM    291 HD22 ASN A  17      -8.910  -7.867 -34.986  1.00  0.00           H
ATOM    292  N   GLU A  18     -13.860  -7.335 -36.923  1.00  0.00           N
ATOM    293  CA  GLU A  18     -15.108  -7.974 -37.320  1.00  0.00           C
ATOM    294  C   GLU A  18     -16.016  -7.048 -38.118  1.00  0.00           C
ATOM    295  O   GLU A  18     -16.891  -7.536 -38.842  1.00  0.00           O
ATOM    296  CB  GLU A  18     -15.854  -8.487 -36.086  1.00  0.00           C
ATOM    297  CG  GLU A  18     -15.201  -9.688 -35.421  1.00  0.00           C
ATOM    298  CD  GLU A  18     -15.961 -10.160 -34.197  1.00  0.00           C
ATOM    299  OE1 GLU A  18     -16.936  -9.485 -33.803  1.00  0.00           O
ATOM    300  OE2 GLU A  18     -15.585 -11.207 -33.629  1.00  0.00           O
ATOM    301  H   GLU A  18     -13.832  -7.097 -36.097  1.00  0.00           H
ATOM    302  HA  GLU A  18     -14.901  -8.739 -37.880  1.00  0.00           H
ATOM    303  HB2 GLU A  18     -15.898  -7.774 -35.430  1.00  0.00           H
ATOM    304  HB3 GLU A  18     -16.751  -8.746 -36.350  1.00  0.00           H
ATOM    305  HG2 GLU A  18     -15.167 -10.421 -36.055  1.00  0.00           H
ATOM    306  HG3 GLU A  18     -14.304  -9.447 -35.143  1.00  0.00           H
ATOM    307  N   ASP A  19     -15.832  -5.734 -38.003  1.00  0.00           N
ATOM    308  CA  ASP A  19     -16.656  -4.779 -38.735  1.00  0.00           C
ATOM    309  C   ASP A  19     -16.155  -4.553 -40.156  1.00  0.00           C
ATOM    310  O   ASP A  19     -16.962  -4.402 -41.080  1.00  0.00           O
ATOM    311  CB  ASP A  19     -16.711  -3.446 -37.984  1.00  0.00           C
ATOM    312  CG  ASP A  19     -17.674  -2.461 -38.616  1.00  0.00           C
ATOM    313  OD1 ASP A  19     -18.900  -2.644 -38.463  1.00  0.00           O
ATOM    314  OD2 ASP A  19     -17.206  -1.503 -39.267  1.00  0.00           O
ATOM    315  H   ASP A  19     -15.233  -5.370 -37.505  1.00  0.00           H
ATOM    316  HA  ASP A  19     -17.560  -5.125 -38.791  1.00  0.00           H
ATOM    317  HB2 ASP A  19     -17.002  -3.608 -37.073  1.00  0.00           H
ATOM    318  HB3 ASP A  19     -15.828  -3.045 -37.985  1.00  0.00           H
ATOM    319  N   SER A  20     -14.835  -4.526 -40.351  1.00  0.00           N
ATOM    320  CA  SER A  20     -14.273  -4.316 -41.679  1.00  0.00           C
ATOM    321  C   SER A  20     -14.330  -5.566 -42.546  1.00  0.00           C
ATOM    322  O   SER A  20     -14.281  -5.452 -43.776  1.00  0.00           O
ATOM    323  CB  SER A  20     -12.825  -3.834 -41.567  1.00  0.00           C
ATOM    324  OG  SER A  20     -12.244  -3.664 -42.848  1.00  0.00           O
ATOM    325  H   SER A  20     -14.248  -4.627 -39.731  1.00  0.00           H
ATOM    326  HA  SER A  20     -14.782  -3.622 -42.127  1.00  0.00           H
ATOM    327  HB2 SER A  20     -12.811  -2.984 -41.100  1.00  0.00           H
ATOM    328  HB3 SER A  20     -12.311  -4.492 -41.073  1.00  0.00           H
ATOM    329  HG  SER A  20     -11.450  -3.400 -42.771  1.00  0.00           H
ATOM    330  N   THR A  21     -14.432  -6.745 -41.942  1.00  0.00           N
ATOM    331  CA  THR A  21     -14.493  -7.990 -42.698  1.00  0.00           C
ATOM    332  C   THR A  21     -15.918  -8.530 -42.751  1.00  0.00           C
ATOM    333  O   THR A  21     -16.459  -8.778 -43.829  1.00  0.00           O
ATOM    334  CB  THR A  21     -13.569  -9.064 -42.093  1.00  0.00           C
ATOM    335  OG1 THR A  21     -13.970  -9.340 -40.746  1.00  0.00           O
ATOM    336  CG2 THR A  21     -12.124  -8.589 -42.101  1.00  0.00           C
ATOM    337  H   THR A  21     -14.468  -6.852 -41.089  1.00  0.00           H
ATOM    338  HA  THR A  21     -14.201  -7.826 -43.608  1.00  0.00           H
ATOM    339  HB  THR A  21     -13.628  -9.876 -42.621  1.00  0.00           H
ATOM    340  HG1 THR A  21     -13.917  -8.642 -40.282  1.00  0.00           H
ATOM    341 HG21 THR A  21     -11.546  -9.282 -41.747  1.00  0.00           H
ATOM    342 HG22 THR A  21     -11.849  -8.382 -43.008  1.00  0.00           H
ATOM    343 HG23 THR A  21     -12.033  -7.793 -41.554  1.00  0.00           H
TER
END
"""

all_aa_all_d="""
ATOM      1  N   GLY A   1      -5.398  -1.491 -11.512  1.00  0.00           N
ATOM      2  CA  GLY A   1      -4.707  -0.522 -12.342  1.00  0.00           C
ATOM      3  C   GLY A   1      -4.028  -1.140 -13.548  1.00  0.00           C
ATOM      4  O   GLY A   1      -4.570  -1.108 -14.652  1.00  0.00           O
ATOM      5  D1  GLY A   1      -6.425  -1.359 -11.608  1.00  0.00           D
ATOM      6  D2  GLY A   1      -5.142  -2.452 -11.815  1.00  0.00           D
ATOM      7  D3  GLY A   1      -5.122  -1.356 -10.518  1.00  0.00           D
ATOM      8  DA2 GLY A   1      -5.433   0.205 -12.707  1.00  0.00           D
ATOM      9  DA3 GLY A   1      -3.971   0.015 -11.746  1.00  0.00           D
ATOM     10  N   PRO A   2      -2.833  -1.701 -13.342  1.00  0.00           N
ATOM     11  CA  PRO A   2      -2.123  -2.328 -14.468  1.00  0.00           C
ATOM     12  C   PRO A   2      -2.829  -3.557 -15.012  1.00  0.00           C
ATOM     13  O   PRO A   2      -2.735  -3.826 -16.216  1.00  0.00           O
ATOM     14  CB  PRO A   2      -0.752  -2.683 -13.871  1.00  0.00           C
ATOM     15  CG  PRO A   2      -0.641  -1.867 -12.615  1.00  0.00           C
ATOM     16  CD  PRO A   2      -2.037  -1.721 -12.104  1.00  0.00           C
ATOM     17  DA  PRO A   2      -1.986  -1.607 -15.274  1.00  0.00           D
ATOM     18  DB2 PRO A   2      -0.717  -3.748 -13.642  1.00  0.00           D
ATOM     19  DB3 PRO A   2       0.035  -2.414 -14.575  1.00  0.00           D
ATOM     20  DD2 PRO A   2      -2.310  -2.577 -11.487  1.00  0.00           D
ATOM     21  DD3 PRO A   2      -2.133  -0.784 -11.557  1.00  0.00           D
ATOM     22  DG2 PRO A   2      -0.020  -2.394 -11.890  1.00  0.00           D
ATOM     23  DG3 PRO A   2      -0.214  -0.892 -12.849  1.00  0.00           D
ATOM     24  N   ALA A   3      -3.531  -4.309 -14.168  1.00  0.00           N
ATOM     25  CA  ALA A   3      -4.240  -5.508 -14.591  1.00  0.00           C
ATOM     26  C   ALA A   3      -5.691  -5.236 -14.967  1.00  0.00           C
ATOM     27  O   ALA A   3      -6.458  -6.186 -15.156  1.00  0.00           O
ATOM     28  CB  ALA A   3      -4.179  -6.571 -13.492  1.00  0.00           C
ATOM     29  D   ALA A   3      -3.627  -4.108 -13.173  1.00  0.00           D
ATOM     30  DA  ALA A   3      -3.742  -5.915 -15.471  1.00  0.00           D
ATOM     31  DB1 ALA A   3      -4.714  -7.459 -13.828  1.00  0.00           D
ATOM     32  DB2 ALA A   3      -3.136  -6.818 -13.295  1.00  0.00           D
ATOM     33  DB3 ALA A   3      -4.645  -6.175 -12.590  1.00  0.00           D
ATOM     34  N   VAL A   4      -6.084  -3.970 -15.080  1.00  0.00           N
ATOM     35  CA  VAL A   4      -7.445  -3.598 -15.431  1.00  0.00           C
ATOM     36  C   VAL A   4      -7.517  -2.959 -16.812  1.00  0.00           C
ATOM     37  O   VAL A   4      -8.399  -3.291 -17.606  1.00  0.00           O
ATOM     38  CB  VAL A   4      -8.051  -2.664 -14.360  1.00  0.00           C
ATOM     39  CG1 VAL A   4      -9.502  -2.346 -14.689  1.00  0.00           C
ATOM     40  CG2 VAL A   4      -7.936  -3.293 -12.980  1.00  0.00           C
ATOM     41  D   VAL A   4      -5.470  -3.169 -14.932  1.00  0.00           D
ATOM     42  DA  VAL A   4      -8.057  -4.499 -15.458  1.00  0.00           D
ATOM     43  DB  VAL A   4      -7.495  -1.727 -14.350  1.00  0.00           D
ATOM     44 DG11 VAL A   4      -9.952  -1.831 -13.840  1.00  0.00           D
ATOM     45 DG12 VAL A   4      -9.537  -1.707 -15.571  1.00  0.00           D
ATOM     46 DG13 VAL A   4     -10.034  -3.278 -14.882  1.00  0.00           D
ATOM     47 DG21 VAL A   4      -8.449  -2.658 -12.258  1.00  0.00           D
ATOM     48 DG22 VAL A   4      -8.398  -4.280 -13.001  1.00  0.00           D
ATOM     49 DG23 VAL A   4      -6.882  -3.381 -12.716  1.00  0.00           D
ATOM     50  N   LEU A   5      -6.594  -2.044 -17.118  1.00  0.00           N
ATOM     51  CA  LEU A   5      -6.605  -1.378 -18.415  1.00  0.00           C
ATOM     52  C   LEU A   5      -6.149  -2.294 -19.543  1.00  0.00           C
ATOM     53  O   LEU A   5      -6.429  -2.003 -20.711  1.00  0.00           O
ATOM     54  CB  LEU A   5      -5.725  -0.129 -18.373  1.00  0.00           C
ATOM     55  CG  LEU A   5      -6.208   1.011 -17.473  1.00  0.00           C
ATOM     56  CD1 LEU A   5      -5.151   2.100 -17.371  1.00  0.00           C
ATOM     57  CD2 LEU A   5      -7.522   1.580 -17.985  1.00  0.00           C
ATOM     58  D   LEU A   5      -5.840  -1.749 -16.498  1.00  0.00           D
ATOM     59  DA  LEU A   5      -7.624  -1.063 -18.638  1.00  0.00           D
ATOM     60  DB2 LEU A   5      -4.735  -0.420 -18.023  1.00  0.00           D
ATOM     61  DB3 LEU A   5      -5.647   0.268 -19.385  1.00  0.00           D
ATOM     62  DG  LEU A   5      -6.382   0.619 -16.471  1.00  0.00           D
ATOM     63 DD11 LEU A   5      -5.523   2.896 -16.725  1.00  0.00           D
ATOM     64 DD12 LEU A   5      -4.242   1.673 -16.949  1.00  0.00           D
ATOM     65 DD13 LEU A   5      -4.950   2.493 -18.368  1.00  0.00           D
ATOM     66 DD21 LEU A   5      -7.762   2.481 -17.420  1.00  0.00           D
ATOM     67 DD22 LEU A   5      -7.415   1.822 -19.042  1.00  0.00           D
ATOM     68 DD23 LEU A   5      -8.308   0.837 -17.852  1.00  0.00           D
ATOM     69  N   ILE A   6      -5.454  -3.390 -19.225  1.00  0.00           N
ATOM     70  CA  ILE A   6      -4.992  -4.302 -20.263  1.00  0.00           C
ATOM     71  C   ILE A   6      -6.126  -5.159 -20.808  1.00  0.00           C
ATOM     72  O   ILE A   6      -6.024  -5.676 -21.927  1.00  0.00           O
ATOM     73  CB  ILE A   6      -3.853  -5.192 -19.732  1.00  0.00           C
ATOM     74  CG1 ILE A   6      -4.261  -5.852 -18.413  1.00  0.00           C
ATOM     75  CG2 ILE A   6      -2.580  -4.378 -19.554  1.00  0.00           C
ATOM     76  CD1 ILE A   6      -3.337  -6.967 -17.977  1.00  0.00           C
ATOM     77  D   ILE A   6      -5.206  -3.652 -18.273  1.00  0.00           D
ATOM     78  DA  ILE A   6      -4.594  -3.715 -21.091  1.00  0.00           D
ATOM     79  DB  ILE A   6      -3.660  -5.976 -20.464  1.00  0.00           D
ATOM     80 DD11 ILE A   6      -3.755  -7.449 -17.093  1.00  0.00           D
ATOM     81 DD12 ILE A   6      -3.248  -7.690 -18.788  1.00  0.00           D
ATOM     82 DD13 ILE A   6      -2.359  -6.547 -17.744  1.00  0.00           D
ATOM     83 DG12 ILE A   6      -4.253  -5.103 -17.622  1.00  0.00           D
ATOM     84 DG13 ILE A   6      -5.262  -6.267 -18.520  1.00  0.00           D
ATOM     85 DG21 ILE A   6      -1.773  -5.043 -19.247  1.00  0.00           D
ATOM     86 DG22 ILE A   6      -2.329  -3.902 -20.502  1.00  0.00           D
ATOM     87 DG23 ILE A   6      -2.749  -3.619 -18.790  1.00  0.00           D
ATOM     88  N   MET A   7      -7.209  -5.326 -20.047  1.00  0.00           N
ATOM     89  CA  MET A   7      -8.336  -6.128 -20.506  1.00  0.00           C
ATOM     90  C   MET A   7      -9.245  -5.371 -21.465  1.00  0.00           C
ATOM     91  O   MET A   7      -9.999  -6.005 -22.211  1.00  0.00           O
ATOM     92  CB  MET A   7      -9.151  -6.624 -19.310  1.00  0.00           C
ATOM     93  CG  MET A   7      -8.766  -8.014 -18.830  1.00  0.00           C
ATOM     94  SD  MET A   7      -7.227  -8.026 -17.891  1.00  0.00           S
ATOM     95  CE  MET A   7      -7.281  -9.665 -17.172  1.00  0.00           C
ATOM     96  D   MET A   7      -7.332  -4.922 -19.118  1.00  0.00           D
ATOM     97  DA  MET A   7      -7.946  -7.005 -21.022  1.00  0.00           D
ATOM     98  DB2 MET A   7      -9.009  -5.934 -18.478  1.00  0.00           D
ATOM     99  DB3 MET A   7     -10.204  -6.650 -19.591  1.00  0.00           D
ATOM    100  DE1 MET A   7      -6.390  -9.814 -16.563  1.00  0.00           D
ATOM    101  DE2 MET A   7      -8.174  -9.751 -16.553  1.00  0.00           D
ATOM    102  DE3 MET A   7      -7.312 -10.403 -17.974  1.00  0.00           D
ATOM    103  DG2 MET A   7      -9.557  -8.399 -18.186  1.00  0.00           D
ATOM    104  DG3 MET A   7      -8.639  -8.666 -19.694  1.00  0.00           D
ATOM    105  N   MSE A   8      -9.193  -4.043 -21.462  1.00  0.00           N
ATOM    106  CA  MSE A   8     -10.030  -3.242 -22.348  1.00  0.00           C
ATOM    107  C   MSE A   8      -9.310  -2.934 -23.656  1.00  0.00           C
ATOM    108  O   MSE A   8      -9.914  -2.436 -24.606  1.00  0.00           O
ATOM    109  CB  MSE A   8     -10.449  -1.942 -21.659  1.00  0.00           C
ATOM    110  CG  MSE A   8     -11.716  -2.059 -20.827  1.00  0.00           C
ATOM    111 SE   MSE A   8     -11.431  -3.005 -19.146  1.00  0.00          Se
ATOM    112  CE  MSE A   8     -13.097  -2.534 -18.248  1.00  0.00           C
ATOM    113  D   MSE A   8      -8.582  -3.492 -20.858  1.00  0.00           D
ATOM    114  DA  MSE A   8     -10.937  -3.803 -22.573  1.00  0.00           D
ATOM    115  DB2 MSE A   8      -9.645  -1.623 -20.996  1.00  0.00           D
ATOM    116  DB3 MSE A   8     -10.621  -1.182 -22.421  1.00  0.00           D
ATOM    117  DE1 MSE A   8     -13.109  -2.994 -17.260  1.00  0.00           D
ATOM    118  DE2 MSE A   8     -13.155  -1.450 -18.155  1.00  0.00           D
ATOM    119  DE3 MSE A   8     -13.935  -2.902 -18.840  1.00  0.00           D
ATOM    120  DG2 MSE A   8     -12.081  -1.059 -20.593  1.00  0.00           D
ATOM    121  DG3 MSE A   8     -12.467  -2.605 -21.398  1.00  0.00           D
ATOM    122  N   CYS A   9      -8.010  -3.234 -23.698  1.00  0.00           N
ATOM    123  CA  CYS A   9      -7.229  -2.980 -24.904  1.00  0.00           C
ATOM    124  C   CYS A   9      -7.519  -4.012 -25.987  1.00  0.00           C
ATOM    125  O   CYS A   9      -7.559  -3.673 -27.175  1.00  0.00           O
ATOM    126  CB  CYS A   9      -5.737  -2.965 -24.569  1.00  0.00           C
ATOM    127  SG  CYS A   9      -5.172  -1.457 -23.746  1.00  0.00           S
ATOM    128  D   CYS A   9      -7.477  -3.644 -22.931  1.00  0.00           D
ATOM    129  DA  CYS A   9      -7.495  -1.998 -25.297  1.00  0.00           D
ATOM    130  DB2 CYS A   9      -5.519  -3.804 -23.908  1.00  0.00           D
ATOM    131  DB3 CYS A   9      -5.170  -3.069 -25.494  1.00  0.00           D
ATOM    132  DG  CYS A   9      -5.979  -1.162 -22.773  1.00  0.00           D
ATOM    133  N   PHE A  10      -7.723  -5.272 -25.600  1.00  0.00           N
ATOM    134  CA  PHE A  10      -8.009  -6.322 -26.569  1.00  0.00           C
ATOM    135  C   PHE A  10      -9.463  -6.325 -27.020  1.00  0.00           C
ATOM    136  O   PHE A  10      -9.786  -6.978 -28.018  1.00  0.00           O
ATOM    137  CB  PHE A  10      -7.650  -7.690 -25.985  1.00  0.00           C
ATOM    138  CG  PHE A  10      -6.173  -7.906 -25.812  1.00  0.00           C
ATOM    139  CD1 PHE A  10      -5.380  -8.258 -26.891  1.00  0.00           C
ATOM    140  CD2 PHE A  10      -5.579  -7.757 -24.570  1.00  0.00           C
ATOM    141  CE1 PHE A  10      -4.021  -8.457 -26.735  1.00  0.00           C
ATOM    142  CE2 PHE A  10      -4.220  -7.955 -24.407  1.00  0.00           C
ATOM    143  CZ  PHE A  10      -3.441  -8.305 -25.491  1.00  0.00           C
ATOM    144  D   PHE A  10      -7.697  -5.591 -24.632  1.00  0.00           D
ATOM    145  DA  PHE A  10      -7.388  -6.163 -27.451  1.00  0.00           D
ATOM    146  DB2 PHE A  10      -8.118  -7.788 -25.005  1.00  0.00           D
ATOM    147  DB3 PHE A  10      -8.024  -8.466 -26.652  1.00  0.00           D
ATOM    148  DD1 PHE A  10      -5.828  -8.378 -27.866  1.00  0.00           D
ATOM    149  DD2 PHE A  10      -6.184  -7.483 -23.719  1.00  0.00           D
ATOM    150  DE1 PHE A  10      -3.414  -8.731 -27.585  1.00  0.00           D
ATOM    151  DE2 PHE A  10      -3.769  -7.835 -23.433  1.00  0.00           D
ATOM    152  DZ  PHE A  10      -2.379  -8.460 -25.367  1.00  0.00           D
ATOM    153  N   TYR A  11     -10.345  -5.616 -26.312  1.00  0.00           N
ATOM    154  CA  TYR A  11     -11.751  -5.579 -26.697  1.00  0.00           C
ATOM    155  C   TYR A  11     -11.995  -4.659 -27.886  1.00  0.00           C
ATOM    156  O   TYR A  11     -12.913  -4.906 -28.676  1.00  0.00           O
ATOM    157  CB  TYR A  11     -12.610  -5.139 -25.511  1.00  0.00           C
ATOM    158  CG  TYR A  11     -12.819  -6.218 -24.471  1.00  0.00           C
ATOM    159  CD1 TYR A  11     -12.576  -7.553 -24.768  1.00  0.00           C
ATOM    160  CD2 TYR A  11     -13.261  -5.901 -23.193  1.00  0.00           C
ATOM    161  CE1 TYR A  11     -12.766  -8.541 -23.821  1.00  0.00           C
ATOM    162  CE2 TYR A  11     -13.454  -6.883 -22.240  1.00  0.00           C
ATOM    163  CZ  TYR A  11     -13.205  -8.201 -22.559  1.00  0.00           C
ATOM    164  OH  TYR A  11     -13.396  -9.182 -21.613  1.00  0.00           O
ATOM    165  D   TYR A  11     -10.120  -5.067 -25.482  1.00  0.00           D
ATOM    166  DA  TYR A  11     -12.059  -6.569 -27.026  1.00  0.00           D
ATOM    167  DB2 TYR A  11     -12.126  -4.294 -25.021  1.00  0.00           D
ATOM    168  DB3 TYR A  11     -13.590  -4.839 -25.880  1.00  0.00           D
ATOM    169  DD1 TYR A  11     -12.232  -7.838 -25.749  1.00  0.00           D
ATOM    170  DD2 TYR A  11     -13.457  -4.870 -22.940  1.00  0.00           D
ATOM    171  DE1 TYR A  11     -12.572  -9.574 -24.068  1.00  0.00           D
ATOM    172  DE2 TYR A  11     -13.798  -6.619 -21.251  1.00  0.00           D
ATOM    173  DH  TYR A  11     -13.707  -8.783 -20.774  1.00  0.00           D
ATOM    174  N   TRP A  12     -11.194  -3.602 -28.031  1.00  0.00           N
ATOM    175  CA  TRP A  12     -11.371  -2.680 -29.147  1.00  0.00           C
ATOM    176  C   TRP A  12     -10.822  -3.245 -30.451  1.00  0.00           C
ATOM    177  O   TRP A  12     -11.324  -2.905 -31.528  1.00  0.00           O
ATOM    178  CB  TRP A  12     -10.703  -1.340 -28.835  1.00  0.00           C
ATOM    179  CG  TRP A  12     -11.507  -0.468 -27.920  1.00  0.00           C
ATOM    180  CD1 TRP A  12     -11.397  -0.382 -26.563  1.00  0.00           C
ATOM    181  CD2 TRP A  12     -12.545   0.445 -28.297  1.00  0.00           C
ATOM    182  NE1 TRP A  12     -12.302   0.527 -26.071  1.00  0.00           N
ATOM    183  CE2 TRP A  12     -13.019   1.049 -27.116  1.00  0.00           C
ATOM    184  CE3 TRP A  12     -13.120   0.810 -29.519  1.00  0.00           C
ATOM    185  CZ2 TRP A  12     -14.040   1.997 -27.120  1.00  0.00           C
ATOM    186  CZ3 TRP A  12     -14.133   1.751 -29.520  1.00  0.00           C
ATOM    187  CH2 TRP A  12     -14.583   2.334 -28.329  1.00  0.00           C
ATOM    188  D   TRP A  12     -10.427  -3.362 -27.402  1.00  0.00           D
ATOM    189  DA  TRP A  12     -12.437  -2.497 -29.286  1.00  0.00           D
ATOM    190  DB2 TRP A  12      -9.742  -1.529 -28.357  1.00  0.00           D
ATOM    191  DB3 TRP A  12     -10.552  -0.796 -29.768  1.00  0.00           D
ATOM    192  DD1 TRP A  12     -10.700  -0.946 -25.963  1.00  0.00           D
ATOM    193  DE1 TRP A  12     -12.421   0.774 -25.088  1.00  0.00           D
ATOM    194  DE3 TRP A  12     -12.780   0.366 -30.443  1.00  0.00           D
ATOM    195  DH2 TRP A  12     -15.376   3.066 -28.366  1.00  0.00           D
ATOM    196  DZ2 TRP A  12     -14.389   2.448 -26.203  1.00  0.00           D
ATOM    197  DZ3 TRP A  12     -14.585   2.042 -30.457  1.00  0.00           D
ATOM    198  N   HIS A  13      -9.801  -4.102 -30.378  1.00  0.00           N
ATOM    199  CA  HIS A  13      -9.227  -4.680 -31.587  1.00  0.00           C
ATOM    200  C   HIS A  13     -10.095  -5.793 -32.159  1.00  0.00           C
ATOM    201  O   HIS A  13     -10.031  -6.065 -33.363  1.00  0.00           O
ATOM    202  CB  HIS A  13      -7.820  -5.207 -31.301  1.00  0.00           C
ATOM    203  CG  HIS A  13      -6.792  -4.131 -31.142  1.00  0.00           C
ATOM    204  ND1 HIS A  13      -6.302  -3.406 -32.207  1.00  0.00           N
ATOM    205  CD2 HIS A  13      -6.161  -3.656 -30.042  1.00  0.00           C
ATOM    206  CE1 HIS A  13      -5.414  -2.531 -31.770  1.00  0.00           C
ATOM    207  NE2 HIS A  13      -5.310  -2.662 -30.459  1.00  0.00           N
ATOM    208  D   HIS A  13      -9.359  -4.409 -29.511  1.00  0.00           D
ATOM    209  DA  HIS A  13      -9.144  -3.900 -32.344  1.00  0.00           D
ATOM    210  DB2 HIS A  13      -7.843  -5.785 -30.377  1.00  0.00           D
ATOM    211  DB3 HIS A  13      -7.509  -5.845 -32.128  1.00  0.00           D
ATOM    212  DD2 HIS A  13      -6.301  -3.995 -29.026  1.00  0.00           D
ATOM    213  DE1 HIS A  13      -4.866  -1.828 -32.380  1.00  0.00           D
ATOM    214  DE2 HIS A  13      -4.697  -2.115 -29.855  1.00  0.00           D
ATOM    215  N   LYS A  14     -10.905  -6.444 -31.322  1.00  0.00           N
ATOM    216  CA  LYS A  14     -11.763  -7.520 -31.805  1.00  0.00           C
ATOM    217  C   LYS A  14     -12.981  -6.978 -32.543  1.00  0.00           C
ATOM    218  O   LYS A  14     -13.417  -7.564 -33.540  1.00  0.00           O
ATOM    219  CB  LYS A  14     -12.196  -8.410 -30.640  1.00  0.00           C
ATOM    220  CG  LYS A  14     -11.091  -9.298 -30.092  1.00  0.00           C
ATOM    221  CD  LYS A  14     -11.589 -10.150 -28.936  1.00  0.00           C
ATOM    222  CE  LYS A  14     -10.476 -11.017 -28.371  1.00  0.00           C
ATOM    223  NZ  LYS A  14     -10.943 -11.837 -27.219  1.00  0.00           N
ATOM    224  D   LYS A  14     -10.987  -6.253 -30.324  1.00  0.00           D
ATOM    225  DA  LYS A  14     -11.196  -8.136 -32.503  1.00  0.00           D
ATOM    226  DB2 LYS A  14     -12.546  -7.775 -29.826  1.00  0.00           D
ATOM    227  DB3 LYS A  14     -13.006  -9.057 -30.976  1.00  0.00           D
ATOM    228  DD2 LYS A  14     -11.954  -9.500 -28.141  1.00  0.00           D
ATOM    229  DD3 LYS A  14     -12.387 -10.804 -29.288  1.00  0.00           D
ATOM    230  DE2 LYS A  14     -10.119 -11.693 -29.148  1.00  0.00           D
ATOM    231  DE3 LYS A  14      -9.663 -10.378 -28.026  1.00  0.00           D
ATOM    232  DG2 LYS A  14     -10.739  -9.963 -30.881  1.00  0.00           D
ATOM    233  DG3 LYS A  14     -10.273  -8.675 -29.731  1.00  0.00           D
ATOM    234  DZ1 LYS A  14     -10.160 -12.418 -26.856  1.00  0.00           D
ATOM    235  DZ2 LYS A  14     -11.286 -11.217 -26.458  1.00  0.00           D
ATOM    236  DZ3 LYS A  14     -11.717 -12.463 -27.519  1.00  0.00           D
ATOM    237  N   ARG A  15     -13.543  -5.865 -32.069  1.00  0.00           N
ATOM    238  CA  ARG A  15     -14.709  -5.275 -32.714  1.00  0.00           C
ATOM    239  C   ARG A  15     -14.360  -4.533 -33.997  1.00  0.00           C
ATOM    240  O   ARG A  15     -15.237  -4.351 -34.848  1.00  0.00           O
ATOM    241  CB  ARG A  15     -15.421  -4.324 -31.749  1.00 10.00           C
ATOM    242  CG  ARG A  15     -16.040  -5.012 -30.543  1.00 10.00           C
ATOM    243  CD  ARG A  15     -17.207  -5.897 -30.950  1.00 10.00           C
ATOM    244  NE  ARG A  15     -18.309  -5.123 -31.513  1.00 10.00           N
ATOM    245  CZ  ARG A  15     -19.293  -5.644 -32.240  1.00 10.00           C
ATOM    246  NH1 ARG A  15     -19.314  -6.945 -32.495  1.00 10.00           N
ATOM    247  NH2 ARG A  15     -20.256  -4.864 -32.712  1.00 10.00           N
ATOM    248  D   ARG A  15     -13.215  -5.356 -31.248  1.00  0.00           D
ATOM    249  DA  ARG A  15     -15.400  -6.073 -32.981  1.00  0.00           D
ATOM    250  DB2 ARG A  15     -14.699  -3.595 -31.381  1.00 10.00           D
ATOM    251  DB3 ARG A  15     -16.219  -3.812 -32.287  1.00 10.00           D
ATOM    252  DD2 ARG A  15     -16.877  -6.620 -31.694  1.00 10.00           D
ATOM    253  DD3 ARG A  15     -17.580  -6.417 -30.067  1.00 10.00           D
ATOM    254  DE  ARG A  15     -18.325  -4.118 -31.338  1.00 10.00           D
ATOM    255  DG2 ARG A  15     -15.289  -5.637 -30.060  1.00 10.00           D
ATOM    256  DG3 ARG A  15     -16.409  -4.258 -29.848  1.00 10.00           D
ATOM    257 DH11 ARG A  15     -18.579  -7.553 -32.136  1.00 10.00           D
ATOM    258 DH12 ARG A  15     -20.071  -7.340 -33.053  1.00 10.00           D
ATOM    259 DH21 ARG A  15     -20.242  -3.863 -32.518  1.00 10.00           D
ATOM    260 DH22 ARG A  15     -21.010  -5.265 -33.270  1.00 10.00           D
ATOM    261  N   GLN A  16     -13.107  -4.104 -34.155  1.00  0.00           N
ATOM    262  CA  GLN A  16     -12.715  -3.387 -35.363  1.00  0.00           C
ATOM    263  C   GLN A  16     -12.453  -4.341 -36.522  1.00  0.00           C
ATOM    264  O   GLN A  16     -12.768  -4.023 -37.674  1.00  0.00           O
ATOM    265  CB  GLN A  16     -11.477  -2.531 -35.087  1.00  0.00           C
ATOM    266  CG  GLN A  16     -11.109  -1.586 -36.219  1.00  0.00           C
ATOM    267  CD  GLN A  16      -9.920  -0.708 -35.881  1.00  0.00           C
ATOM    268  OE1 GLN A  16      -9.334  -0.824 -34.804  1.00  0.00           O
ATOM    269  NE2 GLN A  16      -9.557   0.177 -36.802  1.00  0.00           N
ATOM    270  D   GLN A  16     -12.356  -4.235 -33.477  1.00  0.00           D
ATOM    271  DA  GLN A  16     -13.525  -2.719 -35.656  1.00  0.00           D
ATOM    272  DB2 GLN A  16     -11.660  -1.928 -34.198  1.00  0.00           D
ATOM    273  DB3 GLN A  16     -10.626  -3.191 -34.916  1.00  0.00           D
ATOM    274  DG2 GLN A  16     -10.856  -2.171 -37.103  1.00  0.00           D
ATOM    275  DG3 GLN A  16     -11.959  -0.937 -36.431  1.00  0.00           D
ATOM    276 DE21 GLN A  16     -10.071   0.239 -37.681  1.00  0.00           D
ATOM    277 DE22 GLN A  16      -8.764   0.795 -36.631  1.00  0.00           D
ATOM    278  N   ASN A  17     -11.882  -5.514 -36.238  1.00  0.00           N
ATOM    279  CA  ASN A  17     -11.600  -6.473 -37.300  1.00  0.00           C
ATOM    280  C   ASN A  17     -12.869  -7.154 -37.797  1.00  0.00           C
ATOM    281  O   ASN A  17     -12.953  -7.519 -38.975  1.00  0.00           O
ATOM    282  CB  ASN A  17     -10.595  -7.517 -36.813  1.00  0.00           C
ATOM    283  CG  ASN A  17      -9.203  -6.944 -36.631  1.00  0.00           C
ATOM    284  OD1 ASN A  17      -8.725  -6.169 -37.460  1.00  0.00           O
ATOM    285  ND2 ASN A  17      -8.544  -7.324 -35.543  1.00  0.00           N
ATOM    286  D   ASN A  17     -11.610  -5.821 -35.304  1.00  0.00           D
ATOM    287  DA  ASN A  17     -11.152  -5.945 -38.142  1.00  0.00           D
ATOM    288  DB2 ASN A  17     -10.927  -7.909 -35.852  1.00  0.00           D
ATOM    289  DB3 ASN A  17     -10.536  -8.322 -37.545  1.00  0.00           D
ATOM    290 DD21 ASN A  17      -7.603  -6.971 -35.367  1.00  0.00           D
ATOM    291 DD22 ASN A  17      -8.979  -7.968 -34.883  1.00  0.00           D
ATOM    292  N   GLU A  18     -13.860  -7.335 -36.923  1.00  0.00           N
ATOM    293  CA  GLU A  18     -15.108  -7.974 -37.320  1.00  0.00           C
ATOM    294  C   GLU A  18     -16.016  -7.048 -38.118  1.00  0.00           C
ATOM    295  O   GLU A  18     -16.891  -7.536 -38.842  1.00  0.00           O
ATOM    296  CB  GLU A  18     -15.854  -8.487 -36.086  1.00  0.00           C
ATOM    297  CG  GLU A  18     -15.201  -9.688 -35.421  1.00  0.00           C
ATOM    298  CD  GLU A  18     -15.961 -10.160 -34.197  1.00  0.00           C
ATOM    299  OE1 GLU A  18     -16.936  -9.485 -33.803  1.00  0.00           O
ATOM    300  OE2 GLU A  18     -15.585 -11.207 -33.629  1.00  0.00           O
ATOM    301  D   GLU A  18     -13.827  -7.052 -35.944  1.00  0.00           D
ATOM    302  DA  GLU A  18     -14.876  -8.833 -37.949  1.00  0.00           D
ATOM    303  DB2 GLU A  18     -15.904  -7.686 -35.349  1.00  0.00           D
ATOM    304  DB3 GLU A  18     -16.862  -8.778 -36.382  1.00  0.00           D
ATOM    305  DG2 GLU A  18     -15.163 -10.512 -36.133  1.00  0.00           D
ATOM    306  DG3 GLU A  18     -14.192  -9.417 -35.109  1.00  0.00           D
ATOM    307  N   ASP A  19     -15.832  -5.734 -38.003  1.00  0.00           N
ATOM    308  CA  ASP A  19     -16.656  -4.779 -38.735  1.00  0.00           C
ATOM    309  C   ASP A  19     -16.155  -4.553 -40.156  1.00  0.00           C
ATOM    310  O   ASP A  19     -16.962  -4.402 -41.080  1.00  0.00           O
ATOM    311  CB  ASP A  19     -16.711  -3.446 -37.984  1.00  0.00           C
ATOM    312  CG  ASP A  19     -17.674  -2.461 -38.616  1.00  0.00           C
ATOM    313  OD1 ASP A  19     -18.900  -2.644 -38.463  1.00  0.00           O
ATOM    314  OD2 ASP A  19     -17.206  -1.503 -39.267  1.00  0.00           O
ATOM    315  D   ASP A  19     -15.122  -5.302 -37.412  1.00  0.00           D
ATOM    316  DA  ASP A  19     -17.672  -5.168 -38.798  1.00  0.00           D
ATOM    317  DB2 ASP A  19     -17.038  -3.628 -36.960  1.00  0.00           D
ATOM    318  DB3 ASP A  19     -15.718  -2.996 -37.985  1.00  0.00           D
ATOM    319  N   SER A  20     -14.835  -4.526 -40.351  1.00  0.00           N
ATOM    320  CA  SER A  20     -14.273  -4.316 -41.679  1.00  0.00           C
ATOM    321  C   SER A  20     -14.330  -5.566 -42.546  1.00  0.00           C
ATOM    322  O   SER A  20     -14.281  -5.452 -43.776  1.00  0.00           O
ATOM    323  CB  SER A  20     -12.825  -3.834 -41.567  1.00  0.00           C
ATOM    324  OG  SER A  20     -12.244  -3.664 -42.848  1.00  0.00           O
ATOM    325  D   SER A  20     -14.139  -4.645 -39.615  1.00  0.00           D
ATOM    326  DA  SER A  20     -14.845  -3.537 -42.182  1.00  0.00           D
ATOM    327  DB2 SER A  20     -12.809  -2.879 -41.042  1.00  0.00           D
ATOM    328  DB3 SER A  20     -12.248  -4.573 -41.012  1.00  0.00           D
ATOM    329  DG  SER A  20     -11.318  -3.355 -42.758  1.00  0.00           D
ATOM    330  N   THR A  21     -14.432  -6.745 -41.942  1.00  0.00           N
ATOM    331  CA  THR A  21     -14.493  -7.990 -42.698  1.00  0.00           C
ATOM    332  C   THR A  21     -15.918  -8.530 -42.751  1.00  0.00           C
ATOM    333  O   THR A  21     -16.459  -8.778 -43.829  1.00  0.00           O
ATOM    334  CB  THR A  21     -13.569  -9.064 -42.093  1.00  0.00           C
ATOM    335  OG1 THR A  21     -13.970  -9.340 -40.746  1.00  0.00           O
ATOM    336  CG2 THR A  21     -12.124  -8.589 -42.101  1.00  0.00           C
ATOM    337  D   THR A  21     -14.475  -6.871 -40.931  1.00  0.00           D
ATOM    338  DA  THR A  21     -14.165  -7.805 -43.721  1.00  0.00           D
ATOM    339  DB  THR A  21     -13.636  -9.976 -42.686  1.00  0.00           D
ATOM    340  DG1 THR A  21     -13.895  -8.529 -40.201  1.00  0.00           D
ATOM    341 DG21 THR A  21     -11.476  -9.362 -41.689  1.00  0.00           D
ATOM    342 DG22 THR A  21     -11.810  -8.370 -43.122  1.00  0.00           D
ATOM    343 DG23 THR A  21     -12.025  -7.686 -41.499  1.00  0.00           D
TER
END
"""

loop = [
  (m1_str, 1, [[[4,5], [9]]]),
  (m2_str, 2, [[[4,5], [9]], [[4,5], [10]]]),
  (m3_str, 2, [[[4,6], [7]], [[4,8], [9]]]),
  (m4_str, 6, [[[4, 6], [7, 8, 9]], [[1, 0], [10, 11, 12]]]),
  (m5_str, 5, [[[4,6], [7]], [[4,8], [9]], [[14,16], [17,18,19]]]),
  (m6_str, 4, [[[1,0], [11,12,13]], [[23,22],[34]]]),
  (m7_str, 4, [[[0, 1], [5]], [[1, 0], [2, 3, 4]]]), #[[[0, 1], [2, 3, 4]], [[1, 0], [5]]]),
  (m8_str, 1, [[[1, 0], [12]]]),
  (m9_str, 4, [[[4, 6], [10, 11, 12]], [[4, 5], [9]]]),
  (m10_str,7, [[[4, 6], [13, 14, 15]], [[5, 7], [16, 17, 18]], [[1, 0], [8]]]),
  (m11_str,10,[[[4, 6], [10, 11, 12]], [[4, 5], [9]], [[17, 19], [26, 27, 28]], [[18, 20], [29, 30, 31]]]),
  (m12_str,1, [[[4, 5], [9]]]),
  (m13_str,5, [[[4, 6], [7]], [[4, 8], [9]], [[14, 16], [17, 18, 19]]]),
  (m14_str,7, [[[1, 2], [8, 9, 10]], [[1, 3], [11]], [[1, 0], [5, 6, 7]]]),
  (m15_str,1, [[[1, 0], [11]]]),
  (m16_str,0, []),
  (m17_str,1, [[[1, 0], [11]]]), # no shortcut: (m17_str,1, [[[1, 0], [11]]])
  (m18_str,0, []),
  (m19_str,3, [[[6, 7], [15, 16, 17]]])
  ]

def exercise_00(debug=True):
  mon_lib_srv = monomer_library.server.server()
  ener_lib = monomer_library.server.ener_lib()
  for i, l in enumerate(loop):
    #print(i,"*"*10)
    ppf = monomer_library.pdb_interpretation.process(
      mon_lib_srv    = mon_lib_srv,
      ener_lib       = ener_lib,
      raw_records    = flex.std_string(l[0].splitlines()),
      force_symmetry = True)
    geometry = ppf.geometry_restraints_manager(
      show_energies      = False,
      plain_pairs_radius = 5.0)
    restraints_manager = mmtbx.restraints.manager(
      geometry = geometry, normalization = False)
    ph = ppf.all_chain_proxies.pdb_hierarchy
    atoms = ph.atoms()
    ppf.all_chain_proxies.pdb_inp.write_pdb_file(file_name = "m%s.pdb"%str(i))
    sel = hydrogens.rotatable(pdb_hierarchy=ph, mon_lib_srv=mon_lib_srv,
      restraints_manager = restraints_manager, log=None, use_shortcut=False)
    #for it in sel:
    #  print(atoms[it[0][0]].i_seq,atoms[it[0][1]].i_seq, "<>", [atoms[j].i_seq for j in it[1]])
    #  print(atoms[it[0][0]].name,atoms[it[0][1]].name, "<>", [atoms[j].name for j in it[1]])
    #  print()
    assert sel == l[2], "%s != %s" % (sel, l[2])
    assert hydrogens.count_rotatable(sel) == l[1]

def exercise_01():
  pdb_inp = iotbx.pdb.input(source_info=None, lines=m5_str)
  ph = pdb_inp.construct_hierarchy()
  xrs_answer = pdb_inp.xray_structure_simple()
  xrs_answer.switch_to_neutron_scattering_dictionary()
  ph.write_pdb_file(file_name = "answer.pdb")
  f_calc = xrs_answer.structure_factors(d_min=1).f_calc()
  fft_map = f_calc.fft_map(resolution_factor=0.1)
  fft_map.apply_sigma_scaling()
  map_data = fft_map.real_map_unpadded()
  #
  mon_lib_srv = monomer_library.server.server()
  ener_lib = monomer_library.server.ener_lib()
  ppf = monomer_library.pdb_interpretation.process(
    mon_lib_srv    = mon_lib_srv,
    ener_lib       = ener_lib,
    raw_records    = flex.std_string(m5_str_HD_rotated.splitlines()),
    force_symmetry = True)
  geometry = ppf.geometry_restraints_manager(
    show_energies      = False,
    plain_pairs_radius = 5.0)
  restraints_manager = mmtbx.restraints.manager(
    geometry = geometry, normalization = False)
  xrs = ppf.all_chain_proxies.pdb_inp.xray_structure_simple()
  ph = ppf.all_chain_proxies.pdb_hierarchy
  ph.write_pdb_file(file_name = "poor.pdb")
  xrs.switch_to_neutron_scattering_dictionary()
  f_calc_poor = f_calc.structure_factors_from_scatterers(
    xray_structure = xrs).f_calc()
  #
  rotatable_h_selection = hydrogens.rotatable(
    pdb_hierarchy      = ph,
    mon_lib_srv        = mon_lib_srv,
    restraints_manager = restraints_manager,
    log                = None)
  hydrogens.fit_rotatable(pdb_hierarchy=ph, xray_structure=xrs,
    map_data=map_data,rotatable_h_selection=rotatable_h_selection)
  ph.write_pdb_file(file_name = "result.pdb")
  #
  f_calc_fixed = f_calc.structure_factors_from_scatterers(
    xray_structure = xrs).f_calc()
  def r_factor(x,y):
    n = flex.sum( flex.abs( abs(x).data() - abs(y).data() ) )
    d = flex.sum( flex.abs( abs(x).data() + abs(y).data() ) )/2
    return n/d
  assert r_factor(f_calc, f_calc_poor) > 0.2
  assert r_factor(f_calc, f_calc_fixed) < 0.015

def exercise_02(debug=False):
  mon_lib_srv = monomer_library.server.server()
  ener_lib = monomer_library.server.ener_lib()
  ppf = monomer_library.pdb_interpretation.process(
    mon_lib_srv    = mon_lib_srv,
    ener_lib       = ener_lib,
    raw_records    = flex.std_string(exercise_02_str.splitlines()),
    force_symmetry = True)
  geometry = ppf.geometry_restraints_manager(
    show_energies      = False,
    plain_pairs_radius = 5.0)
  restraints_manager = mmtbx.restraints.manager(
    geometry = geometry, normalization = False)
  ph = ppf.all_chain_proxies.pdb_hierarchy
  sel = hydrogens.rotatable(pdb_hierarchy=ph, mon_lib_srv=mon_lib_srv,
    restraints_manager = restraints_manager, log = None)
  n_rot_h = hydrogens.count_rotatable(sel)
  assert n_rot_h == 43, n_rot_h

def exercise_03():
  for pdb_str in [all_aa_all_h, all_aa_all_d]:
    pdb_inp = iotbx.pdb.input(source_info=None, lines=all_aa_all_d)
    m = mmtbx.model.manager(model_input = pdb_inp, log=null_out())
    m.process(make_restraints=True)
    r1 = mmtbx.hydrogens.rotatable(
      pdb_hierarchy      = m.get_hierarchy(),
      mon_lib_srv        = m.get_mon_lib_srv(),
      restraints_manager = m.get_restraints_manager(),
      log                = null_out(),
      use_shortcut       = True)
    r2 = mmtbx.hydrogens.rotatable(
      pdb_hierarchy      = m.get_hierarchy(),
      mon_lib_srv        = m.get_mon_lib_srv(),
      restraints_manager = m.get_restraints_manager(),
      log                = null_out(),
      use_shortcut       = False)
  # Ideally this is what it should be. But dynamic modifications, adding planes
  # etc make it hard to achieve. According to Nigel: H in ASP, plane is added
  # only if HD2/DD2 is present.
  #assert r1 == r2

def exercise_04():
  m_strings = [all_aa_all_h, all_aa_all_d, m5_str_HD_rotated,
    exercise_02_str,m1_str, m2_str, m3_str, m4_str, m5_str, m6_str, m9_str, m10_str, m11_str,
    m12_str, m13_str, m14_str, m16_str, m17_str, m18_str, m19_str]
  for l in m_strings:
    pdb_inp = iotbx.pdb.input(lines=l.split("\n"), source_info=None)
    model = mmtbx.model.manager(
      model_input = pdb_inp,
      log         = null_out())
    model.process(make_restraints=True)
    hd_sel_1 = model.rotatable_hd_selection()
    hd_sel_2 = model.rotatable_hd_selection(from_riding_manager=True)

#    if (set(hd_sel_1) != set(hd_sel_2)):
#      print("*"*10)
#      atoms = model.get_atoms()
#      for at in atoms.select(hd_sel_1):
#        print(at.id_str())
#      print('  ----')
#      for at in atoms.select(hd_sel_2):
#        print(at.id_str())

    assert (set(hd_sel_1) == set(hd_sel_2))


if (__name__ == "__main__"):
  t0 = time.time()
  exercise_00()
  exercise_01()
  exercise_02()
  exercise_03()
  exercise_04()
  print("Total time: %-8.4f"%(time.time()-t0))
  print("OK")


 *******************************************************************************
