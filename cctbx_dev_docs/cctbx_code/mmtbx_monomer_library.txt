

 *******************************************************************************
mmtbx/monomer_library/__init__.py
from __future__ import absolute_import, division, print_function

import iotbx

def is_monomer_library_file(file_name):
  try:
    cif_model = iotbx.cif.reader(file_path=file_name).model()
    for cif_block in cif_model.values():
      if '_chem_comp_atom' in cif_block:
        return True
  except Exception as e:
    return False


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/bondlength_defaults.py
#
# Data from Acta Cryst. D62 (2006), 678-682.
#
from __future__ import absolute_import, division, print_function
from iotbx.pdb.amino_acid_codes import three_letter_given_one_letter
import sys

metal_defaults = {
  "Na" : {
    "O" : {
      "HOH" : [2.41, 0.10],
      "ASP" : [2.41, 0.10],
      },
    },
  "Mg" : {
    "O" : {
      "HOH" : [2.07, 0.05],
      "ASP" : [2.07, 0.10],
      },
    },
  "K" : {
    "O" : {
      "HOH" : [2.81, 0.15],
      "ASP" : [2.82, 0.10],
      },
    },
  "Ca" : {
    "O" : {
      "HOH" : [2.39, 0.10],
      "ASP" : [2.36, 0.10],
      },
    },
  "Mn" : {
    "O" : {
      "HOH" : [2.19, 0.05],
      "ASP" : [2.15, 0.05],
      },
    "N" : {
      "HIS" : [2.21, 0.10],
      },
    "S" : {
      "CYS" : [2.35, 0.25],
      },
    },
  "Fe" : {
    "O" : {
      "HOH" : [2.09, 0.10],
      "ASP" : [2.04, 0.10],
      },
    "N" : {
      "HIS" : [2.16, 0.15],
      },
    "S" : {
      "CYS" : [2.30, 0.05],
      },
    },
  "Co" : {
    "O" : {
      "HOH" : [2.09, 0.10],
      "ASP" : [2.05, 0.05],
      },
    "N" : {
      "HIS" : [2.14, 0.10],
      },
    "S" : {
      "CYS" : [2.25, 0.15],
      },
    },
  "Cu" : {
    "O" : {
      "HOH" : [2.13, 0.25],
      "ASP" : [1.99, 0.15],
      },
    "N" : {
      "HIS" : [2.02, 0.10],
      },
    "S" : {
      "CYS" : [2.15, 0.25],
      },
    },
  "Zn" : {
    "O" : {
      "HOH" : [2.09, 0.05],
      "ASP" : [1.99, 0.05],
      },
    "N" : {
      "HIS" : [2.03, 0.05],
      },
    "S" : {
      "CYS" : [2.31, 0.10],
      },
    },
  }

carbonyl = {
  "Na" : [2.38, 0.10],
  "Mg" : [2.26, 0.25],
  "K"  : [2.74, 0.15],
  "Ca" : [2.36, 0.10],
  "Mn" : [2.19, 0.25],
  "Fe" : [2.04, 0.25],
  "Co" : [2.08, 0.25],
  "Cu" : [2.04, 0.25],
  "Zn" : [2.07, 0.25],
  }

for m in metal_defaults:
  for c in metal_defaults[m]:
    if c!="O": continue
    # more waters ?
    for w in ["WAT", "TIP"]:
      metal_defaults[m][c].setdefault(w, [None, None])
      metal_defaults[m][c][w][0] = metal_defaults[m][c]["HOH"][0]
      metal_defaults[m][c][w][1] = metal_defaults[m][c]["HOH"][1]
    # ASP = GLU
    metal_defaults[m][c].setdefault("GLU", [None, None])
    metal_defaults[m][c]["GLU"][0] = metal_defaults[m][c]["ASP"][0]
    metal_defaults[m][c]["GLU"][1] = metal_defaults[m][c]["ASP"][1]
    # ASN, GLN
    metal_defaults[m][c].setdefault("ASN", [None, None])
    metal_defaults[m][c]["ASN"][0] = metal_defaults[m][c]["ASP"][0] + 0.02
    metal_defaults[m][c]["ASN"][1] = metal_defaults[m][c]["ASP"][1]
    metal_defaults[m][c].setdefault("GLN", [None, None])
    metal_defaults[m][c]["GLN"][0] = metal_defaults[m][c]["GLU"][0] + 0.02
    metal_defaults[m][c]["GLN"][1] = metal_defaults[m][c]["GLU"][1]
    # SER, THR
    metal_defaults[m][c].setdefault("SER", [None, None])
    metal_defaults[m][c].setdefault("THR", [None, None])
    metal_defaults[m][c]["SER"][0] = (metal_defaults[m][c]["ASP"][0] + \
                                metal_defaults[m][c]["HOH"][0])/2
    metal_defaults[m][c]["THR"][0] = (metal_defaults[m][c]["ASP"][0] + \
                                metal_defaults[m][c]["HOH"][0])/2
    metal_defaults[m][c]["SER"][1] = metal_defaults[m][c]["ASP"][1]
    metal_defaults[m][c]["THR"][1] = metal_defaults[m][c]["ASP"][1]
    # TYR
    metal_defaults[m][c].setdefault("TYR", [None, None])
    metal_defaults[m][c]["TYR"][0] = metal_defaults[m][c]["ASP"][0] - 0.1
    metal_defaults[m][c]["TYR"][1] = metal_defaults[m][c]["ASP"][1]

non_protein_sigma = 0.25
non_protein = {}
for m in carbonyl:
  non_protein[(m, "O")] = [metal_defaults[m]["O"]["ASN"][0], non_protein_sigma]
  if "N" in metal_defaults[m]:
    non_protein[(m, "N")] = [metal_defaults[m]["N"]["HIS"][0], non_protein_sigma]
  if "S" in metal_defaults[m]:
    non_protein[(m, "S")] = [metal_defaults[m]["S"]["CYS"][0], non_protein_sigma]

qm_defaults = {
    ("H",  "H" )    : 0.579,
    ("H",  "Li")    : 1.629,
    ("H",  "Be")    : 1.334,
    ("H",  "B" )    : 1.115,
    ("H",  "C" )    : 0.970,
    ("H",  "N" )    : 0.907,
    ("H",  "O" )    : 0.885,
    ("H",  "F" )    : 1.037,
    ("H",  "Na")    : 1.907,
    ("H",  "Mg")    : 1.713,
    ("H",  "Al")    : 1.582,
    ("H",  "Si")    : 1.478,
    ("H",  "P" )    : 1.301,
    ("H",  "S" )    : 1.186,
    ("H",  "Cl")    : 1.202,
    ("H",  "K" )    : 2.327,
    ("H",  "Ca")    : 2.120,
    ("H",  "Sc")    : 2.293,
    ("H",  "Ti")    : 2.131,
    ("H",  "V" )    : 2.103,
    ("H",  "Cr")    : 2.146,
    ("H",  "Mn")    : 2.207,
    ("H",  "Fe")    : 2.126,
    ("H",  "Co")    : 2.036,
    ("H",  "Ni")    : 1.972,
    ("H",  "Cu")    : 1.975,
    ("H",  "Ga")    : 1.570,
    ("H",  "Ge")    : 1.527,
    ("H",  "As")    : 1.502,
    ("H",  "Se")    : 1.444,
    ("H",  "Br")    : 1.400,
    ("H",  "Rb")    : 2.208,
    ("H",  "Sr")    : 2.153,
    ("H",  "Y" )    : 1.500,
    ("H",  "Zr")    : 1.500,
    ("H",  "Nb")    : 1.500,
    ("H",  "Mo")    : 1.500,
    ("H",  "Tc")    : 1.500,
    ("H",  "Ru")    : 1.500,
    ("H",  "Rh")    : 1.500,
    ("H",  "Pd")    : 1.500,
    ("H",  "Ag")    : 1.500,
    ("H",  "In")    : 1.577,
    ("H",  "Sn")    : 1.628,
    ("H",  "Sb")    : 1.643,
    ("H",  "Te")    : 1.623,
    ("H",  "I" )    : 1.596,
    ("H",  "Cs")    : 1.500,
    ("H",  "Ba")    : 1.500,
    ("H",  "La")    : 1.500,
    ("H",  "Hf")    : 1.500,
    ("H",  "Ta")    : 1.500,
    ("H",  "W" )    : 1.500,
    ("H",  "Re")    : 1.500,
    ("H",  "Os")    : 1.500,
    ("H",  "Ir")    : 1.500,
    ("H",  "Pt")    : 1.500,
    ("H",  "Au")    : 1.500,
    ("H",  "Tl")    : 1.500,
    ("H",  "Pb")    : 1.500,
    ("H",  "Bi")    : 1.500,
    ("H",  "Po")    : 1.500,
    ("H",  "At")    : 1.500,
    ("Li", "Li")    : 2.806,
    ("Li", "Be")    : 2.471,
    ("Li", "B" )    : 2.235,
    ("Li", "C" )    : 2.004,
    ("Li", "N" )    : 1.749,
    ("Li", "O" )    : 1.590,
    ("Li", "F" )    : 1.555,
    ("Li", "Na")    : 2.998,
    ("Li", "Mg")    : 2.856,
    ("Li", "Al")    : 2.692,
    ("Li", "Si")    : 2.519,
    ("Li", "P" )    : 2.373,
    ("Li", "S" )    : 2.189,
    ("Li", "Cl")    : 2.071,
    ("Li", "K" )    : 3.480,
    ("Li", "Ca")    : 3.328,
    ("Li", "Sc")    : 2.293,
    ("Li", "Ti")    : 2.131,
    ("Li", "V" )    : 2.103,
    ("Li", "Cr")    : 2.146,
    ("Li", "Mn")    : 2.207,
    ("Li", "Fe")    : 2.126,
    ("Li", "Co")    : 2.036,
    ("Li", "Ni")    : 1.972,
    ("Li", "Cu")    : 1.975,
    ("Li", "Ga")    : 2.547,
    ("Li", "Ge")    : 2.472,
    ("Li", "As")    : 2.277,
    ("Li", "Se")    : 2.274,
    ("Li", "Br")    : 2.188,
    ("Li", "Rb")    : 3.224,
    ("Li", "Sr")    : 3.235,
    ("Li", "Y" )    : 2.750,
    ("Li", "Zr")    : 2.750,
    ("Li", "Nb")    : 2.750,
    ("Li", "Mo")    : 2.750,
    ("Li", "Tc")    : 2.750,
    ("Li", "Ru")    : 2.750,
    ("Li", "Rh")    : 2.750,
    ("Li", "Pd")    : 2.750,
    ("Li", "Ag")    : 2.750,
    ("Li", "In")    : 2.688,
    ("Li", "Sn")    : 2.680,
    ("Li", "Sb")    : 2.606,
    ("Li", "Te")    : 2.419,
    ("Li", "I" )    : 2.286,
    ("Li", "Cs")    : 2.750,
    ("Li", "Ba")    : 2.750,
    ("Li", "La")    : 2.750,
    ("Li", "Hf")    : 2.750,
    ("Li", "Ta")    : 2.750,
    ("Li", "W" )    : 2.750,
    ("Li", "Re")    : 2.750,
    ("Li", "Os")    : 2.750,
    ("Li", "Ir")    : 2.750,
    ("Li", "Pt")    : 2.750,
    ("Li", "Au")    : 2.750,
    ("Li", "Tl")    : 2.750,
    ("Li", "Pb")    : 2.750,
    ("Li", "Bi")    : 2.750,
    ("Li", "Po")    : 2.750,
    ("Li", "At")    : 2.750,
    ("Be", "Be")    : 2.121,
    ("Be", "Be", 2) : 4.190,
    ("Be", "B" )    : 1.904,
    ("Be", "B" , 2) : 2.036,
    ("Be", "C" )    : 1.697,
    ("Be", "C" , 2) : 1.541,
    ("Be", "N" )    : 1.501,
    ("Be", "N" , 2) : 1.333,
    ("Be", "O" )    : 1.400,
    ("Be", "O" , 2) : 1.295,
    ("Be", "F" )    : 1.366,
    ("Be", "Na")    : 2.741,
    ("Be", "Mg")    : 2.534,
    ("Be", "Mg", 2) : 4.480,
    ("Be", "Al")    : 2.372,
    ("Be", "Al", 2) : 4.589,
    ("Be", "Si")    : 2.220,
    ("Be", "Si", 2) : 2.341,
    ("Be", "P" )    : 2.074,
    ("Be", "P" , 2) : 1.907,
    ("Be", "S" )    : 1.918,
    ("Be", "S" , 2) : 1.732,
    ("Be", "Cl")    : 1.811,
    ("Be", "K" )    : 3.260,
    ("Be", "Ca")    : 3.029,
    ("Be", "Ca", 2) : 5.008,
    ("Be", "Sc")    : 2.293,
    ("Be", "Ti")    : 2.131,
    ("Be", "Ti", 2) : 2.131,
    ("Be", "V" )    : 2.103,
    ("Be", "V" , 2) : 2.103,
    ("Be", "Cr")    : 2.146,
    ("Be", "Cr", 2) : 2.146,
    ("Be", "Mn")    : 2.207,
    ("Be", "Mn", 2) : 2.207,
    ("Be", "Fe")    : 2.126,
    ("Be", "Fe", 2) : 2.126,
    ("Be", "Co")    : 2.036,
    ("Be", "Co", 2) : 2.036,
    ("Be", "Ni")    : 1.972,
    ("Be", "Ni", 2) : 1.972,
    ("Be", "Cu")    : 1.975,
    ("Be", "Ga")    : 2.280,
    ("Be", "Ga", 2) : 4.413,
    ("Be", "Ge")    : 2.209,
    ("Be", "Ge", 2) : 2.336,
    ("Be", "As")    : 2.137,
    ("Be", "As", 2) : 1.972,
    ("Be", "Se")    : 2.012,
    ("Be", "Se", 2) : 1.829,
    ("Be", "Br")    : 1.938,
    ("Be", "Rb")    : 3.059,
    ("Be", "Sr")    : 3.001,
    ("Be", "Sr", 2) : 3.447,
    ("Be", "Y" )    : 2.750,
    ("Be", "Zr")    : 2.750,
    ("Be", "Zr", 2) : 2.750,
    ("Be", "Nb")    : 2.750,
    ("Be", "Nb", 2) : 2.750,
    ("Be", "Mo")    : 2.750,
    ("Be", "Mo", 2) : 2.750,
    ("Be", "Tc")    : 2.750,
    ("Be", "Tc", 2) : 2.750,
    ("Be", "Ru")    : 2.750,
    ("Be", "Ru", 2) : 2.750,
    ("Be", "Rh")    : 2.750,
    ("Be", "Rh", 2) : 2.750,
    ("Be", "Pd")    : 2.750,
    ("Be", "Pd", 2) : 2.750,
    ("Be", "Ag")    : 2.750,
    ("Be", "In")    : 2.304,
    ("Be", "In", 2) : 3.153,
    ("Be", "Sn")    : 2.363,
    ("Be", "Sn", 2) : 2.275,
    ("Be", "Sb")    : 2.318,
    ("Be", "Sb", 2) : 2.040,
    ("Be", "Te")    : 2.198,
    ("Be", "Te", 2) : 1.952,
    ("Be", "I" )    : 2.104,
    ("Be", "Cs")    : 2.750,
    ("Be", "Ba")    : 2.750,
    ("Be", "Ba", 2) : 2.750,
    ("Be", "La")    : 2.750,
    ("Be", "Hf")    : 2.750,
    ("Be", "Hf", 2) : 2.750,
    ("Be", "Ta")    : 2.750,
    ("Be", "Ta", 2) : 2.750,
    ("Be", "W" )    : 2.750,
    ("Be", "W" , 2) : 2.750,
    ("Be", "Re")    : 2.750,
    ("Be", "Re", 2) : 2.750,
    ("Be", "Os")    : 2.750,
    ("Be", "Os", 2) : 2.750,
    ("Be", "Ir")    : 2.750,
    ("Be", "Ir", 2) : 2.750,
    ("Be", "Pt")    : 2.750,
    ("Be", "Pt", 2) : 2.750,
    ("Be", "Au")    : 2.750,
    ("Be", "Tl")    : 2.750,
    ("Be", "Tl", 2) : 2.750,
    ("Be", "Pb")    : 2.750,
    ("Be", "Pb", 2) : 2.750,
    ("Be", "Bi")    : 2.750,
    ("Be", "Bi", 2) : 2.750,
    ("Be", "Po")    : 2.750,
    ("Be", "Po", 2) : 2.750,
    ("Be", "At")    : 2.750,
    ("B",  "B" )    : 1.778,
    ("B",  "B" , 2) : 1.631,
    ("B",  "C" )    : 1.663,
    ("B",  "C" , 2) : 1.469,
    ("B",  "N" )    : 1.534,
    ("B",  "N" , 2) : 1.394,
    ("B",  "O" )    : 1.440,
    ("B",  "O" , 2) : 1.374,
    ("B",  "F" )    : 1.355,
    ("B",  "Na")    : 2.537,
    ("B",  "Mg")    : 2.319,
    ("B",  "Mg", 2) : 4.210,
    ("B",  "Al")    : 2.154,
    ("B",  "Al", 2) : 2.077,
    ("B",  "Si")    : 2.042,
    ("B",  "Si", 2) : 1.820,
    ("B",  "P" )    : 1.949,
    ("B",  "P" , 2) : 1.855,
    ("B",  "S" )    : 1.909,
    ("B",  "S" , 2) : 1.909,
    ("B",  "Cl")    : 1.820,
    ("B",  "K" )    : 3.001,
    ("B",  "Ca")    : 2.768,
    ("B",  "Ca", 2) : 3.735,
    ("B",  "Sc")    : 2.293,
    ("B",  "Ti")    : 2.131,
    ("B",  "Ti", 2) : 2.131,
    ("B",  "V" )    : 2.103,
    ("B",  "V" , 2) : 2.103,
    ("B",  "Cr")    : 2.146,
    ("B",  "Cr", 2) : 2.146,
    ("B",  "Mn")    : 2.207,
    ("B",  "Mn", 2) : 2.207,
    ("B",  "Fe")    : 2.126,
    ("B",  "Fe", 2) : 2.126,
    ("B",  "Co")    : 2.036,
    ("B",  "Co", 2) : 2.036,
    ("B",  "Ni")    : 1.972,
    ("B",  "Ni", 2) : 1.972,
    ("B",  "Cu")    : 1.975,
    ("B",  "Ga")    : 2.098,
    ("B",  "Ga", 2) : 2.010,
    ("B",  "Ge")    : 2.073,
    ("B",  "Ge", 2) : 1.853,
    ("B",  "As")    : 2.008,
    ("B",  "As", 2) : 1.815,
    ("B",  "Se")    : 1.911,
    ("B",  "Se", 2) : 1.710,
    ("B",  "Br")    : 1.903,
    ("B",  "Rb")    : 2.797,
    ("B",  "Sr")    : 2.762,
    ("B",  "Sr", 2) : 3.096,
    ("B",  "Y" )    : 2.750,
    ("B",  "Zr")    : 2.750,
    ("B",  "Zr", 2) : 2.750,
    ("B",  "Nb")    : 2.750,
    ("B",  "Nb", 2) : 2.750,
    ("B",  "Mo")    : 2.750,
    ("B",  "Mo", 2) : 2.750,
    ("B",  "Tc")    : 2.750,
    ("B",  "Tc", 2) : 2.750,
    ("B",  "Ru")    : 2.750,
    ("B",  "Ru", 2) : 2.750,
    ("B",  "Rh")    : 2.750,
    ("B",  "Rh", 2) : 2.750,
    ("B",  "Pd")    : 2.750,
    ("B",  "Pd", 2) : 2.750,
    ("B",  "Ag")    : 2.750,
    ("B",  "In")    : 2.147,
    ("B",  "In", 2) : 1.742,
    ("B",  "Sn")    : 2.219,
    ("B",  "Sn", 2) : 1.852,
    ("B",  "Sb")    : 2.178,
    ("B",  "Sb", 2) : 1.919,
    ("B",  "Te")    : 2.103,
    ("B",  "Te", 2) : 1.847,
    ("B",  "I" )    : 2.092,
    ("B",  "Cs")    : 2.750,
    ("B",  "Ba")    : 2.750,
    ("B",  "Ba", 2) : 2.750,
    ("B",  "La")    : 2.750,
    ("B",  "Hf")    : 2.750,
    ("B",  "Hf", 2) : 2.750,
    ("B",  "Ta")    : 2.750,
    ("B",  "Ta", 2) : 2.750,
    ("B",  "W" )    : 2.750,
    ("B",  "W" , 2) : 2.750,
    ("B",  "Re")    : 2.750,
    ("B",  "Re", 2) : 2.750,
    ("B",  "Os")    : 2.750,
    ("B",  "Os", 2) : 2.750,
    ("B",  "Ir")    : 2.750,
    ("B",  "Ir", 2) : 2.750,
    ("B",  "Pt")    : 2.750,
    ("B",  "Pt", 2) : 2.750,
    ("B",  "Au")    : 2.750,
    ("B",  "Tl")    : 2.750,
    ("B",  "Tl", 2) : 2.750,
    ("B",  "Pb")    : 2.750,
    ("B",  "Pb", 2) : 2.750,
    ("B",  "Bi")    : 2.750,
    ("B",  "Bi", 2) : 2.750,
    ("B",  "Po")    : 2.750,
    ("B",  "Po", 2) : 2.750,
    ("B",  "At")    : 2.750,
    ("C",  "C" )    : 1.491,
    ("C",  "C" , 2) : 1.365,
    ("C",  "N" )    : 1.430,
    ("C",  "N" , 2) : 1.301,
    ("C",  "O" )    : 1.374,
    ("C",  "O" , 2) : 1.222,
    ("C",  "F" )    : 1.329,
    ("C",  "Na")    : 2.328,
    ("C",  "Mg")    : 2.105,
    ("C",  "Mg", 2) : 2.198,
    ("C",  "Al")    : 1.973,
    ("C",  "Al", 2) : 1.776,
    ("C",  "Si")    : 1.890,
    ("C",  "Si", 2) : 1.695,
    ("C",  "P" )    : 1.826,
    ("C",  "P" , 2) : 1.709,
    ("C",  "S" )    : 1.766,
    ("C",  "S" , 2) : 1.663,
    ("C",  "Cl")    : 1.728,
    ("C",  "K" )    : 2.761,
    ("C",  "Ca")    : 2.519,
    ("C",  "Ca", 2) : 2.627,
    ("C",  "Sc")    : 2.293,
    ("C",  "Ti")    : 2.131,
    ("C",  "Ti", 2) : 2.131,
    ("C",  "V" )    : 2.103,
    ("C",  "V" , 2) : 2.103,
    ("C",  "Cr")    : 2.146,
    ("C",  "Cr", 2) : 2.146,
    ("C",  "Mn")    : 2.207,
    ("C",  "Mn", 2) : 2.207,
    ("C",  "Fe")    : 2.126,
    ("C",  "Fe", 2) : 2.126,
    ("C",  "Co")    : 2.036,
    ("C",  "Co", 2) : 2.036,
    ("C",  "Ni")    : 1.972,
    ("C",  "Ni", 2) : 1.972,
    ("C",  "Cu")    : 1.975,
    ("C",  "Ga")    : 1.977,
    ("C",  "Ga", 2) : 1.779,
    ("C",  "Ge")    : 1.948,
    ("C",  "Ge", 2) : 1.757,
    ("C",  "As")    : 1.963,
    ("C",  "As", 2) : 1.751,
    ("C",  "Se")    : 1.950,
    ("C",  "Se", 2) : 1.724,
    ("C",  "Br")    : 1.941,
    ("C",  "Rb")    : 2.670,
    ("C",  "Sr")    : 2.617,
    ("C",  "Sr", 2) : 2.779,
    ("C",  "Y" )    : 2.750,
    ("C",  "Zr")    : 2.750,
    ("C",  "Zr", 2) : 2.750,
    ("C",  "Nb")    : 2.750,
    ("C",  "Nb", 2) : 2.750,
    ("C",  "Mo")    : 2.750,
    ("C",  "Mo", 2) : 2.750,
    ("C",  "Tc")    : 2.750,
    ("C",  "Tc", 2) : 2.750,
    ("C",  "Ru")    : 2.750,
    ("C",  "Ru", 2) : 2.750,
    ("C",  "Rh")    : 2.750,
    ("C",  "Rh", 2) : 2.750,
    ("C",  "Pd")    : 2.750,
    ("C",  "Pd", 2) : 2.750,
    ("C",  "Ag")    : 2.750,
    ("C",  "In")    : 2.094,
    ("C",  "In", 2) : 1.731,
    ("C",  "Sn")    : 2.111,
    ("C",  "Sn", 2) : 1.824,
    ("C",  "Sb")    : 2.130,
    ("C",  "Sb", 2) : 1.880,
    ("C",  "Te")    : 2.128,
    ("C",  "Te", 2) : 1.890,
    ("C",  "I" )    : 2.110,
    ("C",  "Cs")    : 2.750,
    ("C",  "Ba")    : 2.750,
    ("C",  "Ba", 2) : 2.750,
    ("C",  "La")    : 2.750,
    ("C",  "Hf")    : 2.750,
    ("C",  "Hf", 2) : 2.750,
    ("C",  "Ta")    : 2.750,
    ("C",  "Ta", 2) : 2.750,
    ("C",  "W" )    : 2.750,
    ("C",  "W" , 2) : 2.750,
    ("C",  "Re")    : 2.750,
    ("C",  "Re", 2) : 2.750,
    ("C",  "Os")    : 2.110,
    ("C",  "Os", 2) : 2.110,
    ("C",  "Ir")    : 2.750,
    ("C",  "Ir", 2) : 2.750,
    ("C",  "Pt")    : 2.750,
    ("C",  "Pt", 2) : 2.750,
    ("C",  "Au")    : 2.750,
    ("C",  "Tl")    : 2.750,
    ("C",  "Tl", 2) : 2.750,
    ("C",  "Pb")    : 2.750,
    ("C",  "Pb", 2) : 2.750,
    ("C",  "Bi")    : 2.750,
    ("C",  "Bi", 2) : 2.750,
    ("C",  "Po")    : 2.750,
    ("C",  "Po", 2) : 2.750,
    ("C",  "At")    : 2.750,
    ("N",  "N" )    : 1.350,
    ("N",  "N" , 2) : 1.226,
    ("N",  "O" )    : 1.297,
    ("N",  "O" , 2) : 1.222,
    ("N",  "F" )    : 1.360,
    ("N",  "Na")    : 2.080,
    ("N",  "Mg")    : 1.895,
    ("N",  "Mg", 2) : 1.925,
    ("N",  "Al")    : 1.770,
    ("N",  "Al", 2) : 1.597,
    ("N",  "Si")    : 1.725,
    ("N",  "Si", 2) : 1.576,
    ("N",  "P" )    : 1.653,
    ("N",  "P" , 2) : 1.581,
    ("N",  "S" )    : 1.629,
    ("N",  "S" , 2) : 1.566,
    ("N",  "Cl")    : 1.306,
    ("N",  "K" )    : 2.444,
    ("N",  "Ca")    : 2.250,
    ("N",  "Ca", 2) : 2.275,
    ("N",  "Sc")    : 2.293,
    ("N",  "Ti")    : 2.131,
    ("N",  "Ti", 2) : 2.131,
    ("N",  "V" )    : 2.103,
    ("N",  "V" , 2) : 2.103,
    ("N",  "Cr")    : 2.146,
    ("N",  "Cr", 2) : 2.146,
    ("N",  "Mn")    : 2.207,
    ("N",  "Mn", 2) : 2.207,
    ("N",  "Fe")    : 2.126,
    ("N",  "Fe", 2) : 2.126,
    ("N",  "Co")    : 2.036,
    ("N",  "Co", 2) : 2.036,
    ("N",  "Ni")    : 1.972,
    ("N",  "Ni", 2) : 1.972,
    ("N",  "Cu")    : 1.975,
    ("N",  "Ga")    : 1.816,
    ("N",  "Ga", 2) : 1.679,
    ("N",  "Ge")    : 1.830,
    ("N",  "Ge", 2) : 1.683,
    ("N",  "As")    : 1.834,
    ("N",  "As", 2) : 1.676,
    ("N",  "Se")    : 1.842,
    ("N",  "Se", 2) : 1.673,
    ("N",  "Br")    : 1.878,
    ("N",  "Rb")    : 2.565,
    ("N",  "Sr")    : 2.493,
    ("N",  "Sr", 2) : 2.631,
    ("N",  "Y" )    : 2.750,
    ("N",  "Zr")    : 2.750,
    ("N",  "Zr", 2) : 2.750,
    ("N",  "Nb")    : 2.750,
    ("N",  "Nb", 2) : 2.750,
    ("N",  "Mo")    : 2.750,
    ("N",  "Mo", 2) : 2.750,
    ("N",  "Tc")    : 2.750,
    ("N",  "Tc", 2) : 2.750,
    ("N",  "Ru")    : 2.750,
    ("N",  "Ru", 2) : 2.750,
    ("N",  "Rh")    : 2.750,
    ("N",  "Rh", 2) : 2.750,
    ("N",  "Pd")    : 2.750,
    ("N",  "Pd", 2) : 2.750,
    ("N",  "Ag")    : 2.750,
    ("N",  "In")    : 1.864,
    ("N",  "In", 2) : 1.622,
    ("N",  "Sn")    : 1.979,
    ("N",  "Sn", 2) : 1.811,
    ("N",  "Sb")    : 2.004,
    ("N",  "Sb", 2) : 1.852,
    ("N",  "Te")    : 2.045,
    ("N",  "Te", 2) : 1.888,
    ("N",  "I" )    : 2.070,
    ("N",  "Cs")    : 2.750,
    ("N",  "Ba")    : 2.750,
    ("N",  "Ba", 2) : 2.750,
    ("N",  "La")    : 2.750,
    ("N",  "Hf")    : 2.750,
    ("N",  "Hf", 2) : 2.750,
    ("N",  "Ta")    : 2.750,
    ("N",  "Ta", 2) : 2.750,
    ("N",  "W" )    : 2.750,
    ("N",  "W" , 2) : 2.750,
    ("N",  "Re")    : 2.750,
    ("N",  "Re", 2) : 2.750,
    ("N",  "Os")    : 2.110,
    ("N",  "Os", 2) : 2.110,
    ("N",  "Ir")    : 2.750,
    ("N",  "Ir", 2) : 2.750,
    ("N",  "Pt")    : 2.750,
    ("N",  "Pt", 2) : 2.750,
    ("N",  "Au")    : 2.750,
    ("N",  "Tl")    : 2.750,
    ("N",  "Tl", 2) : 2.750,
    ("N",  "Pb")    : 2.750,
    ("N",  "Pb", 2) : 2.750,
    ("N",  "Bi")    : 2.750,
    ("N",  "Bi", 2) : 2.750,
    ("N",  "Po")    : 2.750,
    ("N",  "Po", 2) : 2.750,
    ("N",  "At")    : 2.750,
    ("O",  "O" )    : 1.262,
    ("O",  "O" , 2) : 1.270,
    ("O",  "F" )    : 1.128,
    ("O",  "Na")    : 1.920,
    ("O",  "Mg")    : 1.754,
    ("O",  "Mg", 2) : 1.739,
    ("O",  "Al")    : 1.693,
    ("O",  "Al", 2) : 1.572,
    ("O",  "Si")    : 1.650,
    ("O",  "Si", 2) : 1.502,
    ("O",  "P" )    : 1.558,
    ("O",  "P" , 2) : 1.497,
    ("O",  "S" )    : 1.466,
    ("O",  "S" , 2) : 1.443,
    ("O",  "Cl")    : 1.400,
    ("O",  "K" )    : 2.242,
    ("O",  "Ca")    : 2.077,
    ("O",  "Ca", 2) : 2.038,
    ("O",  "Sc")    : 2.293,
    ("O",  "Ti")    : 2.131,
    ("O",  "Ti", 2) : 2.131,
    ("O",  "V" )    : 2.103,
    ("O",  "V" , 2) : 2.103,
    ("O",  "Cr")    : 2.146,
    ("O",  "Cr", 2) : 2.146,
    ("O",  "Mn")    : 2.207,
    ("O",  "Mn", 2) : 2.207,
    ("O",  "Fe")    : 2.126,
    ("O",  "Fe", 2) : 2.126,
    ("O",  "Co")    : 2.036,
    ("O",  "Co", 2) : 2.036,
    ("O",  "Ni")    : 1.972,
    ("O",  "Ni", 2) : 1.972,
    ("O",  "Cu")    : 1.975,
    ("O",  "Ga")    : 1.781,
    ("O",  "Ga", 2) : 1.633,
    ("O",  "Ge")    : 1.769,
    ("O",  "Ge", 2) : 1.618,
    ("O",  "As")    : 1.778,
    ("O",  "As", 2) : 1.600,
    ("O",  "Se")    : 1.781,
    ("O",  "Se", 2) : 1.606,
    ("O",  "Br")    : 1.803,
    ("O",  "Rb")    : 2.450,
    ("O",  "Sr")    : 2.400,
    ("O",  "Sr", 2) : 3.765,
    ("O",  "Y" )    : 2.750,
    ("O",  "Zr")    : 2.750,
    ("O",  "Zr", 2) : 2.750,
    ("O",  "Nb")    : 2.750,
    ("O",  "Nb", 2) : 2.750,
    ("O",  "Mo")    : 2.750,
    ("O",  "Mo", 2) : 2.750,
    ("O",  "Tc")    : 2.750,
    ("O",  "Tc", 2) : 2.750,
    ("O",  "Ru")    : 2.750,
    ("O",  "Ru", 2) : 2.750,
    ("O",  "Rh")    : 2.750,
    ("O",  "Rh", 2) : 2.750,
    ("O",  "Pd")    : 2.750,
    ("O",  "Pd", 2) : 2.750,
    ("O",  "Ag")    : 2.750,
    ("O",  "In")    : 1.899,
    ("O",  "In", 2) : 1.683,
    ("O",  "Sn")    : 1.955,
    ("O",  "Sn", 2) : 1.778,
    ("O",  "Sb")    : 1.979,
    ("O",  "Sb", 2) : 1.804,
    ("O",  "Te")    : 2.024,
    ("O",  "Te", 2) : 1.849,
    ("O",  "I" )    : 2.019,
    ("O",  "Cs")    : 2.750,
    ("O",  "Ba")    : 2.750,
    ("O",  "Ba", 2) : 2.750,
    ("O",  "La")    : 2.750,
    ("O",  "Hf")    : 2.750,
    ("O",  "Hf", 2) : 2.750,
    ("O",  "Ta")    : 2.750,
    ("O",  "Ta", 2) : 2.750,
    ("O",  "W" )    : 2.750,
    ("O",  "W" , 2) : 2.750,
    ("O",  "Re")    : 2.750,
    ("O",  "Re", 2) : 2.750,
    ("O",  "Os")    : 2.110,
    ("O",  "Os", 2) : 2.110,
    ("O",  "Ir")    : 2.750,
    ("O",  "Ir", 2) : 2.750,
    ("O",  "Pt")    : 2.750,
    ("O",  "Pt", 2) : 2.750,
    ("O",  "Au")    : 2.750,
    ("O",  "Tl")    : 2.750,
    ("O",  "Tl", 2) : 2.750,
    ("O",  "Pb")    : 2.750,
    ("O",  "Pb", 2) : 2.750,
    ("O",  "Bi")    : 2.750,
    ("O",  "Bi", 2) : 2.750,
    ("O",  "Po")    : 2.750,
    ("O",  "Po", 2) : 2.750,
    ("O",  "At")    : 2.750,
    ("F",  "F" )    : 1.179,
    ("F",  "Na")    : 1.886,
    ("F",  "Mg")    : 1.730,
    ("F",  "Al")    : 1.640,
    ("F",  "Si")    : 1.601,
    ("F",  "P" )    : 1.559,
    ("F",  "S" )    : 1.548,
    ("F",  "Cl")    : 1.369,
    ("F",  "K" )    : 2.189,
    ("F",  "Ca")    : 2.043,
    ("F",  "Sc")    : 2.293,
    ("F",  "Ti")    : 2.131,
    ("F",  "V" )    : 2.103,
    ("F",  "Cr")    : 2.146,
    ("F",  "Mn")    : 2.207,
    ("F",  "Fe")    : 2.126,
    ("F",  "Co")    : 2.036,
    ("F",  "Ni")    : 1.972,
    ("F",  "Cu")    : 1.975,
    ("F",  "Ga")    : 1.741,
    ("F",  "Ge")    : 1.723,
    ("F",  "As")    : 1.724,
    ("F",  "Se")    : 1.730,
    ("F",  "Br")    : 1.735,
    ("F",  "Rb")    : 2.363,
    ("F",  "Sr")    : 2.323,
    ("F",  "Y" )    : 2.750,
    ("F",  "Zr")    : 2.750,
    ("F",  "Nb")    : 2.750,
    ("F",  "Mo")    : 2.750,
    ("F",  "Tc")    : 2.750,
    ("F",  "Ru")    : 2.750,
    ("F",  "Rh")    : 2.750,
    ("F",  "Pd")    : 2.750,
    ("F",  "Ag")    : 2.750,
    ("F",  "In")    : 1.874,
    ("F",  "Sn")    : 1.899,
    ("F",  "Sb")    : 1.928,
    ("F",  "Te")    : 1.959,
    ("F",  "I" )    : 1.956,
    ("F",  "Cs")    : 2.750,
    ("F",  "Ba")    : 2.750,
    ("F",  "La")    : 2.750,
    ("F",  "Hf")    : 2.750,
    ("F",  "Ta")    : 2.750,
    ("F",  "W" )    : 2.750,
    ("F",  "Re")    : 2.750,
    ("F",  "Os")    : 2.750,
    ("F",  "Ir")    : 2.750,
    ("F",  "Pt")    : 2.750,
    ("F",  "Au")    : 2.750,
    ("F",  "Tl")    : 2.750,
    ("F",  "Pb")    : 2.750,
    ("F",  "Bi")    : 2.750,
    ("F",  "Po")    : 2.750,
    ("F",  "At")    : 2.750,
    ("Na", "Na")    : 3.164,
    ("Na", "Mg")    : 3.094,
    ("Na", "Al")    : 2.954,
    ("Na", "Si")    : 2.814,
    ("Na", "P" )    : 2.551,
    ("Na", "S" )    : 2.514,
    ("Na", "Cl")    : 2.397,
    ("Na", "K" )    : 3.719,
    ("Na", "Ca")    : 3.552,
    ("Na", "Sc")    : 2.293,
    ("Na", "Ti")    : 2.131,
    ("Na", "V" )    : 2.103,
    ("Na", "Cr")    : 2.146,
    ("Na", "Mn")    : 2.207,
    ("Na", "Fe")    : 2.126,
    ("Na", "Co")    : 2.036,
    ("Na", "Ni")    : 1.972,
    ("Na", "Cu")    : 1.975,
    ("Na", "Ga")    : 2.823,
    ("Na", "Ge")    : 2.765,
    ("Na", "As")    : 2.590,
    ("Na", "Se")    : 2.599,
    ("Na", "Br")    : 2.512,
    ("Na", "Rb")    : 3.172,
    ("Na", "Sr")    : 3.221,
    ("Na", "Y" )    : 2.750,
    ("Na", "Zr")    : 2.750,
    ("Na", "Nb")    : 2.750,
    ("Na", "Mo")    : 2.750,
    ("Na", "Tc")    : 2.750,
    ("Na", "Ru")    : 2.750,
    ("Na", "Rh")    : 2.750,
    ("Na", "Pd")    : 2.750,
    ("Na", "Ag")    : 2.750,
    ("Na", "In")    : 2.774,
    ("Na", "Sn")    : 2.785,
    ("Na", "Sb")    : 2.781,
    ("Na", "Te")    : 2.699,
    ("Na", "I" )    : 2.601,
    ("Na", "Cs")    : 2.750,
    ("Na", "Ba")    : 2.750,
    ("Na", "La")    : 2.750,
    ("Na", "Hf")    : 2.750,
    ("Na", "Ta")    : 2.750,
    ("Na", "W" )    : 2.750,
    ("Na", "Re")    : 2.750,
    ("Na", "Os")    : 2.750,
    ("Na", "Ir")    : 2.750,
    ("Na", "Pt")    : 2.750,
    ("Na", "Au")    : 2.750,
    ("Na", "Tl")    : 2.750,
    ("Na", "Pb")    : 2.750,
    ("Na", "Bi")    : 2.750,
    ("Na", "Po")    : 2.750,
    ("Na", "At")    : 2.750,
    ("Mg", "Mg")    : 2.915,
    ("Mg", "Mg", 2) : 5.197,
    ("Mg", "Al")    : 2.771,
    ("Mg", "Al", 2) : 4.774,
    ("Mg", "Si")    : 2.618,
    ("Mg", "Si", 2) : 2.820,
    ("Mg", "P" )    : 2.478,
    ("Mg", "P" , 2) : 2.359,
    ("Mg", "S" )    : 2.318,
    ("Mg", "S" , 2) : 2.149,
    ("Mg", "Cl")    : 2.213,
    ("Mg", "K" )    : 3.626,
    ("Mg", "Ca")    : 3.388,
    ("Mg", "Ca", 2) : 5.607,
    ("Mg", "Sc")    : 2.293,
    ("Mg", "Ti")    : 2.131,
    ("Mg", "Ti", 2) : 2.131,
    ("Mg", "V" )    : 2.103,
    ("Mg", "V" , 2) : 2.103,
    ("Mg", "Cr")    : 2.146,
    ("Mg", "Cr", 2) : 2.146,
    ("Mg", "Mn")    : 2.207,
    ("Mg", "Mn", 2) : 2.207,
    ("Mg", "Fe")    : 2.126,
    ("Mg", "Fe", 2) : 2.126,
    ("Mg", "Co")    : 2.036,
    ("Mg", "Co", 2) : 2.036,
    ("Mg", "Ni")    : 1.972,
    ("Mg", "Ni", 2) : 1.972,
    ("Mg", "Cu")    : 1.975,
    ("Mg", "Ga")    : 2.648,
    ("Mg", "Ga", 2) : 4.437,
    ("Mg", "Ge")    : 2.587,
    ("Mg", "Ge", 2) : 2.729,
    ("Mg", "As")    : 2.535,
    ("Mg", "As", 2) : 2.403,
    ("Mg", "Se")    : 2.413,
    ("Mg", "Se", 2) : 2.240,
    ("Mg", "Br")    : 2.336,
    ("Mg", "Rb")    : 3.327,
    ("Mg", "Sr")    : 3.292,
    ("Mg", "Sr", 2) : 3.684,
    ("Mg", "Y" )    : 2.750,
    ("Mg", "Zr")    : 2.750,
    ("Mg", "Zr", 2) : 2.750,
    ("Mg", "Nb")    : 2.750,
    ("Mg", "Nb", 2) : 2.750,
    ("Mg", "Mo")    : 2.750,
    ("Mg", "Mo", 2) : 2.750,
    ("Mg", "Tc")    : 2.750,
    ("Mg", "Tc", 2) : 2.750,
    ("Mg", "Ru")    : 2.750,
    ("Mg", "Ru", 2) : 2.750,
    ("Mg", "Rh")    : 2.750,
    ("Mg", "Rh", 2) : 2.750,
    ("Mg", "Pd")    : 2.750,
    ("Mg", "Pd", 2) : 2.750,
    ("Mg", "Ag")    : 2.750,
    ("Mg", "In")    : 2.756,
    ("Mg", "In", 2) : 3.401,
    ("Mg", "Sn")    : 2.740,
    ("Mg", "Sn", 2) : 2.960,
    ("Mg", "Sb")    : 2.710,
    ("Mg", "Sb", 2) : 2.555,
    ("Mg", "Te")    : 2.603,
    ("Mg", "Te", 2) : 2.410,
    ("Mg", "I" )    : 2.503,
    ("Mg", "Cs")    : 2.750,
    ("Mg", "Ba")    : 2.750,
    ("Mg", "Ba", 2) : 2.750,
    ("Mg", "La")    : 2.750,
    ("Mg", "Hf")    : 2.750,
    ("Mg", "Hf", 2) : 2.750,
    ("Mg", "Ta")    : 2.750,
    ("Mg", "Ta", 2) : 2.750,
    ("Mg", "W" )    : 2.750,
    ("Mg", "W" , 2) : 2.750,
    ("Mg", "Re")    : 2.750,
    ("Mg", "Re", 2) : 2.750,
    ("Mg", "Os")    : 2.750,
    ("Mg", "Os", 2) : 2.750,
    ("Mg", "Ir")    : 2.750,
    ("Mg", "Ir", 2) : 2.750,
    ("Mg", "Pt")    : 2.750,
    ("Mg", "Pt", 2) : 2.750,
    ("Mg", "Au")    : 2.750,
    ("Mg", "Tl")    : 2.750,
    ("Mg", "Tl", 2) : 2.750,
    ("Mg", "Pb")    : 2.750,
    ("Mg", "Pb", 2) : 2.750,
    ("Mg", "Bi")    : 2.750,
    ("Mg", "Bi", 2) : 2.750,
    ("Mg", "Po")    : 2.750,
    ("Mg", "Po", 2) : 2.750,
    ("Mg", "At")    : 2.750,
    ("Al", "Al")    : 2.615,
    ("Al", "Al", 2) : 2.763,
    ("Al", "Si")    : 2.480,
    ("Al", "Si", 2) : 2.382,
    ("Al", "P" )    : 2.368,
    ("Al", "P" , 2) : 2.144,
    ("Al", "S" )    : 2.195,
    ("Al", "S" , 2) : 1.993,
    ("Al", "Cl")    : 2.111,
    ("Al", "K" )    : 3.476,
    ("Al", "Ca")    : 3.247,
    ("Al", "Ca", 2) : 4.995,
    ("Al", "Sc")    : 2.293,
    ("Al", "Ti")    : 2.131,
    ("Al", "Ti", 2) : 2.131,
    ("Al", "V" )    : 2.103,
    ("Al", "V" , 2) : 2.103,
    ("Al", "Cr")    : 2.146,
    ("Al", "Cr", 2) : 2.146,
    ("Al", "Mn")    : 2.207,
    ("Al", "Mn", 2) : 2.207,
    ("Al", "Fe")    : 2.126,
    ("Al", "Fe", 2) : 2.126,
    ("Al", "Co")    : 2.036,
    ("Al", "Co", 2) : 2.036,
    ("Al", "Ni")    : 1.972,
    ("Al", "Ni", 2) : 1.972,
    ("Al", "Cu")    : 1.975,
    ("Al", "Ga")    : 2.529,
    ("Al", "Ga", 2) : 2.636,
    ("Al", "Ge")    : 2.476,
    ("Al", "Ge", 2) : 2.389,
    ("Al", "As")    : 2.443,
    ("Al", "As", 2) : 2.213,
    ("Al", "Se")    : 2.300,
    ("Al", "Se", 2) : 2.094,
    ("Al", "Br")    : 2.249,
    ("Al", "Rb")    : 3.277,
    ("Al", "Sr")    : 3.216,
    ("Al", "Sr", 2) : 3.337,
    ("Al", "Y" )    : 2.750,
    ("Al", "Zr")    : 2.750,
    ("Al", "Zr", 2) : 2.750,
    ("Al", "Nb")    : 2.750,
    ("Al", "Nb", 2) : 2.750,
    ("Al", "Mo")    : 2.750,
    ("Al", "Mo", 2) : 2.750,
    ("Al", "Tc")    : 2.750,
    ("Al", "Tc", 2) : 2.750,
    ("Al", "Ru")    : 2.750,
    ("Al", "Ru", 2) : 2.750,
    ("Al", "Rh")    : 2.750,
    ("Al", "Rh", 2) : 2.750,
    ("Al", "Pd")    : 2.750,
    ("Al", "Pd", 2) : 2.750,
    ("Al", "Ag")    : 2.750,
    ("Al", "In")    : 2.651,
    ("Al", "In", 2) : 2.620,
    ("Al", "Sn")    : 2.667,
    ("Al", "Sn", 2) : 2.515,
    ("Al", "Sb")    : 2.662,
    ("Al", "Sb", 2) : 2.371,
    ("Al", "Te")    : 2.518,
    ("Al", "Te", 2) : 2.279,
    ("Al", "I" )    : 2.475,
    ("Al", "Cs")    : 2.750,
    ("Al", "Ba")    : 2.750,
    ("Al", "Ba", 2) : 2.750,
    ("Al", "La")    : 2.750,
    ("Al", "Hf")    : 2.750,
    ("Al", "Hf", 2) : 2.750,
    ("Al", "Ta")    : 2.750,
    ("Al", "Ta", 2) : 2.750,
    ("Al", "W" )    : 2.750,
    ("Al", "W" , 2) : 2.750,
    ("Al", "Re")    : 2.750,
    ("Al", "Re", 2) : 2.750,
    ("Al", "Os")    : 2.750,
    ("Al", "Os", 2) : 2.750,
    ("Al", "Ir")    : 2.750,
    ("Al", "Ir", 2) : 2.750,
    ("Al", "Pt")    : 2.750,
    ("Al", "Pt", 2) : 2.750,
    ("Al", "Au")    : 2.750,
    ("Al", "Tl")    : 2.750,
    ("Al", "Tl", 2) : 2.750,
    ("Al", "Pb")    : 2.750,
    ("Al", "Pb", 2) : 2.750,
    ("Al", "Bi")    : 2.750,
    ("Al", "Bi", 2) : 2.750,
    ("Al", "Po")    : 2.750,
    ("Al", "Po", 2) : 2.750,
    ("Al", "At")    : 2.750,
    ("Si", "Si")    : 2.362,
    ("Si", "Si", 2) : 2.130,
    ("Si", "P" )    : 2.283,
    ("Si", "P" , 2) : 2.063,
    ("Si", "S" )    : 2.156,
    ("Si", "S" , 2) : 1.938,
    ("Si", "Cl")    : 2.074,
    ("Si", "K" )    : 3.290,
    ("Si", "Ca")    : 3.068,
    ("Si", "Ca", 2) : 3.249,
    ("Si", "Sc")    : 2.293,
    ("Si", "Ti")    : 2.131,
    ("Si", "Ti", 2) : 2.131,
    ("Si", "V" )    : 2.103,
    ("Si", "V" , 2) : 2.103,
    ("Si", "Cr")    : 2.146,
    ("Si", "Cr", 2) : 2.146,
    ("Si", "Mn")    : 2.207,
    ("Si", "Mn", 2) : 2.207,
    ("Si", "Fe")    : 2.126,
    ("Si", "Fe", 2) : 2.126,
    ("Si", "Co")    : 2.036,
    ("Si", "Co", 2) : 2.036,
    ("Si", "Ni")    : 1.972,
    ("Si", "Ni", 2) : 1.972,
    ("Si", "Cu")    : 1.975,
    ("Si", "Ga")    : 2.435,
    ("Si", "Ga", 2) : 2.354,
    ("Si", "Ge")    : 2.386,
    ("Si", "Ge", 2) : 2.151,
    ("Si", "As")    : 2.361,
    ("Si", "As", 2) : 2.142,
    ("Si", "Se")    : 2.274,
    ("Si", "Se", 2) : 2.052,
    ("Si", "Br")    : 2.221,
    ("Si", "Rb")    : 3.167,
    ("Si", "Sr")    : 3.092,
    ("Si", "Sr", 2) : 3.070,
    ("Si", "Y" )    : 2.750,
    ("Si", "Zr")    : 2.750,
    ("Si", "Zr", 2) : 2.750,
    ("Si", "Nb")    : 2.750,
    ("Si", "Nb", 2) : 2.750,
    ("Si", "Mo")    : 2.750,
    ("Si", "Mo", 2) : 2.750,
    ("Si", "Tc")    : 2.750,
    ("Si", "Tc", 2) : 2.750,
    ("Si", "Ru")    : 2.750,
    ("Si", "Ru", 2) : 2.750,
    ("Si", "Rh")    : 2.750,
    ("Si", "Rh", 2) : 2.750,
    ("Si", "Pd")    : 2.750,
    ("Si", "Pd", 2) : 2.750,
    ("Si", "Ag")    : 2.750,
    ("Si", "In")    : 2.570,
    ("Si", "In", 2) : 2.334,
    ("Si", "Sn")    : 2.571,
    ("Si", "Sn", 2) : 2.296,
    ("Si", "Sb")    : 2.578,
    ("Si", "Sb", 2) : 2.318,
    ("Si", "Te")    : 2.531,
    ("Si", "Te", 2) : 2.289,
    ("Si", "I" )    : 2.485,
    ("Si", "Cs")    : 2.750,
    ("Si", "Ba")    : 2.750,
    ("Si", "Ba", 2) : 2.750,
    ("Si", "La")    : 2.750,
    ("Si", "Hf")    : 2.750,
    ("Si", "Hf", 2) : 2.750,
    ("Si", "Ta")    : 2.750,
    ("Si", "Ta", 2) : 2.750,
    ("Si", "W" )    : 2.750,
    ("Si", "W" , 2) : 2.750,
    ("Si", "Re")    : 2.750,
    ("Si", "Re", 2) : 2.750,
    ("Si", "Os")    : 2.750,
    ("Si", "Os", 2) : 2.750,
    ("Si", "Ir")    : 2.750,
    ("Si", "Ir", 2) : 2.750,
    ("Si", "Pt")    : 2.750,
    ("Si", "Pt", 2) : 2.750,
    ("Si", "Au")    : 2.750,
    ("Si", "Tl")    : 2.750,
    ("Si", "Tl", 2) : 2.750,
    ("Si", "Pb")    : 2.750,
    ("Si", "Pb", 2) : 2.750,
    ("Si", "Bi")    : 2.750,
    ("Si", "Bi", 2) : 2.750,
    ("Si", "Po")    : 2.750,
    ("Si", "Po", 2) : 2.750,
    ("Si", "At")    : 2.750,
    ("P",  "P" )    : 2.148,
    ("P",  "P" , 2) : 2.086,
    ("P",  "S" )    : 2.021,
    ("P",  "S" , 2) : 1.950,
    ("P",  "Cl")    : 2.020,
    ("P",  "K" )    : 2.969,
    ("P",  "Ca")    : 2.911,
    ("P",  "Ca", 2) : 2.733,
    ("P",  "Sc")    : 2.293,
    ("P",  "Ti")    : 2.131,
    ("P",  "Ti", 2) : 2.131,
    ("P",  "V" )    : 2.103,
    ("P",  "V" , 2) : 2.103,
    ("P",  "Cr")    : 2.146,
    ("P",  "Cr", 2) : 2.146,
    ("P",  "Mn")    : 2.207,
    ("P",  "Mn", 2) : 2.207,
    ("P",  "Fe")    : 2.126,
    ("P",  "Fe", 2) : 2.126,
    ("P",  "Co")    : 2.036,
    ("P",  "Co", 2) : 2.036,
    ("P",  "Ni")    : 1.972,
    ("P",  "Ni", 2) : 1.972,
    ("P",  "Cu")    : 1.975,
    ("P",  "Ga")    : 2.362,
    ("P",  "Ga", 2) : 2.133,
    ("P",  "Ge")    : 2.330,
    ("P",  "Ge", 2) : 2.112,
    ("P",  "As")    : 2.326,
    ("P",  "As", 2) : 2.110,
    ("P",  "Se")    : 2.257,
    ("P",  "Se", 2) : 2.043,
    ("P",  "Br")    : 2.225,
    ("P",  "Rb")    : 3.038,
    ("P",  "Sr")    : 2.971,
    ("P",  "Sr", 2) : 2.871,
    ("P",  "Y" )    : 2.750,
    ("P",  "Zr")    : 2.750,
    ("P",  "Zr", 2) : 2.750,
    ("P",  "Nb")    : 2.750,
    ("P",  "Nb", 2) : 2.750,
    ("P",  "Mo")    : 2.750,
    ("P",  "Mo", 2) : 2.750,
    ("P",  "Tc")    : 2.750,
    ("P",  "Tc", 2) : 2.750,
    ("P",  "Ru")    : 2.750,
    ("P",  "Ru", 2) : 2.750,
    ("P",  "Rh")    : 2.750,
    ("P",  "Rh", 2) : 2.750,
    ("P",  "Pd")    : 2.750,
    ("P",  "Pd", 2) : 2.750,
    ("P",  "Ag")    : 2.750,
    ("P",  "In")    : 2.508,
    ("P",  "In", 2) : 2.183,
    ("P",  "Sn")    : 2.507,
    ("P",  "Sn", 2) : 2.259,
    ("P",  "Sb")    : 2.523,
    ("P",  "Sb", 2) : 2.523,
    ("P",  "Te")    : 2.498,
    ("P",  "Te", 2) : 2.296,
    ("P",  "I" )    : 2.478,
    ("P",  "Cs")    : 2.750,
    ("P",  "Ba")    : 2.750,
    ("P",  "Ba", 2) : 2.750,
    ("P",  "La")    : 2.750,
    ("P",  "Hf")    : 2.750,
    ("P",  "Hf", 2) : 2.750,
    ("P",  "Ta")    : 2.750,
    ("P",  "Ta", 2) : 2.750,
    ("P",  "W" )    : 2.750,
    ("P",  "W" , 2) : 2.750,
    ("P",  "Re")    : 2.750,
    ("P",  "Re", 2) : 2.750,
    ("P",  "Os")    : 2.750,
    ("P",  "Os", 2) : 2.750,
    ("P",  "Ir")    : 2.750,
    ("P",  "Ir", 2) : 2.750,
    ("P",  "Pt")    : 2.750,
    ("P",  "Pt", 2) : 2.750,
    ("P",  "Au")    : 2.750,
    ("P",  "Tl")    : 2.750,
    ("P",  "Tl", 2) : 2.750,
    ("P",  "Pb")    : 2.750,
    ("P",  "Pb", 2) : 2.750,
    ("P",  "Bi")    : 2.750,
    ("P",  "Bi", 2) : 2.750,
    ("P",  "Po")    : 2.750,
    ("P",  "Po", 2) : 2.750,
    ("P",  "At")    : 2.750,
    ("S",  "S" )    : 2.011,
    ("S",  "S" , 2) : 1.986,
    ("S",  "Cl")    : 2.110,
    ("S",  "K" )    : 2.923,
    ("S",  "Ca")    : 2.712,
    ("S",  "Ca", 2) : 2.486,
    ("S",  "Sc")    : 2.293,
    ("S",  "Ti")    : 2.131,
    ("S",  "Ti", 2) : 2.131,
    ("S",  "V" )    : 2.103,
    ("S",  "V" , 2) : 2.103,
    ("S",  "Cr")    : 2.146,
    ("S",  "Cr", 2) : 2.146,
    ("S",  "Mn")    : 2.207,
    ("S",  "Mn", 2) : 2.207,
    ("S",  "Fe")    : 2.126,
    ("S",  "Fe", 2) : 2.126,
    ("S",  "Co")    : 2.036,
    ("S",  "Co", 2) : 2.036,
    ("S",  "Ni")    : 1.972,
    ("S",  "Ni", 2) : 1.972,
    ("S",  "Cu")    : 1.975,
    ("S",  "Ga")    : 2.206,
    ("S",  "Ga", 2) : 2.008,
    ("S",  "Ge")    : 2.233,
    ("S",  "Ge", 2) : 2.012,
    ("S",  "As")    : 2.245,
    ("S",  "As", 2) : 2.023,
    ("S",  "Se")    : 2.233,
    ("S",  "Se", 2) : 2.011,
    ("S",  "Br")    : 2.182,
    ("S",  "Rb")    : 2.903,
    ("S",  "Sr")    : 2.831,
    ("S",  "Sr", 2) : 2.705,
    ("S",  "Y" )    : 2.750,
    ("S",  "Zr")    : 2.750,
    ("S",  "Zr", 2) : 2.750,
    ("S",  "Nb")    : 2.750,
    ("S",  "Nb", 2) : 2.750,
    ("S",  "Mo")    : 2.750,
    ("S",  "Mo", 2) : 2.750,
    ("S",  "Tc")    : 2.750,
    ("S",  "Tc", 2) : 2.750,
    ("S",  "Ru")    : 2.750,
    ("S",  "Ru", 2) : 2.750,
    ("S",  "Rh")    : 2.750,
    ("S",  "Rh", 2) : 2.750,
    ("S",  "Pd")    : 2.750,
    ("S",  "Pd", 2) : 2.750,
    ("S",  "Ag")    : 2.750,
    ("S",  "In")    : 2.348,
    ("S",  "In", 2) : 2.065,
    ("S",  "Sn")    : 2.401,
    ("S",  "Sn", 2) : 2.165,
    ("S",  "Sb")    : 2.429,
    ("S",  "Sb", 2) : 2.216,
    ("S",  "Te")    : 2.425,
    ("S",  "Te", 2) : 2.252,
    ("S",  "I" )    : 2.421,
    ("S",  "Cs")    : 2.750,
    ("S",  "Ba")    : 2.750,
    ("S",  "Ba", 2) : 2.750,
    ("S",  "La")    : 2.750,
    ("S",  "Hf")    : 2.750,
    ("S",  "Hf", 2) : 2.750,
    ("S",  "Ta")    : 2.750,
    ("S",  "Ta", 2) : 2.750,
    ("S",  "W" )    : 2.750,
    ("S",  "W" , 2) : 2.750,
    ("S",  "Re")    : 2.750,
    ("S",  "Re", 2) : 2.750,
    ("S",  "Os")    : 2.750,
    ("S",  "Os", 2) : 2.750,
    ("S",  "Ir")    : 2.750,
    ("S",  "Ir", 2) : 2.750,
    ("S",  "Pt")    : 2.750,
    ("S",  "Pt", 2) : 2.750,
    ("S",  "Au")    : 2.750,
    ("S",  "Tl")    : 2.750,
    ("S",  "Tl", 2) : 2.750,
    ("S",  "Pb")    : 2.750,
    ("S",  "Pb", 2) : 2.750,
    ("S",  "Bi")    : 2.750,
    ("S",  "Bi", 2) : 2.750,
    ("S",  "Po")    : 2.750,
    ("S",  "Po", 2) : 2.750,
    ("S",  "At")    : 2.750,
    ("Cl", "Cl")    : 1.410,
    ("Cl", "K" )    : 2.775,
    ("Cl", "Ca")    : 2.578,
    ("Cl", "Sc")    : 2.293,
    ("Cl", "Ti")    : 2.131,
    ("Cl", "V" )    : 2.103,
    ("Cl", "Cr")    : 2.146,
    ("Cl", "Mn")    : 2.207,
    ("Cl", "Fe")    : 2.126,
    ("Cl", "Co")    : 2.036,
    ("Cl", "Ni")    : 1.972,
    ("Cl", "Cu")    : 1.975,
    ("Cl", "Ga")    : 2.155,
    ("Cl", "Ge")    : 2.170,
    ("Cl", "As")    : 2.198,
    ("Cl", "Se")    : 2.167,
    ("Cl", "Br")    : 2.134,
    ("Cl", "Rb")    : 2.780,
    ("Cl", "Sr")    : 2.707,
    ("Cl", "Y" )    : 2.750,
    ("Cl", "Zr")    : 2.750,
    ("Cl", "Nb")    : 2.750,
    ("Cl", "Mo")    : 2.750,
    ("Cl", "Tc")    : 2.750,
    ("Cl", "Ru")    : 2.750,
    ("Cl", "Rh")    : 2.750,
    ("Cl", "Pd")    : 2.750,
    ("Cl", "Ag")    : 2.750,
    ("Cl", "In")    : 2.279,
    ("Cl", "Sn")    : 2.315,
    ("Cl", "Sb")    : 2.353,
    ("Cl", "Te")    : 2.367,
    ("Cl", "I" )    : 2.356,
    ("Cl", "Cs")    : 2.750,
    ("Cl", "Ba")    : 2.750,
    ("Cl", "La")    : 2.750,
    ("Cl", "Hf")    : 2.750,
    ("Cl", "Ta")    : 2.750,
    ("Cl", "W" )    : 2.750,
    ("Cl", "Re")    : 2.750,
    ("Cl", "Os")    : 2.750,
    ("Cl", "Ir")    : 2.750,
    ("Cl", "Pt")    : 2.750,
    ("Cl", "Au")    : 2.750,
    ("Cl", "Tl")    : 2.750,
    ("Cl", "Pb")    : 2.750,
    ("Cl", "Bi")    : 2.750,
    ("Cl", "Po")    : 2.750,
    ("Cl", "At")    : 2.750,
    ("K",  "K" )    : 4.240,
    ("K",  "Ca")    : 4.102,
    ("K",  "Sc")    : 2.293,
    ("K",  "Ti")    : 2.131,
    ("K",  "V" )    : 2.103,
    ("K",  "Cr")    : 2.146,
    ("K",  "Mn")    : 2.207,
    ("K",  "Fe")    : 2.126,
    ("K",  "Co")    : 2.036,
    ("K",  "Ni")    : 1.972,
    ("K",  "Cu")    : 1.975,
    ("K",  "Ga")    : 3.335,
    ("K",  "Ge")    : 3.248,
    ("K",  "As")    : 3.189,
    ("K",  "Se")    : 3.026,
    ("K",  "Br")    : 2.901,
    ("K",  "Rb")    : 3.498,
    ("K",  "Sr")    : 3.584,
    ("K",  "Y" )    : 2.750,
    ("K",  "Zr")    : 2.750,
    ("K",  "Nb")    : 2.750,
    ("K",  "Mo")    : 2.750,
    ("K",  "Tc")    : 2.750,
    ("K",  "Ru")    : 2.750,
    ("K",  "Rh")    : 2.750,
    ("K",  "Pd")    : 2.750,
    ("K",  "Ag")    : 2.750,
    ("K",  "In")    : 3.214,
    ("K",  "Sn")    : 3.195,
    ("K",  "Sb")    : 3.188,
    ("K",  "Te")    : 3.116,
    ("K",  "I" )    : 3.015,
    ("K",  "Cs")    : 2.750,
    ("K",  "Ba")    : 2.750,
    ("K",  "La")    : 2.750,
    ("K",  "Hf")    : 2.750,
    ("K",  "Ta")    : 2.750,
    ("K",  "W" )    : 2.750,
    ("K",  "Re")    : 2.750,
    ("K",  "Os")    : 2.750,
    ("K",  "Ir")    : 2.750,
    ("K",  "Pt")    : 2.750,
    ("K",  "Au")    : 2.750,
    ("K",  "Tl")    : 2.750,
    ("K",  "Pb")    : 2.750,
    ("K",  "Bi")    : 2.750,
    ("K",  "Po")    : 2.750,
    ("K",  "At")    : 2.750,
    ("Ca", "Ca")    : 3.914,
    ("Ca", "Ca", 2) : 5.739,
    ("Ca", "Sc")    : 2.293,
    ("Ca", "Ti")    : 2.131,
    ("Ca", "Ti", 2) : 2.131,
    ("Ca", "V" )    : 2.103,
    ("Ca", "V" , 2) : 2.103,
    ("Ca", "Cr")    : 2.146,
    ("Ca", "Cr", 2) : 2.146,
    ("Ca", "Mn")    : 2.207,
    ("Ca", "Mn", 2) : 2.207,
    ("Ca", "Fe")    : 2.126,
    ("Ca", "Fe", 2) : 2.126,
    ("Ca", "Co")    : 2.036,
    ("Ca", "Co", 2) : 2.036,
    ("Ca", "Ni")    : 1.972,
    ("Ca", "Ni", 2) : 1.972,
    ("Ca", "Cu")    : 1.975,
    ("Ca", "Ga")    : 3.126,
    ("Ca", "Ga", 2) : 4.464,
    ("Ca", "Ge")    : 3.036,
    ("Ca", "Ge", 2) : 3.156,
    ("Ca", "As")    : 2.970,
    ("Ca", "As", 2) : 2.775,
    ("Ca", "Se")    : 2.807,
    ("Ca", "Se", 2) : 2.589,
    ("Ca", "Br")    : 2.704,
    ("Ca", "Rb")    : 3.698,
    ("Ca", "Sr")    : 3.693,
    ("Ca", "Sr", 2) : 4.030,
    ("Ca", "Y" )    : 2.750,
    ("Ca", "Zr")    : 2.750,
    ("Ca", "Zr", 2) : 2.750,
    ("Ca", "Nb")    : 2.750,
    ("Ca", "Nb", 2) : 2.750,
    ("Ca", "Mo")    : 2.750,
    ("Ca", "Mo", 2) : 2.750,
    ("Ca", "Tc")    : 2.750,
    ("Ca", "Tc", 2) : 2.750,
    ("Ca", "Ru")    : 2.750,
    ("Ca", "Ru", 2) : 2.750,
    ("Ca", "Rh")    : 2.750,
    ("Ca", "Rh", 2) : 2.750,
    ("Ca", "Pd")    : 2.750,
    ("Ca", "Pd", 2) : 2.750,
    ("Ca", "Ag")    : 2.750,
    ("Ca", "In")    : 3.242,
    ("Ca", "In", 2) : 3.750,
    ("Ca", "Sn")    : 3.191,
    ("Ca", "Sn", 2) : 3.412,
    ("Ca", "Sb")    : 3.161,
    ("Ca", "Sb", 2) : 3.052,
    ("Ca", "Te")    : 3.044,
    ("Ca", "Te", 2) : 2.855,
    ("Ca", "I" )    : 2.934,
    ("Ca", "Cs")    : 2.750,
    ("Ca", "Ba")    : 2.750,
    ("Ca", "Ba", 2) : 2.750,
    ("Ca", "La")    : 2.750,
    ("Ca", "Hf")    : 2.750,
    ("Ca", "Hf", 2) : 2.750,
    ("Ca", "Ta")    : 2.750,
    ("Ca", "Ta", 2) : 2.750,
    ("Ca", "W" )    : 2.750,
    ("Ca", "W" , 2) : 2.750,
    ("Ca", "Re")    : 2.750,
    ("Ca", "Re", 2) : 2.750,
    ("Ca", "Os")    : 2.750,
    ("Ca", "Os", 2) : 2.750,
    ("Ca", "Ir")    : 2.750,
    ("Ca", "Ir", 2) : 2.750,
    ("Ca", "Pt")    : 2.750,
    ("Ca", "Pt", 2) : 2.750,
    ("Ca", "Au")    : 2.750,
    ("Ca", "Tl")    : 2.750,
    ("Ca", "Tl", 2) : 2.750,
    ("Ca", "Pb")    : 2.750,
    ("Ca", "Pb", 2) : 2.750,
    ("Ca", "Bi")    : 2.750,
    ("Ca", "Bi", 2) : 2.750,
    ("Ca", "Po")    : 2.750,
    ("Ca", "Po", 2) : 2.750,
    ("Ca", "At")    : 2.750,
    ("Sc", "Sc")    : 2.750,
    ("Sc", "Ti")    : 2.750,
    ("Sc", "V" )    : 2.750,
    ("Sc", "Cr")    : 2.750,
    ("Sc", "Mn")    : 2.750,
    ("Sc", "Fe")    : 2.750,
    ("Sc", "Co")    : 2.750,
    ("Sc", "Ni")    : 2.750,
    ("Sc", "Cu")    : 2.750,
    ("Sc", "Ga")    : 2.293,
    ("Sc", "Ge")    : 2.293,
    ("Sc", "As")    : 2.293,
    ("Sc", "Se")    : 2.293,
    ("Sc", "Br")    : 2.293,
    ("Sc", "Rb")    : 2.293,
    ("Sc", "Sr")    : 2.293,
    ("Sc", "Y" )    : 2.293,
    ("Sc", "Zr")    : 2.293,
    ("Sc", "Nb")    : 2.293,
    ("Sc", "Mo")    : 2.293,
    ("Sc", "Tc")    : 2.293,
    ("Sc", "Ru")    : 2.293,
    ("Sc", "Rh")    : 2.293,
    ("Sc", "Pd")    : 2.293,
    ("Sc", "Ag")    : 2.293,
    ("Sc", "In")    : 2.293,
    ("Sc", "Sn")    : 2.293,
    ("Sc", "Sb")    : 2.293,
    ("Sc", "Te")    : 2.293,
    ("Sc", "I" )    : 2.293,
    ("Sc", "Cs")    : 2.293,
    ("Sc", "Ba")    : 2.293,
    ("Sc", "La")    : 2.293,
    ("Sc", "Hf")    : 2.293,
    ("Sc", "Ta")    : 2.293,
    ("Sc", "W" )    : 2.293,
    ("Sc", "Re")    : 2.293,
    ("Sc", "Os")    : 2.293,
    ("Sc", "Ir")    : 2.293,
    ("Sc", "Pt")    : 2.293,
    ("Sc", "Au")    : 2.293,
    ("Sc", "Tl")    : 2.293,
    ("Sc", "Pb")    : 2.293,
    ("Sc", "Bi")    : 2.293,
    ("Sc", "Po")    : 2.293,
    ("Sc", "At")    : 2.293,
    ("Ti", "Ti")    : 2.750,
    ("Ti", "Ti", 2) : 2.750,
    ("Ti", "V" )    : 2.750,
    ("Ti", "V" , 2) : 2.750,
    ("Ti", "Cr")    : 2.750,
    ("Ti", "Cr", 2) : 2.750,
    ("Ti", "Mn")    : 2.750,
    ("Ti", "Mn", 2) : 2.750,
    ("Ti", "Fe")    : 2.750,
    ("Ti", "Fe", 2) : 2.750,
    ("Ti", "Co")    : 2.750,
    ("Ti", "Co", 2) : 2.750,
    ("Ti", "Ni")    : 2.750,
    ("Ti", "Ni", 2) : 2.750,
    ("Ti", "Cu")    : 2.750,
    ("Ti", "Ga")    : 2.131,
    ("Ti", "Ga", 2) : 2.131,
    ("Ti", "Ge")    : 2.131,
    ("Ti", "Ge", 2) : 2.131,
    ("Ti", "As")    : 2.131,
    ("Ti", "As", 2) : 2.131,
    ("Ti", "Se")    : 2.131,
    ("Ti", "Se", 2) : 2.131,
    ("Ti", "Br")    : 2.131,
    ("Ti", "Rb")    : 2.131,
    ("Ti", "Sr")    : 2.131,
    ("Ti", "Sr", 2) : 2.131,
    ("Ti", "Y" )    : 2.131,
    ("Ti", "Zr")    : 2.131,
    ("Ti", "Zr", 2) : 2.131,
    ("Ti", "Nb")    : 2.131,
    ("Ti", "Nb", 2) : 2.131,
    ("Ti", "Mo")    : 2.131,
    ("Ti", "Mo", 2) : 2.131,
    ("Ti", "Tc")    : 2.131,
    ("Ti", "Tc", 2) : 2.131,
    ("Ti", "Ru")    : 2.131,
    ("Ti", "Ru", 2) : 2.131,
    ("Ti", "Rh")    : 2.131,
    ("Ti", "Rh", 2) : 2.131,
    ("Ti", "Pd")    : 2.131,
    ("Ti", "Pd", 2) : 2.131,
    ("Ti", "Ag")    : 2.131,
    ("Ti", "In")    : 2.131,
    ("Ti", "In", 2) : 2.131,
    ("Ti", "Sn")    : 2.131,
    ("Ti", "Sn", 2) : 2.131,
    ("Ti", "Sb")    : 2.131,
    ("Ti", "Sb", 2) : 2.131,
    ("Ti", "Te")    : 2.131,
    ("Ti", "Te", 2) : 2.131,
    ("Ti", "I" )    : 2.131,
    ("Ti", "Cs")    : 2.131,
    ("Ti", "Ba")    : 2.131,
    ("Ti", "Ba", 2) : 2.131,
    ("Ti", "La")    : 2.131,
    ("Ti", "Hf")    : 2.131,
    ("Ti", "Hf", 2) : 2.131,
    ("Ti", "Ta")    : 2.131,
    ("Ti", "Ta", 2) : 2.131,
    ("Ti", "W" )    : 2.131,
    ("Ti", "W" , 2) : 2.131,
    ("Ti", "Re")    : 2.131,
    ("Ti", "Re", 2) : 2.131,
    ("Ti", "Os")    : 2.131,
    ("Ti", "Os", 2) : 2.131,
    ("Ti", "Ir")    : 2.131,
    ("Ti", "Ir", 2) : 2.131,
    ("Ti", "Pt")    : 2.131,
    ("Ti", "Pt", 2) : 2.131,
    ("Ti", "Au")    : 2.131,
    ("Ti", "Tl")    : 2.131,
    ("Ti", "Tl", 2) : 2.131,
    ("Ti", "Pb")    : 2.131,
    ("Ti", "Pb", 2) : 2.131,
    ("Ti", "Bi")    : 2.131,
    ("Ti", "Bi", 2) : 2.131,
    ("Ti", "Po")    : 2.131,
    ("Ti", "Po", 2) : 2.131,
    ("Ti", "At")    : 2.131,
    ("V",  "V" )    : 2.750,
    ("V",  "V" , 2) : 2.750,
    ("V",  "Cr")    : 2.750,
    ("V",  "Cr", 2) : 2.750,
    ("V",  "Mn")    : 2.750,
    ("V",  "Mn", 2) : 2.750,
    ("V",  "Fe")    : 2.750,
    ("V",  "Fe", 2) : 2.750,
    ("V",  "Co")    : 2.750,
    ("V",  "Co", 2) : 2.750,
    ("V",  "Ni")    : 2.750,
    ("V",  "Ni", 2) : 2.750,
    ("V",  "Cu")    : 2.750,
    ("V",  "Ga")    : 2.103,
    ("V",  "Ga", 2) : 2.103,
    ("V",  "Ge")    : 2.103,
    ("V",  "Ge", 2) : 2.103,
    ("V",  "As")    : 2.103,
    ("V",  "As", 2) : 2.103,
    ("V",  "Se")    : 2.103,
    ("V",  "Se", 2) : 2.103,
    ("V",  "Br")    : 2.103,
    ("V",  "Rb")    : 2.103,
    ("V",  "Sr")    : 2.103,
    ("V",  "Sr", 2) : 2.103,
    ("V",  "Y" )    : 2.103,
    ("V",  "Zr")    : 2.103,
    ("V",  "Zr", 2) : 2.103,
    ("V",  "Nb")    : 2.103,
    ("V",  "Nb", 2) : 2.103,
    ("V",  "Mo")    : 2.103,
    ("V",  "Mo", 2) : 2.103,
    ("V",  "Tc")    : 2.103,
    ("V",  "Tc", 2) : 2.103,
    ("V",  "Ru")    : 2.103,
    ("V",  "Ru", 2) : 2.103,
    ("V",  "Rh")    : 2.103,
    ("V",  "Rh", 2) : 2.103,
    ("V",  "Pd")    : 2.103,
    ("V",  "Pd", 2) : 2.103,
    ("V",  "Ag")    : 2.103,
    ("V",  "In")    : 2.103,
    ("V",  "In", 2) : 2.103,
    ("V",  "Sn")    : 2.103,
    ("V",  "Sn", 2) : 2.103,
    ("V",  "Sb")    : 2.103,
    ("V",  "Sb", 2) : 2.103,
    ("V",  "Te")    : 2.103,
    ("V",  "Te", 2) : 2.103,
    ("V",  "I" )    : 2.103,
    ("V",  "Cs")    : 2.103,
    ("V",  "Ba")    : 2.103,
    ("V",  "Ba", 2) : 2.103,
    ("V",  "La")    : 2.103,
    ("V",  "Hf")    : 2.103,
    ("V",  "Hf", 2) : 2.103,
    ("V",  "Ta")    : 2.103,
    ("V",  "Ta", 2) : 2.103,
    ("V",  "W" )    : 2.103,
    ("V",  "W" , 2) : 2.103,
    ("V",  "Re")    : 2.103,
    ("V",  "Re", 2) : 2.103,
    ("V",  "Os")    : 2.103,
    ("V",  "Os", 2) : 2.103,
    ("V",  "Ir")    : 2.103,
    ("V",  "Ir", 2) : 2.103,
    ("V",  "Pt")    : 2.103,
    ("V",  "Pt", 2) : 2.103,
    ("V",  "Au")    : 2.103,
    ("V",  "Tl")    : 2.103,
    ("V",  "Tl", 2) : 2.103,
    ("V",  "Pb")    : 2.103,
    ("V",  "Pb", 2) : 2.103,
    ("V",  "Bi")    : 2.103,
    ("V",  "Bi", 2) : 2.103,
    ("V",  "Po")    : 2.103,
    ("V",  "Po", 2) : 2.103,
    ("V",  "At")    : 2.103,
    ("Cr", "Cr")    : 2.750,
    ("Cr", "Cr", 2) : 2.750,
    ("Cr", "Mn")    : 2.750,
    ("Cr", "Mn", 2) : 2.750,
    ("Cr", "Fe")    : 2.750,
    ("Cr", "Fe", 2) : 2.750,
    ("Cr", "Co")    : 2.750,
    ("Cr", "Co", 2) : 2.750,
    ("Cr", "Ni")    : 2.750,
    ("Cr", "Ni", 2) : 2.750,
    ("Cr", "Cu")    : 2.750,
    ("Cr", "Ga")    : 2.146,
    ("Cr", "Ga", 2) : 2.146,
    ("Cr", "Ge")    : 2.146,
    ("Cr", "Ge", 2) : 2.146,
    ("Cr", "As")    : 2.146,
    ("Cr", "As", 2) : 2.146,
    ("Cr", "Se")    : 2.146,
    ("Cr", "Se", 2) : 2.146,
    ("Cr", "Br")    : 2.146,
    ("Cr", "Rb")    : 2.146,
    ("Cr", "Sr")    : 2.146,
    ("Cr", "Sr", 2) : 2.146,
    ("Cr", "Y" )    : 2.146,
    ("Cr", "Zr")    : 2.146,
    ("Cr", "Zr", 2) : 2.146,
    ("Cr", "Nb")    : 2.146,
    ("Cr", "Nb", 2) : 2.146,
    ("Cr", "Mo")    : 2.146,
    ("Cr", "Mo", 2) : 2.146,
    ("Cr", "Tc")    : 2.146,
    ("Cr", "Tc", 2) : 2.146,
    ("Cr", "Ru")    : 2.146,
    ("Cr", "Ru", 2) : 2.146,
    ("Cr", "Rh")    : 2.146,
    ("Cr", "Rh", 2) : 2.146,
    ("Cr", "Pd")    : 2.146,
    ("Cr", "Pd", 2) : 2.146,
    ("Cr", "Ag")    : 2.146,
    ("Cr", "In")    : 2.146,
    ("Cr", "In", 2) : 2.146,
    ("Cr", "Sn")    : 2.146,
    ("Cr", "Sn", 2) : 2.146,
    ("Cr", "Sb")    : 2.146,
    ("Cr", "Sb", 2) : 2.146,
    ("Cr", "Te")    : 2.146,
    ("Cr", "Te", 2) : 2.146,
    ("Cr", "I" )    : 2.146,
    ("Cr", "Cs")    : 2.146,
    ("Cr", "Ba")    : 2.146,
    ("Cr", "Ba", 2) : 2.146,
    ("Cr", "La")    : 2.146,
    ("Cr", "Hf")    : 2.146,
    ("Cr", "Hf", 2) : 2.146,
    ("Cr", "Ta")    : 2.146,
    ("Cr", "Ta", 2) : 2.146,
    ("Cr", "W" )    : 2.146,
    ("Cr", "W" , 2) : 2.146,
    ("Cr", "Re")    : 2.146,
    ("Cr", "Re", 2) : 2.146,
    ("Cr", "Os")    : 2.146,
    ("Cr", "Os", 2) : 2.146,
    ("Cr", "Ir")    : 2.146,
    ("Cr", "Ir", 2) : 2.146,
    ("Cr", "Pt")    : 2.146,
    ("Cr", "Pt", 2) : 2.146,
    ("Cr", "Au")    : 2.146,
    ("Cr", "Tl")    : 2.146,
    ("Cr", "Tl", 2) : 2.146,
    ("Cr", "Pb")    : 2.146,
    ("Cr", "Pb", 2) : 2.146,
    ("Cr", "Bi")    : 2.146,
    ("Cr", "Bi", 2) : 2.146,
    ("Cr", "Po")    : 2.146,
    ("Cr", "Po", 2) : 2.146,
    ("Cr", "At")    : 2.146,
    ("Mn", "Mn")    : 2.750,
    ("Mn", "Mn", 2) : 2.750,
    ("Mn", "Fe")    : 2.750,
    ("Mn", "Fe", 2) : 2.750,
    ("Mn", "Co")    : 2.750,
    ("Mn", "Co", 2) : 2.750,
    ("Mn", "Ni")    : 2.750,
    ("Mn", "Ni", 2) : 2.750,
    ("Mn", "Cu")    : 2.750,
    ("Mn", "Ga")    : 2.207,
    ("Mn", "Ga", 2) : 2.207,
    ("Mn", "Ge")    : 2.207,
    ("Mn", "Ge", 2) : 2.207,
    ("Mn", "As")    : 2.207,
    ("Mn", "As", 2) : 2.207,
    ("Mn", "Se")    : 2.207,
    ("Mn", "Se", 2) : 2.207,
    ("Mn", "Br")    : 2.207,
    ("Mn", "Rb")    : 2.207,
    ("Mn", "Sr")    : 2.207,
    ("Mn", "Sr", 2) : 2.207,
    ("Mn", "Y" )    : 2.207,
    ("Mn", "Zr")    : 2.207,
    ("Mn", "Zr", 2) : 2.207,
    ("Mn", "Nb")    : 2.207,
    ("Mn", "Nb", 2) : 2.207,
    ("Mn", "Mo")    : 2.207,
    ("Mn", "Mo", 2) : 2.207,
    ("Mn", "Tc")    : 2.207,
    ("Mn", "Tc", 2) : 2.207,
    ("Mn", "Ru")    : 2.207,
    ("Mn", "Ru", 2) : 2.207,
    ("Mn", "Rh")    : 2.207,
    ("Mn", "Rh", 2) : 2.207,
    ("Mn", "Pd")    : 2.207,
    ("Mn", "Pd", 2) : 2.207,
    ("Mn", "Ag")    : 2.207,
    ("Mn", "In")    : 2.207,
    ("Mn", "In", 2) : 2.207,
    ("Mn", "Sn")    : 2.207,
    ("Mn", "Sn", 2) : 2.207,
    ("Mn", "Sb")    : 2.207,
    ("Mn", "Sb", 2) : 2.207,
    ("Mn", "Te")    : 2.207,
    ("Mn", "Te", 2) : 2.207,
    ("Mn", "I" )    : 2.207,
    ("Mn", "Cs")    : 2.207,
    ("Mn", "Ba")    : 2.207,
    ("Mn", "Ba", 2) : 2.207,
    ("Mn", "La")    : 2.207,
    ("Mn", "Hf")    : 2.207,
    ("Mn", "Hf", 2) : 2.207,
    ("Mn", "Ta")    : 2.207,
    ("Mn", "Ta", 2) : 2.207,
    ("Mn", "W" )    : 2.207,
    ("Mn", "W" , 2) : 2.207,
    ("Mn", "Re")    : 2.207,
    ("Mn", "Re", 2) : 2.207,
    ("Mn", "Os")    : 2.207,
    ("Mn", "Os", 2) : 2.207,
    ("Mn", "Ir")    : 2.207,
    ("Mn", "Ir", 2) : 2.207,
    ("Mn", "Pt")    : 2.207,
    ("Mn", "Pt", 2) : 2.207,
    ("Mn", "Au")    : 2.207,
    ("Mn", "Tl")    : 2.207,
    ("Mn", "Tl", 2) : 2.207,
    ("Mn", "Pb")    : 2.207,
    ("Mn", "Pb", 2) : 2.207,
    ("Mn", "Bi")    : 2.207,
    ("Mn", "Bi", 2) : 2.207,
    ("Mn", "Po")    : 2.207,
    ("Mn", "Po", 2) : 2.207,
    ("Mn", "At")    : 2.207,
    ("Fe", "Fe")    : 2.750,
    ("Fe", "Fe", 2) : 2.750,
    ("Fe", "Co")    : 2.750,
    ("Fe", "Co", 2) : 2.750,
    ("Fe", "Ni")    : 2.750,
    ("Fe", "Ni", 2) : 2.750,
    ("Fe", "Cu")    : 2.750,
    ("Fe", "Ga")    : 2.126,
    ("Fe", "Ga", 2) : 2.126,
    ("Fe", "Ge")    : 2.126,
    ("Fe", "Ge", 2) : 2.126,
    ("Fe", "As")    : 2.126,
    ("Fe", "As", 2) : 2.126,
    ("Fe", "Se")    : 2.126,
    ("Fe", "Se", 2) : 2.126,
    ("Fe", "Br")    : 2.126,
    ("Fe", "Rb")    : 2.126,
    ("Fe", "Sr")    : 2.126,
    ("Fe", "Sr", 2) : 2.126,
    ("Fe", "Y" )    : 2.126,
    ("Fe", "Zr")    : 2.126,
    ("Fe", "Zr", 2) : 2.126,
    ("Fe", "Nb")    : 2.126,
    ("Fe", "Nb", 2) : 2.126,
    ("Fe", "Mo")    : 2.126,
    ("Fe", "Mo", 2) : 2.126,
    ("Fe", "Tc")    : 2.126,
    ("Fe", "Tc", 2) : 2.126,
    ("Fe", "Ru")    : 2.126,
    ("Fe", "Ru", 2) : 2.126,
    ("Fe", "Rh")    : 2.126,
    ("Fe", "Rh", 2) : 2.126,
    ("Fe", "Pd")    : 2.126,
    ("Fe", "Pd", 2) : 2.126,
    ("Fe", "Ag")    : 2.126,
    ("Fe", "In")    : 2.126,
    ("Fe", "In", 2) : 2.126,
    ("Fe", "Sn")    : 2.126,
    ("Fe", "Sn", 2) : 2.126,
    ("Fe", "Sb")    : 2.126,
    ("Fe", "Sb", 2) : 2.126,
    ("Fe", "Te")    : 2.126,
    ("Fe", "Te", 2) : 2.126,
    ("Fe", "I" )    : 2.126,
    ("Fe", "Cs")    : 2.126,
    ("Fe", "Ba")    : 2.126,
    ("Fe", "Ba", 2) : 2.126,
    ("Fe", "La")    : 2.126,
    ("Fe", "Hf")    : 2.126,
    ("Fe", "Hf", 2) : 2.126,
    ("Fe", "Ta")    : 2.126,
    ("Fe", "Ta", 2) : 2.126,
    ("Fe", "W" )    : 2.126,
    ("Fe", "W" , 2) : 2.126,
    ("Fe", "Re")    : 2.126,
    ("Fe", "Re", 2) : 2.126,
    ("Fe", "Os")    : 2.126,
    ("Fe", "Os", 2) : 2.126,
    ("Fe", "Ir")    : 2.126,
    ("Fe", "Ir", 2) : 2.126,
    ("Fe", "Pt")    : 2.126,
    ("Fe", "Pt", 2) : 2.126,
    ("Fe", "Au")    : 2.126,
    ("Fe", "Tl")    : 2.126,
    ("Fe", "Tl", 2) : 2.126,
    ("Fe", "Pb")    : 2.126,
    ("Fe", "Pb", 2) : 2.126,
    ("Fe", "Bi")    : 2.126,
    ("Fe", "Bi", 2) : 2.126,
    ("Fe", "Po")    : 2.126,
    ("Fe", "Po", 2) : 2.126,
    ("Fe", "At")    : 2.126,
    ("Co", "Co")    : 2.750,
    ("Co", "Co", 2) : 2.750,
    ("Co", "Ni")    : 2.750,
    ("Co", "Ni", 2) : 2.750,
    ("Co", "Cu")    : 2.750,
    ("Co", "Ga")    : 2.036,
    ("Co", "Ga", 2) : 2.036,
    ("Co", "Ge")    : 2.036,
    ("Co", "Ge", 2) : 2.036,
    ("Co", "As")    : 2.036,
    ("Co", "As", 2) : 2.036,
    ("Co", "Se")    : 2.036,
    ("Co", "Se", 2) : 2.036,
    ("Co", "Br")    : 2.036,
    ("Co", "Rb")    : 2.036,
    ("Co", "Sr")    : 2.036,
    ("Co", "Sr", 2) : 2.036,
    ("Co", "Y" )    : 2.036,
    ("Co", "Zr")    : 2.036,
    ("Co", "Zr", 2) : 2.036,
    ("Co", "Nb")    : 2.036,
    ("Co", "Nb", 2) : 2.036,
    ("Co", "Mo")    : 2.036,
    ("Co", "Mo", 2) : 2.036,
    ("Co", "Tc")    : 2.036,
    ("Co", "Tc", 2) : 2.036,
    ("Co", "Ru")    : 2.036,
    ("Co", "Ru", 2) : 2.036,
    ("Co", "Rh")    : 2.036,
    ("Co", "Rh", 2) : 2.036,
    ("Co", "Pd")    : 2.036,
    ("Co", "Pd", 2) : 2.036,
    ("Co", "Ag")    : 2.036,
    ("Co", "In")    : 2.036,
    ("Co", "In", 2) : 2.036,
    ("Co", "Sn")    : 2.036,
    ("Co", "Sn", 2) : 2.036,
    ("Co", "Sb")    : 2.036,
    ("Co", "Sb", 2) : 2.036,
    ("Co", "Te")    : 2.036,
    ("Co", "Te", 2) : 2.036,
    ("Co", "I" )    : 2.036,
    ("Co", "Cs")    : 2.036,
    ("Co", "Ba")    : 2.036,
    ("Co", "Ba", 2) : 2.036,
    ("Co", "La")    : 2.036,
    ("Co", "Hf")    : 2.036,
    ("Co", "Hf", 2) : 2.036,
    ("Co", "Ta")    : 2.036,
    ("Co", "Ta", 2) : 2.036,
    ("Co", "W" )    : 2.036,
    ("Co", "W" , 2) : 2.036,
    ("Co", "Re")    : 2.036,
    ("Co", "Re", 2) : 2.036,
    ("Co", "Os")    : 2.036,
    ("Co", "Os", 2) : 2.036,
    ("Co", "Ir")    : 2.036,
    ("Co", "Ir", 2) : 2.036,
    ("Co", "Pt")    : 2.036,
    ("Co", "Pt", 2) : 2.036,
    ("Co", "Au")    : 2.036,
    ("Co", "Tl")    : 2.036,
    ("Co", "Tl", 2) : 2.036,
    ("Co", "Pb")    : 2.036,
    ("Co", "Pb", 2) : 2.036,
    ("Co", "Bi")    : 2.036,
    ("Co", "Bi", 2) : 2.036,
    ("Co", "Po")    : 2.036,
    ("Co", "Po", 2) : 2.036,
    ("Co", "At")    : 2.036,
    ("Ni", "Ni")    : 2.750,
    ("Ni", "Ni", 2) : 2.750,
    ("Ni", "Cu")    : 2.750,
    ("Ni", "Ga")    : 1.972,
    ("Ni", "Ga", 2) : 1.972,
    ("Ni", "Ge")    : 1.972,
    ("Ni", "Ge", 2) : 1.972,
    ("Ni", "As")    : 1.972,
    ("Ni", "As", 2) : 1.972,
    ("Ni", "Se")    : 1.972,
    ("Ni", "Se", 2) : 1.972,
    ("Ni", "Br")    : 1.972,
    ("Ni", "Rb")    : 1.972,
    ("Ni", "Sr")    : 1.972,
    ("Ni", "Sr", 2) : 1.972,
    ("Ni", "Y" )    : 1.972,
    ("Ni", "Zr")    : 1.972,
    ("Ni", "Zr", 2) : 1.972,
    ("Ni", "Nb")    : 1.972,
    ("Ni", "Nb", 2) : 1.972,
    ("Ni", "Mo")    : 1.972,
    ("Ni", "Mo", 2) : 1.972,
    ("Ni", "Tc")    : 1.972,
    ("Ni", "Tc", 2) : 1.972,
    ("Ni", "Ru")    : 1.972,
    ("Ni", "Ru", 2) : 1.972,
    ("Ni", "Rh")    : 1.972,
    ("Ni", "Rh", 2) : 1.972,
    ("Ni", "Pd")    : 1.972,
    ("Ni", "Pd", 2) : 1.972,
    ("Ni", "Ag")    : 1.972,
    ("Ni", "In")    : 1.972,
    ("Ni", "In", 2) : 1.972,
    ("Ni", "Sn")    : 1.972,
    ("Ni", "Sn", 2) : 1.972,
    ("Ni", "Sb")    : 1.972,
    ("Ni", "Sb", 2) : 1.972,
    ("Ni", "Te")    : 1.972,
    ("Ni", "Te", 2) : 1.972,
    ("Ni", "I" )    : 1.972,
    ("Ni", "Cs")    : 1.972,
    ("Ni", "Ba")    : 1.972,
    ("Ni", "Ba", 2) : 1.972,
    ("Ni", "La")    : 1.972,
    ("Ni", "Hf")    : 1.972,
    ("Ni", "Hf", 2) : 1.972,
    ("Ni", "Ta")    : 1.972,
    ("Ni", "Ta", 2) : 1.972,
    ("Ni", "W" )    : 1.972,
    ("Ni", "W" , 2) : 1.972,
    ("Ni", "Re")    : 1.972,
    ("Ni", "Re", 2) : 1.972,
    ("Ni", "Os")    : 1.972,
    ("Ni", "Os", 2) : 1.972,
    ("Ni", "Ir")    : 1.972,
    ("Ni", "Ir", 2) : 1.972,
    ("Ni", "Pt")    : 1.972,
    ("Ni", "Pt", 2) : 1.972,
    ("Ni", "Au")    : 1.972,
    ("Ni", "Tl")    : 1.972,
    ("Ni", "Tl", 2) : 1.972,
    ("Ni", "Pb")    : 1.972,
    ("Ni", "Pb", 2) : 1.972,
    ("Ni", "Bi")    : 1.972,
    ("Ni", "Bi", 2) : 1.972,
    ("Ni", "Po")    : 1.972,
    ("Ni", "Po", 2) : 1.972,
    ("Ni", "At")    : 1.972,
    ("Cu", "Cu")    : 2.750,
    ("Cu", "Ga")    : 1.975,
    ("Cu", "Ge")    : 1.975,
    ("Cu", "As")    : 1.975,
    ("Cu", "Se")    : 1.975,
    ("Cu", "Br")    : 1.975,
    ("Cu", "Rb")    : 1.975,
    ("Cu", "Sr")    : 1.975,
    ("Cu", "Y" )    : 1.975,
    ("Cu", "Zr")    : 1.975,
    ("Cu", "Nb")    : 1.975,
    ("Cu", "Mo")    : 1.975,
    ("Cu", "Tc")    : 1.975,
    ("Cu", "Ru")    : 1.975,
    ("Cu", "Rh")    : 1.975,
    ("Cu", "Pd")    : 1.975,
    ("Cu", "Ag")    : 1.975,
    ("Cu", "In")    : 1.975,
    ("Cu", "Sn")    : 1.975,
    ("Cu", "Sb")    : 1.975,
    ("Cu", "Te")    : 1.975,
    ("Cu", "I" )    : 1.975,
    ("Cu", "Cs")    : 1.975,
    ("Cu", "Ba")    : 1.975,
    ("Cu", "La")    : 1.975,
    ("Cu", "Hf")    : 1.975,
    ("Cu", "Ta")    : 1.975,
    ("Cu", "W" )    : 1.975,
    ("Cu", "Re")    : 1.975,
    ("Cu", "Os")    : 1.975,
    ("Cu", "Ir")    : 1.975,
    ("Cu", "Pt")    : 1.975,
    ("Cu", "Au")    : 1.975,
    ("Cu", "Tl")    : 1.975,
    ("Cu", "Pb")    : 1.975,
    ("Cu", "Bi")    : 1.975,
    ("Cu", "Po")    : 1.975,
    ("Cu", "At")    : 1.975,
    ("Ga", "Ga")    : 2.471,
    ("Ga", "Ga", 2) : 2.578,
    ("Ga", "Ge")    : 2.440,
    ("Ga", "Ge", 2) : 2.394,
    ("Ga", "As")    : 2.430,
    ("Ga", "As", 2) : 2.204,
    ("Ga", "Se")    : 2.306,
    ("Ga", "Se", 2) : 2.102,
    ("Ga", "Br")    : 2.284,
    ("Ga", "Rb")    : 2.750,
    ("Ga", "Sr")    : 2.750,
    ("Ga", "Sr", 2) : 3.287,
    ("Ga", "Y" )    : 2.750,
    ("Ga", "Zr")    : 2.750,
    ("Ga", "Zr", 2) : 2.750,
    ("Ga", "Nb")    : 2.750,
    ("Ga", "Nb", 2) : 2.750,
    ("Ga", "Mo")    : 2.750,
    ("Ga", "Mo", 2) : 2.750,
    ("Ga", "Tc")    : 2.750,
    ("Ga", "Tc", 2) : 2.750,
    ("Ga", "Ru")    : 2.750,
    ("Ga", "Ru", 2) : 2.750,
    ("Ga", "Rh")    : 2.750,
    ("Ga", "Rh", 2) : 2.750,
    ("Ga", "Pd")    : 2.750,
    ("Ga", "Pd", 2) : 2.750,
    ("Ga", "Ag")    : 2.750,
    ("Ga", "In")    : 2.345,
    ("Ga", "In", 2) : 2.147,
    ("Ga", "Sn")    : 2.577,
    ("Ga", "Sn", 2) : 2.187,
    ("Ga", "Sb")    : 2.634,
    ("Ga", "Sb", 2) : 2.231,
    ("Ga", "Te")    : 2.459,
    ("Ga", "Te", 2) : 2.172,
    ("Ga", "I" )    : 2.469,
    ("Ga", "Cs")    : 2.750,
    ("Ga", "Ba")    : 2.750,
    ("Ga", "Ba", 2) : 2.750,
    ("Ga", "La")    : 2.750,
    ("Ga", "Hf")    : 2.750,
    ("Ga", "Hf", 2) : 2.750,
    ("Ga", "Ta")    : 2.750,
    ("Ga", "Ta", 2) : 2.750,
    ("Ga", "W" )    : 2.750,
    ("Ga", "W" , 2) : 2.750,
    ("Ga", "Re")    : 2.750,
    ("Ga", "Re", 2) : 2.750,
    ("Ga", "Os")    : 2.750,
    ("Ga", "Os", 2) : 2.750,
    ("Ga", "Ir")    : 2.750,
    ("Ga", "Ir", 2) : 2.750,
    ("Ga", "Pt")    : 2.750,
    ("Ga", "Pt", 2) : 2.750,
    ("Ga", "Au")    : 2.750,
    ("Ga", "Tl")    : 2.750,
    ("Ga", "Tl", 2) : 2.750,
    ("Ga", "Pb")    : 2.750,
    ("Ga", "Pb", 2) : 2.750,
    ("Ga", "Bi")    : 2.750,
    ("Ga", "Bi", 2) : 2.750,
    ("Ga", "Po")    : 2.750,
    ("Ga", "Po", 2) : 2.750,
    ("Ga", "At")    : 2.750,
    ("Ge", "Ge")    : 2.413,
    ("Ge", "Ge", 2) : 2.215,
    ("Ge", "As")    : 2.407,
    ("Ge", "As", 2) : 2.194,
    ("Ge", "Se")    : 2.347,
    ("Ge", "Se", 2) : 2.123,
    ("Ge", "Br")    : 2.306,
    ("Ge", "Rb")    : 3.114,
    ("Ge", "Sr")    : 3.076,
    ("Ge", "Sr", 2) : 3.137,
    ("Ge", "Y" )    : 2.750,
    ("Ge", "Zr")    : 2.750,
    ("Ge", "Zr", 2) : 2.750,
    ("Ge", "Nb")    : 2.750,
    ("Ge", "Nb", 2) : 2.750,
    ("Ge", "Mo")    : 2.750,
    ("Ge", "Mo", 2) : 2.750,
    ("Ge", "Tc")    : 2.750,
    ("Ge", "Tc", 2) : 2.750,
    ("Ge", "Ru")    : 2.750,
    ("Ge", "Ru", 2) : 2.750,
    ("Ge", "Rh")    : 2.750,
    ("Ge", "Rh", 2) : 2.750,
    ("Ge", "Pd")    : 2.750,
    ("Ge", "Pd", 2) : 2.750,
    ("Ge", "Ag")    : 2.750,
    ("Ge", "In")    : 2.541,
    ("Ge", "In", 2) : 2.183,
    ("Ge", "Sn")    : 2.566,
    ("Ge", "Sn", 2) : 2.223,
    ("Ge", "Sb")    : 2.583,
    ("Ge", "Sb", 2) : 2.308,
    ("Ge", "Te")    : 2.548,
    ("Ge", "Te", 2) : 2.292,
    ("Ge", "I" )    : 2.507,
    ("Ge", "Cs")    : 2.750,
    ("Ge", "Ba")    : 2.750,
    ("Ge", "Ba", 2) : 2.750,
    ("Ge", "La")    : 2.750,
    ("Ge", "Hf")    : 2.750,
    ("Ge", "Hf", 2) : 2.750,
    ("Ge", "Ta")    : 2.750,
    ("Ge", "Ta", 2) : 2.750,
    ("Ge", "W" )    : 2.750,
    ("Ge", "W" , 2) : 2.750,
    ("Ge", "Re")    : 2.750,
    ("Ge", "Re", 2) : 2.750,
    ("Ge", "Os")    : 2.750,
    ("Ge", "Os", 2) : 2.750,
    ("Ge", "Ir")    : 2.750,
    ("Ge", "Ir", 2) : 2.750,
    ("Ge", "Pt")    : 2.750,
    ("Ge", "Pt", 2) : 2.750,
    ("Ge", "Au")    : 2.750,
    ("Ge", "Tl")    : 2.750,
    ("Ge", "Tl", 2) : 2.750,
    ("Ge", "Pb")    : 2.750,
    ("Ge", "Pb", 2) : 2.750,
    ("Ge", "Bi")    : 2.750,
    ("Ge", "Bi", 2) : 2.750,
    ("Ge", "Po")    : 2.750,
    ("Ge", "Po", 2) : 2.750,
    ("Ge", "At")    : 2.750,
    ("As", "As")    : 2.419,
    ("As", "As", 2) : 2.203,
    ("As", "Se")    : 2.358,
    ("As", "Se", 2) : 2.145,
    ("As", "Br")    : 2.335,
    ("As", "Rb")    : 3.062,
    ("As", "Sr")    : 3.032,
    ("As", "Sr", 2) : 2.957,
    ("As", "Y" )    : 2.750,
    ("As", "Zr")    : 2.750,
    ("As", "Zr", 2) : 2.750,
    ("As", "Nb")    : 2.750,
    ("As", "Nb", 2) : 2.750,
    ("As", "Mo")    : 2.750,
    ("As", "Mo", 2) : 2.750,
    ("As", "Tc")    : 2.750,
    ("As", "Tc", 2) : 2.750,
    ("As", "Ru")    : 2.750,
    ("As", "Ru", 2) : 2.750,
    ("As", "Rh")    : 2.750,
    ("As", "Rh", 2) : 2.750,
    ("As", "Pd")    : 2.750,
    ("As", "Pd", 2) : 2.750,
    ("As", "Ag")    : 2.750,
    ("As", "In")    : 2.566,
    ("As", "In", 2) : 2.216,
    ("As", "Sn")    : 2.567,
    ("As", "Sn", 2) : 2.304,
    ("As", "Sb")    : 2.592,
    ("As", "Sb", 2) : 2.364,
    ("As", "Te")    : 2.567,
    ("As", "Te", 2) : 2.356,
    ("As", "I" )    : 2.544,
    ("As", "Cs")    : 2.750,
    ("As", "Ba")    : 2.750,
    ("As", "Ba", 2) : 2.750,
    ("As", "La")    : 2.750,
    ("As", "Hf")    : 2.750,
    ("As", "Hf", 2) : 2.750,
    ("As", "Ta")    : 2.750,
    ("As", "Ta", 2) : 2.750,
    ("As", "W" )    : 2.750,
    ("As", "W" , 2) : 2.750,
    ("As", "Re")    : 2.750,
    ("As", "Re", 2) : 2.750,
    ("As", "Os")    : 2.750,
    ("As", "Os", 2) : 2.750,
    ("As", "Ir")    : 2.750,
    ("As", "Ir", 2) : 2.750,
    ("As", "Pt")    : 2.750,
    ("As", "Pt", 2) : 2.750,
    ("As", "Au")    : 2.750,
    ("As", "Tl")    : 2.750,
    ("As", "Tl", 2) : 2.750,
    ("As", "Pb")    : 2.750,
    ("As", "Pb", 2) : 2.750,
    ("As", "Bi")    : 2.750,
    ("As", "Bi", 2) : 2.750,
    ("As", "Po")    : 2.750,
    ("As", "Po", 2) : 2.750,
    ("As", "At")    : 2.750,
    ("Se", "Se")    : 2.312,
    ("Se", "Se", 2) : 2.135,
    ("Se", "Br")    : 2.305,
    ("Se", "Rb")    : 3.000,
    ("Se", "Sr")    : 2.943,
    ("Se", "Sr", 2) : 2.804,
    ("Se", "Y" )    : 2.750,
    ("Se", "Zr")    : 2.750,
    ("Se", "Zr", 2) : 2.750,
    ("Se", "Nb")    : 2.750,
    ("Se", "Nb", 2) : 2.750,
    ("Se", "Mo")    : 2.750,
    ("Se", "Mo", 2) : 2.750,
    ("Se", "Tc")    : 2.750,
    ("Se", "Tc", 2) : 2.750,
    ("Se", "Ru")    : 2.750,
    ("Se", "Ru", 2) : 2.750,
    ("Se", "Rh")    : 2.750,
    ("Se", "Rh", 2) : 2.750,
    ("Se", "Pd")    : 2.750,
    ("Se", "Pd", 2) : 2.750,
    ("Se", "Ag")    : 2.750,
    ("Se", "In")    : 2.505,
    ("Se", "In", 2) : 2.153,
    ("Se", "Sn")    : 2.510,
    ("Se", "Sn", 2) : 2.261,
    ("Se", "Sb")    : 2.536,
    ("Se", "Sb", 2) : 2.323,
    ("Se", "Te")    : 2.560,
    ("Se", "Te", 2) : 2.358,
    ("Se", "I" )    : 2.524,
    ("Se", "Cs")    : 2.750,
    ("Se", "Ba")    : 2.750,
    ("Se", "Ba", 2) : 2.750,
    ("Se", "La")    : 2.750,
    ("Se", "Hf")    : 2.750,
    ("Se", "Hf", 2) : 2.750,
    ("Se", "Ta")    : 2.750,
    ("Se", "Ta", 2) : 2.750,
    ("Se", "W" )    : 2.750,
    ("Se", "W" , 2) : 2.750,
    ("Se", "Re")    : 2.750,
    ("Se", "Re", 2) : 2.750,
    ("Se", "Os")    : 2.750,
    ("Se", "Os", 2) : 2.750,
    ("Se", "Ir")    : 2.750,
    ("Se", "Ir", 2) : 2.750,
    ("Se", "Pt")    : 2.750,
    ("Se", "Pt", 2) : 2.750,
    ("Se", "Au")    : 2.750,
    ("Se", "Tl")    : 2.750,
    ("Se", "Tl", 2) : 2.750,
    ("Se", "Pb")    : 2.750,
    ("Se", "Pb", 2) : 2.750,
    ("Se", "Bi")    : 2.750,
    ("Se", "Bi", 2) : 2.750,
    ("Se", "Po")    : 2.750,
    ("Se", "Po", 2) : 2.750,
    ("Se", "At")    : 2.750,
    ("Br", "Br")    : 2.274,
    ("Br", "Rb")    : 2.908,
    ("Br", "Sr")    : 2.843,
    ("Br", "Y" )    : 2.750,
    ("Br", "Zr")    : 2.750,
    ("Br", "Nb")    : 2.750,
    ("Br", "Mo")    : 2.750,
    ("Br", "Tc")    : 2.750,
    ("Br", "Ru")    : 2.750,
    ("Br", "Rh")    : 2.750,
    ("Br", "Pd")    : 2.750,
    ("Br", "Ag")    : 2.750,
    ("Br", "In")    : 2.402,
    ("Br", "Sn")    : 2.448,
    ("Br", "Sb")    : 2.491,
    ("Br", "Te")    : 2.501,
    ("Br", "I" )    : 2.489,
    ("Br", "Cs")    : 2.750,
    ("Br", "Ba")    : 2.750,
    ("Br", "La")    : 2.750,
    ("Br", "Hf")    : 2.750,
    ("Br", "Ta")    : 2.750,
    ("Br", "W" )    : 2.750,
    ("Br", "Re")    : 2.750,
    ("Br", "Os")    : 2.750,
    ("Br", "Ir")    : 2.750,
    ("Br", "Pt")    : 2.750,
    ("Br", "Au")    : 2.750,
    ("Br", "Tl")    : 2.750,
    ("Br", "Pb")    : 2.750,
    ("Br", "Bi")    : 2.750,
    ("Br", "Po")    : 2.750,
    ("Br", "At")    : 2.750,
    ("Rb", "Rb")    : 3.510,
    ("Rb", "Sr")    : 3.642,
    ("Rb", "Y" )    : 2.750,
    ("Rb", "Zr")    : 2.750,
    ("Rb", "Nb")    : 2.750,
    ("Rb", "Mo")    : 2.750,
    ("Rb", "Tc")    : 2.750,
    ("Rb", "Ru")    : 2.750,
    ("Rb", "Rh")    : 2.750,
    ("Rb", "Pd")    : 2.750,
    ("Rb", "Ag")    : 2.750,
    ("Rb", "In")    : 3.315,
    ("Rb", "Sn")    : 3.294,
    ("Rb", "Sb")    : 3.300,
    ("Rb", "Te")    : 3.247,
    ("Rb", "I" )    : 3.155,
    ("Rb", "Cs")    : 2.750,
    ("Rb", "Ba")    : 2.750,
    ("Rb", "La")    : 2.750,
    ("Rb", "Hf")    : 2.750,
    ("Rb", "Ta")    : 2.750,
    ("Rb", "W" )    : 2.750,
    ("Rb", "Re")    : 2.750,
    ("Rb", "Os")    : 2.750,
    ("Rb", "Ir")    : 2.750,
    ("Rb", "Pt")    : 2.750,
    ("Rb", "Au")    : 2.750,
    ("Rb", "Tl")    : 2.750,
    ("Rb", "Pb")    : 2.750,
    ("Rb", "Bi")    : 2.750,
    ("Rb", "Po")    : 2.750,
    ("Rb", "At")    : 2.750,
    ("Sr", "Sr")    : 3.705,
    ("Sr", "Sr", 2) : 4.178,
    ("Sr", "Y" )    : 2.750,
    ("Sr", "Zr")    : 2.750,
    ("Sr", "Zr", 2) : 2.750,
    ("Sr", "Nb")    : 2.750,
    ("Sr", "Nb", 2) : 2.750,
    ("Sr", "Mo")    : 2.750,
    ("Sr", "Mo", 2) : 2.750,
    ("Sr", "Tc")    : 2.750,
    ("Sr", "Tc", 2) : 2.750,
    ("Sr", "Ru")    : 2.750,
    ("Sr", "Ru", 2) : 2.750,
    ("Sr", "Rh")    : 2.750,
    ("Sr", "Rh", 2) : 2.750,
    ("Sr", "Pd")    : 2.750,
    ("Sr", "Pd", 2) : 2.750,
    ("Sr", "Ag")    : 2.750,
    ("Sr", "In")    : 3.314,
    ("Sr", "In", 2) : 3.519,
    ("Sr", "Sn")    : 3.272,
    ("Sr", "Sn", 2) : 3.347,
    ("Sr", "Sb")    : 3.258,
    ("Sr", "Sb", 2) : 3.157,
    ("Sr", "Te")    : 3.186,
    ("Sr", "Te", 2) : 3.013,
    ("Sr", "I" )    : 3.091,
    ("Sr", "Cs")    : 2.750,
    ("Sr", "Ba")    : 2.750,
    ("Sr", "Ba", 2) : 2.750,
    ("Sr", "La")    : 2.750,
    ("Sr", "Hf")    : 2.750,
    ("Sr", "Hf", 2) : 2.750,
    ("Sr", "Ta")    : 2.750,
    ("Sr", "Ta", 2) : 2.750,
    ("Sr", "W" )    : 2.750,
    ("Sr", "W" , 2) : 2.750,
    ("Sr", "Re")    : 2.750,
    ("Sr", "Re", 2) : 2.750,
    ("Sr", "Os")    : 2.750,
    ("Sr", "Os", 2) : 2.750,
    ("Sr", "Ir")    : 2.750,
    ("Sr", "Ir", 2) : 2.750,
    ("Sr", "Pt")    : 2.750,
    ("Sr", "Pt", 2) : 2.750,
    ("Sr", "Au")    : 2.750,
    ("Sr", "Tl")    : 2.750,
    ("Sr", "Tl", 2) : 2.750,
    ("Sr", "Pb")    : 2.750,
    ("Sr", "Pb", 2) : 2.750,
    ("Sr", "Bi")    : 2.750,
    ("Sr", "Bi", 2) : 2.750,
    ("Sr", "Po")    : 2.750,
    ("Sr", "Po", 2) : 2.750,
    ("Sr", "At")    : 2.750,
    ("Y",  "Y" )    : 2.750,
    ("Y",  "Zr")    : 2.750,
    ("Y",  "Nb")    : 2.750,
    ("Y",  "Mo")    : 2.750,
    ("Y",  "Tc")    : 2.750,
    ("Y",  "Ru")    : 2.750,
    ("Y",  "Rh")    : 2.750,
    ("Y",  "Pd")    : 2.750,
    ("Y",  "Ag")    : 2.750,
    ("Y",  "In")    : 2.750,
    ("Y",  "Sn")    : 2.750,
    ("Y",  "Sb")    : 2.750,
    ("Y",  "Te")    : 2.750,
    ("Y",  "I" )    : 2.750,
    ("Y",  "Cs")    : 2.750,
    ("Y",  "Ba")    : 2.750,
    ("Y",  "La")    : 2.750,
    ("Y",  "Hf")    : 2.750,
    ("Y",  "Ta")    : 2.750,
    ("Y",  "W" )    : 2.750,
    ("Y",  "Re")    : 2.750,
    ("Y",  "Os")    : 2.750,
    ("Y",  "Ir")    : 2.750,
    ("Y",  "Pt")    : 2.750,
    ("Y",  "Au")    : 2.750,
    ("Y",  "Tl")    : 2.750,
    ("Y",  "Pb")    : 2.750,
    ("Y",  "Bi")    : 2.750,
    ("Y",  "Po")    : 2.750,
    ("Y",  "At")    : 2.750,
    ("Zr", "Zr")    : 2.750,
    ("Zr", "Zr", 2) : 2.750,
    ("Zr", "Nb")    : 2.750,
    ("Zr", "Nb", 2) : 2.750,
    ("Zr", "Mo")    : 2.750,
    ("Zr", "Mo", 2) : 2.750,
    ("Zr", "Tc")    : 2.750,
    ("Zr", "Tc", 2) : 2.750,
    ("Zr", "Ru")    : 2.750,
    ("Zr", "Ru", 2) : 2.750,
    ("Zr", "Rh")    : 2.750,
    ("Zr", "Rh", 2) : 2.750,
    ("Zr", "Pd")    : 2.750,
    ("Zr", "Pd", 2) : 2.750,
    ("Zr", "Ag")    : 2.750,
    ("Zr", "In")    : 2.750,
    ("Zr", "In", 2) : 2.750,
    ("Zr", "Sn")    : 2.750,
    ("Zr", "Sn", 2) : 2.750,
    ("Zr", "Sb")    : 2.750,
    ("Zr", "Sb", 2) : 2.750,
    ("Zr", "Te")    : 2.750,
    ("Zr", "Te", 2) : 2.750,
    ("Zr", "I" )    : 2.750,
    ("Zr", "Cs")    : 2.750,
    ("Zr", "Ba")    : 2.750,
    ("Zr", "Ba", 2) : 2.750,
    ("Zr", "La")    : 2.750,
    ("Zr", "Hf")    : 2.750,
    ("Zr", "Hf", 2) : 2.750,
    ("Zr", "Ta")    : 2.750,
    ("Zr", "Ta", 2) : 2.750,
    ("Zr", "W" )    : 2.750,
    ("Zr", "W" , 2) : 2.750,
    ("Zr", "Re")    : 2.750,
    ("Zr", "Re", 2) : 2.750,
    ("Zr", "Os")    : 2.750,
    ("Zr", "Os", 2) : 2.750,
    ("Zr", "Ir")    : 2.750,
    ("Zr", "Ir", 2) : 2.750,
    ("Zr", "Pt")    : 2.750,
    ("Zr", "Pt", 2) : 2.750,
    ("Zr", "Au")    : 2.750,
    ("Zr", "Tl")    : 2.750,
    ("Zr", "Tl", 2) : 2.750,
    ("Zr", "Pb")    : 2.750,
    ("Zr", "Pb", 2) : 2.750,
    ("Zr", "Bi")    : 2.750,
    ("Zr", "Bi", 2) : 2.750,
    ("Zr", "Po")    : 2.750,
    ("Zr", "Po", 2) : 2.750,
    ("Zr", "At")    : 2.750,
    ("Nb", "Nb")    : 2.750,
    ("Nb", "Nb", 2) : 2.750,
    ("Nb", "Mo")    : 2.750,
    ("Nb", "Mo", 2) : 2.750,
    ("Nb", "Tc")    : 2.750,
    ("Nb", "Tc", 2) : 2.750,
    ("Nb", "Ru")    : 2.750,
    ("Nb", "Ru", 2) : 2.750,
    ("Nb", "Rh")    : 2.750,
    ("Nb", "Rh", 2) : 2.750,
    ("Nb", "Pd")    : 2.750,
    ("Nb", "Pd", 2) : 2.750,
    ("Nb", "Ag")    : 2.750,
    ("Nb", "In")    : 2.750,
    ("Nb", "In", 2) : 2.750,
    ("Nb", "Sn")    : 2.750,
    ("Nb", "Sn", 2) : 2.750,
    ("Nb", "Sb")    : 2.750,
    ("Nb", "Sb", 2) : 2.750,
    ("Nb", "Te")    : 2.750,
    ("Nb", "Te", 2) : 2.750,
    ("Nb", "I" )    : 2.750,
    ("Nb", "Cs")    : 2.750,
    ("Nb", "Ba")    : 2.750,
    ("Nb", "Ba", 2) : 2.750,
    ("Nb", "La")    : 2.750,
    ("Nb", "Hf")    : 2.750,
    ("Nb", "Hf", 2) : 2.750,
    ("Nb", "Ta")    : 2.750,
    ("Nb", "Ta", 2) : 2.750,
    ("Nb", "W" )    : 2.750,
    ("Nb", "W" , 2) : 2.750,
    ("Nb", "Re")    : 2.750,
    ("Nb", "Re", 2) : 2.750,
    ("Nb", "Os")    : 2.750,
    ("Nb", "Os", 2) : 2.750,
    ("Nb", "Ir")    : 2.750,
    ("Nb", "Ir", 2) : 2.750,
    ("Nb", "Pt")    : 2.750,
    ("Nb", "Pt", 2) : 2.750,
    ("Nb", "Au")    : 2.750,
    ("Nb", "Tl")    : 2.750,
    ("Nb", "Tl", 2) : 2.750,
    ("Nb", "Pb")    : 2.750,
    ("Nb", "Pb", 2) : 2.750,
    ("Nb", "Bi")    : 2.750,
    ("Nb", "Bi", 2) : 2.750,
    ("Nb", "Po")    : 2.750,
    ("Nb", "Po", 2) : 2.750,
    ("Nb", "At")    : 2.750,
    ("Mo", "Mo")    : 2.750,
    ("Mo", "Mo", 2) : 2.750,
    ("Mo", "Tc")    : 2.750,
    ("Mo", "Tc", 2) : 2.750,
    ("Mo", "Ru")    : 2.750,
    ("Mo", "Ru", 2) : 2.750,
    ("Mo", "Rh")    : 2.750,
    ("Mo", "Rh", 2) : 2.750,
    ("Mo", "Pd")    : 2.750,
    ("Mo", "Pd", 2) : 2.750,
    ("Mo", "Ag")    : 2.750,
    ("Mo", "In")    : 2.750,
    ("Mo", "In", 2) : 2.750,
    ("Mo", "Sn")    : 2.750,
    ("Mo", "Sn", 2) : 2.750,
    ("Mo", "Sb")    : 2.750,
    ("Mo", "Sb", 2) : 2.750,
    ("Mo", "Te")    : 2.750,
    ("Mo", "Te", 2) : 2.750,
    ("Mo", "I" )    : 2.750,
    ("Mo", "Cs")    : 2.750,
    ("Mo", "Ba")    : 2.750,
    ("Mo", "Ba", 2) : 2.750,
    ("Mo", "La")    : 2.750,
    ("Mo", "Hf")    : 2.750,
    ("Mo", "Hf", 2) : 2.750,
    ("Mo", "Ta")    : 2.750,
    ("Mo", "Ta", 2) : 2.750,
    ("Mo", "W" )    : 2.750,
    ("Mo", "W" , 2) : 2.750,
    ("Mo", "Re")    : 2.750,
    ("Mo", "Re", 2) : 2.750,
    ("Mo", "Os")    : 2.750,
    ("Mo", "Os", 2) : 2.750,
    ("Mo", "Ir")    : 2.750,
    ("Mo", "Ir", 2) : 2.750,
    ("Mo", "Pt")    : 2.750,
    ("Mo", "Pt", 2) : 2.750,
    ("Mo", "Au")    : 2.750,
    ("Mo", "Tl")    : 2.750,
    ("Mo", "Tl", 2) : 2.750,
    ("Mo", "Pb")    : 2.750,
    ("Mo", "Pb", 2) : 2.750,
    ("Mo", "Bi")    : 2.750,
    ("Mo", "Bi", 2) : 2.750,
    ("Mo", "Po")    : 2.750,
    ("Mo", "Po", 2) : 2.750,
    ("Mo", "At")    : 2.750,
    ("Tc", "Tc")    : 2.750,
    ("Tc", "Tc", 2) : 2.750,
    ("Tc", "Ru")    : 2.750,
    ("Tc", "Ru", 2) : 2.750,
    ("Tc", "Rh")    : 2.750,
    ("Tc", "Rh", 2) : 2.750,
    ("Tc", "Pd")    : 2.750,
    ("Tc", "Pd", 2) : 2.750,
    ("Tc", "Ag")    : 2.750,
    ("Tc", "In")    : 2.750,
    ("Tc", "In", 2) : 2.750,
    ("Tc", "Sn")    : 2.750,
    ("Tc", "Sn", 2) : 2.750,
    ("Tc", "Sb")    : 2.750,
    ("Tc", "Sb", 2) : 2.750,
    ("Tc", "Te")    : 2.750,
    ("Tc", "Te", 2) : 2.750,
    ("Tc", "I" )    : 2.750,
    ("Tc", "Cs")    : 2.750,
    ("Tc", "Ba")    : 2.750,
    ("Tc", "Ba", 2) : 2.750,
    ("Tc", "La")    : 2.750,
    ("Tc", "Hf")    : 2.750,
    ("Tc", "Hf", 2) : 2.750,
    ("Tc", "Ta")    : 2.750,
    ("Tc", "Ta", 2) : 2.750,
    ("Tc", "W" )    : 2.750,
    ("Tc", "W" , 2) : 2.750,
    ("Tc", "Re")    : 2.750,
    ("Tc", "Re", 2) : 2.750,
    ("Tc", "Os")    : 2.750,
    ("Tc", "Os", 2) : 2.750,
    ("Tc", "Ir")    : 2.750,
    ("Tc", "Ir", 2) : 2.750,
    ("Tc", "Pt")    : 2.750,
    ("Tc", "Pt", 2) : 2.750,
    ("Tc", "Au")    : 2.750,
    ("Tc", "Tl")    : 2.750,
    ("Tc", "Tl", 2) : 2.750,
    ("Tc", "Pb")    : 2.750,
    ("Tc", "Pb", 2) : 2.750,
    ("Tc", "Bi")    : 2.750,
    ("Tc", "Bi", 2) : 2.750,
    ("Tc", "Po")    : 2.750,
    ("Tc", "Po", 2) : 2.750,
    ("Tc", "At")    : 2.750,
    ("Ru", "Ru")    : 2.750,
    ("Ru", "Ru", 2) : 2.750,
    ("Ru", "Rh")    : 2.750,
    ("Ru", "Rh", 2) : 2.750,
    ("Ru", "Pd")    : 2.750,
    ("Ru", "Pd", 2) : 2.750,
    ("Ru", "Ag")    : 2.750,
    ("Ru", "In")    : 2.750,
    ("Ru", "In", 2) : 2.750,
    ("Ru", "Sn")    : 2.750,
    ("Ru", "Sn", 2) : 2.750,
    ("Ru", "Sb")    : 2.750,
    ("Ru", "Sb", 2) : 2.750,
    ("Ru", "Te")    : 2.750,
    ("Ru", "Te", 2) : 2.750,
    ("Ru", "I" )    : 2.750,
    ("Ru", "Cs")    : 2.750,
    ("Ru", "Ba")    : 2.750,
    ("Ru", "Ba", 2) : 2.750,
    ("Ru", "La")    : 2.750,
    ("Ru", "Hf")    : 2.750,
    ("Ru", "Hf", 2) : 2.750,
    ("Ru", "Ta")    : 2.750,
    ("Ru", "Ta", 2) : 2.750,
    ("Ru", "W" )    : 2.750,
    ("Ru", "W" , 2) : 2.750,
    ("Ru", "Re")    : 2.750,
    ("Ru", "Re", 2) : 2.750,
    ("Ru", "Os")    : 2.750,
    ("Ru", "Os", 2) : 2.750,
    ("Ru", "Ir")    : 2.750,
    ("Ru", "Ir", 2) : 2.750,
    ("Ru", "Pt")    : 2.750,
    ("Ru", "Pt", 2) : 2.750,
    ("Ru", "Au")    : 2.750,
    ("Ru", "Tl")    : 2.750,
    ("Ru", "Tl", 2) : 2.750,
    ("Ru", "Pb")    : 2.750,
    ("Ru", "Pb", 2) : 2.750,
    ("Ru", "Bi")    : 2.750,
    ("Ru", "Bi", 2) : 2.750,
    ("Ru", "Po")    : 2.750,
    ("Ru", "Po", 2) : 2.750,
    ("Ru", "At")    : 2.750,
    ("Rh", "Rh")    : 2.750,
    ("Rh", "Rh", 2) : 2.750,
    ("Rh", "Pd")    : 2.750,
    ("Rh", "Pd", 2) : 2.750,
    ("Rh", "Ag")    : 2.750,
    ("Rh", "In")    : 2.750,
    ("Rh", "In", 2) : 2.750,
    ("Rh", "Sn")    : 2.750,
    ("Rh", "Sn", 2) : 2.750,
    ("Rh", "Sb")    : 2.750,
    ("Rh", "Sb", 2) : 2.750,
    ("Rh", "Te")    : 2.750,
    ("Rh", "Te", 2) : 2.750,
    ("Rh", "I" )    : 2.750,
    ("Rh", "Cs")    : 2.750,
    ("Rh", "Ba")    : 2.750,
    ("Rh", "Ba", 2) : 2.750,
    ("Rh", "La")    : 2.750,
    ("Rh", "Hf")    : 2.750,
    ("Rh", "Hf", 2) : 2.750,
    ("Rh", "Ta")    : 2.750,
    ("Rh", "Ta", 2) : 2.750,
    ("Rh", "W" )    : 2.750,
    ("Rh", "W" , 2) : 2.750,
    ("Rh", "Re")    : 2.750,
    ("Rh", "Re", 2) : 2.750,
    ("Rh", "Os")    : 2.750,
    ("Rh", "Os", 2) : 2.750,
    ("Rh", "Ir")    : 2.750,
    ("Rh", "Ir", 2) : 2.750,
    ("Rh", "Pt")    : 2.750,
    ("Rh", "Pt", 2) : 2.750,
    ("Rh", "Au")    : 2.750,
    ("Rh", "Tl")    : 2.750,
    ("Rh", "Tl", 2) : 2.750,
    ("Rh", "Pb")    : 2.750,
    ("Rh", "Pb", 2) : 2.750,
    ("Rh", "Bi")    : 2.750,
    ("Rh", "Bi", 2) : 2.750,
    ("Rh", "Po")    : 2.750,
    ("Rh", "Po", 2) : 2.750,
    ("Rh", "At")    : 2.750,
    ("Pd", "Pd")    : 2.750,
    ("Pd", "Pd", 2) : 2.750,
    ("Pd", "Ag")    : 2.750,
    ("Pd", "In")    : 2.750,
    ("Pd", "In", 2) : 2.750,
    ("Pd", "Sn")    : 2.750,
    ("Pd", "Sn", 2) : 2.750,
    ("Pd", "Sb")    : 2.750,
    ("Pd", "Sb", 2) : 2.750,
    ("Pd", "Te")    : 2.750,
    ("Pd", "Te", 2) : 2.750,
    ("Pd", "I" )    : 2.750,
    ("Pd", "Cs")    : 2.750,
    ("Pd", "Ba")    : 2.750,
    ("Pd", "Ba", 2) : 2.750,
    ("Pd", "La")    : 2.750,
    ("Pd", "Hf")    : 2.750,
    ("Pd", "Hf", 2) : 2.750,
    ("Pd", "Ta")    : 2.750,
    ("Pd", "Ta", 2) : 2.750,
    ("Pd", "W" )    : 2.750,
    ("Pd", "W" , 2) : 2.750,
    ("Pd", "Re")    : 2.750,
    ("Pd", "Re", 2) : 2.750,
    ("Pd", "Os")    : 2.750,
    ("Pd", "Os", 2) : 2.750,
    ("Pd", "Ir")    : 2.750,
    ("Pd", "Ir", 2) : 2.750,
    ("Pd", "Pt")    : 2.750,
    ("Pd", "Pt", 2) : 2.750,
    ("Pd", "Au")    : 2.750,
    ("Pd", "Tl")    : 2.750,
    ("Pd", "Tl", 2) : 2.750,
    ("Pd", "Pb")    : 2.750,
    ("Pd", "Pb", 2) : 2.750,
    ("Pd", "Bi")    : 2.750,
    ("Pd", "Bi", 2) : 2.750,
    ("Pd", "Po")    : 2.750,
    ("Pd", "Po", 2) : 2.750,
    ("Pd", "At")    : 2.750,
    ("Ag", "Ag")    : 2.750,
    ("Ag", "In")    : 2.750,
    ("Ag", "Sn")    : 2.750,
    ("Ag", "Sb")    : 2.750,
    ("Ag", "Te")    : 2.750,
    ("Ag", "I" )    : 2.750,
    ("Ag", "Cs")    : 2.750,
    ("Ag", "Ba")    : 2.750,
    ("Ag", "La")    : 2.750,
    ("Ag", "Hf")    : 2.750,
    ("Ag", "Ta")    : 2.750,
    ("Ag", "W" )    : 2.750,
    ("Ag", "Re")    : 2.750,
    ("Ag", "Os")    : 2.750,
    ("Ag", "Ir")    : 2.750,
    ("Ag", "Pt")    : 2.750,
    ("Ag", "Au")    : 2.750,
    ("Ag", "Tl")    : 2.750,
    ("Ag", "Pb")    : 2.750,
    ("Ag", "Bi")    : 2.750,
    ("Ag", "Po")    : 2.750,
    ("Ag", "At")    : 2.750,
    ("In", "In")    : 2.678,
    ("In", "In", 2) : 2.358,
    ("In", "Sn")    : 2.770,
    ("In", "Sn", 2) : 2.438,
    ("In", "Sb")    : 2.793,
    ("In", "Sb", 2) : 2.448,
    ("In", "Te")    : 2.681,
    ("In", "Te", 2) : 2.383,
    ("In", "I" )    : 2.651,
    ("In", "Cs")    : 2.750,
    ("In", "Ba")    : 2.750,
    ("In", "Ba", 2) : 2.750,
    ("In", "La")    : 2.750,
    ("In", "Hf")    : 2.750,
    ("In", "Hf", 2) : 2.750,
    ("In", "Ta")    : 2.750,
    ("In", "Ta", 2) : 2.750,
    ("In", "W" )    : 2.750,
    ("In", "W" , 2) : 2.750,
    ("In", "Re")    : 2.750,
    ("In", "Re", 2) : 2.750,
    ("In", "Os")    : 2.750,
    ("In", "Os", 2) : 2.750,
    ("In", "Ir")    : 2.750,
    ("In", "Ir", 2) : 2.750,
    ("In", "Pt")    : 2.750,
    ("In", "Pt", 2) : 2.750,
    ("In", "Au")    : 2.750,
    ("In", "Tl")    : 2.750,
    ("In", "Tl", 2) : 2.750,
    ("In", "Pb")    : 2.750,
    ("In", "Pb", 2) : 2.750,
    ("In", "Bi")    : 2.750,
    ("In", "Bi", 2) : 2.750,
    ("In", "Po")    : 2.750,
    ("In", "Po", 2) : 2.750,
    ("In", "At")    : 2.750,
    ("Sn", "Sn")    : 2.778,
    ("Sn", "Sn", 2) : 2.469,
    ("Sn", "Sb")    : 2.786,
    ("Sn", "Sb", 2) : 2.516,
    ("Sn", "Te")    : 2.743,
    ("Sn", "Te", 2) : 2.486,
    ("Sn", "I" )    : 2.690,
    ("Sn", "Cs")    : 2.750,
    ("Sn", "Ba")    : 2.750,
    ("Sn", "Ba", 2) : 2.750,
    ("Sn", "La")    : 2.750,
    ("Sn", "Hf")    : 2.750,
    ("Sn", "Hf", 2) : 2.750,
    ("Sn", "Ta")    : 2.750,
    ("Sn", "Ta", 2) : 2.750,
    ("Sn", "W" )    : 2.750,
    ("Sn", "W" , 2) : 2.750,
    ("Sn", "Re")    : 2.750,
    ("Sn", "Re", 2) : 2.750,
    ("Sn", "Os")    : 2.750,
    ("Sn", "Os", 2) : 2.750,
    ("Sn", "Ir")    : 2.750,
    ("Sn", "Ir", 2) : 2.750,
    ("Sn", "Pt")    : 2.750,
    ("Sn", "Pt", 2) : 2.750,
    ("Sn", "Au")    : 2.750,
    ("Sn", "Tl")    : 2.750,
    ("Sn", "Tl", 2) : 2.750,
    ("Sn", "Pb")    : 2.750,
    ("Sn", "Pb", 2) : 2.750,
    ("Sn", "Bi")    : 2.750,
    ("Sn", "Bi", 2) : 2.750,
    ("Sn", "Po")    : 2.750,
    ("Sn", "Po", 2) : 2.750,
    ("Sn", "At")    : 2.750,
    ("Sb", "Sb")    : 2.803,
    ("Sb", "Sb", 2) : 2.566,
    ("Sb", "Te")    : 2.762,
    ("Sb", "Te", 2) : 2.548,
    ("Sb", "I" )    : 2.729,
    ("Sb", "Cs")    : 2.750,
    ("Sb", "Ba")    : 2.750,
    ("Sb", "Ba", 2) : 2.750,
    ("Sb", "La")    : 2.750,
    ("Sb", "Hf")    : 2.750,
    ("Sb", "Hf", 2) : 2.750,
    ("Sb", "Ta")    : 2.750,
    ("Sb", "Ta", 2) : 2.750,
    ("Sb", "W" )    : 2.750,
    ("Sb", "W" , 2) : 2.750,
    ("Sb", "Re")    : 2.750,
    ("Sb", "Re", 2) : 2.750,
    ("Sb", "Os")    : 2.750,
    ("Sb", "Os", 2) : 2.750,
    ("Sb", "Ir")    : 2.750,
    ("Sb", "Ir", 2) : 2.750,
    ("Sb", "Pt")    : 2.750,
    ("Sb", "Pt", 2) : 2.750,
    ("Sb", "Au")    : 2.750,
    ("Sb", "Tl")    : 2.750,
    ("Sb", "Tl", 2) : 2.750,
    ("Sb", "Pb")    : 2.750,
    ("Sb", "Pb", 2) : 2.750,
    ("Sb", "Bi")    : 2.750,
    ("Sb", "Bi", 2) : 2.750,
    ("Sb", "Po")    : 2.750,
    ("Sb", "Po", 2) : 2.750,
    ("Sb", "At")    : 2.750,
    ("Te", "Te")    : 2.774,
    ("Te", "Te", 2) : 2.569,
    ("Te", "I" )    : 2.728,
    ("Te", "Cs")    : 2.750,
    ("Te", "Ba")    : 2.750,
    ("Te", "Ba", 2) : 2.750,
    ("Te", "La")    : 2.750,
    ("Te", "Hf")    : 2.750,
    ("Te", "Hf", 2) : 2.750,
    ("Te", "Ta")    : 2.750,
    ("Te", "Ta", 2) : 2.750,
    ("Te", "W" )    : 2.750,
    ("Te", "W" , 2) : 2.750,
    ("Te", "Re")    : 2.750,
    ("Te", "Re", 2) : 2.750,
    ("Te", "Os")    : 2.750,
    ("Te", "Os", 2) : 2.750,
    ("Te", "Ir")    : 2.750,
    ("Te", "Ir", 2) : 2.750,
    ("Te", "Pt")    : 2.750,
    ("Te", "Pt", 2) : 2.750,
    ("Te", "Au")    : 2.750,
    ("Te", "Tl")    : 2.750,
    ("Te", "Tl", 2) : 2.750,
    ("Te", "Pb")    : 2.750,
    ("Te", "Pb", 2) : 2.750,
    ("Te", "Bi")    : 2.750,
    ("Te", "Bi", 2) : 2.750,
    ("Te", "Po")    : 2.750,
    ("Te", "Po", 2) : 2.750,
    ("Te", "At")    : 2.750,
    ("I",  "I" )    : 2.704,
    ("I",  "Cs")    : 2.750,
    ("I",  "Ba")    : 2.750,
    ("I",  "La")    : 2.750,
    ("I",  "Hf")    : 2.750,
    ("I",  "Ta")    : 2.750,
    ("I",  "W" )    : 2.750,
    ("I",  "Re")    : 2.750,
    ("I",  "Os")    : 2.750,
    ("I",  "Ir")    : 2.750,
    ("I",  "Pt")    : 2.750,
    ("I",  "Au")    : 2.750,
    ("I",  "Tl")    : 2.750,
    ("I",  "Pb")    : 2.750,
    ("I",  "Bi")    : 2.750,
    ("I",  "Po")    : 2.750,
    ("I",  "At")    : 2.750,
    ("Cs", "Cs")    : 2.750,
    ("Cs", "Ba")    : 2.750,
    ("Cs", "La")    : 2.750,
    ("Cs", "Hf")    : 2.750,
    ("Cs", "Ta")    : 2.750,
    ("Cs", "W" )    : 2.750,
    ("Cs", "Re")    : 2.750,
    ("Cs", "Os")    : 2.750,
    ("Cs", "Ir")    : 2.750,
    ("Cs", "Pt")    : 2.750,
    ("Cs", "Au")    : 2.750,
    ("Cs", "Tl")    : 2.750,
    ("Cs", "Pb")    : 2.750,
    ("Cs", "Bi")    : 2.750,
    ("Cs", "Po")    : 2.750,
    ("Cs", "At")    : 2.750,
    ("Ba", "Ba")    : 2.750,
    ("Ba", "Ba", 2) : 2.750,
    ("Ba", "La")    : 2.750,
    ("Ba", "Hf")    : 2.750,
    ("Ba", "Hf", 2) : 2.750,
    ("Ba", "Ta")    : 2.750,
    ("Ba", "Ta", 2) : 2.750,
    ("Ba", "W" )    : 2.750,
    ("Ba", "W" , 2) : 2.750,
    ("Ba", "Re")    : 2.750,
    ("Ba", "Re", 2) : 2.750,
    ("Ba", "Os")    : 2.750,
    ("Ba", "Os", 2) : 2.750,
    ("Ba", "Ir")    : 2.750,
    ("Ba", "Ir", 2) : 2.750,
    ("Ba", "Pt")    : 2.750,
    ("Ba", "Pt", 2) : 2.750,
    ("Ba", "Au")    : 2.750,
    ("Ba", "Tl")    : 2.750,
    ("Ba", "Tl", 2) : 2.750,
    ("Ba", "Pb")    : 2.750,
    ("Ba", "Pb", 2) : 2.750,
    ("Ba", "Bi")    : 2.750,
    ("Ba", "Bi", 2) : 2.750,
    ("Ba", "Po")    : 2.750,
    ("Ba", "Po", 2) : 2.750,
    ("Ba", "At")    : 2.750,
    ("La", "La")    : 2.750,
    ("La", "Hf")    : 2.750,
    ("La", "Ta")    : 2.750,
    ("La", "W" )    : 2.750,
    ("La", "Re")    : 2.750,
    ("La", "Os")    : 2.750,
    ("La", "Ir")    : 2.750,
    ("La", "Pt")    : 2.750,
    ("La", "Au")    : 2.750,
    ("La", "Tl")    : 2.750,
    ("La", "Pb")    : 2.750,
    ("La", "Bi")    : 2.750,
    ("La", "Po")    : 2.750,
    ("La", "At")    : 2.750,
    ("Hf", "Hf")    : 2.750,
    ("Hf", "Hf", 2) : 2.750,
    ("Hf", "Ta")    : 2.750,
    ("Hf", "Ta", 2) : 2.750,
    ("Hf", "W" )    : 2.750,
    ("Hf", "W" , 2) : 2.750,
    ("Hf", "Re")    : 2.750,
    ("Hf", "Re", 2) : 2.750,
    ("Hf", "Os")    : 2.750,
    ("Hf", "Os", 2) : 2.750,
    ("Hf", "Ir")    : 2.750,
    ("Hf", "Ir", 2) : 2.750,
    ("Hf", "Pt")    : 2.750,
    ("Hf", "Pt", 2) : 2.750,
    ("Hf", "Au")    : 2.750,
    ("Hf", "Tl")    : 2.750,
    ("Hf", "Tl", 2) : 2.750,
    ("Hf", "Pb")    : 2.750,
    ("Hf", "Pb", 2) : 2.750,
    ("Hf", "Bi")    : 2.750,
    ("Hf", "Bi", 2) : 2.750,
    ("Hf", "Po")    : 2.750,
    ("Hf", "Po", 2) : 2.750,
    ("Hf", "At")    : 2.750,
    ("Ta", "Ta")    : 2.750,
    ("Ta", "Ta", 2) : 2.750,
    ("Ta", "W" )    : 2.750,
    ("Ta", "W" , 2) : 2.750,
    ("Ta", "Re")    : 2.750,
    ("Ta", "Re", 2) : 2.750,
    ("Ta", "Os")    : 2.750,
    ("Ta", "Os", 2) : 2.750,
    ("Ta", "Ir")    : 2.750,
    ("Ta", "Ir", 2) : 2.750,
    ("Ta", "Pt")    : 2.750,
    ("Ta", "Pt", 2) : 2.750,
    ("Ta", "Au")    : 2.750,
    ("Ta", "Tl")    : 2.750,
    ("Ta", "Tl", 2) : 2.750,
    ("Ta", "Pb")    : 2.750,
    ("Ta", "Pb", 2) : 2.750,
    ("Ta", "Bi")    : 2.750,
    ("Ta", "Bi", 2) : 2.750,
    ("Ta", "Po")    : 2.750,
    ("Ta", "Po", 2) : 2.750,
    ("Ta", "At")    : 2.750,
    ("W",  "W" )    : 2.750,
    ("W",  "W" , 2) : 2.750,
    ("W",  "Re")    : 2.750,
    ("W",  "Re", 2) : 2.750,
    ("W",  "Os")    : 2.750,
    ("W",  "Os", 2) : 2.750,
    ("W",  "Ir")    : 2.750,
    ("W",  "Ir", 2) : 2.750,
    ("W",  "Pt")    : 2.750,
    ("W",  "Pt", 2) : 2.750,
    ("W",  "Au")    : 2.750,
    ("W",  "Tl")    : 2.750,
    ("W",  "Tl", 2) : 2.750,
    ("W",  "Pb")    : 2.750,
    ("W",  "Pb", 2) : 2.750,
    ("W",  "Bi")    : 2.750,
    ("W",  "Bi", 2) : 2.750,
    ("W",  "Po")    : 2.750,
    ("W",  "Po", 2) : 2.750,
    ("W",  "At")    : 2.750,
    ("Re", "Re")    : 2.750,
    ("Re", "Re", 2) : 2.750,
    ("Re", "Os")    : 2.750,
    ("Re", "Os", 2) : 2.750,
    ("Re", "Ir")    : 2.750,
    ("Re", "Ir", 2) : 2.750,
    ("Re", "Pt")    : 2.750,
    ("Re", "Pt", 2) : 2.750,
    ("Re", "Au")    : 2.750,
    ("Re", "Tl")    : 2.750,
    ("Re", "Tl", 2) : 2.750,
    ("Re", "Pb")    : 2.750,
    ("Re", "Pb", 2) : 2.750,
    ("Re", "Bi")    : 2.750,
    ("Re", "Bi", 2) : 2.750,
    ("Re", "Po")    : 2.750,
    ("Re", "Po", 2) : 2.750,
    ("Re", "At")    : 2.750,
    ("Os", "Os")    : 2.750,
    ("Os", "Os", 2) : 2.750,
    ("Os", "Ir")    : 2.750,
    ("Os", "Ir", 2) : 2.750,
    ("Os", "Pt")    : 2.750,
    ("Os", "Pt", 2) : 2.750,
    ("Os", "Au")    : 2.750,
    ("Os", "Tl")    : 2.750,
    ("Os", "Tl", 2) : 2.750,
    ("Os", "Pb")    : 2.750,
    ("Os", "Pb", 2) : 2.750,
    ("Os", "Bi")    : 2.750,
    ("Os", "Bi", 2) : 2.750,
    ("Os", "Po")    : 2.750,
    ("Os", "Po", 2) : 2.750,
    ("Os", "At")    : 2.750,
    ("Ir", "Ir")    : 2.750,
    ("Ir", "Ir", 2) : 2.750,
    ("Ir", "Pt")    : 2.750,
    ("Ir", "Pt", 2) : 2.750,
    ("Ir", "Au")    : 2.750,
    ("Ir", "Tl")    : 2.750,
    ("Ir", "Tl", 2) : 2.750,
    ("Ir", "Pb")    : 2.750,
    ("Ir", "Pb", 2) : 2.750,
    ("Ir", "Bi")    : 2.750,
    ("Ir", "Bi", 2) : 2.750,
    ("Ir", "Po")    : 2.750,
    ("Ir", "Po", 2) : 2.750,
    ("Ir", "At")    : 2.750,
    ("Pt", "Pt")    : 2.750,
    ("Pt", "Pt", 2) : 2.750,
    ("Pt", "Au")    : 2.750,
    ("Pt", "Tl")    : 2.750,
    ("Pt", "Tl", 2) : 2.750,
    ("Pt", "Pb")    : 2.750,
    ("Pt", "Pb", 2) : 2.750,
    ("Pt", "Bi")    : 2.750,
    ("Pt", "Bi", 2) : 2.750,
    ("Pt", "Po")    : 2.750,
    ("Pt", "Po", 2) : 2.750,
    ("Pt", "At")    : 2.750,
    ("Au", "Au")    : 2.750,
    ("Au", "Tl")    : 2.750,
    ("Au", "Pb")    : 2.750,
    ("Au", "Bi")    : 2.750,
    ("Au", "Po")    : 2.750,
    ("Au", "At")    : 2.750,
    ("Tl", "Tl")    : 2.750,
    ("Tl", "Tl", 2) : 2.750,
    ("Tl", "Pb")    : 2.750,
    ("Tl", "Pb", 2) : 2.750,
    ("Tl", "Bi")    : 2.750,
    ("Tl", "Bi", 2) : 2.750,
    ("Tl", "Po")    : 2.750,
    ("Tl", "Po", 2) : 2.750,
    ("Tl", "At")    : 2.750,
    ("Pb", "Pb")    : 2.750,
    ("Pb", "Pb", 2) : 2.750,
    ("Pb", "Bi")    : 2.750,
    ("Pb", "Bi", 2) : 2.750,
    ("Pb", "Po")    : 2.750,
    ("Pb", "Po", 2) : 2.750,
    ("Pb", "At")    : 2.750,
    ("Bi", "Bi")    : 2.750,
    ("Bi", "Bi", 2) : 2.750,
    ("Bi", "Po")    : 2.750,
    ("Bi", "Po", 2) : 2.750,
    ("Bi", "At")    : 2.750,
    ("Po", "Po")    : 2.750,
    ("Po", "Po", 2) : 2.750,
    ("Po", "At")    : 2.750,
    ("At", "At")    : 2.750,
  }

def get_default_bondlength(s1, s2, order=1):
  if len(s1)==1: s1=s1.upper()
  if len(s2)==1: s2=s2.upper()
  s1=s1.strip()
  s2=s2.strip()
  order = int(order)
  for key in [
    (s1, s2, order),
    (s2, s1, order),
    (s1, s2),
    (s2, s1),
    ]:
    if key in qm_defaults:
      return qm_defaults[key]
  if None:
    if s1 in ["H", "D", "T"] or s2 in ["H", "D", "T"]:
      return 1.5
    else:
      return 2.75
  return None

def generic_metal_run(metal_element,
                      coordination_atom_element,
                      resName,
                      name,
                      return_non_protein=True,
                      ):
  coordination_atom_element = coordination_atom_element.strip()
  local_metal_defaults = metal_defaults.get(metal_element.capitalize(), None)
  if local_metal_defaults is None: return None
  if coordination_atom_element=="O":
    # is this too harsh? excludes non-standard aminoacids
    if resName.upper() in three_letter_given_one_letter.values():
      if name and name=="O":
        result = carbonyl.get(metal_element.capitalize(), None)
        return result
  element_defaults = local_metal_defaults.get(coordination_atom_element,
                                        None,
                                        )
  if element_defaults is None: return None
  residue_defaults = element_defaults.get(resName.upper(),
                                        None,
                                        )
  if residue_defaults is None:
    if return_non_protein:
      result = non_protein.get((metal_element.capitalize(),
                                coordination_atom_element,
                                ),
                               None,
                               )
      return result
    else:
      return None
  return residue_defaults

basepairs_lengths = {

# taken from base_pairing.data

# columns:
# pair_type   saenger   paired_bases    hydrogen_flag   atom_pair   [atom_pair ...]
# atom_pair = atom1, atom2, bond_length, standard_deviation, slack
# key:value =
# key=saenger class
# value = [(bp1, bp2), (atom1, atom2, target distance, sigma, slack), (another link),]
#
# Canonical Watson-Crick base pairings
#homo purine
1:[('A','A'), ("N6","N1",2.99,0.14,0.07) ],
2:[('A','A'), ("N6","N7",2.95,0.20,0.06) ],
3:[('G','G'), ("N1","O6",2.86,0.12,0.01) ],
4:[('G','G'), ("N2","N3",3.10,0.22,0.13) ],
5:[('A','A'), ("N6","N1",2.93,0.18,0.  ), ("N7","N6",3.07,0.17,0.  ) ],
6:[('G','G'), ("O6","N1",2.88,0.16,0.  ), ("N7","N2",2.91,0.15,0.  ) ],
7:[('G','G'), ("N7","N1",2.93,0.17,0.  ), ("O6","N2",2.76,0.24,0.  ) ],
8:[('A','G'), ("N6","O6",2.95,0.21,0.  ), ("N1","N1",2.88,0.15,0.  ) ],
9:[('A','G'), ("N6","O6",2.70,0.08,0.  ), ("N7","N1",3.08,0.08,0.  ) ],
10:[('A','G'), ("N6","N3",3.15,0.11,0.  ), ("N1","N2",3.02,0.19,0.  ) ],
11:[('A','G'), ("N6","N3",3.23,0.15,0.  ), ("N7","N2",3.00,0.16,0.  ) ],
12:[('U','U'), ("N3","O4",2.86,0.05,0.12) ],
13:[('U','U'), ("O2","N3",2.74,0.05,0.03) ],
14:[('C','C'), ("N3","N4",2.72,0.05,0.6 ) ],
15:[('C','C'), ("O2","N4",2.83,0.01,0.  ) ],
17:[('C','U'), ("N3","N3",2.98,0.05,0.  ), ("N4","O2",2.91,0.07,0.  ) ],
18:[('C','U'), ("N4","O4",3.19,0.07,0.  ), ("N3","N3",3.16,0.06,0.  ) ],
19:[('C','G'), ("N4","O6",2.96,0.17,0.  ), ("N3","N1",2.89,0.11,0.  ), ("O2","N2",2.77,0.15, 0.)],
20:[('A','U'), ("N6","O4",3.00,0.17,0.  ), ("N1","N3",2.84,0.12,0.  ) ],
21:[('A','U'), ("N6","O2",2.94,0.17,0.  ), ("N1","N3",2.84,0.13,0.  ) ],
22:[('C','G'), ("O2","N1",2.80,0.17,0.  ), ("N3","N2",2.86,0.18,0.  ) ],
23:[('A','U'), ("N6","O4",3.05,0.15,0.  ), ("N7","N3",2.96,0.15,0.  ) ],
24:[('A','U'), ("N6","O2",2.91,0.19,0.  ), ("N7","N3",2.87,0.13,0.  ) ],
25:[('A','C'), ("N6","N3",3.13,0.15,0.  ), ("N7","N4",3.08,0.18,0.  ) ],
26:[('A','C'), ("N6","N3",3.09,0.14,0.  ), ("N1","N4",3.01,0.08,0.  ) ],
27:[('G','U'), ("O6","N3",2.99,0.15,0.  ), ("N1","O4",2.99,0.07,0.  ) ],
28:[('G','U'), ("O6","N3",2.83,0.13,0.  ), ("N1","O2",2.79,0.13,0.  ) ],
}

rome_numbers = ["","I", "II", "III","IV","V","VI","VII","VIII","IX","X",
  "XI","XII", "XIII","XIV","XV","XVI","XVII","XVIII","XIX","XX",
  "XXI","XXII","XXIII","XXIV", "XXV","XXVI","XXVII","XXVIII"]

def get_basepair_target_distance(atom1, atom2, which_basepair):
  an1 = atom1.name.strip()
  an2 = atom2.name.strip()
  for link in basepairs_lengths[which_basepair]:
    if (an1, an2) == link[:2] or (an2, an1) == link[:2]:
      return link[2:]
  return [2.90, 0.2, 0.0] # default - weak hbond. It returns when basepair
                        # is so distorted that wrong atoms seems to be linked

def run(atom1, atom2, return_non_protein=True):
  from mmtbx.monomer_library.linking_utils import ad_hoc_single_metal_residue_element_types
  metal = None
  coordination_atom = None
  if atom1.element.upper().strip() in ad_hoc_single_metal_residue_element_types:
    metal = atom1
    coordination_atom = atom2
  elif atom2.element.upper().strip() in ad_hoc_single_metal_residue_element_types:
    metal = atom2
    coordination_atom = atom1
  rc = None
  if metal is not None:
    if not hasattr(metal, "symbol"): # iotbx atom
      rc = generic_metal_run(metal.element.strip(),
                             coordination_atom.element.strip(),
                             coordination_atom.parent().resname,
                             getattr(coordination_atom, "name", None),
                             return_non_protein=return_non_protein,
        )
    else:
      rc = generic_metal_run(metal.symbol,
                             coordination_atom.symbol,
                             coordination_atom.resName,
                             getattr(coordination_atom, "name", None),
                             return_non_protein=return_non_protein,
        )
  if rc is None:
    if not hasattr(atom1, "symbol"): # iotbx atom
      return get_default_bondlength(atom1.element.strip(),
                                    atom2.element.strip(),
                                    ), 0.01
    else:
      return get_default_bondlength(atom1.symbol,
                                    atom2.symbol,
                                    ), 0.01
  else: return rc

if __name__=="__main__":
  results = [
    [2.41, 0.1], # Na
    [2.41, 0.1],
    [2.41, 0.1],
    [2.38, 0.1],
    [2.43, non_protein_sigma],
    [2.43, non_protein_sigma],
    [2.31, 0.1],
    [2.38, 0.1],
    [2.09, 0.05], # Zn
    [2.09, 0.05],
    [1.99, 0.05],
    [2.07, 0.25],
    [2.01, non_protein_sigma],
    [2.01, non_protein_sigma],
    [1.89, 0.05],
    [2.07, 0.25],
    None, # V
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    ]
  i=0
  for m in ["Na", "Zn", "V"]:
    for c in ["O", "N", "B"]:
      for residue in ["HOH", "ASP", "LIG", "TYR"]:
        for name in [None, "O"]:
          if c!="O": continue
          metal = AtomClass(m)
          coordination_atom = AtomClass(c)
          coordination_atom.resName = residue
          if name:
            coordination_atom.name = name
          print("-"*80)
          print(metal.Display())
          print(coordination_atom.Display())
          rc = run(metal, coordination_atom)
          print(rc)
          if rc!=results[i]:
            print(i, rc, results[i])
            assert 0
          i+=1
  print("OK")

if __name__=="__main__":
  if len(sys.argv)>1:
    print(get_default_bondlength(*tuple(sys.argv[1:])))
  else:
    for atoms in [("At", "At"),
                  ("At", "H"),
        ]:
      print(atoms, get_default_bondlength(*atoms))


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/cif_triage.py
from __future__ import absolute_import, division, print_function
import mmtbx.monomer_library.server
from libtbx.str_utils import show_string, show_sorted_by_counts
from libtbx import dict_with_default_0

def check_comp(file_name):
  result = 0
  print("file name:", file_name)
  cif_object = mmtbx.monomer_library.server.read_cif(file_name)
  for comp_comp_id in mmtbx.monomer_library.server.convert_comp_list(
                        source_info=file_name, cif_object=cif_object):
    result += 1
    atom_names = set()
    for atom in comp_comp_id.atom_list:
      atom_name = atom.atom_id
      assert atom_name.count(" ") == 0
      if (atom_name in atom_names):
        raise RuntimeError(
          "Duplicate atom name: %s" % show_string(atom_name))
      atom_names.add(atom_name)
    print("  number of atoms:", len(atom_names))
    #
    bond_atom_ids = set()
    for bond in comp_comp_id.bond_list:
      atom_ids = [bond.atom_id_1, bond.atom_id_2]
      for atom_name in atom_ids:
        if (atom_name not in atom_names):
          raise RuntimeError(
            "Unknown bond atom name: %s" % show_string(atom_name))
      atom_ids = tuple(sorted(atom_ids))
      if (atom_ids in bond_atom_ids):
        raise RuntimeError(
          "Duplicate bond: %s - %s" % tuple([show_string(s)
            for s in atom_ids]))
      bond_atom_ids.add(atom_ids)
    print("  number of bonds:", len(bond_atom_ids))
    #
    angle_atom_ids = set()
    for angle in comp_comp_id.angle_list:
      atom_ids = [angle.atom_id_1, angle.atom_id_2, angle.atom_id_3]
      for atom_name in atom_ids:
        if (atom_name not in atom_names):
          raise RuntimeError(
            "Unknown angle atom name: %s" % show_string(atom_name))
      atom_ids = tuple(sorted(atom_ids))
      if (atom_ids in angle_atom_ids):
        raise RuntimeError(
          "Duplicate angle: %s - %s - %s" % tuple([show_string(s)
            for s in atom_ids]))
      angle_atom_ids.add(atom_ids)
    print("  number of angles:", len(angle_atom_ids))
    #
    tor_atom_ids = set()
    for tor in comp_comp_id.tor_list:
      atom_ids = [tor.atom_id_1, tor.atom_id_2, tor.atom_id_3, tor.atom_id_4]
      for atom_name in atom_ids:
        if (atom_name not in atom_names):
          raise RuntimeError(
            "Unknown tor atom name: %s" % show_string(atom_name))
      atom_ids = tuple(sorted(atom_ids))
      if (atom_ids in tor_atom_ids):
        raise RuntimeError(
          "Duplicate tor: %s - %s - %s - %s" % tuple([show_string(s)
            for s in atom_ids]))
      tor_atom_ids.add(atom_ids)
    print("  number of tors:", len(tor_atom_ids))
    tor_atom_ids = {}
    for tor in comp_comp_id.tor_list:
      atom_ids = tuple(sorted([tor.atom_id_2, tor.atom_id_3]))
      tor_atom_ids.setdefault(atom_ids, []).append(tor)
    for atom_ids,tors in tor_atom_ids.items():
      if (len(tors) != 1):
        print("    redundant tors:", ", ".join([tor.id for tor in tors]))
    #
    chir_atom_ids = set()
    for chir in comp_comp_id.chir_list:
      atom_ids = [
        chir.atom_id_1, chir.atom_id_2, chir.atom_id_3, chir.atom_id_centre]
      for atom_name in atom_ids:
        if (atom_name not in atom_names):
          raise RuntimeError(
            "Unknown chir atom name: %s" % show_string(atom_name))
      atom_ids = tuple(sorted(atom_ids))
      if (atom_ids in chir_atom_ids):
        raise RuntimeError(
          "Duplicate chir: %s - %s - %s - %s" % tuple([show_string(s)
            for s in atom_ids]))
      chir_atom_ids.add(atom_ids)
    print("  number of chirs:", len(chir_atom_ids))
    #
    plane_atom_counts = dict_with_default_0()
    for plane_atom in comp_comp_id.plane_atom_list:
      if (plane_atom.atom_id not in atom_names):
        raise RuntimeError(
          "Unknown plane atom name: %s" % show_string(plane_atom.atom_id))
      plane_atom_counts[plane_atom.plane_id] += 1
    print("  number of planes:", len(plane_atom_counts))
    if (len(plane_atom_counts) != 0):
      show_sorted_by_counts(
        label_count_pairs=list(plane_atom_counts.items()),
        prefix="    ")
      assert min(plane_atom_counts.values()) >= 3
    #
    rotamer_info = comp_comp_id.rotamer_info()
    if (rotamer_info is not None):
      print("  rotamer_info.tor_ids:", rotamer_info.tor_ids)
      for tor_id in rotamer_info.tor_ids:
        assert tor_id.strip() == tor_id
        assert tor_id.split() == [tor_id]
      for tor_atom_ids in rotamer_info.tor_atom_ids:
        assert len(tor_atom_ids) == 5
        assert tor_atom_ids[0] in rotamer_info.tor_ids
        for atom_id in tor_atom_ids[1:]:
          assert atom_id.strip() == atom_id
          assert atom_id.split() == [atom_id]
      atom_ids = rotamer_info.atom_ids_not_handled
      if (atom_ids is not None):
        for atom_id in atom_ids:
          assert atom_id.strip() == atom_id
          assert atom_id.split() == [atom_id]
      assert (
           rotamer_info.constrain_dihedrals_with_sigma_less_than_or_equal_to
             is None
        or rotamer_info.constrain_dihedrals_with_sigma_less_than_or_equal_to
             > 0)
      print("  number of rotamers:", len(rotamer_info.rotamer))
      n_missing_frequencies = 0
      for rotamer in rotamer_info.rotamer:
        assert rotamer.id is not None
        assert len(rotamer.id.strip()) == len(rotamer.id)
        assert len(rotamer.id.split()) == 1
        if (rotamer.frequency is None):
          if (rotamer.frequency_annotation != "for more uniform sampling"):
            n_missing_frequencies += 1
        else:
          assert rotamer.frequency > 0
          assert rotamer.frequency < 1
        assert rotamer.angles is not None
        assert len(rotamer.angles) == len(rotamer_info.tor_ids)
        for angle in rotamer.angles:
          assert angle is None or -180 < angle <= 180
      if (n_missing_frequencies != 0):
        print("  WARNING: number of missing frequencies:", \
          n_missing_frequencies)
  return result


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/cif_types.py
from __future__ import absolute_import, division, print_function
from iotbx.pdb import rna_dna_detection
from cctbx import geometry_restraints
from cctbx import uctbx
from cctbx.array_family import flex
from libtbx.utils import if_none
from libtbx import slots_getstate_setstate
import copy
import sys
from six.moves import zip
from six.moves import range

peptide_comp_groups = ("L-peptide", "D-peptide")
dna_rna_comp_groups = ("DNA", "RNA")
non_chain_links = ("SS-bridge",)

class looped_data(object):
  "mix-in to extract keywords from self.__class__.__doc__"

  def __init__(self, **keyword_arguments):
    self._looped_ids = self.__class__.__doc__.split()
    self._cif_keywords = []
    for looped_id in self.looped_ids():
      key = looped_id.split(".")[1]
      typ = None
      key_typ = key.split(":")
      if (len(key_typ) == 2):
        key = key_typ[0]
        typ = key_typ[1]
        if (typ not in ("int", "float")):
          raise RuntimeError("Corrupt looped id: %s" % looped_id)
      val = keyword_arguments.get(key, keyword_arguments.get(
        looped_id.split(":")[0], None))
      if (val == "."): val = ""
      if (typ is not None):
        if (val == ""): val = None
        if (val is not None):
          def raise_value_error(expected_type):
            raise ValueError(
              "%s value expected in CIF file: %s %s" % (
                expected_type, looped_id.split(":",1)[0], val))
          if (typ == "int"):
            try:
              val = int(val)
            except ValueError:
              raise_value_error("Integer")
          else:
            try:
              val = float(val)
            except ValueError:
              raise_value_error("Floating-point")
      setattr(self, key, val)
      self._cif_keywords.append(key)

  def looped_ids(self):
    return self._looped_ids

  def cif_keywords(self):
    return self._cif_keywords

  def __copy__(self):
    args = {}
    for key in self.cif_keywords():
      args[key] = getattr(self, key)
    return self.__class__(**args)

  def show(self, f=None):
    if (f is None): f = sys.stdout
    for key in self.cif_keywords():
      print("_%s.%s: %s" % (
        self.__class__.__name__, key, getattr(self, key)), file=f)

  def show_loop_header(self, f=None):
    if (f is None): f = sys.stdout
    print("loop_", file=f)
    for key in self.cif_keywords():
      print("_%s.%s" % (
        self.__class__.__name__, key), file=f)

  def generate_loop_data(self):
    rc = []
    for key in self.cif_keywords():
      val = getattr(self, key)
      if (val in (None, "")): val = "."
      yield val

  def show_loop_data(self, f=None):
    if (f is None): f = sys.stdout
    print(" ".join([str(val) for val in self.generate_loop_data()]), file=f)

  def as_cif_loop(self):
    import iotbx
    out_loop = iotbx.cif.model.loop(
      header=['_%s.%s' % (self.__class__.__name__, x) for x in self.cif_keywords()])
    row = []
    for val in self.generate_loop_data():
      row.append(val)
    out_loop.add_row(row)
    return out_loop

def show_loop(data_list, f):
  first = True
  for datum in data_list:
    if (first):
      datum.show_loop_header(f=f)
      first = False
    datum.show_loop_data(f=f)
  if (not first):
    print(file=f)

def apply_chem_mod_list(label, mod_list, result_list):
  for mod in mod_list:
    if (mod.function == "add"):
      result_list.append(mod.as_chem_comp())
    elif (mod.function == "delete"):
      new_list = []
      for orig in result_list:
        if (not mod.is_matching_mod_for(orig)):
          new_list.append(orig)
      result_list = new_list
    elif (mod.function == "change"):
      for orig in result_list:
        if (mod.is_matching_mod_for(orig)):
          mod.apply_change_in_place(orig)
    else:
      raise RuntimeError("Unknown _chem_mod_%s.function: %s"
        % (label, str(mod.function)))
  return result_list

class chem_plane(object):

  def __init__(self, plane_id):
    self.plane_id = plane_id
    self.plane_atoms = []

def get_bond(bond_list, atom_id_1, atom_id_2):
  for bond in bond_list:
    if (bond.atom_id_1 == atom_id_1 and bond.atom_id_2 == atom_id_2):
      return bond
    if (bond.atom_id_1 == atom_id_2 and bond.atom_id_2 == atom_id_1):
      return bond
  return None

def normalized_bond_list(bond_list):
  result = []
  for bond in bond_list:
    bond = copy.copy(bond)
    if (bond.atom_id_1 > bond.atom_id_2):
      bond.atom_id_1, bond.atom_id_2 = bond.atom_id_2, bond.atom_id_1
    result.append(bond)
  return result

def get_chir_volume_ideal(volume_sign, bonds, angles):
  if (None in bonds or None in angles):
    return None
  try:
    uc = uctbx.unit_cell(  [bond.value_dist for bond in bonds]
                         + [angle.value_angle for angle in angles])
  except ValueError:
    return None
  if (volume_sign.startswith("neg")):
    return -uc.volume()
  return uc.volume()

def group_planes(plane_atom_list):
  result = []
  result_dict = {}
  for plane_atom in plane_atom_list:
    plane = result_dict.get(plane_atom.plane_id, None)
    if (plane is None):
      plane = chem_plane(plane_atom.plane_id)
      result.append(plane)
      result_dict[plane_atom.plane_id] = plane
    plane.plane_atoms.append(plane_atom)
  return result

def esd_as_weight(esd):
  if (esd is None): return 0
  if (esd == 0): return 0
  return 1./(esd*esd)

class comp_comp_id(slots_getstate_setstate):

  __slots__ = [
    "source_info",
    "chem_comp",
    "atom_list",
    "bond_list",
    "angle_list",
    "tor_list",
    "chir_list",
    "plane_atom_list",
    "rotamer_info_phil_str_list",
    "__rotamer_info",
    "classification",
    "normalized_rna_dna",
    "cif_object",
    ]

  def __init__(self, source_info, chem_comp):
    self.source_info = source_info
    self.chem_comp = chem_comp
    self.atom_list = []
    self.bond_list = []
    self.angle_list = []
    self.tor_list = []
    self.chir_list = []
    self.plane_atom_list = []
    self.rotamer_info_phil_str_list = []
    self.__rotamer_info = None
    self.classification = None
    self.normalized_rna_dna = None
    self.cif_object = None

  def normalize_atom_ids_in_place(self):
    atom_ids_mod = []
    atom_ids_mod_set = set()
    is_rna_dna = (self.get_classification() in ["RNA", "RNAv3", "DNA", "DNAv3"])
    normalized = False
    for atom in self.atom_list:
      atom_id = atom.atom_id
      if is_rna_dna:
        atom_id = atom.atom_id.replace("'", "*")
        if atom_id == "OP1":
          normalized = True
          atom_id = "O1P"
        elif atom_id == "OP2":
          normalized = True
          atom_id = "O2P"
      if (atom_id in atom_ids_mod_set):
        return False # changing ids results in ambiguity
      atom_ids_mod.append(atom_id)
      atom_ids_mod_set.add(atom_id)
    self.normalized_rna_dna = (is_rna_dna) and (normalized)
    del atom_ids_mod_set
    #
    atom_id_map = {}
    for atom,atom_id in zip(self.atom_list, atom_ids_mod):
      if (atom.atom_id != atom_id):
        atom_id_map[atom.atom_id] = atom_id
        atom.atom_id = atom_id
    if (len(atom_id_map) == 0):
      return False
    def replace(obj_list, attrs):
      for obj in obj_list:
        for attr in attrs:
          atom_id = atom_id_map.get(getattr(obj, attr))
          if (atom_id is not None):
            setattr(obj, attr, atom_id)
    replace(self.bond_list, (
      "atom_id_1", "atom_id_2"))
    replace(self.angle_list, (
      "atom_id_1", "atom_id_2", "atom_id_3"))
    replace(self.tor_list, (
      "atom_id_1", "atom_id_2", "atom_id_3", "atom_id_4"))
    replace(self.chir_list, (
      "atom_id_centre", "atom_id_1", "atom_id_2", "atom_id_3"))
    replace(self.plane_atom_list, (
      "atom_id",))
    return True

  def __copy__(self):
    result = comp_comp_id(source_info=None, chem_comp=self.chem_comp)
    result.atom_list = [copy.copy(e) for e in self.atom_list]
    result.bond_list = [copy.copy(e) for e in self.bond_list]
    result.angle_list = [copy.copy(e) for e in self.angle_list]
    result.tor_list = [copy.copy(e) for e in self.tor_list]
    result.chir_list = [copy.copy(e) for e in self.chir_list]
    result.plane_atom_list = [copy.copy(e) for e in self.plane_atom_list]
    result.rotamer_info_phil_str_list = [
      copy.copy(e) for e in self.rotamer_info_phil_str_list]
    result.__rotamer_info = copy.deepcopy(self.__rotamer_info)
    result.classification = None
    return result

  def atom_ids(self, sorted=False):
    result = []
    for atom in self.atom_list:
      result.append(atom.atom_id)
    if (sorted): result.sort()
    return result

  def atom_dict(self):
    result = {}
    for atom in self.atom_list:
      result[atom.atom_id] = atom
    return result

  def hydrogen_deuterium_aliases(self):
    result = {}
    for atom in self.atom_list:
      if (atom.type_symbol != "H"): continue
      atom_id = atom.atom_id
      if (atom_id[:1] != "H"): continue
      result["D"+atom_id[1:]] = atom_id
    return result

  def atom_by_id(self, atom_id):
    for atom in self.atom_list:
      if (atom.atom_id == atom_id):
        return atom
    return None

  def i_atom_by_id(self, atom_id):
    for i_atom in range(len(self.atom_list)):
      if (self.atom_list[i_atom].atom_id == atom_id):
        return i_atom
      if (atom_id.find("'")>-1):
        if (self.atom_list[i_atom].atom_id.replace("*","'") == atom_id):
          return i_atom
    return None

  def non_hydrogen_atoms(self):
    result = []
    for atom in self.atom_list:
      if (atom.type_symbol != "H"):
        result.append(atom)
    return result

  def get_bond(self, atom_id_1, atom_id_2):
    return get_bond(self.bond_list, atom_id_1, atom_id_2)

  def normalized_bond_list(self):
    return normalized_bond_list(bond_list=self.bond_list)

  def get_angle(self, atom_id_1, atom_id_2, atom_id_3):
    for angle in self.angle_list:
      if (angle.atom_id_2 == atom_id_2):
        if (angle.atom_id_1 == atom_id_1 and angle.atom_id_3 == atom_id_3):
          return angle
        if (angle.atom_id_1 == atom_id_3 and angle.atom_id_3 == atom_id_1):
          return angle
    return None

  def normalized_angle_list(self):
    result = []
    for angle in self.angle_list:
      angle = copy.copy(angle)
      if (angle.atom_id_1 > angle.atom_id_3):
        angle.atom_id_1, angle.atom_id_3 = angle.atom_id_3, angle.atom_id_1
      result.append(angle)
    return result

  def delete_atom_in_place(self, atom_id):
    i_atom = self.i_atom_by_id(atom_id)
    if (i_atom is None):
      raise RuntimeError("delete_atom_in_place: unknown atom_id: %s" % atom_id)
    del self.atom_list[i_atom]
    new_bond_list = []
    for bond in self.bond_list:
      if (atom_id not in (bond.atom_id_1, bond.atom_id_2)):
        new_bond_list.append(bond)
    self.bond_list = new_bond_list
    new_angle_list = []
    for angle in self.angle_list:
      if (atom_id not in (angle.atom_id_1, angle.atom_id_2, angle.atom_id_3)):
        new_angle_list.append(angle)
    self.angle_list = new_angle_list
    new_tor_list = []
    for tor in self.tor_list:
      if (atom_id not in (tor.atom_id_1, tor.atom_id_2,
                          tor.atom_id_3, tor.atom_id_4)):
        new_tor_list.append(tor)
    self.tor_list = new_tor_list
    new_chir_list = []
    for chir in self.chir_list:
      if (atom_id not in (chir.atom_id_centre, chir.atom_id_1,
                          chir.atom_id_2, chir.atom_id_3)):
        new_chir_list.append(chir)
    self.chir_list = new_chir_list
    new_plane_atom_list = []
    for plane_atom in self.plane_atom_list:
      if (atom_id != plane_atom.atom_id):
        new_plane_atom_list.append(plane_atom)
    self.plane_atom_list = new_plane_atom_list

  def change_atom_in_place(self, mod_atom):
    i_atom = self.i_atom_by_id(mod_atom.atom_id)
    if (i_atom is None):
      raise RuntimeError(
        "change_atom_in_place: unknown atom_id: %s" % mod_atom.atom_id)
    atom = copy.copy(self.atom_list[i_atom])
    old_atom_id = atom.atom_id
    for attr_name in atom.__dict__.keys():
      new_attr = getattr(mod_atom, "new_"+attr_name, None)
      if (new_attr not in (None, "")):
        setattr(atom, attr_name, new_attr)
    self.atom_list[i_atom] = atom
    if (atom.atom_id != old_atom_id):
      for bond in self.bond_list:
        if (bond.atom_id_1 == old_atom_id):
          bond.atom_id_1 = atom.atom_id
        if (bond.atom_id_2 == old_atom_id):
          bond.atom_id_2 = atom.atom_id
      for angle in self.angle_list:
        if (angle.atom_id_1 == old_atom_id):
          angle.atom_id_1 = atom.atom_id
        if (angle.atom_id_2 == old_atom_id):
          angle.atom_id_2 = atom.atom_id
        if (angle.atom_id_3 == old_atom_id):
          angle.atom_id_3 = atom.atom_id
      for tor in self.tor_list:
        if (tor.atom_id_1 == old_atom_id):
          tor.atom_id_1 = atom.atom_id
        if (tor.atom_id_2 == old_atom_id):
          tor.atom_id_2 = atom.atom_id
        if (tor.atom_id_3 == old_atom_id):
          tor.atom_id_3 = atom.atom_id
        if (tor.atom_id_4 == old_atom_id):
          tor.atom_id_4 = atom.atom_id
      for chir in self.chir_list:
        if (chir.atom_id_centre == old_atom_id):
          chir.atom_id_centre = atom.atom_id
        if (chir.atom_id_1 == old_atom_id):
          chir.atom_id_1 = atom.atom_id
        if (chir.atom_id_2 == old_atom_id):
          chir.atom_id_2 = atom.atom_id
        if (chir.atom_id_3 == old_atom_id):
          chir.atom_id_3 = atom.atom_id
      for plane_atom in self.plane_atom_list:
        if (plane_atom.atom_id == old_atom_id):
          plane_atom.atom_id = atom.atom_id

  def apply_mod(self, mod):
    result = copy.copy(self)
    for mod_atom in mod.atom_list:
      if (mod_atom.function == "add"):
        result.atom_list.append(mod_atom.as_chem_comp())
      elif (mod_atom.function == "delete"):
        result.delete_atom_in_place(mod_atom.atom_id)
      elif (mod_atom.function == "change"):
        result.change_atom_in_place(mod_atom)
      else:
        raise RuntimeError("Unknown _chem_mod_atom.function: "
          + str(mod_atom.function))
    result.bond_list = apply_chem_mod_list(
      "bond", mod.bond_list, result.bond_list)
    result.angle_list = apply_chem_mod_list(
      "angle", mod.angle_list, result.angle_list)
    result.tor_list = apply_chem_mod_list(
      "tor", mod.tor_list, result.tor_list)
    result.chir_list = apply_chem_mod_list(
      "chir", mod.chir_list, result.chir_list)
    result.plane_atom_list = apply_chem_mod_list(
      "plane_atom", mod.plane_atom_list, result.plane_atom_list)
    return result

  def test_for_peptide(self, atom_dict):
    for required_atom in ("N", "CA", "C", "O"):
      if (not required_atom in atom_dict): return None
    backbone_bonds = {}
    for bond in self.bond_list:
      pair = [bond.atom_id_1, bond.atom_id_2]
      pair.sort()
      pair = " ".join(pair)
      if (pair in ("CA N", "C CA")):
        backbone_bonds[pair] = 0
      elif (pair == "C O" and bond.type != "single"):
        backbone_bonds[pair] = 0
    if (len(backbone_bonds) != 3): return None
    return "peptide"

  def test_for_rna_dna(self, atom_dict):
    return rna_dna_detection.classification(
      atom_dict=atom_dict, bond_list=self.bond_list)

  def test_for_water(self, atom_dict):
    atom_list = list(atom_dict.keys())
    atom_list.sort()
    if (atom_list == ["H1", "H2", "O"]):
      return "water"
    return None

  def set_classification(self):
    atom_dict = self.atom_dict()
    pep = self.test_for_peptide(atom_dict)
    nuc = self.test_for_rna_dna(atom_dict)
    if (pep is not None and nuc is None):
      self.classification = pep
    elif (pep is None and nuc is not None):
      self.classification = nuc
    else:
      self.classification = self.test_for_water(atom_dict)
      if (self.classification is not None):
        return self
      self.classification = "undetermined"
    return self

  def get_classification(self):
    if (self.classification is None): self.set_classification()
    return self.classification

  def is_peptide(self):
    return self.get_classification() == "peptide"

  def is_rna(self):
    return self.get_classification() == "RNA"

  def is_dna(self):
    return self.get_classification() == "DNA"

  def is_rna_dna(self):
    return self.get_classification() in ("RNA", "DNA")

  def is_water(self):
    return self.get_classification() == "water"

  def get_chir_bonds_and_angles(self, chir):
    bonds = []
    for atom_id_i in [chir.atom_id_1, chir.atom_id_2, chir.atom_id_3]:
      bonds.append(self.get_bond(chir.atom_id_centre, atom_id_i))
    angles = []
    for atom_id_i,atom_id_j in [(chir.atom_id_2,chir.atom_id_3),
                                (chir.atom_id_1,chir.atom_id_3),
                                (chir.atom_id_1,chir.atom_id_2)]:
      angles.append(self.get_angle(atom_id_i,chir.atom_id_centre,atom_id_j))
    return bonds, angles

  def get_chir_volume_ideal(self, chir):
    bonds, angles = self.get_chir_bonds_and_angles(chir)
    return get_chir_volume_ideal(chir.volume_sign, bonds, angles)

  def get_planes(self):
    return group_planes(self.plane_atom_list)

  def show(self, f=None):
    if (f is None): f = sys.stdout
    show_loop(data_list=self.atom_list, f=f)
    show_loop(data_list=self.bond_list, f=f)
    show_loop(data_list=self.angle_list, f=f)
    show_loop(data_list=self.tor_list, f=f)
    show_loop(data_list=self.chir_list, f=f)
    show_loop(data_list=self.plane_atom_list, f=f)
    show_loop(data_list=self.rotamer_info_phil_str_list, f=f)
    return self

  def as_geometry_restraints_motif(self):
    result = geometry_restraints.motif()
    result.id = if_none(self.chem_comp.id, "")
    result.description = if_none(self.chem_comp.name, "").strip()
    if (self.source_info is not None):
      result.info.append(self.source_info)
    result.set_atoms([
      geometry_restraints.motif_atom(
        name=if_none(atom.atom_id, ""),
        scattering_type=if_none(atom.type_symbol, ""),
        nonbonded_type=if_none(atom.type_energy, ""),
        partial_charge=if_none(atom.partial_charge, 0))
          for atom in self.atom_list])
    result.set_bonds([
      geometry_restraints.motif_bond(
        atom_names=[
          if_none(bond.atom_id_1, ""),
          if_none(bond.atom_id_2, "")],
        type=if_none(bond.type, ""),
        distance_ideal=if_none(bond.value_dist, 0),
        weight=esd_as_weight(bond.value_dist_esd))
          for bond in self.bond_list])
    result.set_angles([
      geometry_restraints.motif_angle(
        atom_names=[
          if_none(angle.atom_id_1, ""),
          if_none(angle.atom_id_2, ""),
          if_none(angle.atom_id_3, "")],
        angle_ideal=if_none(angle.value_angle, 0),
        weight=esd_as_weight(angle.value_angle_esd))
          for angle in self.angle_list])
    result.set_dihedrals([
      geometry_restraints.motif_dihedral(
        atom_names=[
          if_none(tor.atom_id_1, ""),
          if_none(tor.atom_id_2, ""),
          if_none(tor.atom_id_3, ""),
          if_none(tor.atom_id_4, "")],
        angle_ideal=if_none(tor.value_angle, 0),
        weight=esd_as_weight(tor.value_angle_esd),
        periodicity=if_none(tor.period, 0),
        id=tor.id)
          for tor in self.tor_list])
    result.set_chiralities([
      geometry_restraints.motif_chirality(
        atom_names=[
          if_none(chir.atom_id_centre, ""),
          if_none(chir.atom_id_1, ""),
          if_none(chir.atom_id_2, ""),
          if_none(chir.atom_id_3, "")],
        volume_sign=chir.volume_sign,
        id=chir.id)
          for chir in self.chir_list])
    planarities = []
    for plane in self.get_planes():
      atom_names = flex.std_string([if_none(plane_atom.atom_id, "")
        for plane_atom in plane.plane_atoms])
      weights = flex.double([esd_as_weight(plane_atom.dist_esd)
        for plane_atom in plane.plane_atoms])
      planarities.append(
        geometry_restraints.motif_planarity(
          atom_names=atom_names,
          weights=weights,
          id=plane.plane_id))
    result.set_planarities(planarities)
    return result

  def rotamer_info(self):
    if (self.__rotamer_info is None):
      if (len(self.rotamer_info_phil_str_list) == 0):
        return None
      assert len(self.rotamer_info_phil_str_list) == 1
      from mmtbx.monomer_library.rotamer_utils import rotamer_info_master_phil
      import libtbx.phil
      self.__rotamer_info = rotamer_info_master_phil().fetch(
        source=libtbx.phil.parse(
          input_string=self.rotamer_info_phil_str_list[0].phil_str)).extract()
    return self.__rotamer_info

  def rotamer_iterator(self, atom_names, sites_cart, fine_sampling=False):
    from mmtbx.monomer_library.rotamer_utils import rotamer_iterator
    return rotamer_iterator(
      comp_comp_id=self,
      atom_names=atom_names,
      sites_cart=sites_cart, fine_sampling=fine_sampling)

class chem_comp(looped_data):
  """
_chem_comp.id
_chem_comp.three_letter_code
_chem_comp.name
_chem_comp.group
_chem_comp.number_atoms_all:int
_chem_comp.number_atoms_nh:int
_chem_comp.desc_level
  """

class chem_comp_atom(looped_data):
  """
_chem_comp_atom.atom_id
_chem_comp_atom.type_symbol
_chem_comp_atom.type_energy
_chem_comp_atom.partial_charge:float
  """

class chem_comp_tree(looped_data):
  """
_chem_comp_tree.atom_id
_chem_comp_tree.atom_back
_chem_comp_tree.atom_forward
_chem_comp_tree.connect_type
  """

class chem_comp_bond(looped_data):
  """
_chem_comp_bond.atom_id_1
_chem_comp_bond.atom_id_2
_chem_comp_bond.type
_chem_comp_bond.value_dist:float
_chem_comp_bond.value_dist_esd:float
_chem_comp_bond.value_dist_neutron:float
  """

  def atom_ids(O):
    return (O.atom_id_1, O.atom_id_2)

class chem_comp_angle(looped_data):
  """
_chem_comp_angle.atom_id_1
_chem_comp_angle.atom_id_2
_chem_comp_angle.atom_id_3
_chem_comp_angle.value_angle:float
_chem_comp_angle.value_angle_esd:float
  """

class chem_comp_tor(looped_data):
  """
_chem_comp_tor.id
_chem_comp_tor.atom_id_1
_chem_comp_tor.atom_id_2
_chem_comp_tor.atom_id_3
_chem_comp_tor.atom_id_4
_chem_comp_tor.value_angle:float
_chem_comp_tor.alt_value_angle
_chem_comp_tor.value_angle_esd:float
_chem_comp_tor.period:int
  """

  def atom_ids(O):
    return (O.atom_id_1, O.atom_id_2, O.atom_id_3, O.atom_id_4)

class chem_comp_chir(looped_data):
  """
_chem_comp_chir.id
_chem_comp_chir.atom_id_centre
_chem_comp_chir.atom_id_1
_chem_comp_chir.atom_id_2
_chem_comp_chir.atom_id_3
_chem_comp_chir.volume_sign
  """

class chem_comp_plane_atom(looped_data):
  """
_chem_comp_plane_atom.plane_id
_chem_comp_plane_atom.atom_id
_chem_comp_plane_atom.dist_esd:float
  """

class chem_comp_rotamer_info(looped_data):
  """
_chem_comp_rotamer_info.phil_str
  """

class chem_comp_deriv(looped_data):
  """
_chem_comp_deriv.comp_id
_chem_comp_deriv.source_comp_id
_chem_comp_deriv.mod_id
_chem_comp_deriv.name
_chem_comp_deriv.group
  """

class chem_comp_synonym(looped_data):
  """
_chem_comp_synonym.comp_id
_chem_comp_synonym.comp_alternative_id
_chem_comp_synonym.mod_id
  """

class chem_comp_synonym_atom(looped_data):
  """
_chem_comp_synonym_atom.comp_id
_chem_comp_synonym_atom.comp_alternative_id
_chem_comp_synonym_atom.atom_id
_chem_comp_synonym_atom.atom_alternative_id
  """

class link_link_id:

  def __init__(self, source_info, chem_link):
    self.source_info = source_info
    self.chem_link = chem_link
    self.bond_list = []
    self.angle_list = []
    self.tor_list = []
    self.chir_list = []
    self.plane_list = []

  def get_bond(self, m_i, m_j,
                     atom_1_comp_id, atom_id_1,
                     atom_2_comp_id, atom_id_2):
    if (atom_2_comp_id == atom_1_comp_id):
      if (atom_1_comp_id == 1):
        return m_i.get_bond(atom_id_1, atom_id_2)
      if (atom_1_comp_id == 2):
        return m_j.get_bond(atom_id_1, atom_id_2)
      raise AssertionError
    for bond in self.bond_list:
      if (    bond.atom_1_comp_id == atom_1_comp_id
          and bond.atom_2_comp_id == atom_2_comp_id
          and bond.atom_id_1 == atom_id_1
          and bond.atom_id_2 == atom_id_2):
        return bond
      if (    bond.atom_1_comp_id == atom_2_comp_id
          and bond.atom_2_comp_id == atom_1_comp_id
          and bond.atom_id_1 == atom_id_2
          and bond.atom_id_2 == atom_id_1):
        return bond
    return None

  def get_angle(self, m_i, m_j,
                      atom_1_comp_id, atom_id_1,
                      atom_2_comp_id, atom_id_2,
                      atom_3_comp_id, atom_id_3):
    if (    atom_2_comp_id == atom_1_comp_id
        and atom_3_comp_id == atom_1_comp_id):
      if   (atom_1_comp_id == 1):
        return m_i.get_angle(atom_id_1, atom_id_2, atom_id_3)
      if (atom_1_comp_id == 2):
        return m_j.get_angle(atom_id_1, atom_id_2, atom_id_3)
      raise AssertionError
    for angle in self.angle_list:
      if (    angle.atom_2_comp_id == atom_2_comp_id
          and angle.atom_id_2 == atom_id_2):
        if (    angle.atom_1_comp_id == atom_1_comp_id
            and angle.atom_3_comp_id == atom_3_comp_id
            and angle.atom_id_1 == atom_id_1
            and angle.atom_id_3 == atom_id_3):
          return angle
        if (    angle.atom_1_comp_id == atom_3_comp_id
            and angle.atom_3_comp_id == atom_1_comp_id
            and angle.atom_id_1 == atom_id_3
            and angle.atom_id_3 == atom_id_1):
          return angle
    return None

  def get_chir_bonds_and_angles(self, m_i, m_j, chir):
    bonds = []
    for atom_i_comp_id,atom_id_i in [(chir.atom_1_comp_id, chir.atom_id_1),
                                     (chir.atom_2_comp_id, chir.atom_id_2),
                                     (chir.atom_3_comp_id, chir.atom_id_3)]:
      bonds.append(self.get_bond(
        m_i, m_j,
        chir.atom_centre_comp_id, chir.atom_id_centre,
        atom_i_comp_id, atom_id_i))
    angles = []
    for atom_i_comp_id,atom_id_i,atom_j_comp_id,atom_id_j in [
        (chir.atom_2_comp_id, chir.atom_id_2,
         chir.atom_3_comp_id, chir.atom_id_3),
        (chir.atom_1_comp_id, chir.atom_id_1,
         chir.atom_3_comp_id, chir.atom_id_3),
        (chir.atom_1_comp_id, chir.atom_id_1,
         chir.atom_2_comp_id, chir.atom_id_2)]:
      angles.append(self.get_angle(
        m_i, m_j,
        atom_i_comp_id, atom_id_i,
        chir.atom_centre_comp_id, chir.atom_id_centre,
        atom_j_comp_id, atom_id_j))
    return bonds, angles

  def get_chir_volume_ideal(self, m_i, m_j, chir):
    bonds, angles = self.get_chir_bonds_and_angles(m_i, m_j, chir)
    return get_chir_volume_ideal(chir.volume_sign, bonds, angles)

  def get_planes(self):
    return group_planes(self.plane_list)

  def as_cif_block(self):
    import iotbx
    block = iotbx.cif.model.block()
    for loop in self.cif_object.iterloops(): block.add_loop(loop)
    return block

  def as_geometry_restraints_motif_manipulation(self):
    result = geometry_restraints.motif_manipulation()
    result.id = if_none(self.chem_link.id, "")
    result.description = if_none(self.chem_link.name, "")
    if (self.source_info is not None):
      result.info.append(self.source_info)
    alts = []
    for bond in self.bond_list:
      a = geometry_restraints.motif_alteration(
        action="add", operand="bond")
      a.motif_ids.append(str(if_none(bond.atom_1_comp_id, "")))
      a.motif_ids.append(str(if_none(bond.atom_2_comp_id, "")))
      a.bond.atom_names = [
        if_none(bond.atom_id_1, ""),
        if_none(bond.atom_id_2, "")]
      a.bond.type = if_none(bond.type, "")
      a.bond.distance_ideal = if_none(bond.value_dist, 0)
      a.bond.weight = esd_as_weight(bond.value_dist_esd)
      alts.append(a)
    for angle in self.angle_list:
      a = geometry_restraints.motif_alteration(
        action="add", operand="angle")
      a.motif_ids.append(str(if_none(angle.atom_1_comp_id, "")))
      a.motif_ids.append(str(if_none(angle.atom_2_comp_id, "")))
      a.motif_ids.append(str(if_none(angle.atom_3_comp_id, "")))
      a.angle.atom_names = [
        if_none(angle.atom_id_1, ""),
        if_none(angle.atom_id_2, ""),
        if_none(angle.atom_id_3, "")]
      a.angle.angle_ideal = if_none(angle.value_angle, 0)
      a.angle.weight = esd_as_weight(angle.value_angle_esd)
      alts.append(a)
    for tor in self.tor_list:
      a = geometry_restraints.motif_alteration(
        action="add", operand="dihedral")
      a.motif_ids.append(str(if_none(tor.atom_1_comp_id, "")))
      a.motif_ids.append(str(if_none(tor.atom_2_comp_id, "")))
      a.motif_ids.append(str(if_none(tor.atom_3_comp_id, "")))
      a.motif_ids.append(str(if_none(tor.atom_4_comp_id, "")))
      a.dihedral.atom_names = [
        if_none(tor.atom_id_1, ""),
        if_none(tor.atom_id_2, ""),
        if_none(tor.atom_id_3, ""),
        if_none(tor.atom_id_4, "")]
      a.dihedral.angle_ideal = if_none(tor.value_angle, 0)
      a.dihedral.weight = esd_as_weight(tor.value_angle_esd)
      a.dihedral.periodicity = if_none(tor.period, 0)
      a.dihedral.id = if_none(tor.id, "")
      alts.append(a)
    for chir in self.chir_list:
      a = geometry_restraints.motif_alteration(
        action="add", operand="chirality")
      a.motif_ids.append(str(if_none(chir.atom_centre_comp_id, "")))
      a.motif_ids.append(str(if_none(chir.atom_1_comp_id, "")))
      a.motif_ids.append(str(if_none(chir.atom_2_comp_id, "")))
      a.motif_ids.append(str(if_none(chir.atom_3_comp_id, "")))
      a.chirality.atom_names = [
        if_none(chir.atom_id_centre, ""),
        if_none(chir.atom_id_1, ""),
        if_none(chir.atom_id_2, ""),
        if_none(chir.atom_id_3, "")]
      a.chirality.volume_sign = if_none(chir.volume_sign, 0)
      a.chirality.id = if_none(chir.id, "")
      alts.append(a)
    for plane in self.get_planes():
      a = geometry_restraints.motif_alteration(
        action="add", operand="planarity")
      for plane_atom in plane.plane_atoms:
        if (plane_atom.atom_comp_id is None):
          a.motif_ids.append("")
        else:
          a.motif_ids.append(str(plane_atom.atom_comp_id))
      a.planarity.atom_names = flex.std_string([if_none(plane_atom.atom_id, "")
        for plane_atom in plane.plane_atoms])
      a.planarity.weights = flex.double([esd_as_weight(plane_atom.dist_esd)
        for plane_atom in plane.plane_atoms])
      a.planarity.id = plane.plane_id
      alts.append(a)
    result.set_alterations(alts)
    return result

class chem_link(looped_data):
  """
_chem_link.id
_chem_link.comp_id_1
_chem_link.mod_id_1
_chem_link.group_comp_1
_chem_link.comp_id_2
_chem_link.mod_id_2
_chem_link.group_comp_2
_chem_link.name
  """

class chem_link_bond(looped_data):
  """
_chem_link_bond.atom_1_comp_id:int
_chem_link_bond.atom_id_1
_chem_link_bond.atom_2_comp_id:int
_chem_link_bond.atom_id_2
_chem_link_bond.type
_chem_link_bond.value_dist:float
_chem_link_bond.value_dist_esd:float
  """

class chem_link_angle(looped_data):
  """
_chem_link_angle.atom_1_comp_id:int
_chem_link_angle.atom_id_1
_chem_link_angle.atom_2_comp_id:int
_chem_link_angle.atom_id_2
_chem_link_angle.atom_3_comp_id:int
_chem_link_angle.atom_id_3
_chem_link_angle.value_angle:float
_chem_link_angle.value_angle_esd:float
  """

class chem_link_tor(looped_data):
  """
_chem_link_tor.id
_chem_link_tor.atom_1_comp_id:int
_chem_link_tor.atom_id_1
_chem_link_tor.atom_2_comp_id:int
_chem_link_tor.atom_id_2
_chem_link_tor.atom_3_comp_id:int
_chem_link_tor.atom_id_3
_chem_link_tor.atom_4_comp_id:int
_chem_link_tor.atom_id_4
_chem_link_tor.value_angle:float
_chem_link_tor.alt_value_angle
_chem_link_tor.value_angle_esd:float
_chem_link_tor.period:int
  """

class chem_link_chir(looped_data):
  """
_chem_link_chir.id
_chem_link_chir.atom_centre_comp_id:int
_chem_link_chir.atom_id_centre
_chem_link_chir.atom_1_comp_id:int
_chem_link_chir.atom_id_1
_chem_link_chir.atom_2_comp_id:int
_chem_link_chir.atom_id_2
_chem_link_chir.atom_3_comp_id:int
_chem_link_chir.atom_id_3
_chem_link_chir.volume_sign
  """

class chem_link_plane(looped_data):
  """
_chem_link_plane.plane_id
_chem_link_plane.atom_comp_id:int
_chem_link_plane.atom_id
_chem_link_plane.dist_esd:float
  """

class mod_mod_id:

  def __init__(self, source_info, chem_mod):
    self.source_info = source_info
    self.chem_mod = chem_mod
    self.atom_list = []
    self.bond_list = []
    self.angle_list = []
    self.tor_list = []
    self.chir_list = []
    self.plane_atom_list = []

  def get_planes(self):
    return group_planes(self.plane_atom_list)

  def show(self, f=None):
    if (f is None): f = sys.stdout
    show_loop(data_list=self.atom_list, f=f)
    show_loop(data_list=self.bond_list, f=f)

  def as_geometry_restraints_motif_manipulation(self):
    result = geometry_restraints.motif_manipulation()
    result.id = if_none(self.chem_mod.id, "")
    result.description = if_none(self.chem_mod.name, "")
    if (self.source_info is not None):
      result.info.append(self.source_info)
    alts = []
    for atom in self.atom_list:
      a = geometry_restraints.motif_alteration(
        action=if_none(atom.function, ""), operand="atom")
      a.motif_ids.append("")
      if (a.action != "add"):
        a.motif_atom_name = if_none(atom.atom_id, "")
      a.atom.name = if_none(atom.new_atom_id, "")
      a.atom.scattering_type = if_none(atom.new_type_symbol, "")
      a.atom.nonbonded_type = if_none(atom.new_type_energy, "")
      a.atom.partial_charge = if_none(atom.new_partial_charge, 0)
      if (a.action == "change"):
        a.set_change_partial_charge(state=atom.new_partial_charge is not None)
      alts.append(a)
    for bond in self.bond_list:
      a = geometry_restraints.motif_alteration(
        action=if_none(bond.function, ""), operand="bond")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.bond.atom_names = [
        if_none(bond.atom_id_1, ""),
        if_none(bond.atom_id_2, "")]
      a.bond.type = if_none(bond.new_type, "")
      a.bond.distance_ideal = if_none(bond.new_value_dist, 0)
      a.bond.weight = esd_as_weight(bond.new_value_dist_esd)
      if (a.action == "change"):
        a.set_change_distance_ideal(state=bond.new_value_dist is not None)
        a.set_change_weight(state=bond.new_value_dist_esd is not None)
      alts.append(a)
    for angle in self.angle_list:
      a = geometry_restraints.motif_alteration(
        action=if_none(bond.function, ""), operand="angle")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.angle.atom_names = [
        if_none(angle.atom_id_1, ""),
        if_none(angle.atom_id_2, ""),
        if_none(angle.atom_id_3, "")]
      a.angle.angle_ideal = if_none(angle.new_value_angle, 0)
      a.angle.weight = esd_as_weight(angle.new_value_angle_esd)
      if (a.action == "change"):
        a.set_change_angle_ideal(state=angle.new_value_angle is not None)
        a.set_change_weight(state=angle.new_value_angle_esd is not None)
      alts.append(a)
    for tor in self.tor_list:
      a = geometry_restraints.motif_alteration(
        action=if_none(tor.function, ""), operand="dihedral")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.dihedral.atom_names = [
        if_none(tor.atom_id_1, ""),
        if_none(tor.atom_id_2, ""),
        if_none(tor.atom_id_3, ""),
        if_none(tor.atom_id_4, "")]
      a.dihedral.angle_ideal = if_none(tor.new_value_angle, 0)
      a.dihedral.weight = esd_as_weight(tor.new_value_angle_esd)
      a.dihedral.periodicity = if_none(tor.new_period, 0)
      a.dihedral.id = if_none(tor.id, "")
      if (a.action == "change"):
        a.set_change_angle_ideal(state=tor.new_value_angle is not None)
        a.set_change_weight(state=tor.new_value_angle_esd is not None)
        a.set_change_periodicity(state=tor.new_period is not None)
      alts.append(a)
    for chir in self.chir_list:
      a = geometry_restraints.motif_alteration(
        action=if_none(chir.function, ""), operand="chirality")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.motif_ids.append("")
      a.chirality.atom_names = [
        if_none(chir.atom_id_centre, ""),
        if_none(chir.atom_id_1, ""),
        if_none(chir.atom_id_2, ""),
        if_none(chir.atom_id_3, "")]
      a.chirality.volume_sign = if_none(chir.new_volume_sign, 0)
      a.chirality.id = if_none(chir.id, "")
      alts.append(a)
    for plane in self.get_planes():
      a = geometry_restraints.motif_alteration(
        action="change", operand="planarity")
      a.motif_ids.resize(len(plane.plane_atoms))
      a.set_planarity_atom_actions([if_none(plane_atom.function, "")
        for plane_atom in plane.plane_atoms])
      a.planarity.atom_names = flex.std_string([if_none(plane_atom.atom_id, "")
        for plane_atom in plane.plane_atoms])
      a.planarity.weights = flex.double([esd_as_weight(plane_atom.new_dist_esd)
        for plane_atom in plane.plane_atoms])
      a.planarity.id = plane.plane_id
      alts.append(a)
    result.set_alterations(alts)
    return result

class chem_mod(looped_data):
  """
_chem_mod.id
_chem_mod.name
_chem_mod.comp_id
_chem_mod.group_id
  """

class chem_mod_atom(looped_data):
  """
_chem_mod_atom.function
_chem_mod_atom.atom_id
_chem_mod_atom.new_atom_id
_chem_mod_atom.new_type_symbol
_chem_mod_atom.new_type_energy
_chem_mod_atom.new_partial_charge:float
  """

  def as_chem_comp(self):
    return chem_comp_atom(
      atom_id=self.new_atom_id,
      type_symbol=self.new_type_symbol,
      type_energy=self.new_type_energy,
      partial_charge=self.new_partial_charge)

def new_if_defined(old, new):
  if (new is None): return old
  if (new == ""): return old
  return new

class chem_mod_bond(looped_data):
  """
_chem_mod_bond.function
_chem_mod_bond.atom_id_1
_chem_mod_bond.atom_id_2
_chem_mod_bond.new_type
_chem_mod_bond.new_value_dist:float
_chem_mod_bond.new_value_dist_esd:float
_chem_mod_bond.new_value_dist_neutron:float
  """

  def as_chem_comp(self):
    return chem_comp_bond(
      atom_id_1=self.atom_id_1,
      atom_id_2=self.atom_id_2,
      type=self.new_type,
      value_dist=self.new_value_dist,
      value_dist_esd=self.new_value_dist_esd,
      value_dist_neutron=self.new_value_dist_neutron)

  def is_matching_mod_for(self, bond):
    return (    self.atom_id_1 == bond.atom_id_1
            and self.atom_id_2 == bond.atom_id_2) \
        or (    self.atom_id_1 == bond.atom_id_2
            and self.atom_id_2 == bond.atom_id_1)

  def apply_change_in_place(self, bond):
    bond.type = new_if_defined(
      bond.type, self.new_type)
    bond.value_dist = new_if_defined(
      bond.value_dist, self.new_value_dist)
    bond.value_dist_esd = new_if_defined(
      bond.value_dist_esd, self.new_value_dist_esd)
    bond.value_dist_neutron = new_if_defined(
      bond.value_dist_neutron, self.new_value_dist_neutron)

class chem_mod_tree(looped_data):
  """
_chem_mod_tree.function
_chem_mod_tree.atom_id
_chem_mod_tree.atom_back
_chem_mod_tree.back_type
_chem_mod_tree.atom_forward
_chem_mod_tree.connect_type
  """

  def as_chem_comp(self):
    return chem_comp_tree(
      atom_id=self.atom_id,
      atom_back=self.atom_back,
      atom_forward=self.atom_forward,
      connect_type=self.connect_type)

  def is_matching_mod_for(self, tree_entry):
    return     self.atom_id == tree_entry.atom_id \
           and self.atom_back == tree_entry.atom_back \
           and self.atom_forward == tree_entry.atom_forward

  def apply_change_in_place(self, tree_entry):
    tree_entry.connect_type = new_if_defined(
      tree_entry.connect_type, self.connect_type)

class chem_mod_angle(looped_data):
  """
_chem_mod_angle.function
_chem_mod_angle.atom_id_1
_chem_mod_angle.atom_id_2
_chem_mod_angle.atom_id_3
_chem_mod_angle.new_value_angle:float
_chem_mod_angle.new_value_angle_esd:float
  """

  def as_chem_comp(self):
    return chem_comp_angle(
      atom_id_1=self.atom_id_1,
      atom_id_2=self.atom_id_2,
      atom_id_3=self.atom_id_3,
      value_angle=self.new_value_angle,
      value_angle_esd=self.new_value_angle_esd)

  def is_matching_mod_for(self, angle):
    if (self.atom_id_2 != angle.atom_id_2): return False
    return (    self.atom_id_1 == angle.atom_id_1
            and self.atom_id_3 == angle.atom_id_3) \
        or (    self.atom_id_1 == angle.atom_id_3
            and self.atom_id_3 == angle.atom_id_1)

  def apply_change_in_place(self, angle):
    angle.value_angle = new_if_defined(
      angle.value_angle, self.new_value_angle)
    angle.value_angle_esd = new_if_defined(
      angle.value_angle_esd, self.new_value_angle_esd)

class chem_mod_tor(looped_data):
  """
_chem_mod_tor.function
_chem_mod_tor.id
_chem_mod_tor.atom_id_1
_chem_mod_tor.atom_id_2
_chem_mod_tor.atom_id_3
_chem_mod_tor.atom_id_4
_chem_mod_tor.new_value_angle:float
_chem_mod_tor.new_alt_value_angle
_chem_mod_tor.new_value_angle_esd:float
_chem_mod_tor.new_period:int
  """

  def as_chem_comp(self):
    return chem_comp_tor(
      id=self.id,
      atom_id_1=self.atom_id_1,
      atom_id_2=self.atom_id_2,
      atom_id_3=self.atom_id_3,
      atom_id_4=self.atom_id_4,
      value_angle=self.new_value_angle,
      alt_value_angle=self.new_alt_value_angle,
      value_angle_esd=self.new_value_angle_esd,
      period=self.new_period)

  def is_matching_mod_for(self, tor):
    return     self.atom_id_1 == tor.atom_id_1 \
           and self.atom_id_2 == tor.atom_id_2 \
           and self.atom_id_3 == tor.atom_id_3 \
           and self.atom_id_4 == tor.atom_id_4

  def apply_change_in_place(self, tor):
    tor.value_angle = new_if_defined(
      tor.value_angle, self.new_value_angle)
    tor.alt_value_angle = new_if_defined(
      tor.alt_value_angle, self.new_alt_value_angle)
    tor.value_angle_esd = new_if_defined(
      tor.value_angle_esd, self.new_value_angle_esd)
    tor.period = new_if_defined(
      tor.period, self.new_period)

class chem_mod_chir(looped_data):
  """
_chem_mod_chir.function
_chem_mod_chir.id
_chem_mod_chir.atom_id_centre
_chem_mod_chir.atom_id_1
_chem_mod_chir.atom_id_2
_chem_mod_chir.atom_id_3
_chem_mod_chir.new_volume_sign
  """

  def as_chem_comp(self):
    return chem_comp_chir(
      atom_id_centre=self.atom_id_centre,
      atom_id_1=self.atom_id_1,
      atom_id_2=self.atom_id_2,
      atom_id_3=self.atom_id_3,
      volume_sign=self.new_volume_sign)

  def is_matching_mod_for(self, chir):
    return     self.atom_id_centre == chir.atom_id_centre \
           and self.atom_id_1 == chir.atom_id_1 \
           and self.atom_id_2 == chir.atom_id_2 \
           and self.atom_id_3 == chir.atom_id_3

  def apply_change_in_place(self, chir):
    chir.volume_sign = new_if_defined(
      chir.volume_sign, self.new_volume_sign)

class chem_mod_plane_atom(looped_data):
  """
_chem_mod_plane_atom.function
_chem_mod_plane_atom.plane_id
_chem_mod_plane_atom.atom_id
_chem_mod_plane_atom.new_dist_esd:float
  """

  def as_chem_comp(self):
    return chem_comp_plane_atom(
      plane_id=self.plane_id,
      atom_id=self.atom_id,
      dist_esd=self.new_dist_esd)

  def is_matching_mod_for(self, plane_atom):
    return     self.plane_id == plane_atom.plane_id \
           and self.atom_id == plane_atom.atom_id

  def apply_change_in_place(self, plane_atom):
    plane_atom.dist_esd = new_if_defined(
      plane_atom.dist_esd, self.new_dist_esd)

class energy_lib_synonym(looped_data):
  """
_lib_synonym.atom_type
_lib_synonym.atom_alternative_type
  """

class energy_lib_atom(looped_data):
  """
_lib_atom.type
_lib_atom.weight:float
_lib_atom.hb_type
_lib_atom.vdw_radius:float
_lib_atom.vdwh_radius:float
_lib_atom.ion_radius:float
_lib_atom.element
_lib_atom.valency:int
_lib_atom.sp:int
_lib_atom.vdw_radius_neutron:float
  """

class energy_lib_vdw(looped_data):
  """
_lib_vdw.atom_type_1
_lib_vdw.atom_type_2
_lib_vdw.energy_min:float
_lib_vdw.radius_min:float
_lib_vdw.H_flag
  """


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/conformation_dependent_restraints.py
from __future__ import absolute_import, division, print_function
from cctbx import geometry_restraints
import libtbx.load_env
from six.moves import zip

if (not libtbx.env.has_module("conformation_dependent_geometry")):
  conformation_dependent_geometry = None
  is_available = False
else:
  import conformation_dependent_geometry.angles
  is_available = True

class pgd_server(object):
  def __init__(self):
    self.lib = conformation_dependent_geometry.angles.create_all_databases(
      conformation_dependent_geometry.angles.databases)
  def lookup(self, residue, next_residue, phi, psi):
    fields, geometry = conformation_dependent_geometry.angles.get_geometry(
                         dblist=self.lib,
                         residue=residue,
                         next_residue=next_residue,
                         phi=phi,
                         psi=psi)
    return geometry

if (not is_available):
  pgd_lib = None
else:
  pgd_lib = pgd_server()

class conformation_dependent_restraints(object):
  def __init__(self, residue_name, next_residue_name, conformation_proxies, i_phi_proxy, i_psi_proxy, i_dynamic_angles, i_dynamic_dihedrals):
    self.residue_name = residue_name
    self.next_residue_name = next_residue_name
    self.conformation_proxies = conformation_proxies
    self.i_phi_proxy = i_phi_proxy
    self.i_psi_proxy = i_psi_proxy
    self.i_dynamic_angles = i_dynamic_angles
    self.i_dynamic_dihedrals = i_dynamic_dihedrals

  def _get_dihedral(sites_cart, dihedral_proxies, i_proxy):
    if i_proxy is not None:
      # compute dihedral
        dihedral = geometry_restraints.dihedral(
                     sites_cart=sites_cart,
                     proxy=dihedral_proxies[i_proxy])
        return dihedral
    return None

  _get_dihedral = staticmethod(_get_dihedral)

  def _get_angle(sites_cart, angle_proxies, i_proxy):
    if i_proxy is not None:
      # compute angle
      angle = geometry_restraints.angle(
                sites_cart=sites_cart,
                proxy=angle_proxies[i_proxy])
      return angle
    return None

  _get_angle = staticmethod(_get_angle)

  def _get_average_and_weight(geometry, param_name):
    pgd_param_average_name = \
      conformation_dependent_geometry.angles.get_database_attribute_average_name(
      geometry_name=param_name)
    pgd_param_deviation_name = \
      conformation_dependent_geometry.angles.get_database_attribute_deviation_name(
      geometry_name=param_name)

    return getattr(geometry, pgd_param_average_name), \
           1/((getattr(geometry, pgd_param_deviation_name))**2)

  _get_average_and_weight = staticmethod(_get_average_and_weight)

  def update_restraints(self, sites_cart, dihedral_proxies, angle_proxies):
    if (1):
      from libtbx.utils import null_out
      log = null_out()
    else:
      import sys
      log = sys.stdout
    try:
      phi = self._get_dihedral(
                    sites_cart=sites_cart,
                    dihedral_proxies=self.conformation_proxies,
                    i_proxy=self.i_phi_proxy)
    except Exception: # XXX BAD
      phi = None
    try:
      psi = self._get_dihedral(
                    sites_cart=sites_cart,
                    dihedral_proxies=self.conformation_proxies,
                    i_proxy=self.i_psi_proxy)
    except Exception: # XXX BAD
      psi = None

    # Shows real dihedral value
    if phi is not None:
      print('phi', phi.angle_model, phi.delta, file=log)
    if psi is not None:
      print('psi', psi.angle_model, psi.delta, file=log)

    if phi is not None and psi is not None:

      # get restraint from our database here
      geometry = pgd_lib.lookup(
                   residue=self.residue_name,
                   next_residue=self.next_residue_name,
                   phi=phi.angle_model,
                   psi=psi.angle_model)

      # grab angles from our database
      # using zip() on i_dynamic_angles and our values
      # plug it into restraints in angle proxies
      angles = [self._get_angle(
                  sites_cart=sites_cart,
                  angle_proxies=angle_proxies,
                  i_proxy=i_proxy)
                for i_proxy in self.i_dynamic_angles]

      for angle, angle_name, i_proxy in zip(
                                          angles,
                                          conformation_dependent_geometry.angles.angle_names,
                                          self.i_dynamic_angles):
        # i_dynamic_angles contains None for angles/atoms that don't
        # exist so don't have restraints to update.
        if i_proxy is not None:

          new_angle_ideal, new_weight = \
                           self._get_average_and_weight(geometry, angle_name)

          # Create a new angle proxy here with our restraint
          new_angle_proxy = geometry_restraints.angle_proxy(
                              i_seqs=angle_proxies[i_proxy].i_seqs,
                              angle_ideal=new_angle_ideal,
                              weight=new_weight
                              )

          # Overwrite the old proxy
          angle_proxies[i_proxy] = new_angle_proxy

          # Show that we actually did update the proxy
          proxy = angle_proxies[i_proxy]
          print(self.residue_name, self.next_residue_name, end=' ', file=log)
          print(angle_name, proxy.i_seqs, proxy.angle_ideal, proxy.weight, file=log)

      # grab dihedrals from our database
      # using zip() on i_dynamic_dihedrals and our values
      # plug it into restraints in dihedral proxies
      dihedrals = [self._get_dihedral(
                  sites_cart=sites_cart,
                  dihedral_proxies=dihedral_proxies,
                  i_proxy=i_proxy)
                for i_proxy in self.i_dynamic_dihedrals]

      for dihedral, dihedral_name, i_proxy in zip(
                                          dihedrals,
                                          conformation_dependent_geometry.angles.dihedral_names,
                                          self.i_dynamic_dihedrals):
        # i_dynamic_dihedrals contains None for dihedrals/atoms that don't
        # exist so don't have restraints to update.
        if i_proxy is not None:

          new_angle_ideal, new_weight = \
                           self._get_average_and_weight(geometry, dihedral_name)

          new_angle_ideal = dihedral_proxies[i_proxy].angle_ideal
          new_weight = dihedral_proxies[i_proxy].weight

          # Create a new dihedral proxy here with our restraint
          new_dihedral_proxy = geometry_restraints.dihedral_proxy(
                              i_seqs=dihedral_proxies[i_proxy].i_seqs,
                              angle_ideal=new_angle_ideal,
                              weight=new_weight
                              )

          # Overwrite the old proxy
          dihedral_proxies[i_proxy] = new_dihedral_proxy

          # Show that we actually did update the proxy
          proxy = dihedral_proxies[i_proxy]
          print(self.residue_name, self.next_residue_name, end=' ', file=log)
          print(dihedral_name, proxy.i_seqs, proxy.angle_ideal, proxy.weight, file=log)

def build_conformation_dependent_angle_proxies(
      angle_proxy_registry,
      dihedral_proxy_registry,
      monomer_mappings,
      connectivity_i_j,
      connectivity_j_k,
      sites_cart):
  """
  Sets up conformation_dependent_restraints object.

  Finds atom indexes from registries

  Looks for C_prev in m_i, most atoms in m_j, N_next in m_k.
  """
  assert len(monomer_mappings) == 3

  if monomer_mappings[1] is None:
    residue_name = None
  else:
    residue_name = monomer_mappings[1].residue_name

  if monomer_mappings[2] is None:
    next_residue_name = None
  else:
    next_residue_name = monomer_mappings[2].residue_name

  dihedral_i_proxies = []
  conformation_proxies = geometry_restraints.shared_dihedral_proxy()
  for dihedral_number, dihedral_definition in enumerate(conformation_dependent_geometry.angles.dihedral_atoms):
    i_seqs = []
    for residue_index, atom_name in dihedral_definition:
      mm=monomer_mappings[residue_index]
      if mm is not None:
        i_seqs.append(getattr(mm.expected_atoms.get(atom_name), "i_seq", None))
    # account for missing atoms
    if len(i_seqs) == 4 and i_seqs.count(None) == 0:
      if dihedral_number == 0:
        # phi/psi: Restraints don't matter, we throw them away. This is just
        # so we can get eventually get the current value.
        phi = geometry_restraints.dihedral_proxy(
                i_seqs=i_seqs,
                angle_ideal=60.0,
                weight=1/20.0**2,
                periodicity=3
                )
        conformation_proxies.append(phi)
        dihedral_i_proxies.append(None)
        i_phi_proxy = 0
      elif dihedral_number == 1:
        psi = geometry_restraints.dihedral_proxy(
                i_seqs=i_seqs,
                angle_ideal=160.0,
                weight=1/30.0**2,
                periodicity=3
                )
        conformation_proxies.append(psi)
        dihedral_i_proxies.append(None)
        i_psi_proxy = 1
      elif dihedral_number == 2:
        # omega
        dihedral_i_proxy, dihedral_sign = dihedral_proxy_registry.lookup_i_proxy(i_seqs)
        dihedral_i_proxies.append(dihedral_i_proxy)
      else:
        pass
    # we're on a dihedral with missing length or atoms that are None
    else:
      if dihedral_number == 0:
        i_phi_proxy = None
      elif dihedral_number == 1:
        i_psi_proxy = None
      elif dihedral_number == 2:
        dihedral_i_proxies.append(None)
      else:
        pass

  angle_i_proxies = []
  for angle_definition in conformation_dependent_geometry.angles.angle_atoms:
    i_seqs = []
    for residue_index, atom_name in angle_definition:
      mm=monomer_mappings[residue_index]
      if mm is not None:
        i_seqs.append(getattr(mm.expected_atoms.get(atom_name), "i_seq", None))
    # account for missing atoms

    if len(i_seqs) == 3 and i_seqs.count(None) == 0:
      # go into angle_proxy_registry
      angle_i_proxy = angle_proxy_registry.lookup_i_proxy(i_seqs)
      angle_i_proxies.append(angle_i_proxy)
    else:
      # By filling in None for blanks, we can assume the lengths are equal
      # here and other places angle_atoms/angle_names are used
      angle_i_proxies.append(None)

  cfd = conformation_dependent_restraints(
          residue_name=residue_name,
          next_residue_name=next_residue_name,
          conformation_proxies=conformation_proxies,
          i_phi_proxy=i_phi_proxy,
          i_psi_proxy=i_psi_proxy,
          i_dynamic_angles=angle_i_proxies,
          i_dynamic_dihedrals=dihedral_i_proxies
          )

  return cfd


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/conv_v2_v3.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb
from libtbx.str_utils import split_keeping_spaces
import sys
import six

trans_dict = {}
for k,v in six.iteritems(iotbx.pdb.rna_dna_atom_names_reference_to_mon_lib_translation_dict):
  trans_dict[k.strip()] = v
trans_dict["H2'"] = "H2*"

def trans_field(flds, i):
  v3 = flds[i]
  v2 = trans_dict[v3]
  flds[i] = v2
  if (i+1 < len(flds)):
    l = len(flds[i+1])
    d = len(v2) - len(v3)
    assert l > d
    flds[i+1] = " " * (l-d)

def iter_until_loop(lines):
  for line in lines:
    if (   line.startswith("#")
        or line == "loop_"):
      print(line)
      return
    yield line

def rename_generic(lines, len_flds, i_list):
  for line in iter_until_loop(lines):
    flds = split_keeping_spaces(line)
    assert len(flds) == len_flds
    for i in i_list:
      trans_field(flds, i)
    print("".join(flds))

def rename_atom(lines):
  rename_generic(lines, 10, [3])

def rename_tree(lines):
  for line in iter_until_loop(lines):
    flds = split_keeping_spaces(line)
    assert len(flds) == 10
    for i in [3, 5, 7, 9]:
      if (flds[i] not in ["n/a", "START", "ADD", "END", "."]):
        trans_field(flds, i)
    print("".join(flds))

def rename_bond(lines):
  rename_generic(lines, 12, [3, 5])

def rename_angle(lines):
  rename_generic(lines, 12, [3, 5, 7])

def rename_tor(lines):
  rename_generic(lines, 18, [5, 7, 9, 11])

def rename_chir(lines):
  rename_generic(lines, 14, [5, 7, 9, 11])

def rename_plan(lines):
  rename_generic(lines, 8, [5])

def rename_link_bond(lines):
  rename_generic(lines, 16, [5, 9])

def rename_link_angle(lines):
  rename_generic(lines, 18, [5, 9, 13])

def rename_link_tor(lines):
  rename_generic(lines, 26, [7, 11, 15, 19])

def run(args):
  assert len(args) == 1
  lines = iter(open(args[0]).read().splitlines())
  for line in lines:
    print(line)
    if (line == "_chem_comp_atom.partial_charge"):
      rename_atom(lines)
    elif (line == "_chem_comp_tree.connect_type"):
      rename_tree(lines)
    elif (line == "_chem_comp_bond.value_dist_esd"):
      rename_bond(lines)
    elif (line == "_chem_comp_angle.value_angle_esd"):
      rename_angle(lines)
    elif (line == "_chem_comp_tor.period"):
      rename_tor(lines)
    elif (line == "_chem_comp_chir.volume_sign"):
      rename_chir(lines)
    elif (line == "_chem_comp_plane_atom.dist_esd"):
      rename_plan(lines)
    #
    elif (line == "_chem_link_bond.value_dist_esd"):
      rename_link_bond(lines)
    elif (line == "_chem_link_angle.value_angle_esd"):
      rename_link_angle(lines)
    elif (line == "_chem_link_tor.period"):
      rename_link_tor(lines)
    elif (line == "_chem_link_chir.volume_sign"):
      raise RuntimeError("Not implemented.")
    elif (line == "_chem_link_plane.dist_esd"):
      raise RuntimeError("Not implemented.")

if (__name__ == "__main__"):
  run(args=sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/correct_hydrogen_geometries.py
from __future__ import absolute_import, division, print_function
from six.moves import zip

def get_bad_hydrogen_i_seqs(hierarchy,
                            restraints_manager=None,
                            xray_structure=None,
                            sites_cart=None,
                            verbose=False,
                            ):
  from cctbx import geometry

  def get_bonded(atom_group, atom, exclude=[]): # slow
    min_d2=1000
    min_atom=None
    for atom1 in atom_group.atoms():
      if atom1.name.strip()==atom.name.strip(): continue
      process=False
      for atom2 in exclude:
        if atom1.name.strip()==atom2.name.strip():
          break
      else:
        process=True
      if not process: continue
      if(atom.element.strip() in ["H", "D", "T"] and
         atom1.element.strip() in ["H", "D", "T"]
         ): continue
      d2 = (atom.xyz[0]-atom1.xyz[0])**2
      d2 += (atom.xyz[1]-atom1.xyz[1])**2
      d2 += (atom.xyz[2]-atom1.xyz[2])**2
      if d2<min_d2:
        min_d2=d2
        min_atom=atom1
    if min_atom:
      return [min_atom]
    else:
      return []

  def get_angles(atom_group, atom, verbose=False):
    bad_hydrogen_count = 0
    corrected_hydrogen_count = []
    bonded = get_bonded(atom_group, atom)
    if not bonded:
      bad_hydrogen_count+=1
      if verbose: print('not bonded: %s' % atom.format_atom_record())
      return bad_hydrogen_count, corrected_hydrogen_count
    for ba in bonded:
      angled = get_bonded(atom_group, ba, exclude=[atom])
    if not angled:
      bad_hydrogen_count+=1
      if verbose: print('not angled: %s' % atom.format_atom_record())
      return bad_hydrogen_count, corrected_hydrogen_count
    if angled[0].element.strip() in ["H", "D", "T"]:
      return bad_hydrogen_count, corrected_hydrogen_count
    try: angle = geometry.angle((atom.xyz,ba.xyz,angled[0].xyz)).angle_model
    except Exception:
      print('  Bad angle "%s"' % (atom.format_atom_record()[:26]))
      bad_hydrogen_count +=1
      return bad_hydrogen_count, corrected_hydrogen_count
    if angle<85.:
      xyz=[0,0,0]
      xyz[0] = ba.xyz[0]*2-atom.xyz[0]
      xyz[1] = ba.xyz[1]*2-atom.xyz[1]
      xyz[2] = ba.xyz[2]*2-atom.xyz[2]
      angle = geometry.angle((xyz,ba.xyz,angled[0].xyz)).angle_model
      if angle>95.:
        atom.xyz = tuple(xyz)
        if verbose: print('  Inverted "%s" ' % (atom.format_atom_record()[:26]))
        corrected_hydrogen_count.append(atom.i_seq)
    return bad_hydrogen_count, corrected_hydrogen_count

  def get_i_seqs(hierarchy):
    bad_hydrogen_count=0
    corrected_hydrogen_count=[]
    for model in hierarchy.models():
      for chain in model.chains():
        for residue_group in chain.residue_groups():
          #if len(residue_group.atom_groups())>1: continue
          for atom_group_i, atom_group in enumerate(residue_group.atom_groups()):
            for i, atom in enumerate(atom_group.atoms()):
              if atom.element.strip() in ["H", "D", "T"]:
                rc = get_angles(atom_group, atom, verbose=verbose)
                bad_hydrogen_count += rc[0]
                corrected_hydrogen_count += rc[1]
    return corrected_hydrogen_count, None

  def get_i_seqs_from_restraints_manager(
      hierarchy,
      restraints_manager,
      xray_structure = None,
      sites_cart = None,
      ):
    if sites_cart is None and xray_structure:
      sites_cart = xray_structure.sites_cart()
    if sites_cart is None:
      xray_structure = hierarchy.extract_xray_structure()
      sites_cart = xray_structure.sites_cart()

    i_seqs=[]
    xyzs=[]
    angle_proxies_simple = restraints_manager.geometry.angle_proxies
    atoms = hierarchy.atoms()
    for proxy in angle_proxies_simple:
      i_seq, j_seq, k_seq = proxy.i_seqs
      if(atoms[i_seq].element.strip() in ["H", "D"] or
         atoms[k_seq].element.strip() in ["H", "D"]
         ):
        if(atoms[i_seq].element.strip() in ["H", "D"] and
           atoms[k_seq].element.strip() in ["H", "D"]
           ):
          continue
        if(atoms[i_seq].element.strip() in ["H", "D"]):
          i_h = i_seq
          site_i = sites_cart[i_seq]
          site_k = sites_cart[k_seq]
        else:
          i_h = k_seq
          site_i = sites_cart[k_seq]
          site_k = sites_cart[i_seq]
        site_j = sites_cart[j_seq]

        if i_h in i_seqs: continue

        angle = geometry.angle((site_i, site_j, site_k)).angle_model
        if angle<85.:
          xyz=[0,0,0]
          xyz[0] = site_j[0]*2-site_i[0]
          xyz[1] = site_j[1]*2-site_i[1]
          xyz[2] = site_j[2]*2-site_i[2]
          angle = geometry.angle((xyz, site_j, site_k)).angle_model
          if angle>95.:
            xyzs.append(tuple(xyz))
            i_seqs.append(i_h)
    return i_seqs, xyzs

  if restraints_manager:
    i_seqs, xyzs = get_i_seqs_from_restraints_manager(
      hierarchy,
      restraints_manager,
      xray_structure=xray_structure,
      sites_cart=sites_cart,
      )
  else:
    i_seqs, xyzs = get_i_seqs(hierarchy)
  return i_seqs, xyzs

def correct_hydrogen_geometries(hierarchy,
                                restraints_manager=None,
                                xray_structure=None,
                                sites_cart=None,
                                verbose=False,
                                ):
  assert xray_structure or sites_cart
  bad_hydrogen_count=0
  corrected_hydrogen_count=[]
  if len(hierarchy.models())>1:
    print("  \nModel files with more than one model are ignored\n")
    return bad_hydrogen_count, corrected_hydrogen_count

  i_seqs, xyzs = get_bad_hydrogen_i_seqs(hierarchy,
                                         restraints_manager=restraints_manager,
                                         xray_structure=xray_structure,
                                         sites_cart=sites_cart,
                                         )
  if xyzs is None:
    return 0, i_seqs
  assert len(i_seqs)==len(xyzs)
  if xray_structure:
    sites_cart = xray_structure.sites_cart()
  for i_seq, xyz in zip(i_seqs, xyzs):
    sites_cart[i_seq] = xyz
  if xray_structure:
    xray_structure.set_sites_cart(sites_cart)
  else:
    for i, atom in enumerate(hierarchy.atoms()):
      atom.xyz = sites_cart[i]
  corrected_hydrogen_count = i_seqs
  atoms = hierarchy.atoms()
  for i, i_seq in enumerate(corrected_hydrogen_count):
    corrected_hydrogen_count[i] = atoms[i_seq].id_str()
  return bad_hydrogen_count, corrected_hydrogen_count


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/geostd_utils.py
from __future__ import division

import iotbx
from mmtbx.ligands.hierarchy_utils import _new_atom

def get_as_hierarchy(filename):
  model = iotbx.cif.reader(filename).model()
  for key,block in model.items():
    if key=='comp_list':
      code=block.get_loop_or_row('_chem_comp')
      code=code.get('_chem_comp.id')[0]
      continue
    loop = block.get_loop_or_row('_chem_comp_atom')
    ag = iotbx.pdb.hierarchy.atom_group()
    ag.resname=code

    for j, tmp in enumerate(loop.iterrows()):
      xyz = (float(tmp.get('_chem_comp_atom.x')),
             float(tmp.get('_chem_comp_atom.y')),
             float(tmp.get('_chem_comp_atom.z')),
             )
      atom = _new_atom(tmp['_chem_comp_atom.atom_id'],
                       tmp['_chem_comp_atom.type_symbol'],
                       xyz,
                       1.,
                       20.,
                       True,
                       )
      # atom.set_serial(j+1)
      ag.append_atom(atom)
  rg = iotbx.pdb.hierarchy.residue_group()
  rg.resseq='   1'
  rg.append_atom_group(ag)
  chain = iotbx.pdb.hierarchy.chain()
  chain.id='A'
  chain.append_residue_group(rg)
  model = iotbx.pdb.hierarchy.model()
  model.append_chain(chain)
  ph = iotbx.pdb.hierarchy.root()
  ph.append_model(model)
  ph.reset_atom_i_seqs()
  return ph

def as_cif_object(filename):
  model = iotbx.cif.reader(filename).model()
  return model

def remove_atoms(cif_object, names):
  for s, b in cif_object.items():
    if s=='comp_list': continue
    for loop in b.iterloops():
      remove=[]
      for i, row in enumerate(loop.iterrows()):
        for key, item in row.items():
          if key.find('atom_id')>-1:
            if item in names:
              remove.append(i)
              break
      if remove:
        remove.reverse()
        for r in remove:
          loop.delete_row(r)

def remove_atoms_for_reduce(cif_object):
  for s, b in cif_object.items():
    for key, item in b.items():
      if key=='_chem_comp.group':
        assert len(item)==1
        if item[0] in ['RNA', 'DNA']:
          remove_atoms(cif_object, ["HO3'", 'HOP2'])
          return True
    assert 0



 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/glyco_chiral_values.py
from __future__ import absolute_import, division, print_function

volumes = {
  '0AT' :  -2.4,
  '0MK' :  -2.4,
  '0NZ' :   2.4,
  '0XY' :  -2.4,
  '0YT' :   3.1,
  '16G' :  -2.4,
  '1AR' :  -2.4,
  '1GL' :  -2.4,
  '1GN' :   2.4,
  '1NA' :   2.4,
  '1S3' :  -2.4,
  '27C' :  -2.5,
  '289' :  -2.4,
  '291' :  -2.4,
  '293' :  -2.4,
  '2DG' :  -2.4,
  '2F8' :  -2.4,
  '2FG' :   2.4,
  '2GL' :   2.4,
  '2M5' :  -2.4,
  '32O' :  -2.5,
  '34V' :   2.7,
  '3DO' :   2.4,
  '3DY' :  -2.4,
  '3FM' :  -2.4,
  '3MG' :   2.4,
  '46M' :   2.4,
  '48Z' :  -2.5,
  '50A' :  -2.5,
  '5GF' :   2.4,
  '64K' :  -2.4,
  '6LA' :   2.4,
  '7JZ' :   2.4,
  '8B9' :  -2.4,
  '8EX' :   2.4,
  'A1Q' :  -2.4,
  'A2G' :  -2.4,
  'AAL' :   2.4,
  'ABE' :  -2.4,
  'ABF' :   2.5,
  'ADA' :  -2.4,
  'ADG' :  -2.4,
  'AFD' :  -2.4,
  'AFL' :  -2.4,
  'AFO' :  -2.5,
  'AFP' :   2.7,
  'AGC' :  -2.4,
  'AGH' :  -2.4,
  'AGL' :  -2.4,
  'AHR' :   2.5,
  'AIG' :   2.4,
  'ALL' :   2.4,
  'ALX' :  -2.4,
  'AMU' :   2.4,
  'AOG' :   2.4,
  'ARA' :   2.4,
  'ARB' :  -2.4,
  'ARI' :   2.4,
  'ASG' :   2.4,
  'AXR' :  -2.6,
  'B16' :   2.4,
  'B6D' :   2.4,
  'B8D' :  -2.4,
  'B9D' :   2.4,
  'BBK' :  -3.1,
  'BDG' :  -2.4,
  'BDP' :   2.4,
  'BDR' :   2.5,
  'BEM' :   2.4,
  'BFP' :  -2.6,
  'BGC' :   2.4,
  'BGL' :   2.4,
  'BGP' :   2.4,
  'BGS' :   3.0,
  'BHG' :   2.4,
  'BM7' :   2.4,
  'BMA' :   2.4,
  'BMX' :  -2.4,
  'BNG' :   2.4,
  'BNX' :   2.4,
  'BOG' :   2.4,
  'BRI' :  -2.4,
  'BXF' :   2.4,
  'BXX' :   2.5,
  'BXY' :  -2.6,
  'CDR' :   2.4,
  'CEG' :   2.4,
  'D6G' :  -2.4,
  'DAG' :   2.4,
  'DDA' :   2.4,
  'DDB' :   2.4,
  'DDL' :   2.4,
  'DFR' :  -2.7,
  'DGC' :   2.4,
  'DGS' :  -2.4,
  'DLF' :   2.4,
  'DLG' :   2.4,
  'DR4' :   2.4,
  'DRI' :   2.4,
  'DSR' :   2.4,
  'DT6' :   2.4,
  'DVC' :   2.4,
  'E3M' :  -3.1,
  'E5G' :  -2.4,
  'EAG' :   2.4,
  'EBQ' :  -2.4,
  'EGA' :   2.4,
  'ERE' :   2.4,
  'ERI' :   2.4,
  'F1P' :  -2.6,
  'F1X' :  -2.6,
  'F6P' :  -2.6,
  'FBP' :  -2.6,
  'FCA' :  -2.4,
  'FCB' :   2.4,
  'FDP' :  -2.6,
  'FRU' :  -2.6,
  'FUB' :  -2.5,
  'FUC' :   2.4,
  'FUL' :  -2.4,
  'G16' :  -2.4,
  'G1P' :  -2.4,
  'G2F' :  -2.4,
  'G4D' :  -2.4,
  'G4S' :   2.3,
  'G6D' :  -2.4,
  'G6P' :  -2.4,
  'G6S' :   2.4,
  'G8Z' :  -2.4,
  'GAL' :   2.4,
  'GC4' :   2.4,
  'GCD' :   2.4,
  'GCN' :  -2.4,
  'GCS' :   2.4,
  'GCU' :  -2.4,
  'GCV' :  -2.4,
  'GCW' :   2.4,
  'GE1' :  -2.4,
  'GFP' :  -2.4,
  'GIV' :  -2.4,
  'GL0' :   2.4,
  'GLA' :  -2.4,
  'GLB' :   2.4,
  'GLC' :  -2.4,
  'GLD' :  -2.4,
  'GLP' :  -2.4,
  'GLT' :  -3.1,
  'GLW' :  -2.4,
  'GMH' :  -2.4,
  'GN1' :  -2.3,
  'GNX' :  -2.4,
  'GP1' :  -2.4,
  'GP4' :  -2.4,
  'GPH' :   2.4,
  'GQ1' :  -2.4,
  'GS1' :   3.0,
  'GS4' :   2.4,
  'GSA' :   2.4,
  'GSD' :   2.4,
  'GTK' :   2.5,
  'GTR' :   2.4,
  'GU0' :   2.4,
  'GU1' :   2.4,
  'GU2' :   2.3,
  'GU3' :  -2.4,
  'GU4' :  -2.4,
  'GU5' :  -2.4,
  'GU6' :  -2.4,
  'GU8' :   2.4,
  'GU9' :  -2.4,
  'GUF' :   2.4,
  'GUP' :   2.4,
  'GUZ' :  -2.4,
  'GXL' :   2.4,
  'GYG' :  -3.1,
  'GYP' :  -2.4,
  'H2P' :   2.6,
  'HSG' :   2.4,
  'HSH' :   2.4,
  'HSJ' :  -2.4,
  'HSQ' :   2.4,
  'HSR' :   2.4,
  'HSU' :   2.6,
  'HSX' :  -2.5,
  'HSY' :   2.4,
  'HSZ' :   2.4,
  'IDG' :  -2.4,
  'IDR' :   2.4,
  'IDS' :   2.4,
  'IDT' :   2.4,
  'IDU' :  -2.4,
  'IDX' :   2.4,
  'IDY' :   2.4,
  'IN1' :   2.4,
  'IPT' :   3.0,
  'ISL' :  -2.4,
  'J5B' :  -2.4,
  'JV4' :  -2.4,
  'KBG' :   2.4,
  'KDM' :   2.5,
  'L6S' :   2.4,
  'LAO' :   2.4,
  'LDY' :  -2.4,
  'LGU' :   2.4,
  'LVZ' :  -2.4,
  'LXB' :   2.4,
  'LXZ' :  -2.4,
  'M6P' :  -2.4,
  'M8C' :  -2.3,
  'MA1' :  -3.0,
  'MA2' :  -2.4,
  'MA3' :  -2.4,
  'MAG' :   2.4,
  'MAN' :  -2.4,
  'MAT' :   2.4,
  'MAV' :  -2.4,
  'MAW' :   2.4,
  'MBG' :   2.4,
  'MCU' :   2.4,
  'MDA' :   2.4,
  'MDP' :   2.4,
  'MFA' :   2.4,
  'MFB' :  -2.3,
  'MFU' :   2.4,
  'MG5' :   2.4,
  'MGA' :   2.4,
  'MGL' :   2.4,
  'MMA' :  -2.4,
  'MRP' :   2.4,
  'MXY' :  -2.4,
  'N1L' :   2.4,
  'NAA' :   2.4,
  'NAG' :   2.4,
  'NDG' :  -2.4,
  'NED' :  -2.4,
  'NG1' :  -2.4,
  'NG6' :   2.4,
  'NGA' :   2.4,
  'NGC' :   2.5,
  'NGE' :  -2.5,
  'NGL' :   2.4,
  'NGS' :   2.4,
  'NGY' :  -2.4,
  'NGZ' :   2.4,
  'NM6' :   2.4,
  'NM9' :   2.4,
  'OPM' :  -2.4,
  'ORP' :  -2.5,
  'P6P' :   2.7,
  'PRP' :  -2.5,
  'PSV' :   2.6,
  'R1P' :  -2.5,
  'RAA' :   2.4,
  'RAE' :   2.4,
  'RAM' :   2.4,
  'RAO' :   2.4,
  'RDP' :  -2.5,
  'RER' :   2.4,
  'RF5' :  -2.5,
  'RG1' :   2.4,
  'RGG' :   2.4,
  'RHA' :   2.4,
  'RIB' :  -2.5,
  'RIP' :   2.4,
  'RPA' :   2.4,
  'RST' :   2.4,
  'RUU' :  -2.6,
  'RWI' :  -2.4,
  'S7P' :  -2.6,
  'SF6' :  -2.6,
  'SF9' :   2.7,
  'SG4' :  -2.4,
  'SG5' :  -2.4,
  'SG6' :  -2.4,
  'SG7' :  -2.4,
  'SGA' :   2.4,
  'SGC' :   2.4,
  'SGD' :  -2.4,
  'SGN' :  -2.4,
  'SHB' :   2.4,
  'SHG' :   2.4,
  'SIZ' :   2.4,
  'SOE' :  -2.6,
  'SSG' :   3.0,
  'SUS' :  -2.2,
  'T6T' :   2.6,
  'TGK' :   2.6,
  'TGY' :   2.6,
  'TM9' :   2.4,
  'TMR' :   2.4,
  'TMX' :   2.4,
  'TOA' :  -2.4,
  'TOC' :  -2.4,
  'TYV' :  -2.4,
  'UDC' :  -2.4,
  'X0X' :   2.4,
  'X1X' :  -2.4,
  'X2F' :  -2.4,
  'X6X' :  -2.4,
  'XLF' :  -2.6,
  'XXM' :  -2.5,
  'XXR' :  -2.4,
  'XYP' :   2.4,
  'XYS' :  -2.4,
  'Z3Q' :   2.4,
  'Z4K' :  -2.4,
  'Z4S' :   2.6,
  'Z4Y' :  -2.4,
  'Z6H' :   2.4,
  'Z6J' :   2.5,
  'Z9M' :   2.4,
  'Z9N' :   2.7,
  # edited
  'SIA' :   2.5,
}
alpha_beta = {
  '0AT' : 'alpha',
  '0MK' : 'beta',
  '0NZ' : 'beta',
  '0XY' : 'beta',
  '0YT' : 'beta',
  '16G' : 'alpha',
  '1AR' : 'beta',
  '1GL' : 'alpha',
  '1GN' : 'beta',
  '1NA' : 'beta',
  '1S3' : 'alpha',
  '27C' : 'alpha',
  '289' : 'alpha',
  '291' : 'alpha',
  '293' : 'beta',
  '2DG' : 'alpha',
  '2F8' : 'alpha',
  '2FG' : 'beta',
  '2GL' : 'beta',
  '2M5' : 'alpha',
  '32O' : 'beta',
  '34V' : 'beta',
  '3DO' : 'beta',
  '3DY' : 'beta',
  '3FM' : 'alpha',
  '3MG' : 'beta',
  '46M' : 'beta',
  '48Z' : 'alpha',
  '50A' : 'alpha',
  '5GF' : 'beta',
  '64K' : 'alpha',
  '6LA' : 'beta',
  '7JZ' : 'beta',
  '8B9' : 'alpha',
  '8EX' : 'alpha',
  'A1Q' : 'alpha',
  'A2G' : 'alpha',
  'AAL' : 'alpha',
  'ABE' : 'alpha',
  'ABF' : 'beta',
  'ADA' : 'alpha',
  'ADG' : 'alpha',
  'AFD' : 'alpha',
  'AFL' : 'beta',
  'AFO' : 'alpha',
  'AFP' : 'alpha',
  'AGC' : 'alpha',
  'AGH' : 'alpha',
  'AGL' : 'alpha',
  'AHR' : 'alpha',
  'AIG' : 'beta',
  'ALL' : 'beta',
  'ALX' : 'alpha',
  'AMU' : 'beta',
  'AOG' : 'beta',
  'ARA' : 'alpha',
  'ARB' : 'beta',
  'ARI' : 'alpha',
  'ASG' : 'beta',
  'AXR' : 'alpha',
  'B16' : 'beta',
  'B6D' : 'beta',
  'B8D' : 'alpha',
  'B9D' : 'beta',
  'BBK' : 'alpha',
  'BDG' : 'alpha',
  'BDP' : 'beta',
  'BDR' : 'beta',
  'BEM' : 'beta',
  'BFP' : 'beta',
  'BGC' : 'beta',
  'BGL' : 'beta',
  'BGP' : 'beta',
  'BGS' : 'beta',
  'BHG' : 'beta',
  'BM7' : 'beta',
  'BMA' : 'beta',
  'BMX' : 'alpha',
  'BNG' : 'beta',
  'BNX' : 'beta',
  'BOG' : 'beta',
  'BRI' : 'alpha',
  'BXF' : 'beta',
  'BXX' : 'beta',
  'BXY' : 'alpha',
  'CDR' : 'alpha',
  'CEG' : 'beta',
  'D6G' : 'alpha',
  'DAG' : 'beta',
  'DDA' : 'beta',
  'DDB' : 'beta',
  'DDL' : 'beta',
  'DFR' : 'beta',
  'DGC' : 'alpha',
  'DGS' : 'alpha',
  'DLF' : 'alpha',
  'DLG' : 'beta',
  'DR4' : 'beta',
  'DRI' : 'beta',
  'DSR' : 'beta',
  'DT6' : 'beta',
  'DVC' : 'beta',
  'E3M' : 'alpha',
  'E5G' : 'alpha',
  'EAG' : 'beta',
  'EBQ' : 'beta',
  'EGA' : 'beta',
  'ERE' : 'alpha',
  'ERI' : 'alpha',
  'F1P' : 'beta',
  'F1X' : 'beta',
  'F6P' : 'beta',
  'FBP' : 'beta',
  'FCA' : 'alpha',
  'FCB' : 'beta',
  'FDP' : 'beta',
  'FRU' : 'beta',
  'FUB' : 'beta',
  'FUC' : 'alpha',
  'FUL' : 'beta',
  'G16' : 'alpha',
  'G1P' : 'alpha',
  'G2F' : 'alpha',
  'G4D' : 'alpha',
  'G4S' : 'beta',
  'G6D' : 'alpha',
  'G6P' : 'alpha',
  'G6S' : 'beta',
  'G8Z' : 'beta',
  'GAL' : 'beta',
  'GC4' : 'beta',
  'GCD' : 'alpha',
  'GCN' : 'alpha',
  'GCS' : 'beta',
  'GCU' : 'alpha',
  'GCV' : 'alpha',
  'GCW' : 'beta',
  'GE1' : 'alpha',
  'GFP' : 'alpha',
  'GIV' : 'beta',
  'GL0' : 'beta',
  'GLA' : 'alpha',
  'GLB' : 'beta',
  'GLC' : 'alpha',
  'GLD' : 'alpha',
  'GLP' : 'alpha',
  'GLT' : 'alpha',
  'GLW' : 'alpha',
  'GMH' : 'alpha',
  'GN1' : 'alpha',
  'GNX' : 'alpha',
  'GP1' : 'alpha',
  'GP4' : 'alpha',
  'GPH' : 'beta',
  'GQ1' : 'alpha',
  'GS1' : 'beta',
  'GS4' : 'beta',
  'GSA' : 'beta',
  'GSD' : 'beta',
  'GTK' : 'beta',
  'GTR' : 'beta',
  'GU0' : 'beta',
  'GU1' : 'beta',
  'GU2' : 'alpha',
  'GU3' : 'alpha',
  'GU4' : 'alpha',
  'GU5' : 'alpha',
  'GU6' : 'alpha',
  'GU8' : 'beta',
  'GU9' : 'alpha',
  'GUF' : 'beta',
  'GUP' : 'alpha',
  'GUZ' : 'alpha',
  'GXL' : 'alpha',
  'GYG' : 'alpha',
  'GYP' : 'alpha',
  'H2P' : 'alpha',
  'HSG' : 'alpha',
  'HSH' : 'beta',
  'HSJ' : 'beta',
  'HSQ' : 'alpha',
  'HSR' : 'beta',
  'HSU' : 'beta',
  'HSX' : 'alpha',
  'HSY' : 'alpha',
  'HSZ' : 'beta',
  'IDG' : 'beta',
  'IDR' : 'alpha',
  'IDS' : 'alpha',
  'IDT' : 'alpha',
  'IDU' : 'beta',
  'IDX' : 'alpha',
  'IDY' : 'alpha',
  'IN1' : 'beta',
  'IPT' : 'beta',
  'ISL' : 'alpha',
  'J5B' : 'beta',
  'JV4' : 'alpha',
  'KBG' : 'beta',
  'KDM' : 'alpha',
  'L6S' : 'alpha',
  'LAO' : 'alpha',
  'LDY' : 'alpha',
  'LGU' : 'alpha',
  'LVZ' : 'alpha',
  'LXB' : 'beta',
  'LXZ' : 'alpha',
  'M6P' : 'alpha',
  'M8C' : 'alpha',
  'MA1' : 'alpha',
  'MA2' : 'alpha',
  'MA3' : 'alpha',
  'MAG' : 'beta',
  'MAN' : 'alpha',
  'MAT' : 'alpha',
  'MAV' : 'alpha',
  'MAW' : 'alpha',
  'MBG' : 'beta',
  'MCU' : 'beta',
  'MDA' : 'beta',
  'MDP' : 'alpha',
  'MFA' : 'alpha',
  'MFB' : 'beta',
  'MFU' : 'alpha',
  'MG5' : 'beta',
  'MGA' : 'beta',
  'MGL' : 'beta',
  'MMA' : 'alpha',
  'MRP' : 'alpha',
  'MXY' : 'beta',
  'N1L' : 'beta',
  'NAA' : 'beta',
  'NAG' : 'beta',
  'NDG' : 'alpha',
  'NED' : 'beta',
  'NG1' : 'alpha',
  'NG6' : 'beta',
  'NGA' : 'beta',
  'NGC' : 'alpha',
  'NGE' : 'beta',
  'NGL' : 'beta',
  'NGS' : 'beta',
  'NGY' : 'alpha',
  'NGZ' : 'alpha',
  'NM6' : 'beta',
  'NM9' : 'beta',
  'OPM' : 'alpha',
  'ORP' : 'alpha',
  'P6P' : 'alpha',
  'PRP' : 'alpha',
  'PSV' : 'alpha',
  'R1P' : 'alpha',
  'RAA' : 'alpha',
  'RAE' : 'alpha',
  'RAM' : 'alpha',
  'RAO' : 'alpha',
  'RDP' : 'alpha',
  'RER' : 'alpha',
  'RF5' : 'alpha',
  'RG1' : 'beta',
  'RGG' : 'beta',
  'RHA' : 'alpha',
  'RIB' : 'alpha',
  'RIP' : 'beta',
  'RPA' : 'beta',
  'RST' : 'alpha',
  'RUU' : 'alpha',
  'RWI' : 'alpha',
  'S7P' : 'beta',
  'SF6' : 'alpha',
  'SF9' : 'beta',
  'SG4' : 'alpha',
  'SG5' : 'alpha',
  'SG6' : 'alpha',
  'SG7' : 'alpha',
  'SGA' : 'beta',
  'SGC' : 'beta',
  'SGD' : 'alpha',
  'SGN' : 'alpha',
  'SHB' : 'beta',
  'SHG' : 'beta',
  'SIZ' : 'alpha',
  'SOE' : 'alpha',
  'SSG' : 'beta',
  'SUS' : 'alpha',
  'T6T' : 'alpha',
  'TGK' : 'beta',
  'TGY' : 'alpha',
  'TM9' : 'alpha',
  'TMR' : 'beta',
  'TMX' : 'beta',
  'TOA' : 'alpha',
  'TOC' : 'alpha',
  'TYV' : 'alpha',
  'UDC' : 'alpha',
  'X0X' : 'beta',
  'X1X' : 'alpha',
  'X2F' : 'alpha',
  'X6X' : 'alpha',
  'XLF' : 'beta',
  'XXM' : 'beta',
  'XXR' : 'alpha',
  'XYP' : 'beta',
  'XYS' : 'alpha',
  'Z3Q' : 'beta',
  'Z4K' : 'alpha',
  'Z4S' : 'alpha',
  'Z4Y' : 'alpha',
  'Z6H' : 'alpha',
  'Z6J' : 'alpha',
  'Z9M' : 'beta',
  'Z9N' : 'alpha',
  # edited
  'SIA' : 'alpha',
}

if __name__=="__main__":
  for code in ["MAN",
               "BMA",
               "NAG",
               "FUL",
               "FUC",
               'SIA',
              ]:
    print(code, alpha_beta.get(code, None),volumes.get(code, None))


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/glyco_utils.py
from __future__ import absolute_import, division, print_function
from string import digits
from cctbx import geometry_restraints
from libtbx.utils import Sorry
from six.moves import range

beta_1_4 = """
data_link_BETA1-4
loop_
_chem_link_bond.link_id
_chem_link_bond.atom_1_comp_id
_chem_link_bond.atom_id_1
_chem_link_bond.atom_2_comp_id
_chem_link_bond.atom_id_2
_chem_link_bond.type
_chem_link_bond.value_dist
_chem_link_bond.value_dist_esd
 BETA1-4  1  O4  2  C1  single  1.439  0.020

loop_
_chem_link_angle.link_id
_chem_link_angle.atom_1_comp_id
_chem_link_angle.atom_id_1
_chem_link_angle.atom_2_comp_id
_chem_link_angle.atom_id_2
_chem_link_angle.atom_3_comp_id
_chem_link_angle.atom_id_3
_chem_link_angle.value_angle
_chem_link_angle.value_angle_esd
 BETA1-4  1  C4  1  O4  2  C1  108.700  3.000
 BETA1-4  1  O4  2  C1  2  O5  112.300  3.000
 BETA1-4  1  O4  2  C1  2  C2  109.470  3.000
 BETA1-4  1  O4  2  C1  2  H1  109.470  3.000

loop_
_chem_link_chir.link_id
_chem_link_chir.atom_centre_comp_id
_chem_link_chir.atom_id_centre
_chem_link_chir.atom_1_comp_id
_chem_link_chir.atom_id_1
_chem_link_chir.atom_2_comp_id
_chem_link_chir.atom_id_2
_chem_link_chir.atom_3_comp_id
_chem_link_chir.atom_id_3
_chem_link_chir.volume_sign
 BETA1-4  2  C1  1  O4  2  O5  2  C2  positiv

"""

from mmtbx.monomer_library import linking_utils
from mmtbx.monomer_library import glyco_chiral_values

# atoms
anomeric_carbon   = "2 C1"
ring_oxygen       = "2 O5"
link_oxygen       = "1 O4"
link_carbon       = "1 C4"
anomeric_hydrogen = "2 H1"
ring_carbon       = "2 C2"

def get_chiral_sign(code):
  return glyco_chiral_values.volumes.get(code, None)

def get_alpha_beta(code, fake=True): # the fake chiral is needed to apply the
                                     # correct link from monomer library
                                     # needed because FUC is alpha but has a
                                     # chiral volume of beta
  if not fake:
    return glyco_chiral_values.alpha_beta.get(code, None)
  cs = get_chiral_sign(code)
  if cs is None: return None
  elif cs < 0: return "ALPHA"
  else: return "BETA"

atom_types = ["anomeric_carbon",
              "ring_oxygen",
              "ring_carbon",
              "link_oxygen",
              "link_carbon",
              "anomeric_hydrogen",
              ]


class glyco_link_class:
  def __init__(self,
               anomeric_carbon,
               ring_oxygen=None,
               ring_carbon=None,
               link_oxygen=None,
               link_carbon=None,
               anomeric_hydrogen=None,
               link_phi_carbon=None,
               ):
    self.anomeric_carbon=anomeric_carbon
    self.ring_oxygen=ring_oxygen
    self.ring_carbon=ring_carbon
    self.link_oxygen=link_oxygen
    self.link_carbon=link_carbon
    self.anomeric_hydrogen=anomeric_hydrogen
    self.anomeric_carbon_linking=None
    self.link_phi_carbon=link_phi_carbon

  def __repr__(self):
    outl = "\nGlycosidic atoms\n"
    for attr in atom_types:
      try: outl += "  %-20s : %s" % (attr, getattr(self, attr).quote())
      except Exception: outl += "  %-20s : ???" % (attr)
      if attr=="anomeric_carbon":
        outl += " linking : %s" % self.anomeric_carbon_linking
      outl += "\n"
    return outl

  def is_correct(self, verbose=False):
    if (self.anomeric_carbon is None or
        self.link_oxygen is None or
        self.ring_oxygen is None or
        #ring_carbon is None or
        self.link_carbon is None
        ):
      if verbose:
        attrs = [
          'anomeric_carbon',
          'link_oxygen',
          'ring_oxygen',
          'link_carbon',
          ]
        for attr in attrs:
          atom = getattr(self, attr)
          if atom: atom = atom.quote()
          print('  %-15s : %s' % (attr, atom))
      return False
    return True

  def get_chiral_i_seqs(self, return_names=False):
    i_seqs = []
    for atom in [self.anomeric_carbon,
                 self.link_oxygen,
                 self.ring_oxygen,
                 self.ring_carbon,
                 ]:
      if atom is None: return None
      if return_names:
        i_seqs.append(getattr(atom, "name"))
      else:
        i_seqs.append(getattr(atom, "i_seq"))
    return i_seqs

  def get_isomer(self, verbose=False):
    isomer = get_alpha_beta(self.anomeric_carbon.parent().resname)
    if verbose: print('1 isomer',isomer)
    if isomer is None: isomer = "?"
    if verbose: print('2 isomer',isomer)
    if self.anomeric_carbon.name.strip()[-1] in digits:
      isomer += self.anomeric_carbon.name.strip()[-1]
      if verbose: print('3 isomer',isomer)
    else:
      isomer += " %s " % self.anomeric_carbon.name.strip()
      if verbose: print('4 isomer',isomer)
    if self.link_oxygen.name.strip()[-1] in digits:
      isomer += "-%s" % self.link_oxygen.name.strip()[-1]
      if verbose: print('5 isomer',isomer)
    else:
      isomer += "- %s " % self.link_oxygen.name.strip()
      if verbose: print('6 isomer',isomer)
    if verbose: print('get_isomer',isomer)
    return isomer

  def get_code(self):
    names = []
    resnames = []
    for attr in atom_types:
      atom = getattr(self, attr, None)
      if atom is None: continue
      names.append(atom.name)
      resnames.append(atom.parent().resname)
    return "%s_%s" % (resnames[0], resnames[3])
    #if names == [' C1 ', ' O5 ', ' C2 ', ' O4 ', ' C4 ']: return ""

  def as_cif(self):
    import iotbx.cif
    isomer = self.get_isomer()
    code = self.get_code()
    code = "%s-%s" % (isomer, code)
    code = isomer
    cif_block = iotbx.cif.model.block()
    loop = iotbx.cif.model.loop(header=(
      "_chem_link_bond.link_id",
      "_chem_link_bond.atom_1_comp_id",
      "_chem_link_bond.atom_id_1",
      "_chem_link_bond.atom_2_comp_id",
      "_chem_link_bond.atom_id_2",
      "_chem_link_bond.type",
      "_chem_link_bond.value_dist",
      "_chem_link_bond.value_dist_esd", # neutron????
      ))
    loop.add_row((code,
                  "1",
                  self.anomeric_carbon.name.strip(),
                  "2",
                  self.link_oxygen.name.strip(),
                  "single",
                  "1.439", # need to check this
                  "0.020",
                  ))
    cif_block.add_loop(loop)
    loop = iotbx.cif.model.loop(header=(
      "_chem_link_angle.link_id",
      "_chem_link_angle.atom_1_comp_id",
      "_chem_link_angle.atom_id_1",
      "_chem_link_angle.atom_2_comp_id",
      "_chem_link_angle.atom_id_2",
      "_chem_link_angle.atom_3_comp_id",
      "_chem_link_angle.atom_id_3",
      "_chem_link_angle.value_angle",
      "_chem_link_angle.value_angle_esd",
      ))
    for (id1, a1, id2, a2, id3, a3), angle, esd in [
      [['1', self.link_carbon, '1', self.link_oxygen,     '2', self.anomeric_carbon],   108.7,  3.],
      [['1', self.link_oxygen, '2', self.anomeric_carbon, '2', self.ring_oxygen],       112.3,  3.],
      [['1', self.link_oxygen, '2', self.anomeric_carbon, '2', self.ring_carbon],       109.47, 3.],
      [['1', self.link_oxygen, '2', self.anomeric_carbon, '2', self.anomeric_hydrogen], 109.47, 3.],
      ]:
      if a1 is None or a2 is None or a3 is None: continue
      loop.add_row((code,
                    id1,
                    a1.name.strip(),
                    id2,
                    a2.name.strip(),
                    id3,
                    a3.name.strip(),
                    "%0.1f" % angle,
                    "%0.1f" % esd,
                    ))
    cif_block.add_loop(loop)
    loop = iotbx.cif.model.loop(header=(
      "_chem_link_chir.link_id",
      "_chem_link_chir.atom_centre_comp_id",
      "_chem_link_chir.atom_id_centre",
      "_chem_link_chir.atom_1_comp_id",
      "_chem_link_chir.atom_id_1",
      "_chem_link_chir.atom_2_comp_id",
      "_chem_link_chir.atom_id_2",
      "_chem_link_chir.atom_3_comp_id",
      "_chem_link_chir.atom_id_3",
      "_chem_link_chir.volume_sign",
      ))
    value = get_chiral_sign(self.anomeric_carbon.parent().resname)
    if value is not None and value>0:
      value = "positiv"
    else:
      value = "negativ"
    names = self.get_chiral_i_seqs(return_names=True)
    loop.add_row((code,
                  "2",
                  names[0].strip(),
                  "1",
                  names[1].strip(),
                  "2",
                  names[2].strip(),
                  "2",
                  names[3].strip(),
                  value,
                  ))
    cif_block.add_loop(loop)
    return cif_block

def get_distance2(a1, a2):
  d2 = 0
  for i in range(3):
    d2 += (a1.xyz[i]-a2.xyz[i])**2
  return d2

def generate_atoms_from_atom_groups(atom_group1, atom_group2):
  for atom in atom_group1.atoms(): yield atom
  for atom in atom_group2.atoms(): yield atom

def get_anomeric_carbon(atom_group1, atom_group2, bonds, verbose=False):
  for i, atom in enumerate(generate_atoms_from_atom_groups(atom_group1,
                                                           atom_group2)
                                                           ):
    if atom.element.strip() not in ["C"]: continue
    oxygens = []
    residues = []
    for ba in bonds.get(atom.i_seq, []):
      if ba.element.strip() in ["O"]:
        oxygens.append(ba)
        residues.append(ba.parent())
    if len(oxygens)==2:
      if residues[0].id_str() != residues[1].id_str():
        return atom, True
      else:
        # Eli changed this but not sure why
        continue
        #return atom, False
##         raise Sorry("""
##         Trying to find the anomeric carbon but found a carbon
##         linked to two oxygens.
##           anomeric carbon %s
##           linked oxygens  %s
##                           %s
##         The anomeric carbons should link to another residue.
##         """ % (atom.quote(),
##                oxygens[0].quote(),
##                oxygens[1].quote(),
##                )
##                )
  return None

def get_any_linking_carbon(atom_group1, atom_group2, bonds, verbose=False):
  for i, atom in enumerate(generate_atoms_from_atom_groups(atom_group1,
                                                           atom_group2)
                                                           ):
    if atom.element.strip() not in ["C"]: continue
    oxygens = []
    residues = []
    linking = False
    for ba in bonds.get(atom.i_seq, []):
      if ba.element.strip() in ["O"]:
        if atom.parent().id_str() != ba.parent().id_str():
          linking=True
        oxygens.append(ba)
        residues.append(ba.parent())
    if len(oxygens)==2: # anomeric carbon not linkable
      outl = 'Anomeric carbon "%s" has two oxygens. Need to remove non-ring O.' % (
        atom.quote(),
        )
      raise Sorry(outl)
    if linking:
      return atom, True

  return None

def get_C1_carbon(atom_group1,
                  atom_group2,
                  distance_cutoff=2.,
                  ):
  distance_cutoff *= distance_cutoff
  c1s = []
  for i, atom in enumerate(generate_atoms_from_atom_groups(atom_group1,
                                                           atom_group2)
                                                           ):
    if atom.name.strip()[:2] =="C1": c1s.append(atom)
    #Fix for atoms with A or B at end of name
  if not c1s:
    assert 0
    return None
  for c1 in c1s:
    oxygens = []
    for i, atom in enumerate(generate_atoms_from_atom_groups(atom_group1,
                                                             atom_group2)
                                                             ):
      if atom.element.strip() in ["O"]:
        d2 = get_distance2(c1, atom)
        if d2<distance_cutoff: # need from outside
          oxygens.append(atom)
    if len(oxygens)==2:
      break
  else:
    outl = ""
    for atom in c1s:
      outl += "\n\t\t%s" % atom.quote()
    raise Sorry("""Trying to find the linking carbons but could not find
        a suitable candidate.
%s
        Check carbohydrate geometry.
                """ % outl
               )
  if oxygens[0].parent().id_str()!=oxygens[1].parent().id_str():
    return c1, True
  else:
    return c1, False
##     raise Sorry("""
##         Trying to find the anomeric carbon but found a carbon
##         linked to two oxygens.
##           anomeric carbon %s
##           linked oxygens  %s
##                           %s
##         """ % (c1.quote(),
##                oxygens[0].quote(),
##                oxygens[1].quote(),
##                )
##                )
  return None

def get_ring_oxygen(anomeric_carbon, bonds, element='O'):
  for ba in bonds.get(anomeric_carbon.i_seq, []):
    if ba.element.strip() not in [element]: continue
    # check in same atom group
    if ba.parent().id_str() == anomeric_carbon.parent().id_str():
      return ba
    # check in same residue group
    if ba.parent().parent().id_str() == anomeric_carbon.parent().parent().id_str():
      return ba

def get_ring_oxygen_substitute(anomeric_carbon, bonds):
  return get_ring_oxygen(anomeric_carbon, bonds, element='C')

def get_ring_carbon(anomeric_carbon, bonds):
  for ba in bonds.get(anomeric_carbon.i_seq, []):
    if ba.element.strip() not in ["C"]: continue
    if ba.parent().id_str() == anomeric_carbon.parent().id_str():
      return ba
    if ba.parent().parent().id_str() == anomeric_carbon.parent().parent().id_str():
      return ba

def get_anomeric_hydrogen(anomeric_carbon, bonds):
  for ba in bonds.get(anomeric_carbon.i_seq, []):
    if ba.element.strip() not in ["H"]: continue
    if ba.parent().id_str() == anomeric_carbon.parent().id_str():
      return ba
    if ba.parent().parent().id_str() == anomeric_carbon.parent().parent().id_str():
      return ba

def get_link_oxygen(anomeric_carbon, bonds, verbose=False):
  if verbose:
    print(anomeric_carbon.quote())
    print(bonds.get(anomeric_carbon.i_seq))
  for ba in bonds.get(anomeric_carbon.i_seq, []):
    if verbose: print(ba.quote())
    if ba.element.strip() not in ["O"]: continue
    if ba.parent().id_str() != anomeric_carbon.parent().id_str():
      return ba
    if ba.parent().parent().id_str() != anomeric_carbon.parent().parent().id_str():
      return ba

def get_link_oxygen_on_distance(anomeric_carbon, atom_group1, atom_group2):
  link_group = None
  for atom in atom_group2.atoms():
    if atom.quote()==anomeric_carbon.quote():
      link_group = atom_group1
      break
  if link_group is None:
    for atom in atom_group1.atoms():
      if atom.quote()==anomeric_carbon.quote():
        link_group = atom_group2
        break
  if link_group is None: assert 0
  for atom in link_group.atoms():
    if atom.element.strip()!="O": continue
    d2 = get_distance2(atom, anomeric_carbon)
    if d2<5.:
      return atom
  return None

def get_link_carbon(anomeric_carbon, link_oxygen, bonds):
  for ba in bonds.get(link_oxygen.i_seq, []):
    if ba.element.strip() not in ["C"]: continue
    if ba.i_seq==anomeric_carbon.i_seq: continue
    if ba.parent().id_str() != anomeric_carbon.parent().id_str():
      return ba

def get_link_carbon_on_distance(anomeric_carbon, atom_group1, atom_group2):
  link_group = None
  for atom in atom_group2.atoms():
    if atom.quote()==anomeric_carbon.quote():
      link_group = atom_group1
      break
  if link_group is None:
    for atom in atom_group1.atoms():
      if atom.quote()==anomeric_carbon.quote():
        link_group = atom_group2
        break
  if link_group is None: assert 0
  for atom in link_group.atoms():
    if atom.element.strip()!="O": continue
    d2 = get_distance2(atom, anomeric_carbon)
    if d2<5.:
      return atom
  return None

def get_link_phi_carbon(link_carbon, bonds):
  phi_carbon = None
  if not link_carbon: return None
  for ba in bonds.get(link_carbon.i_seq, []):
    if ba.element.strip() not in ["C"]: continue
    if ba.i_seq==link_carbon.i_seq: continue
    phi_carbon = ba
  return phi_carbon

def get_glyco_link_atoms(atom_group1,
                         atom_group2,
                         link_carbon_dist=2.0,
                         verbose=False,
                         ):
  # maybe should be restraints based?
  bonds = linking_utils.get_bonded_from_atom_groups(atom_group1,
                                                    atom_group2,
                                                    link_carbon_dist,
    )
  rc = get_anomeric_carbon(atom_group1,
                           atom_group2,
                           bonds,
                           verbose=verbose)
  if rc is None:
    rc = get_any_linking_carbon(atom_group1,
                                atom_group2,
                                bonds,
                                verbose=verbose)
  if rc is None:
    rc = get_C1_carbon(atom_group1,
                       atom_group2,
                       distance_cutoff=link_carbon_dist,
      )
  if rc is None: return None

  anomeric_carbon, linking_carbon = rc
  if anomeric_carbon is None:
    assert 0
    return None
  if verbose: print('anomeric_carbon',anomeric_carbon.quote())
  ring_oxygen = get_ring_oxygen(anomeric_carbon, bonds)
  if verbose:
    try: print('ring_oxygen',ring_oxygen.quote())
    except AttributeError: print('ring_oxygen',ring_oxygen)
  if ring_oxygen is None:
    ring_oxygen = get_ring_oxygen_substitute(anomeric_carbon, bonds)
  ring_carbon = get_ring_carbon(anomeric_carbon, bonds)
  if verbose: print('ring_carbon',ring_carbon.quote())
  anomeric_hydrogen = get_anomeric_hydrogen(anomeric_carbon, bonds)
  if verbose: print('anomeric_hydrogen',anomeric_hydrogen)
  link_oxygen = get_link_oxygen(anomeric_carbon, bonds, verbose=verbose)
  if link_oxygen is None:
    link_oxygen = get_link_oxygen_on_distance(anomeric_carbon,
                                              atom_group1,
                                              atom_group2)
  if link_oxygen is None:
    return None
  if verbose: print('link_oxygen',link_oxygen.quote())
  link_carbon = get_link_carbon(anomeric_carbon, link_oxygen, bonds)
  if link_carbon is None and link_carbon_dist:
    link_carbon = get_link_carbon_on_distance(anomeric_carbon,
                                              atom_group1,
                                              atom_group2,
      )
  if verbose:
    try: print('link_carbon',link_carbon.quote())
    except Exception: print()

  link_phi_carbon = get_link_phi_carbon(link_carbon, bonds)
  if verbose:
    try: print('link_phi_carbon',link_phi_carbon.quote(), link_phi_carbon.name, ba.element.strip())
    except Exception: print()

  gla = glyco_link_class(anomeric_carbon,
                         ring_oxygen,
                         ring_carbon,
                         link_oxygen,
                         link_carbon,
                         anomeric_hydrogen,
                         link_phi_carbon,
                         )
  gla.anomeric_carbon_linking = linking_carbon
  return gla

def apply_glyco_link_using_proxies_and_atoms(atom_group1,
                                             atom_group2,
                                             bond_params_table,
                                             bond_asu_table,
                                             geometry_proxy_registries,
                                             rt_mx_ji,
                                             link_carbon_dist=2.0,
                                             origin_id=None,
                                             ):
  origin_ids = geometry_restraints.linking_class.linking_class()
  def _add_bond(i_seqs,
                bond_params_table,
                bond_asu_table,
                value,
                esd,
                rt_mx_ji,
                origin_id,
                ):
    proxy = geometry_restraints.bond_simple_proxy(
      i_seqs=i_seqs,
      distance_ideal=value,
      weight=1/esd**2,
      origin_id=origin_id)
    bond_params_table.update(i_seq=i_seqs[0],
                             j_seq=i_seqs[1],
                             params=proxy)
    bond_asu_table.add_pair(
      i_seq=i_seqs[0],
      j_seq=i_seqs[1],
      rt_mx_ji=rt_mx_ji,
      )
  #
  def _add_angle(i_seqs, geometry_proxy_registries, value, esd, origin_id):
    proxy = geometry_restraints.angle_proxy(
      i_seqs=i_seqs,
      angle_ideal=value,
      weight=1/esd**2,
      origin_id=origin_id)
    geometry_proxy_registries.angle.add_if_not_duplicated(proxy=proxy)
  #
  def _add_chiral(i_seqs, geometry_proxy_registries, value, esd, origin_id, both_signs=False):
    proxy = geometry_restraints.chirality_proxy(
      i_seqs=i_seqs,
      volume_ideal=value,
      both_signs=both_signs,
      weight=1/esd**2,
      origin_id=origin_id,
      )
    geometry_proxy_registries.chirality.add_if_not_duplicated(proxy=proxy)

  def atom_group_output(atom_group):
    outl = ""
    for atom in atom_group.atoms():
      outl += "%s%s\n" % (' '*10, atom.quote())
    return outl

  ########
  from mmtbx.monomer_library import glyco_utils
  gla = glyco_utils.get_glyco_link_atoms(atom_group1,
                                         atom_group2,
                                         link_carbon_dist=link_carbon_dist,
    )
  # checks
  if gla and not gla.is_correct():
    gla = glyco_utils.get_glyco_link_atoms(atom_group2,
                                           atom_group1,
                                           link_carbon_dist=link_carbon_dist,
      )
  if gla and not gla.is_correct():
    raise Sorry("""Failed to get all the atoms needed for glycosidic bond
between

      group 1
%s
      group 2
%s
    """ % (atom_group_output(atom_group1), atom_group_output(atom_group2)
    )
    )
  if gla is None:
    raise Sorry("""Unspecified problem with carbohydrate groups. Could be that
the linking oxygen is on the linking residue instead of the docking residue.

    group 1
%s
    group 2
%s
    """ % (atom_group_output(atom_group1), atom_group_output(atom_group2)
           )
           )
  if not gla.anomeric_carbon_linking:
    raise Sorry("""The linking carbohydrate unit has the oxygen attached to the
anomeric carbon.

  Consider replacing oxygen %s
  with an oxygen linked to  %s in the same residue
    %s""" % (gla.link_oxygen.quote(),
             gla.link_carbon.quote(),
             gla)
             )
  origin_id = origin_ids.get('link_%s' % gla.get_isomer(), None)
  if not origin_id: origin_id=origin_ids['glycosidic custom']
  i_seqs = [gla.anomeric_carbon.i_seq, gla.link_oxygen.i_seq]
  bond_i_seqs = i_seqs
  # bonds
  _add_bond(i_seqs, bond_params_table, bond_asu_table, 1.439, 0.02, rt_mx_ji, origin_id)
  # angles
  for i_atoms, value, esd in [
      [[gla.link_carbon, gla.link_oxygen,     gla.anomeric_carbon],   108.7,  3.],
      [[gla.link_oxygen, gla.anomeric_carbon, gla.ring_oxygen],       112.3,  3.],
      [[gla.link_oxygen, gla.anomeric_carbon, gla.ring_carbon],       109.47, 3.],
      [[gla.link_oxygen, gla.anomeric_carbon, gla.anomeric_hydrogen], 109.47, 3.],
    ]:
    if None in i_atoms: continue
    i_seqs = [atom.i_seq for atom in i_atoms]
    _add_angle(i_seqs, geometry_proxy_registries, value, esd, origin_id)
  # chiral
  i_seqs = gla.get_chiral_i_seqs()
  if i_seqs is None:
    raise Sorry("""Unable to determine the linking chiral atoms for atom groups
    group 1
%s
    group 2
%s
    """ % (atom_group_output(atom_group1), atom_group_output(atom_group2)
    )
    )
  value = get_chiral_sign(gla.anomeric_carbon.parent().resname)
  if value:
    esd = 0.02
    _add_chiral(i_seqs, geometry_proxy_registries, value, esd, origin_id)

  return gla.get_isomer(), gla.as_cif(), bond_i_seqs

def is_standard_glyco_link(key, link):
  if key.find("ALPHA")>-1 or key.find("BETA")>-1:
    return True
  return False


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/hydrogen_restrictions.py
from __future__ import absolute_import, division, print_function
from mmtbx.monomer_library import server
import sys

def run(args):
  assert len(args) == 0
  srv = server.server()
  standard_amino_acids = [
    "GLY", "VAL", "ALA", "LEU", "ILE", "PRO", "MET", "PHE", "TRP", "SER",
    "THR", "TYR", "CYS", "ASN", "GLN", "ASP", "GLU", "LYS", "ARG", "HIS"]
  for comp_id in standard_amino_acids:
    comp_comp_id = srv.get_comp_comp_id_direct(comp_id)
    print(comp_comp_id.chem_comp.id.strip(), end=' ')
    print(comp_comp_id.chem_comp.name.strip(), end=' ')
    print(comp_comp_id.chem_comp.group.strip())
    hydrogens = {}
    for atom in comp_comp_id.atom_list:
      if (atom.type_symbol == "H"):
        hydrogens[atom.atom_id] = 0
    bond_counts = dict(hydrogens)
    for bond in comp_comp_id.bond_list:
      for atom_id in [bond.atom_id_1, bond.atom_id_2]:
        if (atom_id in hydrogens):
          bond_counts[atom_id] += 1
    if (list(bond_counts.values()) != [1] * len(bond_counts)):
      print("bad bond counts:", bond_counts)
      raise AssertionError
    angle_counts = dict(hydrogens)
    for angle in comp_comp_id.angle_list:
      for atom_id in [angle.atom_id_1, angle.atom_id_2, angle.atom_id_3]:
        if (atom_id in hydrogens):
          angle_counts[atom_id] += 1
    #print angle_counts
    assert min(angle_counts.values()) > 0
    assert max(angle_counts.values()) <= 3
    for atom_id,count in angle_counts.items():
      if (count == 3):
        print("three angles:", atom_id)
        for bond in comp_comp_id.bond_list:
          atom_ids = [bond.atom_id_1, bond.atom_id_2]
          if (atom_id in atom_ids):
            print("  bond:", atom_ids)
        for angle in comp_comp_id.angle_list:
          atom_ids = [angle.atom_id_1, angle.atom_id_2, angle.atom_id_3]
          if (atom_id in atom_ids):
            print("  angle:", atom_ids, angle.value_angle)
    tor_counts = dict(hydrogens)
    for tor in comp_comp_id.tor_list:
      for atom_id in [tor.atom_id_1,
                      tor.atom_id_2,
                      tor.atom_id_3,
                      tor.atom_id_4]:
        if (atom_id in hydrogens):
          tor_counts[atom_id] += 1
    #print tor_counts
    assert max(tor_counts.values()) <= 1
    print("no tor:", list(tor_counts.values()).count(0))
    chir_counts = dict(hydrogens)
    for chir in comp_comp_id.chir_list:
      for atom_id in [chir.atom_id_centre,
                      chir.atom_id_1,
                      chir.atom_id_2,
                      chir.atom_id_3]:
        if (atom_id in hydrogens):
          chir_counts[atom_id] += 1
    #print chir_counts
    assert max(chir_counts.values()) == 0
    plane_counts = dict(hydrogens)
    for plane in comp_comp_id.get_planes():
      for plane_atom in plane.plane_atoms:
        if (plane_atom.atom_id in hydrogens):
          plane_counts[plane_atom.atom_id] += 1
    #print plane_counts
    assert max(plane_counts.values()) <= 1
    for atom_id,count in plane_counts.items():
      if (count == 0): continue
      assert angle_counts[atom_id] == 2

if (__name__ == "__main__"):
  run(sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
mmtbx/monomer_library/idealized_aa.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb
import iotbx.pdb.amino_acid_codes

ala_h = """
CRYST1   22.664   22.687   23.318  90.00  90.00  90.00 P 1
ATOM      1  N   ALA            12.208  10.150  12.482  1.00  0.00           N
ATOM      2  CA  ALA            11.068  11.053  12.388  1.00  0.00           C
ATOM      3  C   ALA            10.345  10.870  11.059  1.00  0.00           C
ATOM      4  O   ALA            10.972  10.843   9.999  1.00  0.00           O
ATOM      5  CB  ALA            11.525  12.494  12.548  1.00  0.00           C
ATOM      6  H   ALA            12.574   9.969  11.725  1.00  0.00           H
ATOM      7  HA  ALA            10.443  10.853  13.103  1.00  0.00           H
ATOM      8  HB1 ALA            11.946  12.597  13.415  1.00  0.00           H
ATOM      9  HB2 ALA            12.159  12.704  11.845  1.00  0.00           H
ATOM     10  HB3 ALA            10.753  13.078  12.482  1.00  0.00           H
TER
END
"""

ala = """
CRYST1   22.664   22.687   23.318  90.00  90.00  90.00 P 1
ATOM         N   ALA            12.209  10.151  12.481  1.00  0.00           N
ATOM         CA  ALA            11.069  11.055  12.388  1.00  0.00           C
ATOM         C   ALA            10.347  10.872  11.058  1.00  0.00           C
ATOM         O   ALA            10.973  10.843   9.999  1.00  0.00           O
ATOM         CB  ALA            11.525  12.496  12.547  1.00  0.00           C
TER
END
"""

arg_h = """
CRYST1   25.402   27.627   23.258  90.00  90.00  90.00 P 1
ATOM         N   ARG            12.731  16.982  12.482  1.00  0.00           N
ATOM         CA  ARG            13.349  15.664  12.419  1.00  0.00           C
ATOM         C   ARG            14.865  15.774  12.534  1.00  0.00           C
ATOM         O   ARG            15.402  16.855  12.775  1.00  0.00           O
ATOM         CB  ARG            12.977  14.962  11.110  1.00  0.00           C
ATOM         CG  ARG            11.482  14.715  10.929  1.00  0.00           C
ATOM         CD  ARG            10.967  13.561  11.786  1.00  0.00           C
ATOM         NE  ARG            11.479  12.262  11.342  1.00  0.00           N
ATOM         CZ  ARG            12.518  11.607  11.866  1.00  0.00           C
ATOM         NH1 ARG            13.222  12.090  12.890  1.00  0.00           N
ATOM         NH2 ARG            12.863  10.434  11.352  1.00  0.00           N
ATOM         H   ARG            13.262  17.627  12.277  1.00  0.00           H
ATOM         HA  ARG            13.024  15.119  13.166  1.00  0.00           H
ATOM         HB2 ARG            13.275  15.511  10.369  1.00  0.00           H
ATOM         HB3 ARG            13.425  14.102  11.080  1.00  0.00           H
ATOM         HG2 ARG            11.309  14.499  10.000  1.00  0.00           H
ATOM         HG3 ARG            10.995  15.516  11.179  1.00  0.00           H
ATOM         HD2 ARG            10.000  13.533  11.716  1.00  0.00           H
ATOM         HD3 ARG            11.221  13.702  12.710  1.00  0.00           H
ATOM         HE  ARG            11.073  11.887  10.683  1.00  0.00           H
ATOM        HH11 ARG            13.882  11.630  13.193  1.00  0.00           H
ATOM        HH12 ARG            13.040  12.842  13.258  1.00  0.00           H
ATOM        HH21 ARG            13.530  10.000  11.680  1.00  0.00           H
ATOM        HH22 ARG            12.421  10.106  10.692  1.00  0.00           H
TER
END
"""

arg = """
CRYST1   25.402   27.627   23.258  90.00  90.00  90.00 P 1
ATOM         N   ARG            12.731  16.982  12.482  1.00 10.00           N
ATOM         CA  ARG            13.349  15.664  12.419  1.00 10.00           C
ATOM         C   ARG            14.865  15.774  12.534  1.00 10.00           C
ATOM         O   ARG            15.402  16.855  12.775  1.00 10.00           O
ATOM         CB  ARG            12.977  14.962  11.110  1.00 10.00           C
ATOM         CG  ARG            11.482  14.715  10.929  1.00 10.00           C
ATOM         CD  ARG            10.967  13.561  11.786  1.00 10.00           C
ATOM         NE  ARG            11.479  12.262  11.342  1.00 10.00           N
ATOM         CZ  ARG            12.518  11.607  11.866  1.00 10.00           C
ATOM         NH1 ARG            13.222  12.090  12.890  1.00 10.00           N
ATOM         NH2 ARG            12.863  10.434  11.352  1.00 10.00           N
TER
END
"""

asn_h = """
CRYST1   23.559   24.773   24.641  90.00  90.00  90.00 P 1
ATOM         N   ASN            10.214  11.918  12.863  1.00  0.00           N
ATOM         CA  ASN            11.393  12.766  12.988  1.00  0.00           C
ATOM         C   ASN            11.281  14.013  12.118  1.00  0.00           C
ATOM         O   ASN            10.740  13.964  11.013  1.00  0.00           O
ATOM         CB  ASN            12.652  11.983  12.612  1.00  0.00           C
ATOM         CG  ASN            12.869  10.770  13.495  1.00  0.00           C
ATOM         OD1 ASN            11.941  10.284  14.141  1.00  0.00           O
ATOM         ND2 ASN            14.101  10.275  13.528  1.00  0.00           N
ATOM         H   ASN             9.484  12.293  13.120  1.00  0.00           H
ATOM         HA  ASN            11.482  13.054  13.920  1.00  0.00           H
ATOM         HB2 ASN            13.424  12.563  12.702  1.00  0.00           H
ATOM         HB3 ASN            12.572  11.676  11.695  1.00  0.00           H
ATOM        HD21 ASN            14.276   9.588  14.015  1.00  0.00           H
ATOM        HD22 ASN            14.724  10.642  13.063  1.00  0.00           H
TER
END
"""

asn = """
CRYST1   23.559   24.773   24.641  90.00  90.00  90.00 P 1
ATOM         N   ASN            10.214  11.918  12.863  1.00  0.00           N
ATOM         CA  ASN            11.393  12.766  12.988  1.00  0.00           C
ATOM         C   ASN            11.281  14.013  12.118  1.00  0.00           C
ATOM         O   ASN            10.740  13.964  11.013  1.00  0.00           O
ATOM         CB  ASN            12.652  11.983  12.612  1.00  0.00           C
ATOM         CG  ASN            12.869  10.770  13.495  1.00  0.00           C
ATOM         OD1 ASN            11.941  10.284  14.141  1.00  0.00           O
ATOM         ND2 ASN            14.101  10.275  13.528  1.00  0.00           N
TER
END
"""

asp_h = """
CRYST1   24.331   23.901   23.964  90.00  90.00  90.00 P 1
ATOM         N   ASP             9.845  11.565  11.028  1.00  0.00           N
ATOM         CA  ASP            10.952  11.701  11.966  1.00  0.00           C
ATOM         C   ASP            10.669  12.803  12.980  1.00  0.00           C
ATOM         O   ASP            10.510  13.968  12.616  1.00  0.00           O
ATOM         CB  ASP            12.250  12.005  11.215  1.00  0.00           C
ATOM         CG  ASP            13.440  12.152  12.144  1.00  0.00           C
ATOM         OD1 ASP            14.076  11.187  12.405  1.00  0.00           O
ATOM         OD2 ASP            13.731  13.361  12.617  1.00  0.00           O
ATOM         H   ASP            10.044  11.133  10.312  1.00  0.00           H
ATOM         HA  ASP            11.068  10.867  12.448  1.00  0.00           H
ATOM         HB2 ASP            12.145  12.835  10.726  1.00  0.00           H
ATOM         HB3 ASP            12.437  11.278  10.601  1.00  0.00           H
ATOM         HD2 ASP            13.087  13.974  12.287  1.00  0.00           H
TER
END
"""

asp = """
CRYST1   24.331   23.901   23.964  90.00  90.00  90.00 P 1
ATOM         N   ASP            10.032  11.934  11.014  1.00  0.00           N
ATOM         CA  ASP            11.142  11.756  11.942  1.00  0.00           C
ATOM         C   ASP            11.152  12.864  12.989  1.00  0.00           C
ATOM         O   ASP            10.545  13.918  12.798  1.00  0.00           O
ATOM         CB  ASP            12.471  11.744  11.185  1.00  0.00           C
ATOM         CG  ASP            13.663  11.563  12.104  1.00  0.00           C
ATOM         OD1 ASP            14.056  10.402  12.348  1.00  0.00           O
ATOM         OD2 ASP            14.208  12.580  12.582  1.00  0.00           O
TER
END
"""

cys_h = """
CRYST1   22.148   23.227   25.463  90.00  90.00  90.00 P 1
ATOM      1  N   CYS             9.145  11.906  12.895  1.00  0.00           N
ATOM      2  CA  CYS            10.591  11.757  12.789  1.00  0.00           C
ATOM      3  C   CYS            11.229  11.684  14.172  1.00  0.00           C
ATOM      4  O   CYS            11.131  12.623  14.962  1.00  0.00           O
ATOM      5  CB  CYS            11.190  12.923  12.001  1.00  0.00           C
ATOM      6  SG  CYS            10.562  13.076  10.312  1.00  0.00           S
ATOM      7  H   CYS             8.791  11.444  13.528  1.00  0.00           H
ATOM      8  HA  CYS            10.794  10.934  12.317  1.00  0.00           H
ATOM      9  HB2 CYS            10.988  13.749  12.467  1.00  0.00           H
ATOM     10  HB3 CYS            12.151  12.802  11.949  1.00  0.00           H
ATOM     11  HG  CYS            10.815  12.070   9.709  1.00  0.00           H
TER
END
"""

cys = """
CRYST1   22.148   23.227   25.463  90.00  90.00  90.00 P 1
ATOM         N   CYS             9.141  11.902  12.891  1.00  0.00           N
ATOM         CA  CYS            10.587  11.755  12.790  1.00  0.00           C
ATOM         C   CYS            11.220  11.681  14.174  1.00  0.00           C
ATOM         O   CYS            11.156  12.635  14.949  1.00  0.00           O
ATOM         CB  CYS            11.187  12.923  12.005  1.00  0.00           C
ATOM         SG  CYS            10.565  13.078  10.314  1.00  0.00           S
TER
END
"""

gln_h = """
CRYST1   25.084   23.384   24.805  90.00  90.00  90.00 P 1
ATOM         N   GLN            12.552  11.912   8.793  1.00  0.00           N
ATOM         CA  GLN            12.794  11.266  10.077  1.00  0.00           C
ATOM         C   GLN            11.486  11.088  10.841  1.00  0.00           C
ATOM         O   GLN            11.063   9.965  11.114  1.00  0.00           O
ATOM         CB  GLN            13.778  12.090  10.909  1.00  0.00           C
ATOM         CG  GLN            14.166  11.449  12.233  1.00  0.00           C
ATOM         CD  GLN            15.185  12.267  13.001  1.00  0.00           C
ATOM         OE1 GLN            15.609  13.332  12.552  1.00  0.00           O
ATOM         NE2 GLN            15.585  11.772  14.167  1.00  0.00           N
ATOM         H   GLN            11.841  12.395   8.773  1.00  0.00           H
ATOM         HA  GLN            13.185  10.380   9.926  1.00  0.00           H
ATOM         HB2 GLN            13.376  12.951  11.105  1.00  0.00           H
ATOM         HB3 GLN            14.590  12.218  10.394  1.00  0.00           H
ATOM         HG2 GLN            14.550  10.575  12.061  1.00  0.00           H
ATOM         HG3 GLN            13.376  11.361  12.789  1.00  0.00           H
ATOM        HE21 GLN            15.266  11.024  14.448  1.00  0.00           H
ATOM        HE22 GLN            16.162  12.199  14.640  1.00  0.00           H
TER
END
"""

gln = """
CRYST1   25.084   23.384   24.805  90.00  90.00  90.00 P 1
ATOM         N   GLN            12.552  11.912   8.793  1.00  0.00           N
ATOM         CA  GLN            12.794  11.266  10.077  1.00  0.00           C
ATOM         C   GLN            11.486  11.088  10.841  1.00  0.00           C
ATOM         O   GLN            11.063   9.965  11.114  1.00  0.00           O
ATOM         CB  GLN            13.778  12.090  10.909  1.00  0.00           C
ATOM         CG  GLN            14.166  11.449  12.233  1.00  0.00           C
ATOM         CD  GLN            15.185  12.267  13.001  1.00  0.00           C
ATOM         OE1 GLN            15.609  13.332  12.552  1.00  0.00           O
ATOM         NE2 GLN            15.585  11.772  14.167  1.00  0.00           N
TER
END
"""

glu_h = """
CRYST1   26.121   25.436   23.126  90.00  90.00  90.00 P 1
ATOM      1  N   GLU            14.108  13.722  10.100  1.00  0.00           N
ATOM      2  CA  GLU            13.921  13.963  11.525  1.00  0.00           C
ATOM      3  C   GLU            15.247  14.308  12.194  1.00  0.00           C
ATOM      4  O   GLU            15.377  15.349  12.837  1.00  0.00           O
ATOM      5  CB  GLU            13.304  12.735  12.196  1.00  0.00           C
ATOM      6  CG  GLU            11.939  12.350  11.647  1.00  0.00           C
ATOM      7  CD  GLU            11.354  11.134  12.339  1.00  0.00           C
ATOM      8  OE1 GLU            10.290  10.744  11.992  1.00  0.00           O
ATOM      9  OE2 GLU            12.058  10.554  13.306  1.00  0.00           O
ATOM     10  H   GLU            14.917  13.526   9.882  1.00  0.00           H
ATOM     11  HA  GLU            13.309  14.719  11.647  1.00  0.00           H
ATOM     12  HB2 GLU            13.898  11.979  12.069  1.00  0.00           H
ATOM     13  HB3 GLU            13.201  12.916  13.144  1.00  0.00           H
ATOM     14  HG2 GLU            11.327  13.091  11.773  1.00  0.00           H
ATOM     15  HG3 GLU            12.024  12.145  10.703  1.00  0.00           H
ATOM     16  HE2 GLU            11.561   9.816  13.635  1.00  0.00           H
TER
END
"""

glu = """
CRYST1   26.121   25.436   23.126  90.00  90.00  90.00 P 1
ATOM         N   GLU            14.107  13.721  10.099  1.00  0.00           N
ATOM         CA  GLU            13.923  13.965  11.525  1.00  0.00           C
ATOM         C   GLU            15.250  14.315  12.188  1.00  0.00           C
ATOM         O   GLU            15.375  15.353  12.838  1.00  0.00           O
ATOM         CB  GLU            13.312  12.736  12.200  1.00  0.00           C
ATOM         CG  GLU            11.947  12.345  11.656  1.00  0.00           C
ATOM         CD  GLU            11.368  11.129  12.352  1.00  0.00           C
ATOM         OE1 GLU            10.246  10.714  11.992  1.00  0.00           O
ATOM         OE2 GLU            12.034  10.587  13.260  1.00  0.00           O
TER
END
"""

gly_h = """
CRYST1   22.802   22.387   22.249  90.00  90.00  90.00 P 1
ATOM         N   GLY            10.690  11.634  12.050  1.00  0.00           N
ATOM         CA  GLY             9.834  10.465  12.109  1.00  0.00           C
ATOM         C   GLY             8.514  10.688  11.397  1.00  0.00           C
ATOM         O   GLY             7.548  11.163  11.994  1.00  0.00           O
ATOM         H   GLY            11.449  11.532  12.440  1.00  0.00           H
ATOM         HA2 GLY            10.284   9.712  11.694  1.00  0.00           H
ATOM         HA3 GLY             9.651  10.243  13.035  1.00  0.00           H
TER
END
"""

gly = """
CRYST1   22.802   22.387   22.249  90.00  90.00  90.00 P 1
ATOM         N   GLY            10.690  11.634  12.050  1.00  0.00           N
ATOM         CA  GLY             9.834  10.465  12.109  1.00  0.00           C
ATOM         C   GLY             8.514  10.688  11.397  1.00  0.00           C
ATOM         O   GLY             7.548  11.163  11.994  1.00  0.00           O
TER
END
"""

his_h = """
CRYST1   24.176   25.565   23.504  90.00  90.00  90.00 P 1
ATOM         N   HIS            14.439  12.693  12.792  1.00  0.00           N
ATOM         CA  HIS            13.448  13.609  12.240  1.00  0.00           C
ATOM         C   HIS            13.157  14.742  13.219  1.00  0.00           C
ATOM         O   HIS            13.216  14.556  14.434  1.00  0.00           O
ATOM         CB  HIS            12.156  12.860  11.912  1.00  0.00           C
ATOM         CG  HIS            12.333  11.761  10.911  1.00  0.00           C
ATOM         ND1 HIS            12.206  11.963   9.554  1.00  0.00           N
ATOM         CD2 HIS            12.628  10.449  11.070  1.00  0.00           C
ATOM         CE1 HIS            12.414  10.823   8.920  1.00  0.00           C
ATOM         NE2 HIS            12.672   9.888   9.817  1.00  0.00           N
ATOM         H   HIS            14.112  12.107  13.330  1.00  0.00           H
ATOM         HA  HIS            13.796  14.001  11.412  1.00  0.00           H
ATOM         HB2 HIS            11.513  13.490  11.550  1.00  0.00           H
ATOM         HB3 HIS            11.808  12.466  12.727  1.00  0.00           H
ATOM         HD1 HIS            12.020  12.714   9.178  1.00  0.00           H
ATOM         HD2 HIS            12.773  10.010  11.877  1.00  0.00           H
ATOM         HE1 HIS            12.384  10.699   7.998  1.00  0.00           H
ATOM         HE2 HIS            12.841   9.063   9.644  1.00  0.00           H
TER
END
"""

his = """
CRYST1   24.176   25.565   23.504  90.00  90.00  90.00 P 1
ATOM         N   HIS            14.439  12.693  12.792  1.00  0.00           N
ATOM         CA  HIS            13.448  13.609  12.240  1.00  0.00           C
ATOM         C   HIS            13.157  14.742  13.219  1.00  0.00           C
ATOM         O   HIS            13.216  14.556  14.434  1.00  0.00           O
ATOM         CB  HIS            12.156  12.860  11.912  1.00  0.00           C
ATOM         CG  HIS            12.333  11.761  10.911  1.00  0.00           C
ATOM         ND1 HIS            12.206  11.963   9.554  1.00  0.00           N
ATOM         CD2 HIS            12.628  10.449  11.070  1.00  0.00           C
ATOM         CE1 HIS            12.414  10.823   8.920  1.00  0.00           C
ATOM         NE2 HIS            12.672   9.888   9.817  1.00  0.00           N
TER
END
"""

ile_h = """
CRYST1   25.412   23.292   23.916  90.00  90.00  90.00 P 1
ATOM      1  N   ILE            12.301  11.470  15.047  1.00  0.00           N
ATOM      2  CA  ILE            11.713  11.920  13.792  1.00  0.00           C
ATOM      3  C   ILE            10.597  10.981  13.342  1.00  0.00           C
ATOM      4  O   ILE            10.391   9.920  13.932  1.00  0.00           O
ATOM      5  CB  ILE            12.774  12.021  12.676  1.00  0.00           C
ATOM      6  CG1 ILE            13.536  10.697  12.538  1.00  0.00           C
ATOM      7  CG2 ILE            13.738  13.163  12.972  1.00  0.00           C
ATOM      8  CD1 ILE            14.482  10.647  11.352  1.00  0.00           C
ATOM      9  H   ILE            11.834  10.877  15.460  1.00  0.00           H
ATOM     10  HA  ILE            11.328  12.801  13.921  1.00  0.00           H
ATOM     11  HB  ILE            12.324  12.207  11.837  1.00  0.00           H
ATOM     12 HG12 ILE            14.065  10.555  13.339  1.00  0.00           H
ATOM     13 HG13 ILE            12.901   9.972  12.433  1.00  0.00           H
ATOM     14 HG21 ILE            14.177  13.433  12.150  1.00  0.00           H
ATOM     15 HG22 ILE            13.238  13.910  13.337  1.00  0.00           H
ATOM     16 HG23 ILE            14.396  12.862  13.618  1.00  0.00           H
ATOM     17 HD11 ILE            14.054  11.067  10.589  1.00  0.00           H
ATOM     18 HD12 ILE            15.299  11.120  11.576  1.00  0.00           H
ATOM     19 HD13 ILE            14.684   9.720  11.151  1.00  0.00           H
TER
END
"""

ile = """
CRYST1   25.412   23.292   23.916  90.00  90.00  90.00 P 1
ATOM         N   ILE            12.305  11.475  15.047  1.00  0.00           N
ATOM         CA  ILE            11.714  11.920  13.791  1.00  0.00           C
ATOM         C   ILE            10.602  10.976  13.345  1.00  0.00           C
ATOM         O   ILE            10.397   9.918  13.940  1.00  0.00           O
ATOM         CB  ILE            12.773  12.022  12.675  1.00  0.00           C
ATOM         CG1 ILE            13.530  10.696  12.532  1.00  0.00           C
ATOM         CG2 ILE            13.740  13.159  12.972  1.00  0.00           C
ATOM         CD1 ILE            14.484  10.651  11.353  1.00  0.00           C
TER
END
"""

leu_h = """
CRYST1   23.694   25.206   23.362  90.00  90.00  90.00 P 1
ATOM      1  N   LEU            11.496  10.501  10.237  1.00  0.00           N
ATOM      2  CA  LEU            12.729  11.070  10.767  1.00  0.00           C
ATOM      3  C   LEU            13.677   9.966  11.221  1.00  0.00           C
ATOM      4  O   LEU            13.743   8.900  10.608  1.00  0.00           O
ATOM      5  CB  LEU            12.423  12.006  11.939  1.00  0.00           C
ATOM      6  CG  LEU            11.480  13.181  11.658  1.00  0.00           C
ATOM      7  CD1 LEU            11.040  13.830  12.961  1.00  0.00           C
ATOM      8  CD2 LEU            12.129  14.208  10.739  1.00  0.00           C
ATOM      9  H   LEU            11.216  10.881   9.518  1.00  0.00           H
ATOM     10  HA  LEU            13.172  11.580  10.071  1.00  0.00           H
ATOM     11  HB2 LEU            13.261  12.380  12.253  1.00  0.00           H
ATOM     12  HB3 LEU            12.022  11.481  12.649  1.00  0.00           H
ATOM     13  HG  LEU            10.687  12.845  11.213  1.00  0.00           H
ATOM     14 HD11 LEU            10.578  13.170  13.502  1.00  0.00           H
ATOM     15 HD12 LEU            11.823  14.154  13.432  1.00  0.00           H
ATOM     16 HD13 LEU            10.444  14.569  12.760  1.00  0.00           H
ATOM     17 HD21 LEU            13.010  14.427  11.081  1.00  0.00           H
ATOM     18 HD22 LEU            12.203  13.835   9.847  1.00  0.00           H
ATOM     19 HD23 LEU            11.575  15.004  10.717  1.00  0.00           H
TER
END
"""

leu = """
CRYST1   23.694   25.206   23.362  90.00  90.00  90.00 P 1
ATOM      1  N   LEU            11.498  10.510  10.231  1.00  0.00           N
ATOM      2  CA  LEU            12.730  11.073  10.769  1.00  0.00           C
ATOM      3  C   LEU            13.674   9.966  11.221  1.00  0.00           C
ATOM      4  O   LEU            13.739   8.902  10.605  1.00  0.00           O
ATOM      5  CB  LEU            12.421  12.004  11.944  1.00  0.00           C
ATOM      6  CG  LEU            11.478  13.179  11.661  1.00  0.00           C
ATOM      7  CD1 LEU            11.043  13.834  12.963  1.00  0.00           C
ATOM      8  CD2 LEU            12.126  14.201  10.736  1.00  0.00           C
TER
END
"""

lys_h = """
CRYST1   25.386   27.917   22.984  90.00  90.00  90.00 P 1
ATOM         N   LYS            10.286  15.612  10.841  1.00  0.00           N
ATOM         CA  LYS            11.191  15.832  11.962  1.00  0.00           C
ATOM         C   LYS            11.489  17.317  12.133  1.00  0.00           C
ATOM         O   LYS            10.576  18.133  12.258  1.00  0.00           O
ATOM         CB  LYS            12.495  15.060  11.752  1.00  0.00           C
ATOM         CG  LYS            12.313  13.555  11.639  1.00  0.00           C
ATOM         CD  LYS            13.643  12.847  11.440  1.00  0.00           C
ATOM         CE  LYS            13.461  11.342  11.328  1.00  0.00           C
ATOM         NZ  LYS            14.756  10.635  11.132  1.00  0.00           N
ATOM         H   LYS             9.453  15.663  11.049  1.00  0.00           H
ATOM         HA  LYS            10.771  15.506  12.786  1.00  0.00           H
ATOM         HB2 LYS            12.912  15.370  10.932  1.00  0.00           H
ATOM         HB3 LYS            13.084  15.232  12.503  1.00  0.00           H
ATOM         HG2 LYS            11.909  13.220  12.455  1.00  0.00           H
ATOM         HG3 LYS            11.746  13.357  10.878  1.00  0.00           H
ATOM         HD2 LYS            14.056  13.166  10.622  1.00  0.00           H
ATOM         HD3 LYS            14.219  13.028  12.199  1.00  0.00           H
ATOM         HE2 LYS            13.055  11.009  12.143  1.00  0.00           H
ATOM         HE3 LYS            12.892  11.147  10.567  1.00  0.00           H
ATOM         HZ1 LYS            14.617   9.758  11.070  1.00  0.00           H
ATOM         HZ2 LYS            15.297  10.794  11.821  1.00  0.00           H
ATOM         HZ3 LYS            15.148  10.919  10.385  1.00  0.00           H
TER
END
"""

lys = """
CRYST1   25.386   27.917   22.984  90.00  90.00  90.00 P 1
ATOM         N   LYS            10.286  15.612  10.841  1.00  0.00           N
ATOM         CA  LYS            11.191  15.832  11.962  1.00  0.00           C
ATOM         C   LYS            11.489  17.317  12.133  1.00  0.00           C
ATOM         O   LYS            10.576  18.133  12.258  1.00  0.00           O
ATOM         CB  LYS            12.495  15.060  11.752  1.00  0.00           C
ATOM         CG  LYS            12.313  13.555  11.639  1.00  0.00           C
ATOM         CD  LYS            13.643  12.847  11.440  1.00  0.00           C
ATOM         CE  LYS            13.461  11.342  11.328  1.00  0.00           C
ATOM         NZ  LYS            14.756  10.635  11.132  1.00  0.00           N
TER
END
"""

met_h = """
CRYST1   23.837   23.774   26.142  90.00  90.00  90.00 P 1
ATOM      1  N   MET            12.647  11.204  11.719  1.00  0.00           N
ATOM      2  CA  MET            11.653  12.243  11.957  1.00  0.00           C
ATOM      3  C   MET            11.300  12.955  10.656  1.00  0.00           C
ATOM      4  O   MET            10.126  13.108  10.319  1.00  0.00           O
ATOM      5  CB  MET            12.177  13.255  12.977  1.00  0.00           C
ATOM      6  CG  MET            12.502  12.653  14.335  1.00  0.00           C
ATOM      7  SD  MET            13.776  11.380  14.247  1.00  0.00           S
ATOM      8  CE  MET            13.901  10.907  15.970  1.00  0.00           C
ATOM      9  H   MET            13.335  11.472  11.278  1.00  0.00           H
ATOM     10  HA  MET            10.852  11.836  12.322  1.00  0.00           H
ATOM     11  HB2 MET            12.989  13.656  12.629  1.00  0.00           H
ATOM     12  HB3 MET            11.504  13.940  13.111  1.00  0.00           H
ATOM     13  HG2 MET            12.820  13.355  14.924  1.00  0.00           H
ATOM     14  HG3 MET            11.700  12.250  14.702  1.00  0.00           H
ATOM     15  HE1 MET            13.039  10.578  16.270  1.00  0.00           H
ATOM     16  HE2 MET            14.570  10.211  16.058  1.00  0.00           H
ATOM     17  HE3 MET            14.159  11.683  16.492  1.00  0.00           H
TER
END
"""

met = """
CRYST1   23.837   23.774   26.142  90.00  90.00  90.00 P 1
ATOM         N   MET            12.648  11.204  11.719  1.00  0.00           N
ATOM         CA  MET            11.654  12.243  11.957  1.00  0.00           C
ATOM         C   MET            11.302  12.956  10.656  1.00  0.00           C
ATOM         O   MET            10.128  13.108  10.319  1.00  0.00           O
ATOM         CB  MET            12.178  13.255  12.977  1.00  0.00           C
ATOM         CG  MET            12.502  12.653  14.335  1.00  0.00           C
ATOM         SD  MET            13.776  11.380  14.248  1.00  0.00           S
ATOM         CE  MET            13.901  10.907  15.971  1.00  0.00           C
TER
END
"""

mse_h = """
CRYST1   23.971   24.634   24.903  90.00  90.00  90.00 P 1
ATOM      1  N   MSE            13.013  14.421  10.982  1.00  0.00           N
ATOM      2  CA  MSE            11.597  14.085  10.914  1.00  0.00           C
ATOM      3  C   MSE            10.788  15.272  10.406  1.00  0.00           C
ATOM      4  O   MSE             9.734  15.101   9.793  1.00  0.00           O
ATOM      5  CB  MSE            11.085  13.661  12.292  1.00  0.00           C
ATOM      6  CG  MSE            11.782  12.435  12.861  1.00  0.00           C
ATOM      7  SE  MSE            11.089  11.919  14.609  1.00  0.00          SE
ATOM      8  CE  MSE            12.224  10.368  14.939  1.00  0.00           C
ATOM      9  H   MSE            13.471  14.142  10.309  1.00  0.00           H
ATOM     10  HA  MSE            11.477  13.338  10.307  1.00  0.00           H
ATOM     11  HB2 MSE            10.139  13.459  12.225  1.00  0.00           H
ATOM     12  HB3 MSE            11.221  14.393  12.914  1.00  0.00           H
ATOM     13  HG2 MSE            11.653  11.689  12.255  1.00  0.00           H
ATOM     14  HG3 MSE            12.728  12.625  12.958  1.00  0.00           H
ATOM     15  HE1 MSE            11.994   9.987  15.800  1.00  0.00           H
ATOM     16  HE2 MSE            12.077   9.715  14.237  1.00  0.00           H
ATOM     17  HE3 MSE            13.152  10.651  14.939  1.00  0.00           H
TER
END
"""

mse = """
CRYST1   23.971   24.634   24.903  90.00  90.00  90.00 P 1
ATOM         N   MSE            13.014  14.418  10.984  1.00  0.00           N
ATOM         CA  MSE            11.596  14.085  10.915  1.00  0.00           C
ATOM         C   MSE            10.791  15.276  10.409  1.00  0.00           C
ATOM         O   MSE             9.737  15.108   9.795  1.00  0.00           O
ATOM         CB  MSE            11.084  13.659  12.292  1.00  0.00           C
ATOM         CG  MSE            11.781  12.434  12.861  1.00  0.00           C
ATOM         SE  MSE            11.090  11.919  14.610  1.00  0.00          SE
ATOM         CE  MSE            12.226  10.369  14.939  1.00  0.00           C
TER
END
"""

phe_h = """
CRYST1   23.164   27.189   25.737  90.00  90.00  90.00 P 1
ATOM         N   PHE            12.221  15.187  13.192  1.00  0.00           N
ATOM         CA  PHE            12.405  14.591  11.875  1.00  0.00           C
ATOM         C   PHE            12.185  15.626  10.778  1.00  0.00           C
ATOM         O   PHE            12.417  16.818  10.981  1.00  0.00           O
ATOM         CB  PHE            11.442  13.417  11.683  1.00  0.00           C
ATOM         CG  PHE            11.637  12.305  12.673  1.00  0.00           C
ATOM         CD1 PHE            12.550  11.293  12.427  1.00  0.00           C
ATOM         CD2 PHE            10.906  12.270  13.850  1.00  0.00           C
ATOM         CE1 PHE            12.731  10.267  13.336  1.00  0.00           C
ATOM         CE2 PHE            11.083  11.247  14.763  1.00  0.00           C
ATOM         CZ  PHE            11.997  10.245  14.505  1.00  0.00           C
ATOM         H   PHE            11.602  15.784  13.222  1.00  0.00           H
ATOM         HA  PHE            13.321  14.252  11.799  1.00  0.00           H
ATOM         HB2 PHE            11.571  13.049  10.795  1.00  0.00           H
ATOM         HB3 PHE            10.532  13.741  11.776  1.00  0.00           H
ATOM         HD1 PHE            13.047  11.303  11.642  1.00  0.00           H
ATOM         HD2 PHE            10.289  12.943  14.028  1.00  0.00           H
ATOM         HE1 PHE            13.348   9.593  13.161  1.00  0.00           H
ATOM         HE2 PHE            10.587  11.234  15.549  1.00  0.00           H
ATOM         HZ  PHE            12.118   9.556  15.118  1.00  0.00           H
TER
END
"""

phe = """
CRYST1   23.164   27.189   25.737  90.00  90.00  90.00 P 1
ATOM         N   PHE            12.221  15.187  13.192  1.00  0.00           N
ATOM         CA  PHE            12.405  14.591  11.875  1.00  0.00           C
ATOM         C   PHE            12.185  15.626  10.778  1.00  0.00           C
ATOM         O   PHE            12.417  16.818  10.981  1.00  0.00           O
ATOM         CB  PHE            11.442  13.417  11.683  1.00  0.00           C
ATOM         CG  PHE            11.637  12.305  12.673  1.00  0.00           C
ATOM         CD1 PHE            12.550  11.293  12.427  1.00  0.00           C
ATOM         CD2 PHE            10.906  12.270  13.850  1.00  0.00           C
ATOM         CE1 PHE            12.731  10.267  13.336  1.00  0.00           C
ATOM         CE2 PHE            11.083  11.247  14.763  1.00  0.00           C
ATOM         CZ  PHE            11.997  10.245  14.505  1.00  0.00           C
TER
END
"""

pro_h = """
CRYST1   23.908   24.362   23.218  90.00  90.00  90.00 P 1
ATOM         N   PRO            11.501  12.360  11.686  1.00  0.00           N
ATOM         CA  PRO            12.698  12.017  10.912  1.00  0.00           C
ATOM         C   PRO            13.043  10.534  11.005  1.00  0.00           C
ATOM         O   PRO            13.706  10.018  10.105  1.00  0.00           O
ATOM         CB  PRO            13.791  12.861  11.572  1.00  0.00           C
ATOM         CG  PRO            13.069  14.029  12.142  1.00  0.00           C
ATOM         CD  PRO            11.732  13.508  12.581  1.00  0.00           C
ATOM         HA  PRO            12.595  12.280   9.973  1.00  0.00           H
ATOM         HB2 PRO            14.435  13.146  10.904  1.00  0.00           H
ATOM         HB3 PRO            14.225  12.348  12.272  1.00  0.00           H
ATOM         HG2 PRO            13.564  14.379  12.899  1.00  0.00           H
ATOM         HG3 PRO            12.963  14.710  11.459  1.00  0.00           H
ATOM         HD2 PRO            11.770  13.214  13.505  1.00  0.00           H
ATOM         HD3 PRO            11.047  14.182  12.450  1.00  0.00           H
TER
END
"""

pro = """
CRYST1   23.908   24.362   23.218  90.00  90.00  90.00 P 1
ATOM         N   PRO            11.501  12.360  11.686  1.00  0.00           N
ATOM         CA  PRO            12.698  12.017  10.912  1.00  0.00           C
ATOM         C   PRO            13.043  10.534  11.005  1.00  0.00           C
ATOM         O   PRO            13.706  10.018  10.105  1.00  0.00           O
ATOM         CB  PRO            13.791  12.861  11.572  1.00  0.00           C
ATOM         CG  PRO            13.069  14.029  12.142  1.00  0.00           C
ATOM         CD  PRO            11.732  13.508  12.581  1.00  0.00           C
TER
END
"""

ser_h = """
CRYST1   23.945   22.105   23.439  90.00  90.00  90.00 P 1
ATOM      1  N   SER            11.645  10.954  10.372  1.00  0.00           N
ATOM      2  CA  SER            12.136  10.871  11.742  1.00  0.00           C
ATOM      3  C   SER            12.176  12.252  12.386  1.00  0.00           C
ATOM      4  O   SER            11.136  12.863  12.631  1.00  0.00           O
ATOM      5  CB  SER            13.531  10.243  11.769  1.00  0.00           C
ATOM      6  OG  SER            14.023  10.155  13.095  1.00  0.00           O
ATOM      7  H   SER            12.200  11.315   9.823  1.00  0.00           H
ATOM      8  HA  SER            11.540  10.310  12.262  1.00  0.00           H
ATOM      9  HB2 SER            14.134  10.793  11.245  1.00  0.00           H
ATOM     10  HB3 SER            13.482   9.351  11.391  1.00  0.00           H
ATOM     11  HG  SER            14.798   9.805  13.094  1.00  0.00           H
TER
END
"""

ser = """
CRYST1   23.945   22.105   23.439  90.00  90.00  90.00 P 1
ATOM         N   SER            11.646  10.954  10.373  1.00  0.00           N
ATOM         CA  SER            12.139  10.870  11.742  1.00  0.00           C
ATOM         C   SER            12.179  12.251  12.387  1.00  0.00           C
ATOM         O   SER            11.140  12.863  12.631  1.00  0.00           O
ATOM         CB  SER            13.534  10.243  11.768  1.00  0.00           C
ATOM         OG  SER            14.028  10.153  13.093  1.00  0.00           O
TER
END
"""

thr_h = """
CRYST1   23.537   23.329   24.585  90.00  90.00  90.00 P 1
ATOM      1  N   THR            12.700  11.982  12.397  1.00  0.00           N
ATOM      2  CA  THR            11.257  11.774  12.395  1.00  0.00           C
ATOM      3  C   THR            10.829  10.943  13.599  1.00  0.00           C
ATOM      4  O   THR            11.667  10.431  14.341  1.00  0.00           O
ATOM      5  CB  THR            10.795  11.061  11.110  1.00  0.00           C
ATOM      6  OG1 THR            11.442   9.787  11.006  1.00  0.00           O
ATOM      7  CG2 THR            11.126  11.899   9.883  1.00  0.00           C
ATOM      8  H   THR            12.938  12.781  12.608  1.00  0.00           H
ATOM      9  HA  THR            10.810  12.633  12.443  1.00  0.00           H
ATOM     10  HB  THR             9.834  10.932  11.142  1.00  0.00           H
ATOM     11  HG1 THR            11.190   9.389  10.298  1.00  0.00           H
ATOM     12 HG21 THR            12.087  11.998   9.797  1.00  0.00           H
ATOM     13 HG22 THR            10.781  11.467   9.086  1.00  0.00           H
ATOM     14 HG23 THR            10.723  12.778   9.964  1.00  0.00           H
TER
END
"""

thr = """
CRYST1   23.537   23.329   24.585  90.00  90.00  90.00 P 1
ATOM         N   THR            12.700  11.978  12.392  1.00  0.00           N
ATOM         CA  THR            11.258  11.770  12.392  1.00  0.00           C
ATOM         C   THR            10.832  10.937  13.596  1.00  0.00           C
ATOM         O   THR            11.672  10.431  14.341  1.00  0.00           O
ATOM         CB  THR            10.793  11.061  11.107  1.00  0.00           C
ATOM         OG1 THR            11.436   9.785  11.001  1.00  0.00           O
ATOM         CG2 THR            11.126  11.899   9.881  1.00  0.00           C
TER
END
"""

trp_h = """
CRYST1   24.225   23.655   29.176  90.00  90.00  90.00 P 1
ATOM         N   TRP            12.996  11.322  12.366  1.00  0.00           N
ATOM         CA  TRP            11.680  10.883  12.812  1.00  0.00           C
ATOM         C   TRP            10.782  10.571  11.620  1.00  0.00           C
ATOM         O   TRP            10.933  11.155  10.547  1.00  0.00           O
ATOM         CB  TRP            11.029  11.956  13.687  1.00  0.00           C
ATOM         CG  TRP            11.819  12.285  14.916  1.00  0.00           C
ATOM         CD1 TRP            12.786  13.240  15.039  1.00  0.00           C
ATOM         CD2 TRP            11.709  11.659  16.201  1.00  0.00           C
ATOM         NE1 TRP            13.285  13.247  16.319  1.00  0.00           N
ATOM         CE2 TRP            12.640  12.286  17.052  1.00  0.00           C
ATOM         CE3 TRP            10.913  10.629  16.713  1.00  0.00           C
ATOM         CZ2 TRP            12.798  11.918  18.386  1.00  0.00           C
ATOM         CZ3 TRP            11.071  10.265  18.038  1.00  0.00           C
ATOM         CH2 TRP            12.006  10.908  18.860  1.00  0.00           C
ATOM         H   TRP            12.975  11.969  11.799  1.00  0.00           H
ATOM         HA  TRP            11.775  10.067  13.347  1.00  0.00           H
ATOM         HB2 TRP            10.936  12.769  13.167  1.00  0.00           H
ATOM         HB3 TRP            10.156  11.643  13.969  1.00  0.00           H
ATOM         HD1 TRP            13.066  13.803  14.354  1.00  0.00           H
ATOM         HE1 TRP            13.901  13.770  16.612  1.00  0.00           H
ATOM         HE3 TRP            10.290  10.198  16.174  1.00  0.00           H
ATOM         HZ2 TRP            13.418  12.342  18.935  1.00  0.00           H
ATOM         HZ3 TRP            10.548   9.582  18.390  1.00  0.00           H
ATOM         HH2 TRP            12.091  10.642  19.747  1.00  0.00           H
TER
END
"""

trp = """
CRYST1   24.225   23.655   29.176  90.00  90.00  90.00 P 1
ATOM         N   TRP            12.996  11.322  12.366  1.00  0.00           N
ATOM         CA  TRP            11.680  10.883  12.812  1.00  0.00           C
ATOM         C   TRP            10.782  10.571  11.620  1.00  0.00           C
ATOM         O   TRP            10.933  11.155  10.547  1.00  0.00           O
ATOM         CB  TRP            11.029  11.956  13.687  1.00  0.00           C
ATOM         CG  TRP            11.819  12.285  14.916  1.00  0.00           C
ATOM         CD1 TRP            12.786  13.240  15.039  1.00  0.00           C
ATOM         CD2 TRP            11.709  11.659  16.201  1.00  0.00           C
ATOM         NE1 TRP            13.285  13.247  16.319  1.00  0.00           N
ATOM         CE2 TRP            12.640  12.286  17.052  1.00  0.00           C
ATOM         CE3 TRP            10.913  10.629  16.713  1.00  0.00           C
ATOM         CZ2 TRP            12.798  11.918  18.386  1.00  0.00           C
ATOM         CZ3 TRP            11.071  10.265  18.038  1.00  0.00           C
ATOM         CH2 TRP            12.006  10.908  18.860  1.00  0.00           C
TER
END
"""

tyr_h = """
CRYST1   27.233   25.082   24.186  90.00  90.00  90.00 P 1
ATOM      1  N   TYR            14.138  13.819  10.940  1.00  0.00           N
ATOM      2  CA  TYR            14.744  13.436  12.209  1.00  0.00           C
ATOM      3  C   TYR            16.254  13.645  12.170  1.00  0.00           C
ATOM      4  O   TYR            16.844  14.156  13.121  1.00  0.00           O
ATOM      5  CB  TYR            14.430  11.973  12.529  1.00  0.00           C
ATOM      6  CG  TYR            12.953  11.681  12.666  1.00  0.00           C
ATOM      7  CD1 TYR            12.205  11.253  11.576  1.00  0.00           C
ATOM      8  CD2 TYR            12.305  11.832  13.886  1.00  0.00           C
ATOM      9  CE1 TYR            10.855  10.985  11.697  1.00  0.00           C
ATOM     10  CE2 TYR            10.955  11.566  14.016  1.00  0.00           C
ATOM     11  CZ  TYR            10.235  11.143  12.919  1.00  0.00           C
ATOM     12  OH  TYR             8.891  10.877  13.043  1.00  0.00           O
ATOM     13  H   TYR            14.536  13.495  10.250  1.00  0.00           H
ATOM     14  HA  TYR            14.379  13.988  12.918  1.00  0.00           H
ATOM     15  HB2 TYR            14.857  11.739  13.368  1.00  0.00           H
ATOM     16  HB3 TYR            14.778  11.416  11.816  1.00  0.00           H
ATOM     17  HD1 TYR            12.621  11.146  10.751  1.00  0.00           H
ATOM     18  HD2 TYR            12.788  12.117  14.627  1.00  0.00           H
ATOM     19  HE1 TYR            10.367  10.699  10.958  1.00  0.00           H
ATOM     20  HE2 TYR            10.535  11.672  14.839  1.00  0.00           H
ATOM     21  HH  TYR             8.640  11.015  13.844  1.00  0.00           H
TER
END
"""

tyr = """
CRYST1   27.233   25.082   24.186  90.00  90.00  90.00 P 1
ATOM         N   TYR            14.079  13.838  10.958  1.00  0.00           N
ATOM         CA  TYR            14.720  13.450  12.208  1.00  0.00           C
ATOM         C   TYR            16.225  13.686  12.139  1.00  0.00           C
ATOM         O   TYR            16.836  14.146  13.104  1.00  0.00           O
ATOM         CB  TYR            14.438  11.978  12.517  1.00  0.00           C
ATOM         CG  TYR            12.969  11.659  12.682  1.00  0.00           C
ATOM         CD1 TYR            12.205  11.232  11.603  1.00  0.00           C
ATOM         CD2 TYR            12.346  11.784  13.917  1.00  0.00           C
ATOM         CE1 TYR            10.862  10.939  11.749  1.00  0.00           C
ATOM         CE2 TYR            11.003  11.493  14.073  1.00  0.00           C
ATOM         CZ  TYR            10.267  11.071  12.986  1.00  0.00           C
ATOM         OH  TYR             8.930  10.780  13.137  1.00  0.00           O
TER
END
"""

val_h = """
CRYST1   24.395   22.670   24.718  90.00  90.00  90.00 P 1
ATOM      1  N   VAL            11.958  11.269  13.943  1.00  0.00           N
ATOM      2  CA  VAL            13.188  11.812  13.380  1.00  0.00           C
ATOM      3  C   VAL            13.588  13.090  14.110  1.00  0.00           C
ATOM      4  O   VAL            12.790  14.017  14.240  1.00  0.00           O
ATOM      5  CB  VAL            13.031  12.122  11.878  1.00  0.00           C
ATOM      6  CG1 VAL            14.350  12.614  11.294  1.00  0.00           C
ATOM      7  CG2 VAL            12.532  10.893  11.129  1.00  0.00           C
ATOM      8  H   VAL            12.071  10.552  14.404  1.00  0.00           H
ATOM      9  HA  VAL            13.902  11.164  13.485  1.00  0.00           H
ATOM     10  HB  VAL            12.374  12.827  11.769  1.00  0.00           H
ATOM     11 HG11 VAL            14.504  12.169  10.446  1.00  0.00           H
ATOM     12 HG12 VAL            15.070  12.407  11.909  1.00  0.00           H
ATOM     13 HG13 VAL            14.295  13.573  11.156  1.00  0.00           H
ATOM     14 HG21 VAL            13.125  10.148  11.316  1.00  0.00           H
ATOM     15 HG22 VAL            12.528  11.083  10.178  1.00  0.00           H
ATOM     16 HG23 VAL            11.633  10.683  11.426  1.00  0.00           H
TER
END
"""

val = """
CRYST1   24.395   22.670   24.718  90.00  90.00  90.00 P 1
ATOM      1  N   VAL            11.961  11.261  13.940  1.00  0.00           N
ATOM      2  CA  VAL            13.189  11.810  13.379  1.00  0.00           C
ATOM      3  C   VAL            13.585  13.088  14.112  1.00  0.00           C
ATOM      4  O   VAL            12.786  14.015  14.238  1.00  0.00           O
ATOM      5  CB  VAL            13.032  12.123  11.879  1.00  0.00           C
ATOM      6  CG1 VAL            14.351  12.612  11.293  1.00  0.00           C
ATOM      7  CG2 VAL            12.529  10.897  11.128  1.00  0.00           C
TER
END
"""

unk_h = """
CRYST1   15.213   13.678   12.589  90.00  90.00  90.00 P 1
ATOM      1  N   UNK A   1       8.417   8.260   6.453  1.00 20.00      A    N
ATOM      2  CA  UNK A   1       8.302   6.819   6.641  1.00 20.00      A    C
ATOM      3  C   UNK A   1       9.535   6.113   6.088  1.00 20.00      A    C
ATOM      4  O   UNK A   1       9.858   5.000   6.504  1.00 20.00      A    O
ATOM      5  CB  UNK A   1       7.045   6.291   5.950  1.00 20.00      A    C
ATOM      6  CG  UNK A   1       5.756   6.902   6.474  1.00 20.00      A    C
ATOM      7  OXT UNK A   1      10.213   6.660   5.218  1.00 20.00      A    O-1
ATOM      8  H   UNK A   1       7.976   8.561   5.778  1.00 20.00      A    H
ATOM     10  HA  UNK A   1       8.236   6.623   7.589  1.00 20.00      A    H
ATOM     11  HB1 UNK A   1       7.112   6.478   5.000  1.00 20.00      A    H
ATOM     12  HB2 UNK A   1       7.004   5.329   6.074  1.00 20.00      A    H
ATOM     13  HG1 UNK A   1       5.000   6.517   6.003  1.00 20.00      A    H
ATOM     14  HG2 UNK A   1       5.673   6.717   7.423  1.00 20.00      A    H
ATOM     15  HG3 UNK A   1       5.771   7.861   6.332  1.00 20.00      A    H
"""
#ATOM      9  H2  UNK A   1       8.151   8.678   7.192  1.00 20.00      A    H

unk = """
CRYST1   15.213   13.678   12.589  90.00  90.00  90.00 P 1
ATOM      1  N   UNK A   1       8.417   8.260   6.453  1.00 20.00      A    N
ATOM      2  CA  UNK A   1       8.302   6.819   6.641  1.00 20.00      A    C
ATOM      3  C   UNK A   1       9.535   6.113   6.088  1.00 20.00      A    C
ATOM      4  O   UNK A   1       9.858   5.000   6.504  1.00 20.00      A    O
ATOM      5  CB  UNK A   1       7.045   6.291   5.950  1.00 20.00      A    C
ATOM      6  CG  UNK A   1       5.756   6.902   6.474  1.00 20.00      A    C
ATOM      7  OXT UNK A   1      10.213   6.660   5.218  1.00 20.00      A    O-1
"""

sec_h = '''
CRYST1   14.413   13.247   13.703  90.00  90.00  90.00 P 1
ATOM      1  N   SEC A   1       5.325   7.374   5.793  1.00 20.00      A    N
ATOM      2  CA  SEC A   1       6.781   7.356   5.843  1.00 20.00      A    C
ATOM      3  C   SEC A   1       7.326   6.134   5.114  1.00 20.00      A    C
ATOM      4  O   SEC A   1       6.958   5.000   5.422  1.00 20.00      A    O
ATOM      5  CB  SEC A   1       7.262   7.371   7.286  1.00 20.00      A    C
ATOM      6 SE   SEC A   1       9.115   6.677   7.432  1.00 20.00      A   Se
ATOM      7  H   SEC A   1       5.000   7.509   5.000  1.00 20.00      A    H
ATOM      9  HA  SEC A   1       7.108   8.130   5.423  1.00 20.00      A    H
ATOM     10  HB2 SEC A   1       6.720   6.820   7.820  1.00 20.00      A    H
ATOM     11  HB3 SEC A   1       7.248   8.247   7.624  1.00 20.00      A    H
ATOM     12  HE  SEC A   1       9.413   7.295   8.703  1.00 20.00      A    H
'''
#ATOM      8  H2  SEC A   1       5.092   8.078   6.245  1.00 20.00      A    H

sec = '''
CRYST1   14.413   13.247   13.703  90.00  90.00  90.00 P 1
ATOM      1  N   SEC A   1       5.325   7.374   5.793  1.00 20.00      A    N
ATOM      2  CA  SEC A   1       6.781   7.356   5.843  1.00 20.00      A    C
ATOM      3  C   SEC A   1       7.326   6.134   5.114  1.00 20.00      A    C
ATOM      4  O   SEC A   1       6.958   5.000   5.422  1.00 20.00      A    O
ATOM      5  CB  SEC A   1       7.262   7.371   7.286  1.00 20.00      A    C
ATOM      6 SE   SEC A   1       9.115   6.677   7.432  1.00 20.00      A   Se
'''

pyl_h = '''
CRYST1   17.576   16.310   22.096  90.00  90.00  90.00 P 1
ATOM      1  N   PYL A   1      12.160   9.689   6.621  1.00 20.00      A    N
ATOM      2  CA  PYL A   1      10.780   9.317   6.332  1.00 20.00      A    C
ATOM      3  C   PYL A   1      10.215  10.184   5.213  1.00 20.00      A    C
ATOM      4  O   PYL A   1      10.665  11.310   5.000  1.00 20.00      A    O
ATOM      5  CB  PYL A   1       9.925   9.443   7.584  1.00 20.00      A    C
ATOM      6  CB2 PYL A   1       5.397   6.017  14.824  1.00 20.00      A    C
ATOM      7  CG  PYL A   1      10.064   8.268   8.550  1.00 20.00      A    C
ATOM      8  CG2 PYL A   1       6.915   5.874  14.825  1.00 20.00      A    C
ATOM      9  CD  PYL A   1       9.245   8.452   9.829  1.00 20.00      A    C
ATOM     10  CD2 PYL A   1       7.555   5.757  16.221  1.00 20.00      A    C
ATOM     11  CE  PYL A   1       9.375   7.279  10.794  1.00 20.00      A    C
ATOM     12  CE2 PYL A   1       8.342   7.039  16.315  1.00 20.00      A    C
ATOM     13  NZ  PYL A   1       8.584   7.519  11.993  1.00 20.00      A    N
ATOM     14  C2  PYL A   1       8.548   6.671  13.020  1.00 20.00      A    C
ATOM     15  CA2 PYL A   1       7.668   7.073  14.199  1.00 20.00      A    C
ATOM     16  N2  PYL A   1       8.406   7.731  15.274  1.00 20.00      A    N
ATOM     17  O2  PYL A   1       9.157   5.629  13.065  1.00 20.00      A    O
ATOM     18  H   PYL A   1      12.576  10.034   5.952  1.00 20.00      A    H
ATOM     20  HA  PYL A   1      10.759   8.389   6.051  1.00 20.00      A    H
ATOM     21  HA2 PYL A   1       7.039   7.718  13.840  1.00 20.00      A    H
ATOM     22 HB12 PYL A   1       5.037   5.890  13.932  1.00 20.00      A    H
ATOM     23  HB2 PYL A   1      10.175  10.262   8.040  1.00 20.00      A    H
ATOM     24 HB22 PYL A   1       5.000   5.356  15.413  1.00 20.00      A    H
ATOM     25  HB3 PYL A   1       9.002   9.545   7.305  1.00 20.00      A    H
ATOM     26 HB32 PYL A   1       5.132   6.899  15.128  1.00 20.00      A    H
ATOM     27  HG2 PYL A   1       9.780   7.454   8.106  1.00 20.00      A    H
ATOM     28 HG22 PYL A   1       7.146   5.082  14.314  1.00 20.00      A    H
ATOM     29  HG3 PYL A   1      11.001   8.153   8.772  1.00 20.00      A    H
ATOM     30  HD2 PYL A   1       9.529   9.263  10.279  1.00 20.00      A    H
ATOM     31 HD22 PYL A   1       6.909   5.665  16.939  1.00 20.00      A    H
ATOM     32  HD3 PYL A   1       8.309   8.574   9.603  1.00 20.00      A    H
ATOM     33 HD32 PYL A   1       8.159   5.000  16.284  1.00 20.00      A    H
ATOM     34  HE2 PYL A   1      10.302   7.145  11.044  1.00 20.00      A    H
ATOM     35 HE22 PYL A   1       8.761   7.319  17.096  1.00 20.00      A    H
ATOM     36  HE3 PYL A   1       9.075   6.458  10.373  1.00 20.00      A    H
ATOM     37  HZ  PYL A   1       8.115   8.238  12.051  1.00 20.00      A    H
'''
#ATOM     19  H2  PYL A   1      12.574   8.911   6.743  1.00 20.00      A    H

pyl = '''
CRYST1   17.576   16.310   22.096  90.00  90.00  90.00 P 1
ATOM      1  N   PYL A   1      12.160   9.689   6.621  1.00 20.00      A    N
ATOM      2  CA  PYL A   1      10.780   9.317   6.332  1.00 20.00      A    C
ATOM      3  C   PYL A   1      10.215  10.184   5.213  1.00 20.00      A    C
ATOM      4  O   PYL A   1      10.665  11.310   5.000  1.00 20.00      A    O
ATOM      5  CB  PYL A   1       9.925   9.443   7.584  1.00 20.00      A    C
ATOM      6  CB2 PYL A   1       5.397   6.017  14.824  1.00 20.00      A    C
ATOM      7  CG  PYL A   1      10.064   8.268   8.550  1.00 20.00      A    C
ATOM      8  CG2 PYL A   1       6.915   5.874  14.825  1.00 20.00      A    C
ATOM      9  CD  PYL A   1       9.245   8.452   9.829  1.00 20.00      A    C
ATOM     10  CD2 PYL A   1       7.555   5.757  16.221  1.00 20.00      A    C
ATOM     11  CE  PYL A   1       9.375   7.279  10.794  1.00 20.00      A    C
ATOM     12  CE2 PYL A   1       8.342   7.039  16.315  1.00 20.00      A    C
ATOM     13  NZ  PYL A   1       8.584   7.519  11.993  1.00 20.00      A    N
ATOM     14  C2  PYL A   1       8.548   6.671  13.020  1.00 20.00      A    C
ATOM     15  CA2 PYL A   1       7.668   7.073  14.199  1.00 20.00      A    C
ATOM     16  N2  PYL A   1       8.406   7.731  15.274  1.00 20.00      A    N
ATOM     17  O2  PYL A   1       9.157   5.629  13.065  1.00 20.00      A    O
'''

def residue_dict():
  from mmtbx.monomer_library import idealized_aa as iaa
  aac = iotbx.pdb.amino_acid_codes.one_letter_given_three_letter
  result = {}
  for aa_name in aac.keys():
    aanl = aa_name.lower()
    aanlh= aanl+"_h"
    for aanl_ in [aanl, aanlh]:
      pdb_inp = iotbx.pdb.input(source_info=None, lines=iaa.__dict__[aanl_])
      h = pdb_inp.construct_hierarchy()
      h.atoms().reset_i_seq()
      result.setdefault(aanl_, h)
  return result


 *******************************************************************************
