

 *******************************************************************************
cctbx/source_generators/__init__.py


 *******************************************************************************


 *******************************************************************************
cctbx/source_generators/eltbx/__init__.py


 *******************************************************************************


 *******************************************************************************
cctbx/source_generators/eltbx/generate_henke_cpp.py
from __future__ import absolute_import, division, print_function
from scitbx.source_generators.utils import join_open
from scitbx.source_generators.utils import write_this_is_auto_generated
import libtbx.load_env
import string
import os
from six.moves import range

this = "cctbx.source_generators.eltbx.generate_henke_cpp"

reference_tables_directory = libtbx.env.under_dist(
  "cctbx", "reference/henke/tables")

def print_header(f):
  write_this_is_auto_generated(f, this)
  print("""\
#include <cctbx/eltbx/henke.h>

namespace cctbx { namespace eltbx { namespace henke {
""", file=f)

def print_ftp_info(f):
  print("""\
/*
  Henke Tables

  The original data can be found at:
    ftp://grace.lbl.gov/pub/sf/

  From ftp://grace.lbl.gov/pub/sf/read.me:

                Low-Energy X-ray Interaction Coefficients:
                Photoabsorption, Scattering, and Reflection
                        E = 30-30,000 eV, Z = 1-92

                B. L. Henke, E. M. Gullikson, and J. C. Davis
                        Center for X-Ray Optics, 2-400
                        Lawrence Berkeley Laboratory
                        Berkeley, California 94720

  Reference: B. L. Henke, E. M. Gullikson, and J. C. Davis,
  Atomic Data and Nuclear Data Tables Vol. 54 No. 2 (July 1993).
 */
""", file=f)

def collect_tables():
  nff_files = []
  for file in os.listdir(reference_tables_directory):
    fn = file.lower().capitalize()
    if (fn[-4:] == ".nff"): nff_files.append(file)
  tables = [0] * 120
  for file in nff_files:
    f = join_open(reference_tables_directory, file, "r")
    header = f.readline()
    table = f.readlines()
    f.close()
    Symbol = header[1:3].strip()
    Z = int(header[7:9])
    assert len(Symbol) > 0
    assert Symbol[0] in 'abcdefghijklmnopqrstuvwxyz'
    assert Symbol[-1] in 'abcdefghijklmnopqrstuvwxyz'
    assert Z > 0 and Z < len(tables)
    assert tables[Z] == 0
    Symbol = Symbol.capitalize()
    tables[Z] = (Symbol, table)
  Z = tables[1:].index(0) + 1
  rest = tables[Z:]
  assert rest == [0] * len(rest)
  tables = tables[:Z]
  return tables

def print_table_block(f, tables, Z_begin, Z_end, define_noval=0):
  print("namespace table_data {", file=f)
  print(file=f)
  print("using anomalous::e_fp_fdp;", file=f)
  print(file=f)
  # Visual C++ 7.0 compilation is very slow with define_noval=1
  if (define_noval): print("#define NOVAL fp_fdp_undefined", file=f)
  for Z in range(Z_begin, Z_end):
    tab = tables[Z]
    print("e_fp_fdp " + tab[0].lower() \
      + "[] = { /* Z = " + str(Z) + " */", file=f)
    for line in tab[1]:
      flds = line.split()
      assert len(flds) == 3
      if (define_noval and flds[1] == "-9999.00"): flds[1] = "NOVAL"
      print("{%s, %s, %s}," % tuple(flds), file=f)
    print("{0, 0, 0}", file=f)
    print("};", file=f)
    print(file=f)
  if (define_noval):
    print("#undef NOVAL", file=f)
    print(file=f)
  print("} // namespace table_data", file=f)
  print(file=f)
  print("}}} // namespace cctbx::eltbx::henke", file=f)

def print_henke_cpp(f, tables):
  print("namespace table_data {", file=f)
  print(file=f)
  print("using anomalous::e_fp_fdp;", file=f)
  print(file=f)
  for tab in tables[1:]:
    print("extern e_fp_fdp " + tab[0].lower() + "[];", file=f)
  print(file=f)
  print("static const anomalous::label_z_e_fp_fdp all[] = {", file=f)
  i = 0
  for tab in tables[1:]:
    i += 1
    print("{\"" + tab[0] + "\", " + str(i) + ", " + tab[0].lower() + "},", file=f)
  print("{0, 0, 0}", file=f)
  print("};", file=f)
  print("""
  } // namespace table_data

  table::table(
    std::string const& label,
    bool exact,
    bool exception_if_no_match)
  {
    std::string work_label = basic::strip_label(label, exact);
    label_z_e_fp_fdp_ = anomalous::find_entry(
      table_data::all, work_label, exact, exception_if_no_match);
  }

  fp_fdp
  table::at_ev(double energy) const
  {
    fp_fdp raw = anomalous::interpolate(label_z_e_fp_fdp_, energy);
    if (!raw.is_valid_fp()) return raw;
    // subtract the number of electrons
    return fp_fdp(raw.fp() - label_z_e_fp_fdp_->z, raw.fdp());
  }

  table_iterator::table_iterator()
  :
    current_("H", true)
  {}

  table
  table_iterator::next()
  {
    table result = current_;
    if (current_.is_valid()) current_.label_z_e_fp_fdp_++;
    return result;
  }

}}} // namespace cctbx::eltbx::henke""", file=f)

def collect_points(lines):
  points = []
  for line in lines:
    points.append(line.split()[0])
  return points

def collect_tab_points(tables):
  tab_points = []
  for tab in tables[1:]:
    tab_points.append(collect_points(tab[1]))
  return tab_points

def compare_points(tables):
  tab_points = collect_tab_points(tables)
  for i in range(len(tab_points)-1):
    for j in range(i+1, len(tab_points)):
      if (tab_points[i] == tab_points[j]):
        print("points %d==%d" % (i+1,j+1))

def run(target_dir):
  tables = collect_tables()
  compare_points(tables) # establish that each list of data points is unique
  f = join_open(target_dir, "henke.cpp", "w")
  print_header(f)
  print_ftp_info(f)
  print_henke_cpp(f, tables)
  f.close()
  Z_block = 12
  for Z_begin in range(1, len(tables), Z_block):
    Z_end = min(len(tables), Z_begin + Z_block)
    f = join_open(
      target_dir, "henke_tables_%02d_%02d.cpp" % (Z_begin, Z_end-1), "w")
    print_header(f)
    print_table_block(f, tables, Z_begin, Z_end)
    f.close()

if (__name__ == "__main__"):
  run(".")


 *******************************************************************************


 *******************************************************************************
cctbx/source_generators/eltbx/generate_sasaki_cpp.py
from __future__ import absolute_import, division, print_function
from scitbx.source_generators.utils import join_open
from scitbx.source_generators.utils import write_this_is_auto_generated
import libtbx.load_env
import string
from six.moves import range

this = "cctbx.source_generators.eltbx.generate_sasaki_cpp"

reference_tables_directory = libtbx.env.under_dist(
  "cctbx", "reference/sasaki")

def print_header(f):
  write_this_is_auto_generated(f, this)
  print("""\
#include <cctbx/eltbx/sasaki.h>
#include <scitbx/constants.h>

namespace cctbx { namespace eltbx { namespace sasaki {

namespace table_data {

using namespace detail;
""", file=f)

def print_ftp_info(f):
  print("""\
/*
  Sasaki Tables

  Scattering factors based on the Cromer and Liberman method.
  Original data can be downloaded from:
  ftp://pfweis.kek.jp/pub/Sasaki-table/
  Any reports or publications of these data will acknowledge
  its use by the citation:
    Anomalous scattering factors
        S.Sasaki (1989) Numerical Tables of Anomalous Scattering Factors
        Calculated by the Cromer and Liberman Method,
        KEK Report, 88-14, 1-136
  Questions about these data should be addressed to Dr.Satoshi Sasaki,
  Tokyo Institute of Technology.  Email: sasaki@nc.titech.ac.jp
 */
""", file=f)

class sasaki_table(object):

  def __init__(self, atomic_symbol, atomic_number,
               edge_label=0, edge_wave_length=0):
    assert edge_label in (0, "K", "L1", "L2", "L3")
    self.atomic_symbol = atomic_symbol.lower().capitalize()
    self.atomic_number = atomic_number
    self.edge_label = edge_label
    self.edge_wave_length = edge_wave_length
    self.fp = []
    self.fdp = []

  def check_first_last(self, i_block, first, last):
    assert abs(
      self.first + (i_block * self.incr1000) / 1000. - first) < 1.e-8
    assert abs(first + 9 * self.incr1000 / 10000. - last) < 1.e-8

  def validate(self):
    assert len(self.fp) == len(self.fdp)
    assert len(self.fp) == 280

def collect_tables(file_object, edge):
  import re
  tables = []
  table = 0
  for line in file_object:
    if (not edge):
      m = re.match(
        r"ATOMIC SYMBOL\s+=\s+(\S+)\s+ATOMIC NUMBER\s+=\s+(\d+)", line)
    else:
      m = re.match(
        r"ATOMIC SYMBOL\s+=\s+(\S+)\s+ATOMIC NUMBER\s+=\s+(\d+)"
        + r"\s+(\S+)\s+ABSORPTION EDGE\s+\(\s*(\S+)\s+A", line)
    if (m):
      if (table != 0):
        table.validate()
        tables.append(table)
      if (not edge):
        table = sasaki_table(m.group(1), m.group(2))
      else:
        table = sasaki_table(m.group(1), m.group(2), m.group(3), m.group(4))
      i_block = 0
      continue
    flds = line.split()
    if (flds[1] == "TO"):
      assert flds[3] == "F'"
      first, last = [float(flds[i]) for i in (0, 2)]
      flds = flds[4:]
      if (i_block == 0):
        table.first = 0.1
        table.incr1000 = 100
      table.check_first_last(i_block, first, last)
      i_block += 1
      table.fp += flds
    elif (flds[0].find(",") >= 0):
      assert flds[1] == "F'"
      first, last = [float(x) for x in flds[0].split(",")]
      flds = flds[2:]
      if (i_block == 0):
        table.first = first
        table.incr1000 = 1
      table.check_first_last(i_block, first, last)
      i_block += 1
      table.fp += flds
    else:
      assert flds[0] == 'F"'
      flds = flds[1:]
      table.fdp += flds
    assert len(flds) == 10
  if (table != 0):
    table.validate()
    tables.append(table)
  return tables

class table_references(object):

  def __init__(self, wide):
    self.wide = wide
    self.k = 0
    self.l1 = 0
    self.l2 = 0
    self.l3 = 0

def combine_tables(tables_wide, tables_k, tables_l):
  ctab_dict = {}
  for w in tables_wide:
    ctab_dict[w.atomic_symbol] = table_references(w)
  for k in tables_k:
    ctab_dict[k.atomic_symbol].k = k
  for l in tables_l:
    if (l.edge_label == "L1"):
      ctab_dict[l.atomic_symbol].l1 = l
    elif (l.edge_label == "L2"):
      ctab_dict[l.atomic_symbol].l2 = l
    else:
      assert l.edge_label == "L3"
      ctab_dict[l.atomic_symbol].l3 = l
  ctab_list = []
  for w in tables_wide:
    ctab_list.append(ctab_dict[w.atomic_symbol])
  return ctab_list

def print_table_block(f, tables_combined, i_begin, i_end):
  for i_table in range(i_begin, i_end):
    ctab = tables_combined[i_table]
    for edge in (ctab.wide, ctab.k, ctab.l1, ctab.l2, ctab.l3):
      if (not edge): continue
      lbl = edge.atomic_symbol.lower()
      ann = "Z = " + str(ctab.wide.atomic_number)
      if (edge.edge_label):
        lbl += "_" + edge.edge_label.lower()
        ann += "; edge at " + edge.edge_wave_length + " A"
      print("raw " + lbl + "[] = { // " + ann, file=f)
      for i in range(len(edge.fp)):
        print("{%s,%s}," % (edge.fp[i], edge.fdp[i]), file=f)
      print("};", file=f)
  print(file=f)
  print("} // namespace table_data", file=f)
  print(file=f)
  print("}}} // namespace cctbx::eltbx::sasaki", file=f)

def print_sasaki_cpp(f, tables_combined):
  for ctab in tables_combined:
    print("extern raw " + ctab.wide.atomic_symbol.lower() + "[];", file=f)
    for edge in (ctab.k, ctab.l1, ctab.l2, ctab.l3):
      if (edge):
        assert edge.atomic_symbol == ctab.wide.atomic_symbol
        print("extern raw " + edge.atomic_symbol.lower() \
          + "_" + edge.edge_label.lower() + "[];".lower(), file=f)
  print(file=f)
  print("static const detail::info all[] = {", file=f)
  i = 0
  for ctab in tables_combined:
    i += 1
    out = '{"' + ctab.wide.atomic_symbol \
        + '", ' + str(ctab.wide.atomic_number)
    out += ", " + ctab.wide.atomic_symbol.lower()
    for edge in (ctab.k, ctab.l1, ctab.l2, ctab.l3):
      if (edge):
        out += ", %.4f" % (edge.first,)
        out += ", " + edge.atomic_symbol.lower()
        out += "_" + edge.edge_label.lower()
      else:
        out += ", 0., 0"
    out += "},"
    print(out, file=f)
  print("{0, 0, 0, 0., 0, 0., 0, 0., 0, 0., 0}", file=f)
  print("};", file=f)
  print("""
  } // namespace table_data

  table::table(
    std::string const& label,
    bool exact,
    bool exception_if_no_match)
  {
    std::string work_label = basic::strip_label(label, exact);
    info_ = anomalous::find_entry(
      table_data::all, work_label, exact, exception_if_no_match);
  }

  namespace detail {
  namespace {

    long
    find_table_interval(double given, double first, double incr,
                        double tolerance = 1.e-8)
    {
      double span = (n_raw - 1) * incr;
      double f = (given - first) / span;
      if (f < -tolerance || f > (1.+tolerance)) return -1;
      long i = static_cast<long>(f * (n_raw - 1));
      if (i == n_raw - 1) i--;
      return i;
    }

    bool
    interpolate(double given, double first, const raw* table, bool edge,
                fp_fdp& result)
    {
      if (!table) return false;
      double incr;
      if (!edge) incr = wide_incr;
      else       incr = edge_incr;
      long i = find_table_interval(given, first, incr);
      if (i < 0) return false;
      double x = (given - first) / incr - double(i);
      double fp  = table[i].fp  + x * (table[i+1].fp  - table[i].fp);
      double fdp = table[i].fdp + x * (table[i+1].fdp - table[i].fdp);
      result = fp_fdp(fp, fdp);
      return true;
    }

  } // namespace <anonymous>
  } // namespace detail

  fp_fdp
  table::at_ev(double energy) const
  {
    using detail::interpolate;
    fp_fdp result(fp_fdp_undefined, fp_fdp_undefined);
    double given = scitbx::constants::factor_ev_angstrom / energy;
    if (interpolate(given, info_->first_k, info_->k, true, result)) {
      return result;
    }
    if (interpolate(given, info_->first_l1, info_->l1, true, result)) {
      return result;
    }
    if (interpolate(given, info_->first_l2, info_->l2, true, result)) {
      return result;
    }
    if (interpolate(given, info_->first_l3, info_->l3, true, result)) {
      return result;
    }
    interpolate(given, detail::first_wide, info_->wide, false, result);
    return result;
  }

  table_iterator::table_iterator()
  :
    current_("Li", true)
  {}

  table
  table_iterator::next()
  {
    table result = current_;
    if (current_.is_valid()) current_.info_++;
    return result;
  }

}}} // namespace cctbx::eltbx::sasaki""", file=f)

def run(target_dir):
  f = join_open(reference_tables_directory, "fpwide.tbl", "r")
  tables_wide = collect_tables(f, 0)
  f.close()
  f = join_open(reference_tables_directory, "fpk.tbl", "r")
  tables_k = collect_tables(f, 1)
  f.close()
  f = join_open(reference_tables_directory, "fpl.tbl", "r")
  tables_l = collect_tables(f, 1)
  f.close()
  tables_combined = combine_tables(tables_wide, tables_k, tables_l)
  f = join_open(target_dir, "sasaki.cpp", "w")
  print_header(f)
  print_ftp_info(f)
  print_sasaki_cpp(f, tables_combined)
  f.close()
  block_size = 12
  for i_begin in range(0, len(tables_combined), block_size):
    i_end = min(len(tables_combined), i_begin + block_size)
    f = join_open(
      target_dir, "sasaki_tables_%02d_%02d.cpp" % (i_begin+1, i_end), "w")
    print_header(f)
    print_table_block(f, tables_combined, i_begin, i_end)
    f.close()

if __name__ == "__main__":
  run(".")


 *******************************************************************************


 *******************************************************************************
cctbx/source_generators/flex_fwd_h.py
from __future__ import absolute_import, division, print_function
from scitbx.source_generators.flex_fwd_h import write

this = "cctbx.source_generators.flex_fwd_h"

common_code = """\
#ifndef CCTBX_BOOST_PYTHON_FLEX_FWD_H
#define CCTBX_BOOST_PYTHON_FLEX_FWD_H

#include <scitbx/array_family/boost_python/flex_fwd.h>

#if defined(__GNUC__) && __GNUC__ == 3 && __GNUC_MINOR__ == 2
// work around weird gcc 3.2 problem:
//   def.hpp must be included before boost/math/special_functions/atanh.hpp
//   (as of boost svn revison 39792)
#include <boost/python/def.hpp>
#endif

%s#endif // CCTBX_BOOST_PYTHON_FLEX_FWD_H
"""

full_code = """\
%s
#include <cctbx/maptbx/accessors/c_grid_p1.h>
#include <cctbx/maptbx/accessors/c_grid_padded_p1.h>
#include <cctbx/miller.h>
#include <cctbx/hendrickson_lattman.h>
#include <cctbx/xray/scatterer.h>

#if defined(__sgi) && !defined(__GNUC__)

namespace cctbx { namespace boost_python {

  template <typename T>
  struct flex_fwd
  {
    friend void f(scitbx::af::versa<T, maptbx::c_grid_p1<3> > const&);
    friend void f(scitbx::af::versa<T, maptbx::c_grid_padded_p1<3> > const&);
    friend void f(scitbx::af::ref<T, maptbx::c_grid_p1<3> > const&);
    friend void f(scitbx::af::ref<T, maptbx::c_grid_padded_p1<3> > const&);
    friend void f(scitbx::af::const_ref<T, maptbx::c_grid_p1<3> > const&);
    friend void f(scitbx::af::const_ref<T, maptbx::c_grid_padded_p1<3> > const&);
  };

  inline void
  flex_fwd_types()
  {
    flex_fwd<bool>();
    flex_fwd<int>();
    flex_fwd<long>();
    flex_fwd<std::size_t>();
    flex_fwd<float>();
    flex_fwd<double>();
    flex_fwd<std::complex<double> >();
    flex_fwd<std::string>();

    scitbx::af::boost_python::flex_fwd<miller::index<> >();
    scitbx::af::boost_python::flex_fwd<hendrickson_lattman<> >();
    scitbx::af::boost_python::flex_fwd<xray::scatterer<> >();
  }

}} // namespace cctbx::boost_python

#endif // defined(__sgi) && !defined(__GNUC__)

"""

def run(target_dir):
  write(this, target_dir, common_code, full_code)

if (__name__ == "__main__"):
  run(".")


 *******************************************************************************
