

 *******************************************************************************
mmtbx/wwpdb/__init__.py


 *******************************************************************************


 *******************************************************************************
mmtbx/wwpdb/rcsb_entry_request.py
"""
Module defines class for storing information that can be extracted from
RCSB about an entry, that being experimental or computational.

https://data.rcsb.org/index.html#data-api
https://search.rcsb.org/index.html#search-api

"""

from __future__ import absolute_import, division, print_function

import json
import requests
from mmtbx.wwpdb.rcsb_web_services import report_base_url
from libtbx.utils import Sorry

full_page_request = '''
{
  entries(entry_ids: %s) {
    rcsb_id
    entry {
      id
    }
    rcsb_entry_container_identifiers {
      entity_ids
      pubmed_id
      emdb_ids
      assembly_ids
    }
    rcsb_associated_holdings {
      rcsb_repository_holdings_current_entry_container_identifiers {
        assembly_ids
      }
      rcsb_repository_holdings_current {
        repository_content_types
      }
    }
    rcsb_comp_model_provenance {
      source_url
      source_pae_url
      entry_id
      source_db
    }
    pdbx_database_status {
      pdb_format_compatible
    }
    struct {
      title
    }
    rcsb_ma_qa_metric_global {
      model_id
      ma_qa_metric_global {
        name
        value
        type
        description
        type_other_details
      }
    }
    rcsb_primary_citation {
      id
      pdbx_database_id_DOI
    }
    pubmed {
      rcsb_pubmed_container_identifiers {
        pubmed_id
      }
      rcsb_pubmed_central_id
      rcsb_pubmed_doi
      rcsb_pubmed_abstract_text
      rcsb_pubmed_affiliation_info
    }
    pdbx_deposit_group {
      group_id
      group_type
    }
    rcsb_external_references {
      id
      type
      link
    }
    pdbx_database_PDB_obs_spr {
      id
      replace_pdb_id
    }
    struct_keywords {
      pdbx_keywords
      text
    }
    exptl {
      method
    }
    cell {
      length_a
      length_b
      length_c
      angle_alpha
      angle_beta
      angle_gamma
    }
    symmetry {
      space_group_name_H_M
    }
    software {
      classification
      name
    }
    rcsb_accession_info {
      deposit_date
      initial_release_date
      major_revision
      minor_revision
    }
    pdbx_audit_revision_history {
      ordinal
      data_content_type
      major_revision
      minor_revision
      revision_date
    }
    pdbx_audit_revision_details {
      ordinal
      revision_ordinal
      data_content_type
      type
      description
    }
    pdbx_audit_revision_group {
      ordinal
      revision_ordinal
      data_content_type
      group
    }
    pdbx_database_related {
      content_type
      db_id
      details
    }
    audit_author {
      name
    }
    pdbx_audit_support {
      funding_organization
      country
      grant_number
      ordinal
    }
    pdbx_initial_refinement_model {
      type
    }
    refine {
      pdbx_refine_id
      ls_d_res_high
      ls_R_factor_R_work
      ls_R_factor_R_free
      ls_R_factor_obs
    }
    pdbx_vrpt_summary_geometry {
      percent_ramachandran_outliers
      percent_rotamer_outliers
      clashscore
    }
    pdbx_nmr_ensemble {
      conformers_calculated_total_number
      conformers_submitted_total_number
      conformer_selection_criteria
    }
    em_experiment {
      aggregation_state
      reconstruction_method
    }
    em_3d_reconstruction {
      resolution
    }
    em_software {
      category
      name
      version
    }
    citation {
      id
      title
      rcsb_journal_abbrev
      rcsb_authors
      year
      journal_volume
      page_first
      page_last
      pdbx_database_id_PubMed
      pdbx_database_id_DOI
    }
    pdbx_database_related {
      db_id
      db_name
    }
    rcsb_entry_info {
      molecular_weight
      deposited_atom_count
      deposited_model_count
      deposited_polymer_monomer_count
      deposited_modeled_polymer_monomer_count
      deposited_unmodeled_polymer_monomer_count
      polymer_entity_count_protein
      polymer_entity_count_nucleic_acid
      polymer_entity_count_nucleic_acid_hybrid
    }
    rcsb_entry_group_membership {
      group_id
      aggregation_method
    }
    rcsb_binding_affinity {
      comp_id
      type
      value
      unit
      reference_sequence_identity
      provenance_code
      link
    }
    branched_entities {
      rcsb_id
      rcsb_branched_entity_container_identifiers {
        entry_id
        entity_id
        asym_ids
        auth_asym_ids
        reference_identifiers {
          provenance_source
          resource_name
          resource_accession
        }
      }
      prd {
        rcsb_id
        pdbx_reference_molecule {
          prd_id
          chem_comp_id
          name
          type
          class
        }
      }
      rcsb_branched_entity {
        pdbx_description
        formula_weight
      }
      pdbx_entity_branch {
        rcsb_branched_component_count
      }
      branched_entity_instances {
        rcsb_branched_entity_instance_container_identifiers {
          entry_id
          entity_id
          asym_id
          auth_asym_id
        }
        rcsb_branched_struct_conn {
          connect_type
          role
          ordinal_id
          connect_partner {
            label_asym_id
            label_seq_id
            label_comp_id
          }
          connect_target {
            auth_seq_id
            label_asym_id
            label_comp_id
          }
        }
        rcsb_branched_instance_feature {
          name
          type
          feature_value {
            comp_id
            details
          }
        }
      }
    }
    polymer_entities {
      polymer_entity_instances {
        rcsb_polymer_entity_instance_container_identifiers {
          auth_asym_id
          asym_id
          entry_id
          entity_id
        }
      }
      rcsb_polymer_entity_container_identifiers {
        entry_id
        entity_id
        asym_ids
        auth_asym_ids
        uniprot_ids
        reference_sequence_identifiers {
          database_accession
        }
      }
      uniprots {
        rcsb_id
        rcsb_uniprot_protein {
          source_organism {
            scientific_name
          }
        }
        rcsb_uniprot_external_reference {
          reference_name
          reference_id
        }
      }
      rcsb_polymer_entity {
        pdbx_description
        rcsb_ec_lineage {
          id
        }
        pdbx_ec
        rcsb_enzyme_class_combined {
          ec
          provenance_source
        }
      }
      rcsb_polymer_entity_annotation {
        type
        annotation_lineage {
          name
          depth
        }
      }
      rcsb_polymer_entity_group_membership {
        group_id
        similarity_cutoff
        aggregation_method
      }
      entity_poly {
        type
        rcsb_entity_polymer_type
        pdbx_seq_one_letter_code_can
        rcsb_sample_sequence_length
        rcsb_mutation_count
      }
      rcsb_entity_source_organism {
        scientific_name
        ncbi_scientific_name
        rcsb_gene_name {
          value
          provenance_source
        }
      }
      rcsb_entity_host_organism {
        ncbi_scientific_name
      }
      prd {
        rcsb_id
        pdbx_reference_molecule {
          prd_id
          chem_comp_id
          name
          type
          class
        }
      }
      chem_comp_nstd_monomers {
        chem_comp {
          id
          name
          formula
          type
          mon_nstd_parent_comp_id
        }
      }
      polymer_entity_instances {
        rcsb_polymer_instance_annotation {
          type
          annotation_id
        }
        rcsb_polymer_struct_conn {
          role
          connect_type
          connect_partner {
            label_asym_id
          }
          connect_target {
            label_asym_id
          }
        }
      }
    }
    nonpolymer_entities {
      rcsb_nonpolymer_entity_container_identifiers {
        entry_id
        entity_id
        auth_asym_ids
        asym_ids
        nonpolymer_comp_id
      }
      rcsb_nonpolymer_entity_annotation {
        type
      }
      nonpolymer_entity_instances {
        rcsb_nonpolymer_entity_instance_container_identifiers {
          auth_seq_id
          auth_asym_id
          asym_id
          entry_id
          entity_id
        }
        rcsb_nonpolymer_instance_validation_score {
          ranking_model_fit
          ranking_model_geometry
          average_occupancy
          is_subject_of_investigation
          is_subject_of_investigation_provenance
        }
      }
      rcsb_nonpolymer_entity {
        pdbx_description
      }
      nonpolymer_comp {
        chem_comp {
          id
          formula_weight
          name
          formula
        }
        pdbx_reference_molecule {
          prd_id
          chem_comp_id
          type
          name
          class
        }
        rcsb_chem_comp_descriptor {
          InChIKey
        }
      }
    }
    assemblies {
      rcsb_assembly_container_identifiers {
        assembly_id
      }
      pdbx_struct_assembly {
        rcsb_details
        method_details
        rcsb_candidate_assembly
      }
      pdbx_struct_assembly_auth_evidence {
        experimental_support
      }
      rcsb_struct_symmetry {
        kind
        type
        symbol
        oligomeric_state
        stoichiometry
      }
      rcsb_assembly_info {
        modeled_polymer_monomer_count
      }
    }
  }
}
'''


class rcsb_entry_info(object):
  """Class to hold information about an entry in form of json received from
  RCSB and provide parts of it in convenient form."""
  def __init__(self, json_data):
    self.data = json_data
  def __str__(self):
    return "rcsb_entry_info(%s)" % self.data['rcsb_id']
  def __repr__(self):
    return "rcsb_entry_info(%s)" % self.data['rcsb_id']
  def _get_value(self, path, convert_type=None):
    """Helper function to safely get nested dictionary values.

    Args:
        path (list): List of keys/indices to traverse the data structure
        convert_type (type, optional): Type to convert the value to (e.g., float)

    Returns:
        The value if found and successfully converted, None otherwise
    """
    try:
      value = self.data
      for key in path:
        value = value[key]
      return convert_type(value) if convert_type else value
    except (TypeError, ValueError, KeyError, IndexError):
      return None

  def get_pdb_id(self):
    return self.data['rcsb_id']

  def get_experimental_method(self):
    return self._get_value(['exptl', 0, 'method'])
  def is_xray(self):
    return self.get_experimental_method() == "X-RAY DIFFRACTION"
  def get_resolution(self):
    return self._get_value(['refine', 0, 'ls_d_res_high'], float)
  def get_rwork(self):
    return self._get_value(['refine', 0, 'ls_R_factor_R_work'], float)
  def get_rfree(self):
    return self._get_value(['refine', 0, 'ls_R_factor_R_free'], float)
  def get_rama_outliers(self):
    return self._get_value(['pdbx_vrpt_summary_geometry', 0, 'percent_ramachandran_outliers'], float)
  def get_rota_outliers(self):
    return self._get_value(['pdbx_vrpt_summary_geometry', 0, 'percent_rotamer_outliers'], float)
  def get_clashscore(self):
    return self._get_value(['pdbx_vrpt_summary_geometry', 0, 'clashscore'], float)

  #=============================================================================
  def is_computational(self):
    return self.data['rcsb_ma_qa_metric_global'] is not None
  def get_plddt(self):
    try:
      for metric_global in self.data['rcsb_ma_qa_metric_global'][0]['ma_qa_metric_global']:
        if metric_global['name'] == 'pLDDT':
          return metric_global['value']
    except TypeError:
      return None
  def get_source_url(self):
    return self._get_value(['rcsb_comp_model_provenance', 'source_url'])
  def get_source_pae_url(self):
    return self._get_value(['rcsb_comp_model_provenance', 'source_pae_url'])


def get_info(pdb_ids):
  """Get information about entries. Accepts both experimental and computational ids.

  Args:
      pdb_ids (list): PDB IDs, e.g. ["1UCS", "7P0Q", "AF_AFP12102F1", "AF_AFP35751F1"]

  Returns:
      list of rcsb_entry_info: list of objects - one object for one id.
  """
  pdb_ids_string = "%s" % pdb_ids
  pdb_ids_string = pdb_ids_string.replace("'", '"')
  r = requests.post(report_base_url, json={"query":full_page_request % pdb_ids_string})
  data_entries = r.json()['data']['entries']
  # print(json.dumps(r.json(), indent=4))

  result = [rcsb_entry_info(entry) for entry in data_entries]
  if len(result) != len(pdb_ids):
    raise Sorry("There are %d invalid pdb ids for which RCSB did not return result." % (len(pdb_ids)-len(result)))
  # for r in result:
  #   print (r.get_pdb_id(), r.is_computational(), r.get_experimental_method(), r.get_plddt())
  return result


 *******************************************************************************


 *******************************************************************************
mmtbx/wwpdb/rcsb_web_services.py

"""
Module for querying the RCSB web server using the REST API, as described here:
https://search.rcsb.org/index.html#search-api
"""

from __future__ import absolute_import, division, print_function
import libtbx.utils
import json
import requests

search_base_url = "https://search.rcsb.org/rcsbsearch/v2/query?json="
report_base_url = "https://data.rcsb.org/graphql"

def value_attribute_filter(attribute_name, operator, value):
  assert operator in ["greater", "less", "less_or_equal", "greater_or_equal", "exact_match"]
  filt = {
    "type": "terminal",
    "service": "text",
    "parameters": {
      "attribute": attribute_name,
      "operator": operator,
      "value" : value
    }
  }
  return filt

def data_only_filter():
  return value_attribute_filter(
      "rcsb_accession_info.has_released_experimental_data", "exact_match", "Y")

def xray_only_filter():
  return value_attribute_filter(
      "exptl.method", "exact_match", "X-RAY DIFFRACTION")

def polymeric_type_filter(value="Protein (only)"):
  assert value in ["Protein (only)", "Protein/NA", "Nucleic acid (only)", "Other"]
  return value_attribute_filter(
      "rcsb_entry_info.selected_polymer_entity_types", "exact_match", value)

def clashscore_filter(operator, value):
  return value_attribute_filter(
      "pdbx_vrpt_summary_geometry.clashscore", operator, value)

def rama_outliers_filter(operator, value):
  return value_attribute_filter(
      "pdbx_vrpt_summary_geometry.percent_ramachandran_outliers", operator, value)

def rota_outliers_filter(operator, value):
  return value_attribute_filter(
      "pdbx_vrpt_summary_geometry.percent_rotamer_outliers", operator, value)

def resolution_filter(operator, value):
  return value_attribute_filter(
      "rcsb_entry_info.diffrn_resolution_high.value", operator, value)

sort_by_res = \
    {
      "sort_by": "rcsb_entry_info.resolution_combined",
      "direction": "asc"
    }

def add_nodes_to_query_if_needed_in_place(query_json):
  if "nodes" not in query_json["query"].keys():
    query_json["query"]["type"] = "group"
    query_json["query"]["logical_operator"] = "and"
    del query_json["query"]["service"]
    query_json["query"]["nodes"] = []

def post_query(query_json=None, xray_only=True, d_max=None, d_min=None,
    protein_only=False, data_only=False, log=None,
    sort_by_resolution=False, clashscore_range=None,
    rama_outliers_range=None, rota_outliers_range=None):
  """  Make request to RCSB search API and return list of PDB ids, optionally with
  chain IDs. If query_json is not supplied, generic one will be used which
  searches for everything in PDB. It will be enhanced according to other parameters.


  Args:
      query_json (dict, optional): _description_. Defaults to None.
      xray_only (bool, optional): Return only xray structures. Defaults to True.
      d_max (_type_, optional): Max resolution. Defaults to None.
      d_min (_type_, optional): Min resolution. Defaults to None.
      protein_only (bool, optional): Return only protein entries. Defaults to False.
      data_only (bool, optional): Return only entries with experimental data. Defaults to False.
      log (_type_, optional): Handler for log. Defaults to None.
      sort_by_resolution (bool, optional): Sort by entry resolution. Defaults to False.
      clashscore_range (tuple): tuple of min and max clashscore, e.g. (0,10) or None

  Returns:
      list: PDB ids
  """
  if query_json is None:
    query_json = {
        "query": {
          "type": "terminal",
          "service": "text"
        },
        "return_type": "entry",
        "request_options": {
          "return_all_hits": True,
        }
      }
  if d_max is not None and d_min is not None:
    assert d_max > d_min

  if (log is None):
    log = libtbx.utils.null_out()
  print("Setting up RCSB server query:", file=log)
  if (xray_only):
    print("  limiting to X-ray structures", file=log)
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(xray_only_filter())
    if (data_only):
      add_nodes_to_query_if_needed_in_place(query_json)
      query_json["query"]["nodes"].append(data_only_filter())
  if d_max is not None:
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(resolution_filter("less", d_max))
  if d_min is not None:
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(resolution_filter("greater", d_min))
  if clashscore_range is not None:
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(clashscore_filter("greater", clashscore_range[0]))
    query_json["query"]["nodes"].append(clashscore_filter("less", clashscore_range[1]))
  if rama_outliers_range is not None:
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(rama_outliers_filter("greater", rama_outliers_range[0]))
    query_json["query"]["nodes"].append(rama_outliers_filter("less", rama_outliers_range[1]))
  if rota_outliers_range is not None:
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(rota_outliers_filter("greater", rota_outliers_range[0]))
    query_json["query"]["nodes"].append(rota_outliers_filter("less", rota_outliers_range[1]))
  if (protein_only):
    add_nodes_to_query_if_needed_in_place(query_json)
    query_json["query"]["nodes"].append(polymeric_type_filter("Protein (only)"))
  if (sort_by_resolution):
    if "sort" not in query_json["request_options"].keys():
      query_json["request_options"]["sort"] = []
    query_json["request_options"]["sort"].append(sort_by_res)
    print("  will sort by resolution", file=log)
  if "results_verbosity" not in query_json["request_options"].keys():
    query_json["request_options"]["results_verbosity"] = "compact"
  print("  executing HTTP request...", file=log)
  # print(json.dumps(query_json, indent=4))
  r = requests.post(search_base_url, json=query_json)
  res_ids = []
  # print('r.status_code', r.status_code)
  if r.status_code == 200:
    r_json = r.json()
    # print(json.dumps(r_json, indent=4))
    res_ids = r_json["result_set"]
  return res_ids

def sequence_search(
    sequence,
    identity_cutoff=90,
    target="pdb_protein_sequence",
    e_value_cutoff=1000000,
    **kwds):
  """
  Homology search for an amino acid sequence.  The advantage of using this
  service over the NCBI/EBI BLAST servers (in iotbx.pdb.fetch) is the ability
  to exclude non-Xray structures.

  identity_cutoff : int, optional
      Apply sequence filtering to remove structures with greater than this
      percentage sequence identity.
  e_value_cutoff : float, optional
      Hits with an E-Value above the cutoff value are filtered out
  """
  sequence_query = """
{
  "query": {
    "type": "group",
    "logical_operator": "and",
    "nodes": [
      {
        "type": "terminal",
        "service": "sequence",
        "parameters": {
          "evalue_cutoff": %s,
          "identity_cutoff": %s,
          "target": "%s",
          "value": "%s"
        }
      }
    ]
  },
  "return_type": "polymer_entity",
  "request_options": {
    "return_all_hits": true,
    "scoring_strategy": "sequence",
    "sort": [
      {
        "sort_by": "score",
        "direction": "desc"
      }
    ]
  }
}"""
  assert target in ["pdb_protein_sequence", "pdb_dna_sequence", "pdb_rna_sequence"]
  assert 0 < identity_cutoff < 100
  sqr = sequence_query % (e_value_cutoff, identity_cutoff/100, target, sequence)
  jsq = json.loads(sqr)
  return post_query(query_json=jsq, **kwds)


def reference_chain_search(sequence, identity_cutoff=0.9, include_xray=True, include_csm=False, **kwds):
  """ Searches sequence optionally include computed models,
  returns pdb_id with chain id that matches.

  Args:
      sequence (str): _description_
      identity_cutoff (float, optional): _description_. Defaults to 0.9.
  """
  model_choice = ""
  if include_xray:
    model_choice = '"experimental"'
  if include_csm and include_xray:
    model_choice += ', "computational"'
  if include_csm and not include_xray:
    model_choice = '"computational"'

  query= """
{
  "query": {
    "type": "terminal",
    "service": "sequence",
    "parameters": {
      "evalue_cutoff": 0.1,
      "identity_cutoff": %s,
      "sequence_type": "protein",
      "value": "%s"
    }
  },
  "return_type": "polymer_instance",
  "request_options": {
    "return_all_hits": true,
    "results_content_type": [ %s ],
    "scoring_strategy": "combined",
    "sort": [
      {
        "sort_by": "reflns.d_resolution_high",
        "direction": "asc"
      }
    ]
  }
}
"""
  sqr = query % (identity_cutoff, sequence, model_choice)
  # print(sqr)
  jsq = json.loads(sqr)
  return post_query(query_json=jsq, xray_only=False, **kwds)


def chemical_id_search(resname, **kwds):
  """
  Find all entry IDs with the specified chemical ID.

  Parameters
  ----------
  resname : str
  kwds : dict
      Keyword arguments passed to post_query.

  Examples
  --------
  >>> from mmtbx.wwpdb.rcsb_web_services import chemical_id_search
  >>> len(chemical_id_search("ZN", data_only=True))
  2874
  """
  chem_comp_query = """
{
  "query": {
    "type": "group",
    "nodes": [
      {
        "type": "group",
        "logical_operator": "or",
        "nodes": [
          {
            "type": "terminal",
            "service": "text",
            "parameters": {
              "attribute": "rcsb_nonpolymer_entity_container_identifiers.nonpolymer_comp_id",
              "operator": "exact_match",
              "value": "%s"
            }
          },
          {
            "type": "terminal",
            "service": "text",
            "parameters": {
              "attribute": "rcsb_polymer_entity_container_identifiers.chem_comp_monomers",
              "operator": "exact_match",
              "value": "%s"
            }
          }
        ]
      }
    ],
    "logical_operator": "and"
  },
  "return_type": "entry",
  "request_options": {
    "return_all_hits": true,
    "scoring_strategy": "combined",
    "sort": [
      {
        "sort_by": "score",
        "direction": "desc"
      }
    ]
  }
}
"""
  assert (1 <= len(resname) <= 3) or (len(resname)==5)
  sqr = chem_comp_query % (resname, resname)
  jsq = json.loads(sqr)
  return post_query(query_json=jsq, **kwds)

def get_high_resolution_for_structures(pdb_ids):
  with_res_count = get_high_resolution_and_residue_count_for_structures(pdb_ids)
  result = [r[:2] for r in with_res_count]
  return result

def post_report_query_with_pdb_list(query, pdb_ids):
  pdb_list = "%s" % pdb_ids
  pdb_list = pdb_list.replace("'", '"')
  request = query.format(pdb_list=pdb_list)
  r = requests.post(report_base_url, json={"query":request})
  return r.json()

def get_r_work_rfree_for_structures(pdb_ids):
  """ Get Rwork and Rfree for list of pdb ids
  Args:
      pdb_ids (list): pdb ids
  Returns:
      list: [[pdb_id, rwork, rfree], [pdb_id, rwork, rfree], ...]
  """
  query = """
  {{
    entries(entry_ids: {pdb_list} )
    {{
      rcsb_id
      refine
      {{
        ls_R_factor_R_free,
        ls_R_factor_R_work,
      }}
    }}
  }}"""
  r_json = post_report_query_with_pdb_list(query, pdb_ids)
  result = []
  for res in r_json["data"]["entries"]:
    pdb_id = str(res["rcsb_id"])
    rwork = None
    rfree = None
    if res["refine"] is not None:
      rwork = res["refine"][0]["ls_R_factor_R_work"]
      if rwork is not None:
        rwork = float(rwork)
      rfree = res["refine"][0]["ls_R_factor_R_free"]
      if rfree is not None:
        rfree = float(rfree)
    result.append([pdb_id, rwork, rfree])
  return result

def get_high_resolution_and_residue_count_for_structures(pdb_ids):
  query = """
  {{
    entries(entry_ids: {pdb_list} )
    {{
      rcsb_id
      rcsb_entry_info {{
        deposited_polymer_monomer_count
      }}
      refine {{
        ls_d_res_high
      }}
    }}
  }}"""

  r_json = post_report_query_with_pdb_list(query, pdb_ids)
  result = []
  for res in r_json["data"]["entries"]:
    pdb_id = str(res["rcsb_id"])
    resol = None
    n_res = None
    if res["refine"] is not None:
      res_resol = res["refine"][0]["ls_d_res_high"]
      resol = None if res_resol is None else float(res_resol)
    if res["rcsb_entry_info"] is not None:
      res_n_res = res["rcsb_entry_info"]["deposited_polymer_monomer_count"]
      n_res = None if res_n_res is None else int(res_n_res)
    result.append([pdb_id, resol, n_res])
  return result

def get_ligand_info_for_structures(pdb_ids):
  """Return a list of ligands in the specified structure(s), including the
  SMILES strings.

  Returns list of lists with
  [PDB ID, chain id, lig id, lig MW, lig Formula, lig name, lig SMILES]
  If the same ligand is present in different chains, it will produce several
  entries which will be different in chain ids.

  [[u'1MRU', u'A', u'MG', u'24.31', u'Mg 2', u'MAGNESIUM ION', u'[Mg+2]'],
   [u'1MRU', u'B', u'MG', u'24.31', u'Mg 2', u'MAGNESIUM ION', u'[Mg+2]']]

  """
  query = """
  {{
    entries(entry_ids: {pdb_list} )
    {{
      rcsb_id
      nonpolymer_entities {{
        nonpolymer_comp {{
          chem_comp {{
            formula
            formula_weight
            id
            name
          }}
          rcsb_chem_comp_descriptor {{
            SMILES
          }}
        }}
        rcsb_nonpolymer_entity_container_identifiers {{
          auth_asym_ids
        }}
      }}
    }}
  }}"""

  r_json = post_report_query_with_pdb_list(query, pdb_ids)
  result = []
  for res in r_json["data"]["entries"]:
    pdb_id = str(res["rcsb_id"])
    for npe in res["nonpolymer_entities"]:
      smiles = str(npe["nonpolymer_comp"]["rcsb_chem_comp_descriptor"]["SMILES"])
      lig_id = str(npe["nonpolymer_comp"]["chem_comp"]["id"])
      lig_mw = float(npe["nonpolymer_comp"]["chem_comp"]["formula_weight"])
      lig_formula = str(npe["nonpolymer_comp"]["chem_comp"]["formula"])
      lig_name = str(npe["nonpolymer_comp"]["chem_comp"]["name"])
      for chain_id in npe["rcsb_nonpolymer_entity_container_identifiers"]["auth_asym_ids"]:
        c_id = str(chain_id)
        result.append([pdb_id, c_id, lig_id, lig_mw, lig_formula, lig_name, smiles])
  return result

def get_emdb_id_for_pdb_id(pdb_id):
  """ Find out EMDB ID given PDB ID by quering RCSB portal.

  Args:
      pdb_id (str): pdb id
  Returns:
    list of emdb ids, e.g. ['EMD-37438'] or None if X-ray or not defined
  """

  graphql_query = '''
query
{
  entry(entry_id:"%s") {
    exptl {
      method
    }
    rcsb_entry_container_identifiers {
      emdb_ids
    }
  }
}
''' % pdb_id
  r = requests.post(report_base_url, json={"query":graphql_query})
  data_entry = r.json()['data']['entry']
  if not data_entry:
    return None
  if data_entry['exptl'][0]['method'] != 'ELECTRON MICROSCOPY':
    return None
  emdb_ids = data_entry['rcsb_entry_container_identifiers']['emdb_ids']
  if len(emdb_ids)==0:
    return None
  return emdb_ids


 *******************************************************************************


 *******************************************************************************
mmtbx/wwpdb/tst_rcsb_entry_request.py
from __future__ import absolute_import, division, print_function
from mmtbx.wwpdb import rcsb_entry_request
import requests
from libtbx.test_utils import Exception_expected
from libtbx.utils import Sorry

def exercise_1():
  """
  Exercise 1, experimental:
  """
  info = rcsb_entry_request.get_info(pdb_ids=['1ucs'])
  assert len(info) == 1
  assert info[0].get_rwork() == 0.133, info[0].get_rwork()
  assert info[0].get_rama_outliers() == 0
  assert info[0].get_rota_outliers() == 1.82
  assert info[0].get_clashscore() == 19.44
  assert not info[0].is_computational()

def exercise_2():
  """
  Exercise 2, computational:
  """
  info = rcsb_entry_request.get_info(pdb_ids=['AF_AFP12102F1'])
  assert len(info) == 1
  assert info[0].is_computational()
  assert info[0].get_rwork() == None, info[0].get_rwork()

def exercise_3():
  """
  Exercise 3, non-existing:
  """
  try:
    info = rcsb_entry_request.get_info(pdb_ids=['1234567890'])
  except Sorry as e:
    assert str(e).find("There are 1 invalid pdb ids for which RCSB did not return result.") >= 0
  else:
    raise Exception_expected

def exercise_4():
  """
  Exercise 1 + 2 (mix)
  """

  info = rcsb_entry_request.get_info(pdb_ids=['1ucs', 'AF_AFP12102F1'])
  assert len(info) == 2
  assert info[0].get_rwork() == 0.133, info[0].get_rwork()
  assert info[0].get_rama_outliers() == 0
  assert info[0].get_rota_outliers() == 1.82
  assert info[0].get_clashscore() == 19.44
  assert not info[0].is_computational()

  assert info[1].is_computational()
  assert info[1].get_plddt() == 97.37, info[1].get_plddt()
  assert info[1].get_rwork() == None, info[1].get_rwork()

if (__name__ == "__main__"):
  # thorough_exercise()
  # check if internet and rcsb are available
  exception_occured = False
  try:
    r = requests.get('https://search.rcsb.org/')
  except Exception:
    print("OK but exception.")
    exception_occured = True
  if not exception_occured and r.ok and len(r.text) > 100:
    exercise_1()
    exercise_2()
    exercise_3()
    exercise_4()
    print("OK")
  else:
    print("OK but skipped.")


 *******************************************************************************


 *******************************************************************************
mmtbx/wwpdb/tst_rcsb_web_services.py
from __future__ import absolute_import, division, print_function
from mmtbx.wwpdb import rcsb_web_services
import requests

def thorough_exercise():
  """
  This exercises all currently available options, so makes 64 requests.
  Took 20 minutes, therefore disabled from the general testing.
  """
  lysozyme = """KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSRWWCNDGRTPGSRNLCNIPCSALLSSDITASVNCAKKIVSDGNGMNAWVAWRNRCKGTDVQAWIRGCRL"""
  n_good = 0
  for po in [True, False]:
    for do in [True, False]:
      for sbr in [True, False]:
        for xro in [True, False]:
          for d_max in [None, 3.0]:
            for d_min in [None, 1.0]:
              print ("ARGUMENTS:", po, do, sbr, xro, d_max, d_min)
              homologs = rcsb_web_services.sequence_search(
                  lysozyme,
                  xray_only=xro,
                  d_max=d_max,
                  d_min=d_min,
                  protein_only=po,
                  data_only=do,
                  sort_by_resolution=sbr)
              if len(homologs) > 200:
                n_good += 1
                print ("GOOD:", n_good)
  print (n_good)
  assert n_good == 64

def exercise():
  # lysozyme = """KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSRWWCNDGRTPGSRNLCNIPCSALLSSDITASVNCAKKIVSDGNGMNAWVAWRNRCKGTDVQAWIRGCRL"""
  lysozyme = """KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSR"""
  homologs = rcsb_web_services.sequence_search(lysozyme, d_max=2.0)
  assert (len(homologs) > 500)
  report = rcsb_web_services.get_r_work_rfree_for_structures(['1ucs', '1yjp'])
  assert report == [['1UCS', 0.133, 0.155], ['1YJP', 0.18086, 0.19014]]
  ligand_info = rcsb_web_services.get_ligand_info_for_structures(['1mru'])
  # print (ligand_info)
  reference_ligand_info = [
    ['1MRU', 'A', 'MG', 24.305, 'Mg', 'MAGNESIUM ION', '[Mg+2]'],
    ['1MRU', 'B', 'MG', 24.305, 'Mg', 'MAGNESIUM ION', '[Mg+2]'],
    ['1MRU', 'A', 'AGS', 523.247, 'C10 H16 N5 O12 P3 S', 'PHOSPHOTHIOPHOSPHORIC ACID-ADENYLATE ESTER',
        'c1nc(c2c(n1)n(cn2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=S)(O)O)O)O)N'],
    ['1MRU', 'B', 'AGS', 523.247, 'C10 H16 N5 O12 P3 S', 'PHOSPHOTHIOPHOSPHORIC ACID-ADENYLATE ESTER',
        'c1nc(c2c(n1)n(cn2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=S)(O)O)O)O)N']]
  for answer in reference_ligand_info:
    assert answer in ligand_info, "%s\n%s" % (answer, ligand_info)

def exercise_chemical_id_search():
  atp_binding = rcsb_web_services.chemical_id_search("ATP", protein_only=True)
  # print("len(atp_binding)", len(atp_binding), atp_binding) # 1389
  assert (len(atp_binding) > 1000)
  atp_binding = rcsb_web_services.chemical_id_search("ATP", xray_only=True, protein_only=True)
  # print("len(atp_binding)", len(atp_binding)) # 1389
  assert (len(atp_binding) > 1000)
  report = rcsb_web_services.get_high_resolution_for_structures(atp_binding)
  assert (len(report) == len(atp_binding)) and (len(report[0]) == 2)
  # print (report)
  report = rcsb_web_services.get_high_resolution_and_residue_count_for_structures(atp_binding)
  assert (len(report) == len(atp_binding)) and (len(report[0]) == 3)
  # print (report)

  hyp_search = rcsb_web_services.chemical_id_search("HYP", xray_only=False)
  # print("len(hyp_search)", len(hyp_search), hyp_search) # 383
  assert len(hyp_search) >= 383, len(hyp_search)
  hyp_search = rcsb_web_services.chemical_id_search("HYP", protein_only=True)
  # print("len(hyp_search)", len(hyp_search), hyp_search)
  assert len(hyp_search) >= 217, len(hyp_search)

def exercise_2():
  fes_binding = rcsb_web_services.chemical_id_search(
      "FES",
      xray_only=False,
      # log=sys.stdout
      )
  assert len(fes_binding) > 765, len(fes_binding)
  # checking correct work when no results found
  di1_examples = rcsb_web_services.chemical_id_search(
      'Di2',
      data_only=True,
      sort_by_resolution=True,
      # log=sys.stdout,
      )
  assert len(di1_examples) == 0, len(di1_examples)

def exercise_3():
  # Direct test of post_query
  r = rcsb_web_services.post_query(xray_only=False)
  assert len(r) > 1
  r = rcsb_web_services.post_query()
  assert len(r) > 1
  r = rcsb_web_services.post_query(data_only=True)
  assert len(r) > 1
  r = rcsb_web_services.post_query(d_max=1)
  assert len(r) > 1
  r = rcsb_web_services.post_query(d_min=5)
  assert len(r) > 1
  r = rcsb_web_services.post_query(sort_by_resolution=True)
  assert len(r) > 180000
  r = rcsb_web_services.post_query(clashscore_range=(1,5))
  print('n clashscore filter:', len(r))
  assert len(r) > 80000
  r = rcsb_web_services.post_query(rama_outliers_range=(1,2))
  print('n rama filter:', len(r))
  assert len(r) > 10000
  r = rcsb_web_services.post_query(rota_outliers_range=(0,5))
  print('n rota filter:', len(r))
  assert len(r) > 135000

def exercise_get_emdb_id():
  emdb_ids = rcsb_web_services.get_emdb_id_for_pdb_id('8wcc')
  assert emdb_ids == ['EMD-37438']
  emdb_ids = rcsb_web_services.get_emdb_id_for_pdb_id('1yjp')
  assert emdb_ids == None

def exercise_sequence_search():
  lysozyme = """KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSR"""
  r = rcsb_web_services.sequence_search(sequence=lysozyme)
  print(len(r))
  assert len(r) > 1200
  r = rcsb_web_services.sequence_search(sequence=lysozyme, clashscore_range=(0,20))
  print(len(r))
  assert len(r) > 1100
  assert len(r) < 1200
  r = rcsb_web_services.sequence_search(sequence=lysozyme, rama_outliers_range=(0,1))
  print(len(r))
  assert len(r) > 100
  assert len(r) < 150

def exercise_reference_chain_search():
  lysozyme = """KVFGRCELAAAMKRHGLDNYRGYSLGNWVCAAKFESNFNTQATNRNTDGSTDYGILQINSR"""
  r = rcsb_web_services.reference_chain_search(sequence=lysozyme)
  # print(len(r))

  # This is not going to work at all:
  # probably because geometry filters are not applicable when we request
  # "return_type": "polymer_instance", instead of "polymer_entity" in sequence_search.
  r = rcsb_web_services.reference_chain_search(sequence=lysozyme, clashscore_range=(0,20))
  # print(len(r))
  assert len(r) == 0
  r = rcsb_web_services.reference_chain_search(sequence=lysozyme, d_max=2)
  # print(len(r))
  assert len(r) == 0

if (__name__ == "__main__"):
  # thorough_exercise()
  # check if internet and rcsb are available
  exception_occured = False
  try:
    r = requests.get('https://search.rcsb.org/')
  except Exception:
    print("OK but exception.")
    exception_occured = True
  if not exception_occured and r.ok and len(r.text) > 100:
    exercise()
    exercise_2()
    exercise_3()
    exercise_get_emdb_id()
    exercise_sequence_search()
    exercise_reference_chain_search()
    exercise_chemical_id_search()
    print("OK")
  else:
    print("OK but skipped.")


 *******************************************************************************
