

 *******************************************************************************
mmtbx/regression/tst_loop_closure.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb
from mmtbx.building import loop_idealization
import mmtbx.model

def exercise_ligand_after_chain():
  tst_pdb_1 = """\
ATOM      1  N   MET A   1    -159.943 -66.661-130.499  1.00 48.44           N
ATOM      2  CA  MET A   1    -160.787 -67.832-130.110  1.00 48.44           C
ATOM      3  C   MET A   1    -159.910 -69.027-129.841  1.00 48.44           C
ATOM      4  O   MET A   1    -158.711 -68.884-129.606  1.00 48.44           O
ATOM      5  CB  MET A   1    -161.759 -68.208-131.231  1.00 79.81           C
ATOM      6  CG  MET A   1    -163.209 -68.175-130.820  1.00 79.81           C
ATOM      7  SD  MET A   1    -163.833 -66.479-130.739  1.00 79.81           S
ATOM      8  CE  MET A   1    -163.171 -65.924-129.172  1.00 79.81           C
ATOM      9  N   ARG A   2    -160.518 -70.210-129.875  1.00 38.99           N
ATOM     10  CA  ARG A   2    -159.772 -71.438-129.666  1.00 38.99           C
ATOM     11  C   ARG A   2    -158.918 -71.422-128.395  1.00 38.99           C
ATOM     12  O   ARG A   2    -158.210 -72.391-128.104  1.00 38.99           O
ATOM     13  CB  ARG A   2    -158.865 -71.688-130.880  1.00 51.43           C
ATOM     14  CG  ARG A   2    -159.570 -72.239-132.112  1.00 51.43           C
ATOM     15  CD  ARG A   2    -159.999 -73.663-131.835  1.00 51.43           C
ATOM     16  NE  ARG A   2    -158.879 -74.455-131.325  1.00 51.43           N
ATOM     17  CZ  ARG A   2    -159.007 -75.488-130.497  1.00 51.43           C
ATOM     18  NH1 ARG A   2    -157.929 -76.147-130.090  1.00 51.43           N
ATOM     19  NH2 ARG A   2    -160.212 -75.855-130.066  1.00 51.43           N
ATOM     20  H   ARG A   2    -161.482 -70.262-130.050  1.00 51.43           H
ATOM     21  N   CYS A   3    -158.986 -70.340-127.630  1.00152.30           N
ATOM     22  CA  CYS A   3    -158.172 -70.252-126.431  1.00152.30           C
ATOM     23  C   CYS A   3    -158.912 -69.638-125.264  1.00152.30           C
ATOM     24  O   CYS A   3    -158.554 -69.870-124.109  1.00152.30           O
ATOM     25  CB  CYS A   3    -156.939 -69.403-126.697  1.00 59.00           C
ATOM     26  SG  CYS A   3    -157.266 -67.650-126.486  1.00 59.00           S
ATOM     27  H   CYS A   3    -159.604 -69.611-127.838  1.00 59.00           H
ATOM     28  N   ILE A   4    -159.926 -68.834-125.553  1.00 29.62           N
ATOM     29  CA  ILE A   4    -160.661 -68.204-124.470  1.00 29.62           C
ATOM     30  C   ILE A   4    -161.101 -69.218-123.409  1.00 29.62           C
ATOM     31  O   ILE A   4    -162.062 -69.976-123.578  1.00 29.62           O
ATOM     32  CB  ILE A   4    -161.841 -67.403-125.017  1.00 17.37           C
ATOM     33  CG1 ILE A   4    -161.294 -66.286-125.911  1.00 17.37           C
ATOM     34  CG2 ILE A   4    -162.683 -66.833-123.870  1.00 17.37           C
ATOM     35  CD1 ILE A   4    -160.294 -65.374-125.206  1.00 17.37           C
ATOM     36  H   ILE A   4    -160.176 -68.660-126.488  1.00 17.37           H
ATOM     37  N   GLY A   5    -160.346 -69.216-122.314  1.00 52.08           N
ATOM     38  CA  GLY A   5    -160.597 -70.120-121.222  1.00 52.08           C
ATOM     39  C   GLY A   5    -159.905 -71.424-121.536  1.00 52.08           C
ATOM     40  O   GLY A   5    -160.566 -72.368-121.974  1.00 52.08           O
ATOM     41  H   GLY A   5    -159.576 -68.614-122.236  1.00 37.04           H
ATOM   4278  N   SER B   1    -138.139-105.043-112.117  1.00 28.15           N
ATOM   4279  CA  SER B   1    -138.513-105.322-113.546  1.00 28.15           C
ATOM   4280  C   SER B   1    -139.470-104.237-113.982  1.00 28.15           C
ATOM   4281  O   SER B   1    -139.162-103.042-113.916  1.00 28.15           O
ATOM   4282  CB  SER B   1    -139.226-106.673-113.658  1.00 31.14           C
ATOM   4283  OG  SER B   1    -140.493-106.625-113.024  1.00 31.14           O
ATOM   4284  N   VAL B   2    -140.632-104.660-114.452  1.00 60.77           N
ATOM   4285  CA  VAL B   2    -141.655-103.705-114.795  1.00 60.77           C
ATOM   4286  C   VAL B   2    -142.205-103.400-113.397  1.00 60.77           C
ATOM   4287  O   VAL B   2    -143.408-103.192-113.192  1.00 60.77           O
ATOM   4288  CB  VAL B   2    -142.741-104.315-115.717  1.00108.23           C
ATOM   4289  CG1 VAL B   2    -142.440-103.962-117.172  1.00108.23           C
ATOM   4290  CG2 VAL B   2    -142.790-105.830-115.547  1.00108.23           C
ATOM   4291  H   VAL B   2    -140.797-105.604-114.625  1.00108.23           H
ATOM   4292  N   ALA B   3    -141.279-103.408-112.436  1.00 28.18           N
ATOM   4293  CA  ALA B   3    -141.548-103.125-111.037  1.00 28.18           C
ATOM   4294  C   ALA B   3    -140.547-102.051-110.611  1.00 28.18           C
ATOM   4295  O   ALA B   3    -140.863-101.159-109.825  1.00 28.18           O
ATOM   4296  CB  ALA B   3    -141.362-104.382-110.208  1.00 75.10           C
ATOM   4297  H   ALA B   3    -140.342-103.592-112.556  1.00 75.10           H
ATOM   4298  N   LEU B   4    -139.339-102.128-111.157  1.00 35.75           N
ATOM   4299  CA  LEU B   4    -138.314-101.150-110.823  1.00 35.75           C
ATOM   4300  C   LEU B   4    -137.667-100.486-112.046  1.00 35.75           C
ATOM   4301  O   LEU B   4    -138.011-100.795-113.198  1.00 35.75           O
ATOM   4302  CB  LEU B   4    -137.245-101.810-109.967  1.00 58.18           C
ATOM   4303  CG  LEU B   4    -137.744-102.589-108.750  1.00 58.18           C
ATOM   4304  CD1 LEU B   4    -138.674-101.712-107.940  1.00 58.18           C
ATOM   4305  CD2 LEU B   4    -138.442-103.866-109.197  1.00 58.18           C
ATOM   4306  H   LEU B   4    -139.132-102.867-111.766  1.00 58.18           H
ATOM   4307  N   VAL B   5    -136.718 -99.586-111.779  1.00 72.31           N
ATOM   4308  CA  VAL B   5    -136.022 -98.838-112.829  1.00 72.31           C
ATOM   4309  C   VAL B   5    -137.120 -98.370-113.765  1.00 72.31           C
ATOM   4310  O   VAL B   5    -137.069 -98.595-114.969  1.00 72.31           O
ATOM   4311  CB  VAL B   5    -135.032 -99.731-113.606  1.00188.85           C
ATOM   4312  CG1 VAL B   5    -134.206 -98.880-114.561  1.00188.85           C
ATOM   4313  CG2 VAL B   5    -134.125-100.474-112.636  1.00188.85           C
ATOM   4314  H   VAL B   5    -136.485 -99.417-110.841  1.00188.85           H
HETATM 9811  C1  NAG A 501    -145.629-131.141-126.187  1.00105.75           C
HETATM 9812  C2  NAG A 501    -145.718-131.799-127.560  1.00105.75           C
HETATM 9813  C3  NAG A 501    -147.101-132.414-127.738  1.00105.75           C
HETATM 9814  C4  NAG A 501    -147.345-133.422-126.615  1.00105.75           C
HETATM 9815  C5  NAG A 501    -147.160-132.734-125.244  1.00105.75           C
HETATM 9816  C6  NAG A 501    -147.264-133.704-124.079  1.00105.75           C
HETATM 9817  C7  NAG A 501    -144.518-131.062-129.492  1.00105.75           C
HETATM 9818  C8  NAG A 501    -144.964-131.298-130.926  1.00105.75           C
HETATM 9819  N2  NAG A 501    -145.464-130.823-128.595  1.00105.75           N
HETATM 9820  O3  NAG A 501    -147.184-133.061-129.000  1.00105.75           O
HETATM 9821  O4  NAG A 501    -148.659-133.960-126.729  1.00105.75           O
HETATM 9822  O5  NAG A 501    -145.851-132.118-125.159  1.00105.75           O
HETATM 9823  O6  NAG A 501    -148.610-133.860-123.650  1.00105.75           O
HETATM 9824  O7  NAG A 501    -143.325-131.114-129.200  1.00105.75           O
  """
  pdb_inp = iotbx.pdb.input(source_info=None, lines=tst_pdb_1)
  model = mmtbx.model.manager(pdb_inp)
  model.process(make_restraints=True)
  loop_ideal_params = loop_idealization.master_phil.extract()
  loop_ideal_params.loop_idealization.enabled=True
  loop_ideal_params.loop_idealization.variant_search_level=1
  loop_ideal_params.loop_idealization.variant_number_cutoff=10
  loop_ideal_params.loop_idealization.number_of_ccd_trials=1
  loop_ideal_params.loop_idealization.minimize_whole=False
  loop_ideal = loop_idealization.loop_idealization(
      model,
      params = loop_ideal_params,
      verbose=False)

def exercise_nonstd_residue():
  """ When loop closure need to put back side chain for non-standard residue,
  here is TPO
  """
  tst_pdb_2 = """\
CRYST1  114.270  114.270  170.840  90.00  90.00 120.00 P 32 2 1      6
ATOM   2808  N   GLY A 495     -21.779  41.479 -17.193  1.00 99.35           N
ATOM   2809  CA  GLY A 495     -21.593  42.735 -17.896  1.00 99.35           C
ATOM   2810  C   GLY A 495     -22.691  43.004 -18.907  1.00 99.35           C
ATOM   2811  O   GLY A 495     -22.977  44.156 -19.232  1.00 99.35           O
ATOM   2812  N   VAL A 496     -23.308  41.937 -19.403  1.00 93.50           N
ATOM   2813  CA  VAL A 496     -24.379  42.055 -20.385  1.00 93.50           C
ATOM   2814  C   VAL A 496     -25.614  42.689 -19.751  1.00 93.50           C
ATOM   2815  O   VAL A 496     -25.859  42.530 -18.555  1.00 93.50           O
ATOM   2816  CB  VAL A 496     -24.766  40.672 -20.951  1.00109.49           C
ATOM   2817  CG1 VAL A 496     -25.690  40.837 -22.146  1.00109.49           C
ATOM   2818  CG2 VAL A 496     -23.515  39.902 -21.340  1.00109.49           C
ATOM   2819  N   THR A 497     -26.391  43.407 -20.558  1.00 89.25           N
ATOM   2820  CA  THR A 497     -27.597  44.065 -20.068  1.00 89.25           C
ATOM   2821  C   THR A 497     -28.779  43.853 -21.009  1.00 89.25           C
ATOM   2822  O   THR A 497     -28.783  42.929 -21.822  1.00 89.25           O
ATOM   2823  CB  THR A 497     -27.264  45.433 -19.439  1.00109.67           C
ATOM   2824  OG1 THR A 497     -28.479  46.116 -19.107  1.00109.67           O
ATOM   2825  CG2 THR A 497     -26.458  46.284 -20.409  1.00109.67           C
ATOM   2826  N   THR A 498     -29.782  44.718 -20.887  1.00 88.67           N
ATOM   2827  CA  THR A 498     -30.974  44.647 -21.724  1.00 88.67           C
ATOM   2828  C   THR A 498     -32.417  45.138 -21.787  1.00 88.67           C
ATOM   2829  O   THR A 498     -33.305  44.408 -22.229  1.00 88.67           O
ATOM   2830  CB  THR A 498     -31.649  43.319 -22.121  1.00 90.48           C
ATOM   2831  OG1 THR A 498     -32.602  43.559 -23.164  1.00 90.48           O
ATOM   2832  CG2 THR A 498     -32.357  42.701 -20.925  1.00 90.48           C
ATOM   2833  N   LYS A 499     -32.654  46.372 -21.352  1.00 81.24           N
ATOM   2834  CA  LYS A 499     -34.004  46.920 -21.362  1.00 81.24           C
ATOM   2835  C   LYS A 499     -35.350  46.867 -22.083  1.00 81.24           C
ATOM   2836  O   LYS A 499     -35.726  47.804 -22.788  1.00 81.24           O
ATOM   2837  CB  LYS A 499     -33.470  48.359 -21.348  1.00138.53           C
ATOM   2838  CG  LYS A 499     -32.387  48.644 -22.386  1.00138.53           C
ATOM   2839  CD  LYS A 499     -32.946  49.210 -23.682  1.00138.53           C
ATOM   2840  CE  LYS A 499     -33.295  50.684 -23.534  1.00138.53           C
ATOM   2841  NZ  LYS A 499     -33.775  51.276 -24.813  1.00138.53           N
HETATM 2842  N   TPO A 500     -36.075  45.767 -21.897  1.00 93.19           N
HETATM 2843  CA  TPO A 500     -37.391  45.606 -22.507  1.00 93.19           C
HETATM 2844  CB  TPO A 500     -37.442  44.363 -23.396  1.00112.60           C
HETATM 2845  CG2 TPO A 500     -38.746  44.383 -24.204  1.00112.60           C
HETATM 2846  OG1 TPO A 500     -36.327  44.384 -24.298  1.00112.60           O
HETATM 2847  P   TPO A 500     -35.745  42.879 -24.411  1.00112.60           P
HETATM 2848  O1P TPO A 500     -36.794  41.971 -24.933  1.00112.60           O
HETATM 2849  O2P TPO A 500     -34.491  42.875 -25.421  1.00112.60           O
HETATM 2850  O3P TPO A 500     -35.274  42.380 -22.956  1.00112.60           O
HETATM 2851  C   TPO A 500     -38.390  46.538 -21.826  1.00 93.19           C
HETATM 2852  O   TPO A 500     -38.487  47.718 -22.163  1.00 93.19           O
ATOM   2853  N   PHE A 501     -39.132  45.991 -20.868  1.00 94.45           N
ATOM   2854  CA  PHE A 501     -40.138  46.751 -20.134  1.00 94.45           C
ATOM   2855  C   PHE A 501     -41.172  45.642 -20.302  1.00 94.45           C
ATOM   2856  O   PHE A 501     -42.021  45.697 -21.192  1.00 94.45           O
ATOM   2857  CB  PHE A 501     -40.812  48.126 -20.206  1.00 71.72           C
ATOM   2858  CG  PHE A 501     -41.372  48.607 -18.894  1.00 71.72           C
ATOM   2859  CD1 PHE A 501     -41.285  49.951 -18.547  1.00 71.72           C
ATOM   2860  CD2 PHE A 501     -41.992  47.727 -18.010  1.00 71.72           C
ATOM   2861  CE1 PHE A 501     -41.804  50.415 -17.341  1.00 71.72           C
ATOM   2862  CE2 PHE A 501     -42.516  48.181 -16.801  1.00 71.72           C
ATOM   2863  CZ  PHE A 501     -42.421  49.529 -16.467  1.00 71.72           C
ATOM   2864  N   CYS A 502     -41.089  44.634 -19.439  1.00 84.28           N
ATOM   2865  CA  CYS A 502     -42.009  43.503 -19.480  1.00 84.28           C
ATOM   2866  C   CYS A 502     -42.191  42.910 -18.087  1.00 84.28           C
ATOM   2867  O   CYS A 502     -41.624  43.404 -17.113  1.00 84.28           O
ATOM   2868  CB  CYS A 502     -41.477  42.426 -20.428  1.00117.39           C
ATOM   2869  SG  CYS A 502     -39.879  41.732 -19.943  1.00117.39           S
ATOM   2870  N   GLY A 503     -42.984  41.847 -17.999  1.00109.92           N
ATOM   2871  CA  GLY A 503     -43.219  41.207 -16.718  1.00109.92           C
ATOM   2872  C   GLY A 503     -44.627  41.425 -16.198  1.00109.92           C
ATOM   2873  O   GLY A 503     -45.559  41.639 -16.974  1.00109.92           O
ATOM   2874  N   THR A 504     -44.779  41.375 -14.879  1.00102.36           N
ATOM   2875  CA  THR A 504     -46.079  41.561 -14.246  1.00102.36           C
ATOM   2876  C   THR A 504     -46.092  42.865 -13.449  1.00102.36           C
ATOM   2877  O   THR A 504     -45.101  43.222 -12.812  1.00102.36           O
ATOM   2878  CB  THR A 504     -46.396  40.395 -13.292  1.00 94.96           C
ATOM   2879  OG1 THR A 504     -45.797  39.194 -13.793  1.00 94.96           O
ATOM   2880  CG2 THR A 504     -47.899  40.185 -13.187  1.00 94.96           C
END
"""
  pdb_inp = iotbx.pdb.input(source_info=None, lines=tst_pdb_2)
  model = mmtbx.model.manager(
      model_input = pdb_inp)
  model.process(make_restraints=True)
  model.get_hierarchy().write_pdb_file("tst_loop_closure_2_start.pdb")
  assert model.get_hierarchy().atoms_size() == 73
  loop_ideal_params = loop_idealization.master_phil.extract()
  loop_ideal_params.loop_idealization.enabled=True
  loop_ideal_params.loop_idealization.variant_search_level=1
  loop_ideal_params.loop_idealization.variant_number_cutoff=10
  loop_ideal_params.loop_idealization.number_of_ccd_trials=1
  loop_ideal_params.loop_idealization.minimize_whole=False
  loop_ideal = loop_idealization.loop_idealization(
      model = model,
      params = loop_ideal_params,
      verbose=False)
  model.get_hierarchy().write_pdb_file("tst_loop_closure_2_result.pdb")
  assert model.get_hierarchy().atoms_size() == 73
  sel = model.selection("resname TPO")
  assert model.get_hierarchy().select(sel).atoms_size() == 11

def exercise():
  exercise_ligand_after_chain()
  print("OK")
  exercise_nonstd_residue()
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_lrv.py
from __future__ import division
import os
import libtbx.load_env
from libtbx import easy_run

repository_dir = libtbx.env.dist_path("chem_data")

def main(code='NWM'):
  print(repository_dir)
  rf = os.path.join(repository_dir,
                    'geostd',
                    code.lower()[0],
                    'data_%s.cif' % code)
  assert os.path.exists(rf), 'path %s not found' % rf

  for args in ['',
               'write_pdb=lrv_test.pdb',
               'write_geo=lrv_test.geo',
               'write_pdb=lrv_test.pdb write_geo=lrv_test.geo',
               'use_hydrogens=False',
               ]:
    cmd = 'mmtbx.development.ligand_restraints_validation %s' % rf
    cmd += ' %s' % args
    print(cmd)
    rc=easy_run.go(cmd)
    for line in rc.stdout_lines:
      if line.find('RMSD')>-1: break
    else:
      rc.show_stdout()
      assert 0

if __name__ == '__main__':
  main()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_map_model_cc.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
import iotbx.pdb
from libtbx import easy_run
import time
import mmtbx.maps.map_model_cc
from libtbx import easy_pickle

pdb_str = """
CRYST1   14.755   15.940   19.523  90.00  90.00  90.00 P 1
ATOM      1  N   ALA L 139       5.232   6.337   5.079  1.00 25.00           N
ATOM      2  CA  ALA L 139       5.342   5.476   6.250  1.00 25.00           C
ATOM      3  C   ALA L 139       6.027   6.204   7.402  1.00 25.00           C
ATOM      4  O   ALA L 139       7.033   6.886   7.206  1.00 25.00           O
ATOM      5  N   TRP L 140       5.477   6.054   8.602  1.00 25.00           N
ATOM      6  CA  TRP L 140       6.034   6.696   9.786  1.00 25.00           C
ATOM      7  C   TRP L 140       6.303   5.675  10.888  1.00 25.00           C
ATOM      8  O   TRP L 140       5.382   5.017  11.372  1.00 25.00           O
ATOM      9  CB  TRP L 140       5.092   7.787  10.298  1.00 30.00           C
ATOM     10  CG  TRP L 140       4.833   8.873   9.299  1.00 30.00           C
ATOM     11  CD1 TRP L 140       3.836   8.910   8.369  1.00 30.00           C
ATOM     12  CD2 TRP L 140       5.584  10.082   9.131  1.00 30.00           C
ATOM     13  NE1 TRP L 140       3.919  10.066   7.631  1.00 30.00           N
ATOM     14  CE2 TRP L 140       4.984  10.803   8.079  1.00 30.00           C
ATOM     15  CE3 TRP L 140       6.705  10.624   9.766  1.00 30.00           C
ATOM     16  CZ2 TRP L 140       5.467  12.037   7.649  1.00 30.00           C
ATOM     17  CZ3 TRP L 140       7.183  11.849   9.338  1.00 30.00           C
ATOM     18  CH2 TRP L 140       6.565  12.542   8.290  1.00 30.00           C
ATOM     19  N   ALA L 141       7.567   5.544  11.283  1.00 25.00           N
ATOM     20  CA  ALA L 141       8.649   6.331  10.700  1.00 25.00           C
ATOM     21  C   ALA L 141       9.725   5.427  10.110  1.00 25.00           C
ATOM     22  O   ALA L 141       9.623   4.991   8.963  1.00 25.00           O
TER
END
"""

def write_ccp4_map(map_data, cs, file_name):
  from iotbx import mrcfile
  mrcfile.write_ccp4_map(
    file_name=file_name,
    unit_cell=cs.unit_cell(),
    space_group=cs.space_group(),
    map_data=map_data,
    labels=flex.std_string([""]))

def run(prefix="tst_map_model_cc"):
  """
  Make sure it works with map having origin != (0,0,0)
  """
  # original (zero-origin) map and model
  pdb_inp = iotbx.pdb.input(source_info=None, lines=pdb_str)
  pdb_inp.write_pdb_file(file_name="%s_%s"%(prefix,"orig.pdb"))
  ph = pdb_inp.construct_hierarchy()
  xrs = pdb_inp.xray_structure_simple()
  fc = xrs.structure_factors(d_min=1.5).f_calc()
  fft_map = fc.fft_map(resolution_factor = 0.25)
  fft_map.apply_sigma_scaling()
  map_data = fft_map.real_map_unpadded()
  assert map_data.all() == (40, 45, 54)
  assert map_data.origin() == (0, 0, 0)
  assert map_data.focus() == (40, 45, 54)
  write_ccp4_map(map_data=map_data, cs=xrs.crystal_symmetry(),
    file_name="%s_%s"%(prefix,"orig.ccp4"))
  # shift origin of the map
  g = flex.grid((-20,-25,-27), (20,20,27))
  map_data.reshape(g)
  assert map_data.all() == (40, 45, 54)
  assert map_data.origin() == (-20, -25, -27)
  assert map_data.focus() == (20, 20, 27)
  write_ccp4_map(map_data=map_data, cs=xrs.crystal_symmetry(),
    file_name="%s_%s"%(prefix,"shifted.ccp4"))
  # apply same shift to the model
  a,b,c = xrs.crystal_symmetry().unit_cell().parameters()[:3]
  N = map_data.all()
  O=map_data.origin()
  sites_cart = ph.atoms().extract_xyz()
  sx,sy,sz = a/N[0]*O[0], b/N[1]*O[1], c/N[2]*O[2]
  sites_cart_shifted = sites_cart+\
    flex.vec3_double(sites_cart.size(), [sx,sy,sz])
  ph.atoms().set_xyz(sites_cart_shifted)
  ph.write_pdb_file(file_name="%s_%s"%(prefix,"shifted.pdb"))
  # run phenix.real_space_refine
  checked = 0
  cmd = " ".join([
    "phenix.map_model_cc",
    "force",
    "%s_shifted.pdb"%prefix,
    "%s_shifted.ccp4"%prefix,
    "resolution=1.5",
    "> %s.zlog"%prefix
  ])
  print(cmd)
  assert not easy_run.call(cmd)
  # check results
  fo = open("%s.zlog"%prefix,"r")
  for l in fo.readlines():
    if(l.startswith("  CC_mask  :")):
      cc = float(l.split()[2])
      assert cc>0.98
      checked+=1
  fo.close()
  assert checked==1
  # Exercise corresponding library function
  params = mmtbx.maps.map_model_cc.master_params().extract()
  params.map_model_cc.resolution=1.5
  task_obj = mmtbx.maps.map_model_cc.map_model_cc(
    map_data         = map_data,
    pdb_hierarchy    = ph,
    crystal_symmetry = xrs.crystal_symmetry(),
    params           = params.map_model_cc)
  task_obj.validate()
  task_obj.run()
  result = task_obj.get_results()
  assert result.cc_mask  >0.98
  assert result.cc_peaks >0.98
  assert result.cc_volume>0.98
  assert result.cc_side_chain.cc>0.98
  assert result.cc_main_chain.cc>0.98
  easy_pickle.dump(
    file_name = "map_model_cc_test.pkl",
    obj       = result)
  easy_pickle.load("map_model_cc_test.pkl")

if (__name__ == "__main__"):
  t0 = time.time()
  run()
  print("Time: %6.3f"%(time.time()-t0))
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_map_type_parser.py
from __future__ import absolute_import, division, print_function
from libtbx.utils import format_cpu_times, Sorry
import mmtbx

def exercise():
  r = mmtbx.map_names(map_name_string = "anom")
  assert r.format() == "anomalous_difference", r.format()
  r = mmtbx.map_names(map_name_string = "anomalous")
  assert r.format() == "anomalous_difference", r.format()
  r = mmtbx.map_names(map_name_string = " Anomal-diff  ")
  assert r.format() == "anomalous_difference", r.format()
  r = mmtbx.map_names(map_name_string = "LLG")
  assert r.format() == "phaser_sad_llg"
  r = mmtbx.map_names(map_name_string = " SAD")
  assert r.format() == "phaser_sad_llg"
  #
  r = mmtbx.map_names(map_name_string = "3.mFo-2DFc ")
  assert r.format() == "3mFobs-2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "mFo-DFc ")
  assert r.format() == "mFobs-DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "mFo-1.DFc ")
  assert r.format() == "mFobs-DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "+3.mFo+2DFc ")
  assert r.format() == "3mFobs+2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-3.mFo+2DFc")
  assert r.format() == "-3mFobs+2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-2DFc+3.mFo")
  assert r.format() == "3mFobs-2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "- 2 D F c + 3 . m F o ")
  assert r.format() == "3mFobs-2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-  D F ca lc 2.0 +  m F oBS 3 .0")
  assert r.format() == "3mFobs-2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-2DFc-3.mFo")
  assert r.format() == "-3mFobs-2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "+2DFc+3.mFo")
  assert r.format() == "3mFobs+2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-3.mF_OBS-2D_F_cAlC")
  assert r.format() == "-3mFobs-2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "+3.mF_o+2 . D F_MODEL")
  assert r.format() == "3mFobs+2DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "0.75mFobs-1.37DFmodel")
  assert r.format() == "0.75mFobs-1.37DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "0.99999mFobs-1.00001DFmodel")
  assert r.format() == "0.99999mFobs-1.00001DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "0mFobs-0DFmodel")
  assert r.format() == "0mFobs-0DFmodel", r.format()
  #
  r = mmtbx.map_names(map_name_string = "3.Fo-2Fc ")
  assert r.format() == "3Fobs-2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "Fo-Fc ")
  assert r.format() == "Fobs-Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "Fo-1.Fc ")
  assert r.format() == "Fobs-Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "+3.Fo+2Fc ")
  assert r.format() == "3Fobs+2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-3.Fo+2Fc")
  assert r.format() == "-3Fobs+2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-2Fc+3.Fo")
  assert r.format() == "3Fobs-2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "- 2  F c + 3 .  F o ")
  assert r.format() == "3Fobs-2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-   F ca lc 2.0 +   F oBS 3 .0")
  assert r.format() == "3Fobs-2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-2Fc-3.Fo")
  assert r.format() == "-3Fobs-2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "+2Fc+3.Fo")
  assert r.format() == "3Fobs+2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "-3.F_OBS-2_F_cAlC")
  assert r.format() == "-3Fobs-2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "+3.F_o+2 .  F_MODEL")
  assert r.format() == "3Fobs+2Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "0.75Fobs-1.37Fmodel")
  assert r.format() == "0.75Fobs-1.37Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "0.99999Fobs-1.00001Fmodel")
  assert r.format() == "0.99999Fobs-1.00001Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "0Fobs-0Fmodel")
  assert r.format() == "0Fobs-0Fmodel", r.format()
  #
  r = mmtbx.map_names(map_name_string = "fc")
  assert r.format() == "0Fobs+Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "FMODEL")
  assert r.format() == "0Fobs+Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "dfc")
  assert r.format() == "0mFobs+DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "dFMODEL")
  assert r.format() == "0mFobs+DFmodel", r.format()
  #
  r = mmtbx.map_names(map_name_string = "fo")
  assert r.format() == "Fobs-0Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "FoBS")
  assert r.format() == "Fobs-0Fmodel", r.format()
  r = mmtbx.map_names(map_name_string = "mfo")
  assert r.format() == "mFobs-0DFmodel", r.format()
  r = mmtbx.map_names(map_name_string = "MFOBS")
  assert r.format() == "mFobs-0DFmodel", r.format()
  #
  r = mmtbx.map_names(map_name_string = "3.mFo-2DFc__filled")
  assert r.format() == "3mFobs-2DFmodel_filled", r.format()
  r = mmtbx.map_names(map_name_string = "3.Fo-2Fc+filled")
  assert r.format() == "3Fobs-2Fmodel_filled", r.format()
  #
  def check_expected_error(s):
    cntr = 0
    try: r = mmtbx.map_names(map_name_string = s)
    except Sorry as e:
      assert str(e).count("Wrong map type requested: %s"%s)==1
      cntr += 1
    assert cntr == 1
  #
  check_expected_error("2mFoDFc")
  check_expected_error("fofc")
  check_expected_error("2mFo*DFc")
  check_expected_error("2mFo/DFc")
  check_expected_error("2mFo:DFc")
  check_expected_error("2mFo_DFc")
  check_expected_error("2mFo-DC")
  check_expected_error("2mo-DC")
  check_expected_error("2mFo-Fc")
  check_expected_error("2Fo-DFc")
  check_expected_error("2DFo-mFc")
  check_expected_error("2DFo-DFc")
  check_expected_error("2mFo-mFc")

def run():
  exercise()

if (__name__ == "__main__"):
  run()
  print(format_cpu_times())


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_maps_misc.py

from __future__ import absolute_import, division, print_function
from libtbx.utils import null_out

def exercise_anomalous_maps_misc():
  from mmtbx.regression.make_fake_anomalous_data import generate_cd_cl_inputs
  import mmtbx.utils
  from iotbx import file_reader
  import iotbx.pdb
  mtz_file, pdb_file = generate_cd_cl_inputs(
    file_base = "tst_mmtbx_maps_misc")
  pdb_in = iotbx.pdb.input(pdb_file)
  xrs = pdb_in.xray_structure_simple()
  for s in xrs.scatterers():
    if (s.scattering_type == "Cd2+"):
      s.fp = -0.29
      s.fdp = 2.676
      s.flags.set_use_fp_fdp(True)
  mtz_in = file_reader.any_file(mtz_file)
  f_obs = mtz_in.file_server.miller_arrays[0]
  flags = mtz_in.file_server.miller_arrays[0]
  flags = flags.customized_copy(data=flags.data()==1)
  fmodel = mmtbx.utils.fmodel_simple(
    f_obs=f_obs,
    r_free_flags=flags,
    xray_structures=[xrs],
    scattering_table="n_gaussian",
    skip_twin_detection=True)
  map_coeffs = fmodel.map_coefficients(
    map_type="anom_residual",
    exclude_free_r_reflections=True)
  map_anom = map_coeffs.fft_map(
    resolution_factor=0.25).apply_sigma_scaling().real_map_unpadded()
  for s in xrs.scatterers():
    if (s.scattering_type == "Cd2+"):
      assert (map_anom.eight_point_interpolation(s.site) < 0)
    elif (s.scattering_type == 'Cl1-'):
      assert (map_anom.eight_point_interpolation(s.site) > 10)
  # this simply checks whether anomalous data will cause problems when
  # mixed with other options (i.e. array size errors)
  map2 = fmodel.map_coefficients(
    map_type="2mFo-DFc",
    exclude_free_r_reflections=True)

def exercise_omit_atom_selection():
  # combine an omit selection with a CCP4 map selection - this used to crash
  from mmtbx.regression.make_fake_anomalous_data import generate_calcium_inputs
  import mmtbx.command_line.maps
  mtz_file, pdb_file = generate_calcium_inputs(
    file_base="tst_mmtbx_maps_misc2")
  with open("tst_mmtbx_maps_misc2.eff", "w") as f:
    f.write("""\
    maps {
      map {
        map_type = 2mFo-DFc
        format = xplor *ccp4
        file_name = tst_mmtbx_maps_misc2.ccp4
        region = *selection cell
        atom_selection = "resname HOH"
      }
    }""")
  mmtbx.command_line.maps.run(args=[
    mtz_file,
    pdb_file,
    "tst_mmtbx_maps_misc2.eff",
    "omit.selection=\"resname TRP\"",
    "prefix=tst_mmtbx_maps_misc2",
  ], log=null_out())

if (__name__ == "__main__"):
  exercise_anomalous_maps_misc()
  exercise_omit_atom_selection()
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_metal_link_1.py
from __future__ import absolute_import, division, print_function
import mmtbx.model
import iotbx.pdb
import time
from libtbx.utils import null_out

pdb_str = """
CRYST1   20.645   25.843   29.055  90.00  90.00  90.00 P 1
SCALE1      0.048438  0.000000  0.000000        0.00000
SCALE2      0.000000  0.038695  0.000000        0.00000
SCALE3      0.000000  0.000000  0.034417        0.00000
ATOM      1  N   CYS C 284      13.554  13.652   6.082  1.00 43.53      EA   N
ATOM      2  CA  CYS C 284      14.504  14.116   7.088  1.00 43.46      EA   C
ATOM      3  C   CYS C 284      13.857  14.177   8.466  1.00 46.41      EA   C
ATOM      4  O   CYS C 284      14.509  13.899   9.480  1.00 34.73      EA   O
ATOM      5  CB  CYS C 284      15.043  15.493   6.699  1.00 37.37      EA   C
ATOM      6  SG  CYS C 284      15.645  15.628   5.000  1.00 30.55      EA   S
ATOM      7  N   HIS C 285      12.571  14.535   8.520  1.00 81.03      EA   N
ATOM      8  CA  HIS C 285      11.880  14.644   9.799  1.00 78.99      EA   C
ATOM      9  C   HIS C 285      11.736  13.290  10.481  1.00 78.91      EA   C
ATOM     10  O   HIS C 285      11.798  13.206  11.713  1.00 83.81      EA   O
ATOM     11  CB  HIS C 285      10.507  15.286   9.600  1.00 87.56      EA   C
ATOM     12  CG  HIS C 285       9.755  15.507  10.875  1.00100.53      EA   C
ATOM     13  ND1 HIS C 285      10.129  16.454  11.804  1.00102.57      EA   N
ATOM     14  CD2 HIS C 285       8.650  14.905  11.376  1.00110.92      EA   C
ATOM     15  CE1 HIS C 285       9.288  16.426  12.823  1.00110.54      EA   C
ATOM     16  NE2 HIS C 285       8.381  15.495  12.588  1.00115.69      EA   N
ATOM     17  N   GLU C 286      11.547  12.223   9.702  1.00 41.43      EA   N
ATOM     18  CA  GLU C 286      11.389  10.896  10.285  1.00 45.81      EA   C
ATOM     19  C   GLU C 286      12.742  10.245  10.550  1.00 45.31      EA   C
ATOM     20  O   GLU C 286      12.996   9.747  11.652  1.00 47.64      EA   O
ATOM     21  CB  GLU C 286      10.559  10.014   9.350  1.00 31.98      EA   C
ATOM     22  CG  GLU C 286       9.189  10.568   9.001  1.00 31.19      EA   C
ATOM     23  CD  GLU C 286       8.308  10.778  10.211  1.00 46.04      EA   C
ATOM     24  OE1 GLU C 286       7.157  11.227  10.033  1.00 37.93      EA   O
ATOM     25  OE2 GLU C 286       8.766  10.496  11.337  1.00 53.32      EA   O1-
ATOM     26  N   GLY C 289      14.202  12.615  13.228  1.00120.10      EA   N
ATOM     27  CA  GLY C 289      13.414  12.984  14.388  1.00114.20      EA   C
ATOM     28  C   GLY C 289      12.937  11.824  15.240  1.00106.50      EA   C
ATOM     29  O   GLY C 289      12.978  11.900  16.472  1.00135.13      EA   O
ATOM     30  N   HIS C 290      12.487  10.744  14.604  1.00 38.52      EA   N
ATOM     31  CA  HIS C 290      11.863   9.625  15.301  1.00 48.73      EA   C
ATOM     32  C   HIS C 290      12.756   8.398  15.399  1.00 53.95      EA   C
ATOM     33  O   HIS C 290      12.984   7.888  16.500  1.00 51.44      EA   O
ATOM     34  CB  HIS C 290      10.542   9.248  14.614  1.00 62.93      EA   C
ATOM     35  CG  HIS C 290       9.496  10.316  14.686  1.00 56.22      EA   C
ATOM     36  ND1 HIS C 290       9.507  11.425  13.869  1.00 61.73      EA   N
ATOM     37  CD2 HIS C 290       8.406  10.444  15.480  1.00 51.42      EA   C
ATOM     38  CE1 HIS C 290       8.469  12.190  14.155  1.00 65.43      EA   C
ATOM     39  NE2 HIS C 290       7.785  11.618  15.129  1.00 66.69      EA   N
ATOM     40  N   VAL C 291      13.265   7.902  14.267  1.00 73.68      EA   N
ATOM     41  CA  VAL C 291      13.909   6.587  14.249  1.00 64.37      EA   C
ATOM     42  C   VAL C 291      14.982   6.458  15.326  1.00 63.70      EA   C
ATOM     43  O   VAL C 291      14.977   5.453  16.052  1.00 75.32      EA   O
ATOM     44  CB  VAL C 291      14.446   6.282  12.842  1.00 66.63      EA   C
ATOM     45  CG1 VAL C 291      15.263   5.000  12.850  1.00 61.40      EA   C
ATOM     46  CG2 VAL C 291      13.298   6.187  11.848  1.00 83.70      EA   C
ATOM     47  N   VAL C 329       6.501  13.140  22.870  1.00 30.06      EA   N
ATOM     48  CA  VAL C 329       7.335  12.486  21.868  1.00 29.12      EA   C
ATOM     49  C   VAL C 329       7.839  13.498  20.849  1.00 29.42      EA   C
ATOM     50  O   VAL C 329       8.982  13.414  20.387  1.00 30.09      EA   O
ATOM     51  CB  VAL C 329       6.561  11.337  21.192  1.00 26.47      EA   C
ATOM     52  CG1 VAL C 329       7.384  10.727  20.069  1.00 25.53      EA   C
ATOM     53  CG2 VAL C 329       6.187  10.272  22.214  1.00 26.38      EA   C
ATOM     54  N   GLU C 330       7.004  14.476  20.493  1.00 54.98      EA   N
ATOM     55  CA  GLU C 330       7.375  15.437  19.461  1.00 50.88      EA   C
ATOM     56  C   GLU C 330       8.233  16.564  20.026  1.00 53.96      EA   C
ATOM     57  O   GLU C 330       9.287  16.890  19.469  1.00 56.09      EA   O
ATOM     58  CB  GLU C 330       6.115  16.006  18.806  1.00 54.40      EA   C
ATOM     59  CG  GLU C 330       6.312  16.485  17.380  1.00 54.09      EA   C
ATOM     60  CD  GLU C 330       6.616  15.348  16.429  1.00 51.73      EA   C
ATOM     61  OE1 GLU C 330       6.385  14.180  16.807  1.00 45.43      EA   O
ATOM     62  OE2 GLU C 330       7.084  15.620  15.304  1.00 72.06      EA   O1-
ATOM     63  N   PHE C 331       7.801  17.165  21.133  1.00 52.30      EA   N
ATOM     64  CA  PHE C 331       8.480  18.302  21.750  1.00 45.16      EA   C
ATOM     65  C   PHE C 331       8.595  18.100  23.255  1.00 38.54      EA   C
ATOM     66  O   PHE C 331       8.298  18.989  24.055  1.00 40.25      EA   O
ATOM     67  CB  PHE C 331       7.748  19.603  21.437  1.00 51.35      EA   C
ATOM     68  CG  PHE C 331       7.634  19.893  19.970  1.00 50.90      EA   C
ATOM     69  CD1 PHE C 331       8.639  20.575  19.305  1.00 48.59      EA   C
ATOM     70  CD2 PHE C 331       6.523  19.482  19.254  1.00 41.82      EA   C
ATOM     71  CE1 PHE C 331       8.537  20.843  17.953  1.00 56.15      EA   C
ATOM     72  CE2 PHE C 331       6.416  19.747  17.902  1.00 48.23      EA   C
ATOM     73  CZ  PHE C 331       7.423  20.429  17.251  1.00 52.08      EA   C
TER
HETATM   74 FE    FE E   9       6.958  14.164  13.719  1.00129.77          Fe
TER
HETATM   75  O   HOH G  21       5.000  12.310  14.576  1.00 60.96           O
HETATM   76  O   HOH G  22       5.115  15.599  12.863  1.00 38.47           O
HETATM   77  O   HOH G  23       6.308  12.238  11.815  1.00 68.93           O
TER
END"""


def run():
  """
  Check metal linking (make sure CE1 is not included).
  """
  pdb_inp = iotbx.pdb.input(lines=pdb_str, source_info=None)
  params = mmtbx.model.manager.get_default_pdb_interpretation_params()
  params.pdb_interpretation.automatic_linking.link_metals=True
  m = mmtbx.model.manager(
    model_input = pdb_inp,
    log         = null_out())
  m.process(pdb_interpretation_params=params, make_restraints=True)
  grm = m.get_restraints_manager()
  ph = m.get_hierarchy()
  atoms = list(ph.atoms())
  assert atoms[73].element.strip().upper() == "FE"
  bond_proxies_simple, asu = grm.geometry.get_all_bond_proxies(
    sites_cart = ph.atoms().extract_xyz())
  expected_link_atoms = ['NE2', "OE2", "O", "O", "O"]
  expected_link_atoms.sort()
  linked_atoms_found = []
  for p in bond_proxies_simple:
    if(73 in p.i_seqs):
      i,j = p.i_seqs
      a1 = atoms[i].name.strip().upper()
      a2 = atoms[j].name.strip().upper()
      if(i!=73): linked_atoms_found.append(a1)
      else:      linked_atoms_found.append(a2)
  linked_atoms_found.sort()
  assert expected_link_atoms == linked_atoms_found, '%s != %s' % (expected_link_atoms, linked_atoms_found)

if (__name__ == "__main__"):
  t0 = time.time()
  run()
  print("Time: %6.3f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_minimize_chain.py
from __future__ import absolute_import, division, print_function

import time
from mmtbx.building.minimize_chain import run,ccp4_map
import iotbx.pdb
pdb_str_two_models = """\
CRYST1   29.475   46.191   27.490  90.00  90.00  90.00 P 21 21 21
MODEL        0
ATOM      1  N   ALA A   1      14.622  35.477  13.274  1.00 40.00           N
ATOM      2  CA  ALA A   1      14.323  35.055  14.635  1.00 40.00           C
ATOM      3  C   ALA A   1      13.442  33.808  14.656  1.00 40.00           C
ATOM      4  O   ALA A   1      13.848  32.796  15.227  1.00 40.00           O
ATOM      5  CB  ALA A   1      13.675  36.191  15.414  1.00 40.00           C
ATOM      6  N   ALA A   2      12.256  33.870  14.012  1.00 40.00           N
ATOM      7  CA  ALA A   2      11.288  32.768  13.916  1.00 40.00           C
ATOM      8  C   ALA A   2      11.847  31.573  13.125  1.00 40.00           C
ATOM      9  O   ALA A   2      11.553  30.422  13.462  1.00 40.00           O
ATOM     10  CB  ALA A   2      10.000  33.267  13.276  1.00 40.00           C
ATOM     11  N   ALA A   3      12.664  31.856  12.084  1.00 40.00           N
ATOM     12  CA  ALA A   3      13.313  30.854  11.231  1.00 40.00           C
ATOM     13  C   ALA A   3      14.391  30.082  11.994  1.00 40.00           C
ATOM     14  O   ALA A   3      14.616  28.906  11.687  1.00 40.00           O
ATOM     15  CB  ALA A   3      13.915  31.517  10.000  1.00 40.00           C
ATOM     16  N   ALA A   4      15.063  30.744  12.976  1.00 40.00           N
ATOM     17  CA  ALA A   4      16.089  30.116  13.822  1.00 40.00           C
ATOM     18  C   ALA A   4      15.441  29.043  14.703  1.00 40.00           C
ATOM     19  O   ALA A   4      15.888  27.897  14.671  1.00 40.00           O
ATOM     20  CB  ALA A   4      16.785  31.160  14.683  1.00 40.00           C
ATOM      1  N   ALA E   1      14.622  35.477  13.274  1.00 40.00           N
ATOM      2  CA  ALA E   1      14.323  35.055  14.635  1.00 40.00           C
ATOM      3  C   ALA E   1      13.442  33.808  14.656  1.00 40.00           C
ATOM      4  O   ALA E   1      13.848  32.796  15.227  1.00 40.00           O
ATOM      5  CB  ALA E   1      13.675  36.191  15.414  1.00 40.00           C
ATOM      6  N   ALA E   2      12.256  33.870  14.012  1.00 40.00           N
ATOM      7  CA  ALA E   2      11.288  32.768  13.916  1.00 40.00           C
ATOM      8  C   ALA E   2      11.847  31.573  13.125  1.00 40.00           C
ATOM      9  O   ALA E   2      11.553  30.422  13.462  1.00 40.00           O
ATOM     10  CB  ALA E   2      10.000  33.267  13.276  1.00 40.00           C
ATOM     11  N   ALA E   3      12.664  31.856  12.084  1.00 40.00           N
ATOM     12  CA  ALA E   3      13.313  30.854  11.231  1.00 40.00           C
ATOM     13  C   ALA E   3      14.391  30.082  11.994  1.00 40.00           C
ATOM     14  O   ALA E   3      14.616  28.906  11.687  1.00 40.00           O
ATOM     15  CB  ALA E   3      13.915  31.517  10.000  1.00 40.00           C
ATOM     16  N   ALA E   4      15.063  30.744  12.976  1.00 40.00           N
ATOM     17  CA  ALA E   4      16.089  30.116  13.822  1.00 40.00           C
ATOM     18  C   ALA E   4      15.441  29.043  14.703  1.00 40.00           C
ATOM     19  O   ALA E   4      15.888  27.897  14.671  1.00 40.00           O
ATOM     20  CB  ALA E   4      16.785  31.160  14.683  1.00 40.00           C
ATOM     21  N   ALA E   5      13.827  28.582  13.930  1.00 40.00           N
ATOM     22  CA  ALA E   5      12.803  27.643  13.582  1.00 40.00           C
ATOM     23  C   ALA E   5      11.925  27.972  12.295  1.00 40.00           C
ATOM     24  O   ALA E   5      11.311  29.016  12.217  1.00 40.00           O
ATOM     25  CB  ALA E   5      11.884  27.496  14.800  1.00 40.00           C
ATOM     26  N   ALA E   6      11.824  27.002  11.326  1.00 40.00           N
ATOM     27  CA  ALA E   6      11.579  27.271   9.948  1.00 40.00           C
ATOM     28  C   ALA E   6      10.688  26.172   9.315  1.00 40.00           C
ATOM     29  O   ALA E   6       9.810  26.435   8.479  1.00 40.00           O
ATOM     30  CB  ALA E   6      12.892  27.434   9.163  1.00 40.00           C
ATOM     31  N   ALA E   7      10.985  24.936   9.568  1.00 40.00           N
ATOM     32  CA  ALA E   7      10.223  23.915   8.805  1.00 40.00           C
ATOM     33  C   ALA E   7       9.182  23.205   9.603  1.00 40.00           C
ATOM     34  O   ALA E   7       7.945  23.417   9.434  1.00 40.00           O
ATOM     35  CB  ALA E   7      11.183  22.804   8.200  1.00 40.00           C
ATOM     36  N   ALA E   8       9.745  22.435  10.542  1.00 40.00           N
ATOM     37  CA  ALA E   8       9.210  21.425  11.476  1.00 40.00           C
ATOM     38  C   ALA E   8      10.256  20.419  11.733  1.00 40.00           C
ATOM     39  O   ALA E   8       9.992  19.490  12.460  1.00 40.00           O
ATOM     40  CB  ALA E   8       7.965  20.817  10.947  1.00 40.00           C
ATOM     41  N   ALA E   9      14.664  23.357  15.803  1.00 40.00           N
ATOM     42  CA  ALA E   9      13.716  22.261  15.994  1.00 40.00           C
ATOM     43  C   ALA E   9      13.754  21.279  14.822  1.00 40.00           C
ATOM     44  O   ALA E   9      13.654  20.075  15.051  1.00 40.00           O
ATOM     45  CB  ALA E   9      12.314  22.805  16.193  1.00 40.00           C
ATOM     46  N   ALA E  10      13.942  21.791  13.578  1.00 40.00           N
ATOM     47  CA  ALA E  10      14.063  20.985  12.357  1.00 40.00           C
ATOM     48  C   ALA E  10      15.322  20.116  12.421  1.00 40.00           C
ATOM     49  O   ALA E  10      15.235  18.910  12.169  1.00 40.00           O
ATOM     50  CB  ALA E  10      14.105  21.881  11.130  1.00 40.00           C
ATOM     51  N   ALA E  11      16.480  20.722  12.803  1.00 40.00           N
ATOM     52  CA  ALA E  11      17.754  20.018  12.967  1.00 40.00           C
ATOM     53  C   ALA E  11      17.631  18.976  14.089  1.00 40.00           C
ATOM     54  O   ALA E  11      18.074  17.837  13.908  1.00 40.00           O
ATOM     55  CB  ALA E  11      18.870  21.004  13.279  1.00 40.00           C
ATOM     56  N   ALA E  12      16.972  19.356  15.217  1.00 40.00           N
ATOM     57  CA  ALA E  12      16.721  18.483  16.371  1.00 40.00           C
ATOM     58  C   ALA E  12      15.851  17.277  15.972  1.00 40.00           C
ATOM     59  O   ALA E  12      16.201  16.140  16.310  1.00 40.00           O
ATOM     60  CB  ALA E  12      16.052  19.269  17.490  1.00 40.00           C
ATOM     61  N   ALA E  13      17.693  10.781  12.936  1.00 40.00           N
ATOM     62  CA  ALA E  13      18.559   9.862  13.648  1.00 40.00           C
ATOM     63  C   ALA E  13      17.678   8.677  14.105  1.00 40.00           C
ATOM     64  O   ALA E  13      16.810   8.236  13.332  1.00 40.00           O
ATOM     65  CB  ALA E  13      19.221  10.551  14.826  1.00 40.00           C
ATOM     66  N   ALA E  14      17.647   8.453  15.439  1.00 40.00           N
ATOM     67  CA  ALA E  14      16.666   7.551  16.066  1.00 40.00           C
ATOM     68  C   ALA E  14      15.298   8.147  16.400  1.00 40.00           C
ATOM     69  O   ALA E  14      14.633   7.785  17.376  1.00 40.00           O
ATOM     70  CB  ALA E  14      17.224   7.034  17.308  1.00 40.00           C
ATOM     71  N   ALA E  15      14.855   9.000  15.485  1.00 40.00           N
ATOM     72  CA  ALA E  15      13.517   9.710  15.635  1.00 40.00           C
ATOM     73  C   ALA E  15      12.304   8.858  15.586  1.00 40.00           C
ATOM     74  O   ALA E  15      11.625   8.812  14.564  1.00 40.00           O
ATOM     75  CB  ALA E  15      13.302  10.842  14.526  1.00 40.00           C
ATOM     76  N   ALA E  16      12.014   8.140  16.649  1.00 40.00           N
ATOM     77  CA  ALA E  16      11.279   6.863  16.560  1.00 40.00           C
ATOM     78  C   ALA E  16      10.003   6.986  17.409  1.00 40.00           C
ATOM     79  O   ALA E  16       9.883   8.020  18.086  1.00 40.00           O
ATOM     80  CB  ALA E  16      12.188   5.653  16.999  1.00 40.00           C

TER
ENDMDL
MODEL        1
ATOM      1  N   ALA A   1      17.517  34.071   6.538  1.00 40.00           N
ATOM      2  CA  ALA A   1      17.992  35.348   7.004  1.00 40.00           C
ATOM      3  C   ALA A   1      16.863  35.986   7.792  1.00 40.00           C
ATOM      4  O   ALA A   1      16.713  37.242   7.909  1.00 40.00           O
ATOM      5  CB  ALA A   1      18.477  36.116   5.812  1.00 40.00           C
ATOM      6  N   ALA A   2      16.080  35.113   8.348  1.00 40.00           N
ATOM      7  CA  ALA A   2      15.254  35.581   9.495  1.00 40.00           C
ATOM      8  C   ALA A   2      15.628  35.262  10.863  1.00 40.00           C
ATOM      9  O   ALA A   2      16.066  36.143  11.629  1.00 40.00           O
ATOM     10  CB  ALA A   2      13.821  35.144   9.297  1.00 40.00           C
ATOM     11  N   ALA A   3      15.670  34.035  11.221  1.00 40.00           N
ATOM     12  CA  ALA A   3      15.746  33.569  12.729  1.00 40.00           C
ATOM     13  C   ALA A   3      16.380  32.197  13.043  1.00 40.00           C
ATOM     14  O   ALA A   3      17.557  32.017  13.009  1.00 40.00           O
ATOM     15  CB  ALA A   3      14.390  33.574  13.297  1.00 40.00           C
ATOM     16  N   ALA A   4      15.437  31.334  13.516  1.00 40.00           N
ATOM     17  CA  ALA A   4      15.810  29.953  13.900  1.00 40.00           C
ATOM     18  C   ALA A   4      14.876  28.948  13.219  1.00 40.00           C
ATOM     19  O   ALA A   4      15.088  28.561  12.135  1.00 40.00           O
ATOM     20  CB  ALA A   4      15.807  29.747  15.562  1.00 40.00           C
ATOM      1  N   ALA E   1      17.517  34.071   6.538  1.00 40.00           N
ATOM      2  CA  ALA E   1      17.992  35.348   7.004  1.00 40.00           C
ATOM      3  C   ALA E   1      16.863  35.986   7.792  1.00 40.00           C
ATOM      4  O   ALA E   1      16.713  37.242   7.909  1.00 40.00           O
ATOM      5  CB  ALA E   1      18.477  36.116   5.812  1.00 40.00           C
ATOM      6  N   ALA E   2      16.080  35.113   8.348  1.00 40.00           N
ATOM      7  CA  ALA E   2      15.254  35.581   9.495  1.00 40.00           C
ATOM      8  C   ALA E   2      15.628  35.262  10.863  1.00 40.00           C
ATOM      9  O   ALA E   2      16.066  36.143  11.629  1.00 40.00           O
ATOM     10  CB  ALA E   2      13.821  35.144   9.297  1.00 40.00           C
ATOM     11  N   ALA E   3      15.670  34.035  11.221  1.00 40.00           N
ATOM     12  CA  ALA E   3      15.746  33.569  12.729  1.00 40.00           C
ATOM     13  C   ALA E   3      16.380  32.197  13.043  1.00 40.00           C
ATOM     14  O   ALA E   3      17.557  32.017  13.009  1.00 40.00           O
ATOM     15  CB  ALA E   3      14.390  33.574  13.297  1.00 40.00           C
ATOM     16  N   ALA E   4      15.437  31.334  13.516  1.00 40.00           N
ATOM     17  CA  ALA E   4      15.810  29.953  13.900  1.00 40.00           C
ATOM     18  C   ALA E   4      14.876  28.948  13.219  1.00 40.00           C
ATOM     19  O   ALA E   4      15.088  28.561  12.135  1.00 40.00           O
ATOM     20  CB  ALA E   4      15.807  29.747  15.562  1.00 40.00           C
ATOM     21  N   ALA E   5      14.338  29.398  15.423  1.00 40.00           N
ATOM     22  CA  ALA E   5      13.573  28.488  16.298  1.00 40.00           C
ATOM     23  C   ALA E   5      13.042  27.288  15.513  1.00 40.00           C
ATOM     24  O   ALA E   5      12.981  26.179  16.048  1.00 40.00           O
ATOM     25  CB  ALA E   5      12.433  29.233  16.975  1.00 40.00           C
ATOM     26  N   ALA E   6      12.715  27.518  14.221  1.00 40.00           N
ATOM     27  CA  ALA E   6      12.258  26.514  13.260  1.00 40.00           C
ATOM     28  C   ALA E   6      13.440  25.620  12.865  1.00 40.00           C
ATOM     29  O   ALA E   6      13.361  24.405  13.060  1.00 40.00           O
ATOM     30  CB  ALA E   6      11.664  27.193  12.032  1.00 40.00           C
ATOM     31  N   ALA E   7      14.556  26.234  12.374  1.00 40.00           N
ATOM     32  CA  ALA E   7      15.788  25.543  11.962  1.00 40.00           C
ATOM     33  C   ALA E   7      16.411  24.694  13.075  1.00 40.00           C
ATOM     34  O   ALA E   7      16.954  23.625  12.782  1.00 40.00           O
ATOM     35  CB  ALA E   7      16.806  26.540  11.433  1.00 40.00           C
ATOM     36  N   ALA E   8      16.327  25.168  14.343  1.00 40.00           N
ATOM     37  CA  ALA E   8      16.846  24.459  15.515  1.00 40.00           C
ATOM     38  C   ALA E   8      16.009  23.197  15.768  1.00 40.00           C
ATOM     39  O   ALA E   8      16.568  22.097  15.858  1.00 40.00           O
ATOM     40  CB  ALA E   8      16.833  25.368  16.742  1.00 40.00           C
ATOM     41  N   ALA E   9      11.466  20.737  11.268  1.00 40.00           N
ATOM     42  CA  ALA E   9      12.607  19.889  11.232  1.00 40.00           C
ATOM     43  C   ALA E   9      12.924  19.328  12.523  1.00 40.00           C
ATOM     44  O   ALA E   9      12.790  20.050  13.539  1.00 40.00           O
ATOM     45  CB  ALA E   9      13.739  20.662  10.656  1.00 40.00           C
ATOM     46  N   ALA E  10      13.495  18.150  12.482  1.00 40.00           N
ATOM     47  CA  ALA E  10      14.007  17.595  13.654  1.00 40.00           C
ATOM     48  C   ALA E  10      15.157  16.724  13.724  1.00 40.00           C
ATOM     49  O   ALA E  10      15.159  16.000  14.620  1.00 40.00           O
ATOM     50  CB  ALA E  10      12.870  16.878  14.366  1.00 40.00           C
ATOM     51  N   ALA E  11      16.092  16.782  12.766  1.00 40.00           N
ATOM     52  CA  ALA E  11      17.076  15.791  12.430  1.00 40.00           C
ATOM     53  C   ALA E  11      16.462  14.506  11.790  1.00 40.00           C
ATOM     54  O   ALA E  11      15.459  14.602  11.077  1.00 40.00           O
ATOM     55  CB  ALA E  11      17.943  15.352  13.622  1.00 40.00           C
ATOM     56  N   ALA E  12      17.191  13.458  11.773  1.00 40.00           N
ATOM     57  CA  ALA E  12      16.985  12.246  11.074  1.00 40.00           C
ATOM     58  C   ALA E  12      17.956  11.169  11.712  1.00 40.00           C
ATOM     59  O   ALA E  12      18.839  10.657  11.173  1.00 40.00           O
ATOM     60  CB  ALA E  12      17.278  12.440   9.655  1.00 40.00           C
ATOM     61  N   ALA E  13      14.748  17.535  15.215  1.00 40.00           N
ATOM     62  CA  ALA E  13      13.821  16.516  14.708  1.00 40.00           C
ATOM     63  C   ALA E  13      14.530  15.563  13.752  1.00 40.00           C
ATOM     64  O   ALA E  13      14.266  14.360  13.793  1.00 40.00           O
ATOM     65  CB  ALA E  13      12.636  17.173  14.008  1.00 40.00           C
ATOM     66  N   ALA E  14      15.437  16.112  12.903  1.00 40.00           N
ATOM     67  CA  ALA E  14      16.246  15.367  11.939  1.00 40.00           C
ATOM     68  C   ALA E  14      17.277  14.511  12.676  1.00 40.00           C
ATOM     69  O   ALA E  14      17.512  13.363  12.286  1.00 40.00           O
ATOM     70  CB  ALA E  14      16.942  16.329  10.986  1.00 40.00           C
ATOM     71  N   ALA E  15      17.863  15.069  13.767  1.00 40.00           N
ATOM     72  CA  ALA E  15      18.847  14.407  14.629  1.00 40.00           C
ATOM     73  C   ALA E  15      18.213  13.257  15.427  1.00 40.00           C
ATOM     74  O   ALA E  15      18.922  12.322  15.816  1.00 40.00           O
ATOM     75  CB  ALA E  15      19.475  15.418  15.573  1.00 40.00           C
ATOM     76  N   ALA E  16      16.879  13.325  15.652  1.00 40.00           N
ATOM     77  CA  ALA E  16      16.099  12.317  16.370  1.00 40.00           C
ATOM     78  C   ALA E  16      15.822  11.106  15.488  1.00 40.00           C
ATOM     79  O   ALA E  16      15.658  10.000  15.999  1.00 40.00           O
ATOM     80  CB  ALA E  16      14.790  12.918  16.852  1.00 40.00           C
TER
ENDMDL
"""
pdb_str_answer_AE= """\
CRYST1   29.475   46.191   27.490  90.00  90.00  90.00 P 21 21 21
HELIX    1   1 ALA E    1  ALA E   16  1                                  16
ATOM      1  N   ALA A   1      14.622  35.477  13.274  1.00 40.00           N
ATOM      2  CA  ALA A   1      14.323  35.055  14.635  1.00 40.00           C
ATOM      3  C   ALA A   1      13.442  33.808  14.656  1.00 40.00           C
ATOM      4  O   ALA A   1      13.848  32.796  15.227  1.00 40.00           O
ATOM      5  CB  ALA A   1      13.675  36.191  15.414  1.00 40.00           C
ATOM      6  N   ALA A   2      12.256  33.870  14.012  1.00 40.00           N
ATOM      7  CA  ALA A   2      11.288  32.768  13.916  1.00 40.00           C
ATOM      8  C   ALA A   2      11.847  31.573  13.125  1.00 40.00           C
ATOM      9  O   ALA A   2      11.553  30.422  13.462  1.00 40.00           O
ATOM     10  CB  ALA A   2      10.000  33.267  13.276  1.00 40.00           C
ATOM     11  N   ALA A   3      12.664  31.856  12.084  1.00 40.00           N
ATOM     12  CA  ALA A   3      13.313  30.854  11.231  1.00 40.00           C
ATOM     13  C   ALA A   3      14.391  30.082  11.994  1.00 40.00           C
ATOM     14  O   ALA A   3      14.616  28.906  11.687  1.00 40.00           O
ATOM     15  CB  ALA A   3      13.915  31.517  10.000  1.00 40.00           C
ATOM     16  N   ALA A   4      15.063  30.744  12.976  1.00 40.00           N
ATOM     17  CA  ALA A   4      16.089  30.116  13.822  1.00 40.00           C
ATOM     18  C   ALA A   4      15.441  29.043  14.703  1.00 40.00           C
ATOM     19  O   ALA A   4      15.888  27.897  14.671  1.00 40.00           O
ATOM     20  CB  ALA A   4      16.785  31.160  14.683  1.00 40.00           C
ATOM      1  N   ALA E   1      14.622  35.477  13.274  1.00 40.00           N
ATOM      2  CA  ALA E   1      14.323  35.055  14.635  1.00 40.00           C
ATOM      3  C   ALA E   1      13.442  33.808  14.656  1.00 40.00           C
ATOM      4  O   ALA E   1      13.848  32.796  15.227  1.00 40.00           O
ATOM      5  CB  ALA E   1      13.675  36.191  15.414  1.00 40.00           C
ATOM      6  N   ALA E   2      12.256  33.870  14.012  1.00 40.00           N
ATOM      7  CA  ALA E   2      11.288  32.768  13.916  1.00 40.00           C
ATOM      8  C   ALA E   2      11.847  31.573  13.125  1.00 40.00           C
ATOM      9  O   ALA E   2      11.553  30.422  13.462  1.00 40.00           O
ATOM     10  CB  ALA E   2      10.000  33.267  13.276  1.00 40.00           C
ATOM     11  N   ALA E   3      12.664  31.856  12.084  1.00 40.00           N
ATOM     12  CA  ALA E   3      13.313  30.854  11.231  1.00 40.00           C
ATOM     13  C   ALA E   3      14.391  30.082  11.994  1.00 40.00           C
ATOM     14  O   ALA E   3      14.616  28.906  11.687  1.00 40.00           O
ATOM     15  CB  ALA E   3      13.915  31.517  10.000  1.00 40.00           C
ATOM     16  N   ALA E   4      15.063  30.744  12.976  1.00 40.00           N
ATOM     17  CA  ALA E   4      16.089  30.116  13.822  1.00 40.00           C
ATOM     18  C   ALA E   4      15.441  29.043  14.703  1.00 40.00           C
ATOM     19  O   ALA E   4      15.888  27.897  14.671  1.00 40.00           O
ATOM     20  CB  ALA E   4      16.785  31.160  14.683  1.00 40.00           C
ATOM     21  N   ALA E   5      14.338  29.398  15.423  1.00 40.00           N
ATOM     22  CA  ALA E   5      13.573  28.488  16.298  1.00 40.00           C
ATOM     23  C   ALA E   5      13.042  27.288  15.513  1.00 40.00           C
ATOM     24  O   ALA E   5      12.981  26.179  16.048  1.00 40.00           O
ATOM     25  CB  ALA E   5      12.433  29.233  16.975  1.00 40.00           C
ATOM     26  N   ALA E   6      12.715  27.518  14.221  1.00 40.00           N
ATOM     27  CA  ALA E   6      12.258  26.514  13.260  1.00 40.00           C
ATOM     28  C   ALA E   6      13.440  25.620  12.865  1.00 40.00           C
ATOM     29  O   ALA E   6      13.361  24.405  13.060  1.00 40.00           O
ATOM     30  CB  ALA E   6      11.664  27.193  12.032  1.00 40.00           C
ATOM     31  N   ALA E   7      14.556  26.234  12.374  1.00 40.00           N
ATOM     32  CA  ALA E   7      15.788  25.543  11.962  1.00 40.00           C
ATOM     33  C   ALA E   7      16.411  24.694  13.075  1.00 40.00           C
ATOM     34  O   ALA E   7      16.954  23.625  12.782  1.00 40.00           O
ATOM     35  CB  ALA E   7      16.806  26.540  11.433  1.00 40.00           C
ATOM     36  N   ALA E   8      16.327  25.168  14.343  1.00 40.00           N
ATOM     37  CA  ALA E   8      16.846  24.459  15.515  1.00 40.00           C
ATOM     38  C   ALA E   8      16.009  23.197  15.768  1.00 40.00           C
ATOM     39  O   ALA E   8      16.568  22.097  15.858  1.00 40.00           O
ATOM     40  CB  ALA E   8      16.833  25.368  16.742  1.00 40.00           C
ATOM     41  N   ALA E   9      14.664  23.357  15.803  1.00 40.00           N
ATOM     42  CA  ALA E   9      13.716  22.261  15.994  1.00 40.00           C
ATOM     43  C   ALA E   9      13.754  21.279  14.822  1.00 40.00           C
ATOM     44  O   ALA E   9      13.654  20.075  15.051  1.00 40.00           O
ATOM     45  CB  ALA E   9      12.314  22.805  16.193  1.00 40.00           C
ATOM     46  N   ALA E  10      13.942  21.791  13.578  1.00 40.00           N
ATOM     47  CA  ALA E  10      14.063  20.985  12.357  1.00 40.00           C
ATOM     48  C   ALA E  10      15.322  20.116  12.421  1.00 40.00           C
ATOM     49  O   ALA E  10      15.235  18.910  12.169  1.00 40.00           O
ATOM     50  CB  ALA E  10      14.105  21.881  11.130  1.00 40.00           C
ATOM     51  N   ALA E  11      16.480  20.722  12.803  1.00 40.00           N
ATOM     52  CA  ALA E  11      17.754  20.018  12.967  1.00 40.00           C
ATOM     53  C   ALA E  11      17.631  18.976  14.089  1.00 40.00           C
ATOM     54  O   ALA E  11      18.074  17.837  13.908  1.00 40.00           O
ATOM     55  CB  ALA E  11      18.870  21.004  13.279  1.00 40.00           C
ATOM     56  N   ALA E  12      16.972  19.356  15.217  1.00 40.00           N
ATOM     57  CA  ALA E  12      16.721  18.483  16.371  1.00 40.00           C
ATOM     58  C   ALA E  12      15.851  17.277  15.972  1.00 40.00           C
ATOM     59  O   ALA E  12      16.201  16.140  16.310  1.00 40.00           O
ATOM     60  CB  ALA E  12      16.052  19.269  17.490  1.00 40.00           C
ATOM     61  N   ALA E  13      14.748  17.535  15.215  1.00 40.00           N
ATOM     62  CA  ALA E  13      13.821  16.516  14.708  1.00 40.00           C
ATOM     63  C   ALA E  13      14.530  15.563  13.752  1.00 40.00           C
ATOM     64  O   ALA E  13      14.266  14.360  13.793  1.00 40.00           O
ATOM     65  CB  ALA E  13      12.636  17.173  14.008  1.00 40.00           C
ATOM     66  N   ALA E  14      15.437  16.112  12.903  1.00 40.00           N
ATOM     67  CA  ALA E  14      16.246  15.367  11.939  1.00 40.00           C
ATOM     68  C   ALA E  14      17.277  14.511  12.676  1.00 40.00           C
ATOM     69  O   ALA E  14      17.512  13.363  12.286  1.00 40.00           O
ATOM     70  CB  ALA E  14      16.942  16.329  10.986  1.00 40.00           C
ATOM     71  N   ALA E  15      17.863  15.069  13.767  1.00 40.00           N
ATOM     72  CA  ALA E  15      18.847  14.407  14.629  1.00 40.00           C
ATOM     73  C   ALA E  15      18.213  13.257  15.427  1.00 40.00           C
ATOM     74  O   ALA E  15      18.922  12.322  15.816  1.00 40.00           O
ATOM     75  CB  ALA E  15      19.475  15.418  15.573  1.00 40.00           C
ATOM     76  N   ALA E  16      16.879  13.325  15.652  1.00 40.00           N
ATOM     77  CA  ALA E  16      16.099  12.317  16.370  1.00 40.00           C
ATOM     78  C   ALA E  16      15.822  11.106  15.488  1.00 40.00           C
ATOM     79  O   ALA E  16      15.658  10.000  15.999  1.00 40.00           O
ATOM     80  CB  ALA E  16      14.790  12.918  16.852  1.00 40.00           C
TER
END
"""


pdb_str_answer_full = """\
CRYST1   29.475   46.191   27.490  90.00  90.00  90.00 P 21 21 21
HELIX    1   1 ALA E    1  ALA E   16  1                                  16
ATOM      1  N   ALA E   1      14.622  35.477  13.274  1.00 40.00           N
ATOM      2  CA  ALA E   1      14.323  35.055  14.635  1.00 40.00           C
ATOM      3  C   ALA E   1      13.442  33.808  14.656  1.00 40.00           C
ATOM      4  O   ALA E   1      13.848  32.796  15.227  1.00 40.00           O
ATOM      5  CB  ALA E   1      13.675  36.191  15.414  1.00 40.00           C
ATOM      6  N   ALA E   2      12.256  33.870  14.012  1.00 40.00           N
ATOM      7  CA  ALA E   2      11.288  32.768  13.916  1.00 40.00           C
ATOM      8  C   ALA E   2      11.847  31.573  13.125  1.00 40.00           C
ATOM      9  O   ALA E   2      11.553  30.422  13.462  1.00 40.00           O
ATOM     10  CB  ALA E   2      10.000  33.267  13.276  1.00 40.00           C
ATOM     11  N   ALA E   3      12.664  31.856  12.084  1.00 40.00           N
ATOM     12  CA  ALA E   3      13.313  30.854  11.231  1.00 40.00           C
ATOM     13  C   ALA E   3      14.391  30.082  11.994  1.00 40.00           C
ATOM     14  O   ALA E   3      14.616  28.906  11.687  1.00 40.00           O
ATOM     15  CB  ALA E   3      13.915  31.517  10.000  1.00 40.00           C
ATOM     16  N   ALA E   4      15.063  30.744  12.976  1.00 40.00           N
ATOM     17  CA  ALA E   4      16.089  30.116  13.822  1.00 40.00           C
ATOM     18  C   ALA E   4      15.441  29.043  14.703  1.00 40.00           C
ATOM     19  O   ALA E   4      15.888  27.897  14.671  1.00 40.00           O
ATOM     20  CB  ALA E   4      16.785  31.160  14.683  1.00 40.00           C
ATOM     21  N   ALA E   5      14.338  29.398  15.423  1.00 40.00           N
ATOM     22  CA  ALA E   5      13.573  28.488  16.298  1.00 40.00           C
ATOM     23  C   ALA E   5      13.042  27.288  15.513  1.00 40.00           C
ATOM     24  O   ALA E   5      12.981  26.179  16.048  1.00 40.00           O
ATOM     25  CB  ALA E   5      12.433  29.233  16.975  1.00 40.00           C
ATOM     26  N   ALA E   6      12.715  27.518  14.221  1.00 40.00           N
ATOM     27  CA  ALA E   6      12.258  26.514  13.260  1.00 40.00           C
ATOM     28  C   ALA E   6      13.440  25.620  12.865  1.00 40.00           C
ATOM     29  O   ALA E   6      13.361  24.405  13.060  1.00 40.00           O
ATOM     30  CB  ALA E   6      11.664  27.193  12.032  1.00 40.00           C
ATOM     31  N   ALA E   7      14.556  26.234  12.374  1.00 40.00           N
ATOM     32  CA  ALA E   7      15.788  25.543  11.962  1.00 40.00           C
ATOM     33  C   ALA E   7      16.411  24.694  13.075  1.00 40.00           C
ATOM     34  O   ALA E   7      16.954  23.625  12.782  1.00 40.00           O
ATOM     35  CB  ALA E   7      16.806  26.540  11.433  1.00 40.00           C
ATOM     36  N   ALA E   8      16.327  25.168  14.343  1.00 40.00           N
ATOM     37  CA  ALA E   8      16.846  24.459  15.515  1.00 40.00           C
ATOM     38  C   ALA E   8      16.009  23.197  15.768  1.00 40.00           C
ATOM     39  O   ALA E   8      16.568  22.097  15.858  1.00 40.00           O
ATOM     40  CB  ALA E   8      16.833  25.368  16.742  1.00 40.00           C
ATOM     41  N   ALA E   9      14.664  23.357  15.803  1.00 40.00           N
ATOM     42  CA  ALA E   9      13.716  22.261  15.994  1.00 40.00           C
ATOM     43  C   ALA E   9      13.754  21.279  14.822  1.00 40.00           C
ATOM     44  O   ALA E   9      13.654  20.075  15.051  1.00 40.00           O
ATOM     45  CB  ALA E   9      12.314  22.805  16.193  1.00 40.00           C
ATOM     46  N   ALA E  10      13.942  21.791  13.578  1.00 40.00           N
ATOM     47  CA  ALA E  10      14.063  20.985  12.357  1.00 40.00           C
ATOM     48  C   ALA E  10      15.322  20.116  12.421  1.00 40.00           C
ATOM     49  O   ALA E  10      15.235  18.910  12.169  1.00 40.00           O
ATOM     50  CB  ALA E  10      14.105  21.881  11.130  1.00 40.00           C
ATOM     51  N   ALA E  11      16.480  20.722  12.803  1.00 40.00           N
ATOM     52  CA  ALA E  11      17.754  20.018  12.967  1.00 40.00           C
ATOM     53  C   ALA E  11      17.631  18.976  14.089  1.00 40.00           C
ATOM     54  O   ALA E  11      18.074  17.837  13.908  1.00 40.00           O
ATOM     55  CB  ALA E  11      18.870  21.004  13.279  1.00 40.00           C
ATOM     56  N   ALA E  12      16.972  19.356  15.217  1.00 40.00           N
ATOM     57  CA  ALA E  12      16.721  18.483  16.371  1.00 40.00           C
ATOM     58  C   ALA E  12      15.851  17.277  15.972  1.00 40.00           C
ATOM     59  O   ALA E  12      16.201  16.140  16.310  1.00 40.00           O
ATOM     60  CB  ALA E  12      16.052  19.269  17.490  1.00 40.00           C
ATOM     61  N   ALA E  13      14.748  17.535  15.215  1.00 40.00           N
ATOM     62  CA  ALA E  13      13.821  16.516  14.708  1.00 40.00           C
ATOM     63  C   ALA E  13      14.530  15.563  13.752  1.00 40.00           C
ATOM     64  O   ALA E  13      14.266  14.360  13.793  1.00 40.00           O
ATOM     65  CB  ALA E  13      12.636  17.173  14.008  1.00 40.00           C
ATOM     66  N   ALA E  14      15.437  16.112  12.903  1.00 40.00           N
ATOM     67  CA  ALA E  14      16.246  15.367  11.939  1.00 40.00           C
ATOM     68  C   ALA E  14      17.277  14.511  12.676  1.00 40.00           C
ATOM     69  O   ALA E  14      17.512  13.363  12.286  1.00 40.00           O
ATOM     70  CB  ALA E  14      16.942  16.329  10.986  1.00 40.00           C
ATOM     71  N   ALA E  15      17.863  15.069  13.767  1.00 40.00           N
ATOM     72  CA  ALA E  15      18.847  14.407  14.629  1.00 40.00           C
ATOM     73  C   ALA E  15      18.213  13.257  15.427  1.00 40.00           C
ATOM     74  O   ALA E  15      18.922  12.322  15.816  1.00 40.00           O
ATOM     75  CB  ALA E  15      19.475  15.418  15.573  1.00 40.00           C
ATOM     76  N   ALA E  16      16.879  13.325  15.652  1.00 40.00           N
ATOM     77  CA  ALA E  16      16.099  12.317  16.370  1.00 40.00           C
ATOM     78  C   ALA E  16      15.822  11.106  15.488  1.00 40.00           C
ATOM     79  O   ALA E  16      15.658  10.000  15.999  1.00 40.00           O
ATOM     80  CB  ALA E  16      14.790  12.918  16.852  1.00 40.00           C
TER
END
"""

pdb_str_answer = """\
CRYST1   29.475   46.191   27.490  90.00  90.00  90.00 P 21 21 21
HELIX    1   1 ALA E    1  ALA E   16  1                                  16
ATOM      2  CA  ALA E   1      14.323  35.055  14.635  1.00 40.00           C
ATOM      7  CA  ALA E   2      11.288  32.768  13.916  1.00 40.00           C
ATOM     12  CA  ALA E   3      13.313  30.854  11.231  1.00 40.00           C
ATOM     17  CA  ALA E   4      16.089  30.116  13.822  1.00 40.00           C
ATOM     22  CA  ALA E   5      13.573  28.488  16.298  1.00 40.00           C
ATOM     27  CA  ALA E   6      12.258  26.514  13.260  1.00 40.00           C
ATOM     32  CA  ALA E   7      15.788  25.543  11.962  1.00 40.00           C
ATOM     37  CA  ALA E   8      16.846  24.459  15.515  1.00 40.00           C
ATOM     42  CA  ALA E   9      13.716  22.261  15.994  1.00 40.00           C
ATOM     47  CA  ALA E  10      14.063  20.985  12.357  1.00 40.00           C
ATOM     52  CA  ALA E  11      17.754  20.018  12.967  1.00 40.00           C
ATOM     57  CA  ALA E  12      16.721  18.483  16.371  1.00 40.00           C
ATOM     62  CA  ALA E  13      13.821  16.516  14.708  1.00 40.00           C
ATOM     67  CA  ALA E  14      16.246  15.367  11.939  1.00 40.00           C
ATOM     72  CA  ALA E  15      18.847  14.407  14.629  1.00 40.00           C
ATOM     77  CA  ALA E  16      16.099  12.317  16.370  1.00 40.00           C
TER
END
"""

pdb_str_poor = """\
CRYST1   29.475   46.191   27.490  90.00  90.00  90.00 P 21 21 21
ATOM      2  CA  ALA E   1      17.992  35.348   7.004  1.00 40.00           C
ATOM      7  CA  ALA E   2      15.254  35.581   9.495  1.00 40.00           C
ATOM     12  CA  ALA E   3      15.746  33.569  12.729  1.00 40.00           C
ATOM     17  CA  ALA E   4      15.810  29.953  13.900  1.00 40.00           C
ATOM     22  CA  ALA E   5      12.803  27.643  13.582  1.00 40.00           C
ATOM     27  CA  ALA E   6      11.579  27.271   9.948  1.00 40.00           C
ATOM     32  CA  ALA E   7      10.223  23.915   8.805  1.00 40.00           C
ATOM     37  CA  ALA E   8       9.210  21.425  11.476  1.00 40.00           C
ATOM     42  CA  ALA E   9      12.607  19.889  11.232  1.00 40.00           C
ATOM     47  CA  ALA E  10      14.007  17.595  13.654  1.00 40.00           C
ATOM     52  CA  ALA E  11      17.076  15.791  12.430  1.00 40.00           C
ATOM     57  CA  ALA E  12      16.985  12.246  11.074  1.00 40.00           C
ATOM     62  CA  ALA E  13      18.559   9.862  13.648  1.00 40.00           C
ATOM     67  CA  ALA E  14      16.666   7.551  16.066  1.00 40.00           C
ATOM     72  CA  ALA E  15      13.517   9.710  15.635  1.00 40.00           C
ATOM     77  CA  ALA E  16      11.279   6.863  16.560  1.00 40.00           C
TER
"""

pdb_str_poor_full = """\
CRYST1   29.475   46.191   27.490  90.00  90.00  90.00 P 21 21 21
ATOM      1  N   ALA E   1      17.517  34.071   6.538  1.00 40.00           N
ATOM      2  CA  ALA E   1      17.992  35.348   7.004  1.00 40.00           C
ATOM      3  C   ALA E   1      16.863  35.986   7.792  1.00 40.00           C
ATOM      4  O   ALA E   1      16.713  37.242   7.909  1.00 40.00           O
ATOM      5  CB  ALA E   1      18.477  36.116   5.812  1.00 40.00           C
ATOM      6  N   ALA E   2      16.080  35.113   8.348  1.00 40.00           N
ATOM      7  CA  ALA E   2      15.254  35.581   9.495  1.00 40.00           C
ATOM      8  C   ALA E   2      15.628  35.262  10.863  1.00 40.00           C
ATOM      9  O   ALA E   2      16.066  36.143  11.629  1.00 40.00           O
ATOM     10  CB  ALA E   2      13.821  35.144   9.297  1.00 40.00           C
ATOM     11  N   ALA E   3      15.670  34.035  11.221  1.00 40.00           N
ATOM     12  CA  ALA E   3      15.746  33.569  12.729  1.00 40.00           C
ATOM     13  C   ALA E   3      16.380  32.197  13.043  1.00 40.00           C
ATOM     14  O   ALA E   3      17.557  32.017  13.009  1.00 40.00           O
ATOM     15  CB  ALA E   3      14.390  33.574  13.297  1.00 40.00           C
ATOM     16  N   ALA E   4      15.437  31.334  13.516  1.00 40.00           N
ATOM     17  CA  ALA E   4      15.810  29.953  13.900  1.00 40.00           C
ATOM     18  C   ALA E   4      14.876  28.948  13.219  1.00 40.00           C
ATOM     19  O   ALA E   4      15.088  28.561  12.135  1.00 40.00           O
ATOM     20  CB  ALA E   4      15.807  29.747  15.562  1.00 40.00           C
ATOM     21  N   ALA E   5      13.827  28.582  13.930  1.00 40.00           N
ATOM     22  CA  ALA E   5      12.803  27.643  13.582  1.00 40.00           C
ATOM     23  C   ALA E   5      11.925  27.972  12.295  1.00 40.00           C
ATOM     24  O   ALA E   5      11.311  29.016  12.217  1.00 40.00           O
ATOM     25  CB  ALA E   5      11.884  27.496  14.800  1.00 40.00           C
ATOM     26  N   ALA E   6      11.824  27.002  11.326  1.00 40.00           N
ATOM     27  CA  ALA E   6      11.579  27.271   9.948  1.00 40.00           C
ATOM     28  C   ALA E   6      10.688  26.172   9.315  1.00 40.00           C
ATOM     29  O   ALA E   6       9.810  26.435   8.479  1.00 40.00           O
ATOM     30  CB  ALA E   6      12.892  27.434   9.163  1.00 40.00           C
ATOM     31  N   ALA E   7      10.985  24.936   9.568  1.00 40.00           N
ATOM     32  CA  ALA E   7      10.223  23.915   8.805  1.00 40.00           C
ATOM     33  C   ALA E   7       9.182  23.205   9.603  1.00 40.00           C
ATOM     34  O   ALA E   7       7.945  23.417   9.434  1.00 40.00           O
ATOM     35  CB  ALA E   7      11.183  22.804   8.200  1.00 40.00           C
ATOM     36  N   ALA E   8       9.745  22.435  10.542  1.00 40.00           N
ATOM     37  CA  ALA E   8       9.210  21.425  11.476  1.00 40.00           C
ATOM     38  C   ALA E   8      10.256  20.419  11.733  1.00 40.00           C
ATOM     39  O   ALA E   8       9.992  19.490  12.460  1.00 40.00           O
ATOM     40  CB  ALA E   8       7.965  20.817  10.947  1.00 40.00           C
ATOM     41  N   ALA E   9      11.466  20.737  11.268  1.00 40.00           N
ATOM     42  CA  ALA E   9      12.607  19.889  11.232  1.00 40.00           C
ATOM     43  C   ALA E   9      12.924  19.328  12.523  1.00 40.00           C
ATOM     44  O   ALA E   9      12.790  20.050  13.539  1.00 40.00           O
ATOM     45  CB  ALA E   9      13.739  20.662  10.656  1.00 40.00           C
ATOM     46  N   ALA E  10      13.495  18.150  12.482  1.00 40.00           N
ATOM     47  CA  ALA E  10      14.007  17.595  13.654  1.00 40.00           C
ATOM     48  C   ALA E  10      15.157  16.724  13.724  1.00 40.00           C
ATOM     49  O   ALA E  10      15.159  16.000  14.620  1.00 40.00           O
ATOM     50  CB  ALA E  10      12.870  16.878  14.366  1.00 40.00           C
ATOM     51  N   ALA E  11      16.092  16.782  12.766  1.00 40.00           N
ATOM     52  CA  ALA E  11      17.076  15.791  12.430  1.00 40.00           C
ATOM     53  C   ALA E  11      16.462  14.506  11.790  1.00 40.00           C
ATOM     54  O   ALA E  11      15.459  14.602  11.077  1.00 40.00           O
ATOM     55  CB  ALA E  11      17.943  15.352  13.622  1.00 40.00           C
ATOM     56  N   ALA E  12      17.191  13.458  11.773  1.00 40.00           N
ATOM     57  CA  ALA E  12      16.985  12.246  11.074  1.00 40.00           C
ATOM     58  C   ALA E  12      17.956  11.169  11.712  1.00 40.00           C
ATOM     59  O   ALA E  12      18.839  10.657  11.173  1.00 40.00           O
ATOM     60  CB  ALA E  12      17.278  12.440   9.655  1.00 40.00           C
ATOM     61  N   ALA E  13      17.693  10.781  12.936  1.00 40.00           N
ATOM     62  CA  ALA E  13      18.559   9.862  13.648  1.00 40.00           C
ATOM     63  C   ALA E  13      17.678   8.677  14.105  1.00 40.00           C
ATOM     64  O   ALA E  13      16.810   8.236  13.332  1.00 40.00           O
ATOM     65  CB  ALA E  13      19.221  10.551  14.826  1.00 40.00           C
ATOM     66  N   ALA E  14      17.647   8.453  15.439  1.00 40.00           N
ATOM     67  CA  ALA E  14      16.666   7.551  16.066  1.00 40.00           C
ATOM     68  C   ALA E  14      15.298   8.147  16.400  1.00 40.00           C
ATOM     69  O   ALA E  14      14.633   7.785  17.376  1.00 40.00           O
ATOM     70  CB  ALA E  14      17.224   7.034  17.308  1.00 40.00           C
ATOM     71  N   ALA E  15      14.855   9.000  15.485  1.00 40.00           N
ATOM     72  CA  ALA E  15      13.517   9.710  15.635  1.00 40.00           C
ATOM     73  C   ALA E  15      12.304   8.858  15.586  1.00 40.00           C
ATOM     74  O   ALA E  15      11.625   8.812  14.564  1.00 40.00           O
ATOM     75  CB  ALA E  15      13.302  10.842  14.526  1.00 40.00           C
ATOM     76  N   ALA E  16      12.014   8.140  16.649  1.00 40.00           N
ATOM     77  CA  ALA E  16      11.279   6.863  16.560  1.00 40.00           C
ATOM     78  C   ALA E  16      10.003   6.986  17.409  1.00 40.00           C
ATOM     79  O   ALA E  16       9.883   8.020  18.086  1.00 40.00           O
ATOM     80  CB  ALA E  16      12.188   5.653  16.999  1.00 40.00           C
TER
"""


def tst_01():
  print("\nTesting merge_model\n")
  prefix='tst_01'
  # Full good answer model
  pdb_file_name_answer_full = "%s_answer_full.pdb"%prefix
  pdb_inp = iotbx.pdb.input(source_info=None, lines = pdb_str_answer_AE)
  ph_answer_full = pdb_inp.construct_hierarchy()
  fn = ph_answer_full.write_pdb_or_mmcif_file(
      target_filename="%s_answer.pdb"%prefix)
  ph_answer_full.atoms().reset_i_seq()
  xrs_answer_full = pdb_inp.xray_structure_simple()

  # Two models we want to merge
  pdb_file_name_two_models = "%s_poor_two_models.pdb"%prefix
  pdb_inp = iotbx.pdb.input(source_info=None, lines = pdb_str_two_models)
  pdb_inp_copy = iotbx.pdb.input(source_info=None, lines = pdb_str_two_models)
  ph = pdb_inp_copy.construct_hierarchy()
  fn = ph.write_pdb_or_mmcif_file(target_filename="%s_two_models.pdb"%prefix)
  xrs_two_models_full = pdb_inp.xray_structure_simple()

  # Compute target map
  fc = xrs_answer_full.structure_factors(d_min=3.5).f_calc()
  fft_map = fc.fft_map(resolution_factor = 0.25)
  fft_map.apply_sigma_scaling()
  target_map_data = fft_map.real_map_unpadded()
  ccp4_map(crystal_symmetry=fc.crystal_symmetry(),
    file_name="%s_map.ccp4" %prefix,
    map_data=target_map_data)
  # Output map coefficients
  mtz_dataset = fc.as_mtz_dataset(column_root_label="FC")
  mtz_object = mtz_dataset.mtz_object()
  mtz_object.write(file_name = "%s_map.mtz"%prefix)

  from mmtbx.building.merge_models import run as merge_models
  hierarchy, pdb_out=merge_models(
      map_data=target_map_data,
      pdb_inp=pdb_inp,
      dist_max=100,
      verbose=True)
  xrs=hierarchy.extract_xray_structure(crystal_symmetry=fc.crystal_symmetry())
  fn = hierarchy.write_pdb_or_mmcif_file(
     target_filename="%s_refined.pdb"%prefix)
  rmsd=xrs.sites_cart().rms_difference(xrs_answer_full.sites_cart())
  print("RMSD from TARGET allowing any CROSSOVERS: %8.2f " %(rmsd))
  return rmsd


def tst_02(args,prefix=None):

  if prefix is None:
    prefix='tst_02'
  # Full good answer model
  pdb_file_name_answer_full = "%s_answer_full.pdb"%prefix
  pdb_inp = iotbx.pdb.input(source_info=None, lines = pdb_str_answer_full)
  ph_answer_full = pdb_inp.construct_hierarchy()
  fn = ph_answer_full.write_pdb_or_mmcif_file(
     target_filename="%s_answer.pdb"%prefix)
  ph_answer_full.atoms().reset_i_seq()
  xrs_answer_full = pdb_inp.xray_structure_simple()

  # Poor full model that we want to refine so it matches the answer
  pdb_file_name_poor = "%s_poor.pdb"%prefix
  pdb_inp = iotbx.pdb.input(source_info=None, lines = pdb_str_poor_full)
  ph_poor_full = pdb_inp.construct_hierarchy()
  fn = ph_poor_full.write_pdb_or_mmcif_file(
     target_filename="%s_poor.pdb"%prefix)
  ph_poor_full.atoms().reset_i_seq()
  xrs_poor_full = pdb_inp.xray_structure_simple()

  # Compute target map
  fc = xrs_answer_full.structure_factors(d_min=3.5).f_calc()
  fft_map = fc.fft_map(resolution_factor = 0.25)
  fft_map.apply_sigma_scaling()
  target_map_data = fft_map.real_map_unpadded()
  ccp4_map(crystal_symmetry=fc.crystal_symmetry(),
    file_name="%s_map.ccp4" %prefix,
    map_data=target_map_data)
  # Output map coefficients
  mtz_dataset = fc.as_mtz_dataset(column_root_label="FC")
  mtz_object = mtz_dataset.mtz_object()
  mtz_object.write(file_name = "%s_map.mtz"%prefix)

  hierarchy,multiple_model_hierarchy=run(
     args=args,map_data=target_map_data,
     crystal_symmetry=fc.crystal_symmetry(),
     pdb_string=pdb_str_poor_full)

  xrs_refined=hierarchy.extract_xray_structure(
     crystal_symmetry=fc.crystal_symmetry())
  fn = hierarchy.write_pdb_or_mmcif_file(
     target_filename="%s_refined.pdb"%prefix)
  fn_multiple = multiple_model_hierarchy.write_pdb_or_mmcif_file(
      target_filename="%s_refined_all_states.pdb"%prefix)
  rmsd=xrs_refined.sites_cart().rms_difference(xrs_answer_full.sites_cart())
  print("RMSD from TARGET for FULL-model refinement: %8.2f " %(rmsd))
  return rmsd

if (__name__ == "__main__"):
  t0=time.time()

  # NOTE: RUNS both regular and mmCIF versions of this test
  # RUN WITH skip_mmcif or mmcif_only TO ONLY RUN REGULAR OR mmCIF TEST

  from libtbx.test_utils import iterate_tests_without_and_with_mmCIF_conversion
  for mmcif in iterate_tests_without_and_with_mmCIF_conversion():

    if mmcif:
      from libtbx.test_utils import convert_pdb_to_cif_for_pdb_str
      convert_pdb_to_cif_for_pdb_str(locals())
      print(80*"-")
      print("RERUNNING WITH MMCIF")
      print(80*"-")

    print("\nRunning merge_models alone")
    t0a=time.time()
    rmsd=tst_01()
    print("Time: %6.4f"%(time.time()-t0a))
    print("OK")

    args=["number_of_build_cycles=2","number_of_macro_cycles=1","number_of_trials=2","random_seed=77141"]
    t0a=time.time()
    print("Running standard minimize_chain")
    extra_args=['merge_models=False','pdb_out=std.pdb']
    rmsd=tst_02(args+extra_args,prefix='tst_02')
    print("RMSD %7.2f "%rmsd)
    # Make sure it wrote pdb_out:
    fn = "std.%s" %("cif" if mmcif else "pdb")
    test_inp = iotbx.pdb.input(source_info=None, lines = open(fn).read())
    test_ph = test_inp.construct_hierarchy()
    assert test_ph.overall_counts().n_residues > 0
    print("Time: %6.4f"%(time.time()-t0a))

    t0a=time.time()
    print("\nRunning standard minimize_chain plus merge_models")
    extra_args=['merge_models=True','pdb_out=merged.pdb']
    rmsd=tst_02(args+extra_args,prefix='tst_03')
    print("RMSD %7.2f "%rmsd)
    print("Time: %6.4f"%(time.time()-t0a))
  print("Total Time: %6.4f"%(time.time()-t0))
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_ml_estimate.py
from __future__ import absolute_import, division, print_function
import mmtbx.f_model
from scitbx.array_family import flex
from cctbx.development import random_structure
from cctbx import sgtbx
from six.moves import range

def run():
  xrs = random_structure.xray_structure(
    space_group_info = sgtbx.space_group_info("P1"),
    elements         = ["N"]*500,
    unit_cell        = (20, 30, 40, 70, 80, 120))
  xrs = xrs.set_b_iso(value=25)
  d_mins = [1.5]
  result = []
  for d_min in d_mins:
    f_obs = abs(xrs.structure_factors(d_min=d_min).f_calc())
    f_obs = f_obs.customized_copy(data = f_obs.data() * 135.)
    shifts = [0.0, 0.3]
    for xyz_shake_amount in shifts:
      xrs_shaken = xrs.deep_copy_scatterers()
      xrs_shaken.shake_sites_in_place(mean_distance = xyz_shake_amount)
      ml_err = flex.double()
      ml_err_new = flex.double()
      for trial in range(10):
        r_free_flags = f_obs.generate_r_free_flags()
        fmodel = mmtbx.f_model.manager(
          f_obs          = f_obs,
          r_free_flags   = r_free_flags,
          xray_structure = xrs_shaken)
        ml_err_ = fmodel.model_error_ml()
        ml_err.append(ml_err_)
      result.append(flex.mean(ml_err))
  assert result[0] > 0 and result[0] < 0.03
  assert result[1] > 0.2 and result[1] <= 0.32

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_mmtbx_refinement_wrappers.py
from __future__ import division
import iotbx.pdb
import mmtbx.model
import mmtbx.f_model
from scitbx.array_family import flex
import sys, time

from mmtbx.refinement import wrappers

import random
random.seed(0)
flex.set_random_seed(0)

pdb_str = """
CRYST1   21.937    4.866   23.477  90.00 107.08  90.00 P 1 21 1      2
ATOM      1  N   GLY A   1      -9.009   4.612   6.102  1.00 16.77           N
ATOM      2  CA  GLY A   1      -9.052   4.207   4.651  1.00 16.57           C
ATOM      3  C   GLY A   1      -8.015   3.140   4.419  1.00 16.16           C
ATOM      4  O   GLY A   1      -7.523   2.521   5.381  1.00 16.78           O
ATOM      5  N   ASN A   2      -7.656   2.923   3.155  1.00 15.02           N
ATOM      6  CA  ASN A   2      -6.522   2.038   2.831  1.00 14.10           C
ATOM      7  C   ASN A   2      -5.241   2.537   3.427  1.00 13.13           C
ATOM      8  O   ASN A   2      -4.978   3.742   3.426  1.00 11.91           O
ATOM      9  CB  ASN A   2      -6.346   1.881   1.341  1.00 15.38           C
ATOM     10  CG  ASN A   2      -7.584   1.342   0.692  1.00 14.08           C
ATOM     11  OD1 ASN A   2      -8.025   0.227   1.016  1.00 17.46           O
ATOM     12  ND2 ASN A   2      -8.204   2.155  -0.169  1.00 11.72           N
ATOM     13  N   ASN A   3      -4.438   1.590   3.905  1.00 12.26           N
ATOM     14  CA  ASN A   3      -3.193   1.904   4.589  1.00 11.74           C
ATOM     15  C   ASN A   3      -1.955   1.332   3.895  1.00 11.10           C
ATOM     16  O   ASN A   3      -1.872   0.119   3.648  1.00 10.42           O
ATOM     17  CB  ASN A   3      -3.259   1.378   6.042  1.00 12.15           C
ATOM     18  CG  ASN A   3      -2.006   1.739   6.861  1.00 12.82           C
ATOM     19  OD1 ASN A   3      -1.702   2.925   7.072  1.00 15.05           O
ATOM     20  ND2 ASN A   3      -1.271   0.715   7.306  1.00 13.48           N
ATOM     21  N   GLN A   4      -1.005   2.228   3.598  1.00 10.29           N
ATOM     22  CA  GLN A   4       0.384   1.888   3.199  1.00 10.53           C
ATOM     23  C   GLN A   4       1.435   2.606   4.088  1.00 10.24           C
ATOM     24  O   GLN A   4       1.547   3.843   4.115  1.00  8.86           O
ATOM     25  CB  GLN A   4       0.656   2.148   1.711  1.00  9.80           C
ATOM     26  CG  GLN A   4       1.944   1.458   1.213  1.00 10.25           C
ATOM     27  CD  GLN A   4       2.504   2.044  -0.089  1.00 12.43           C
ATOM     28  OE1 GLN A   4       2.744   3.268  -0.190  1.00 14.62           O
ATOM     29  NE2 GLN A   4       2.750   1.161  -1.091  1.00  9.05           N
ATOM     30  N   GLN A   5       2.154   1.821   4.871  1.00 10.38           N
ATOM     31  CA  GLN A   5       3.270   2.361   5.640  1.00 11.39           C
ATOM     32  C   GLN A   5       4.594   1.768   5.172  1.00 11.52           C
ATOM     33  O   GLN A   5       4.768   0.546   5.054  1.00 12.05           O
ATOM     34  CB  GLN A   5       3.056   2.183   7.147  1.00 11.96           C
ATOM     35  CG  GLN A   5       1.829   2.950   7.647  1.00 10.81           C
ATOM     36  CD  GLN A   5       1.344   2.414   8.954  1.00 13.10           C
ATOM     37  OE1 GLN A   5       0.774   1.325   9.002  1.00 10.65           O
ATOM     38  NE2 GLN A   5       1.549   3.187  10.039  1.00 12.30           N
ATOM     39  N   ASN A   6       5.514   2.664   4.856  1.00 11.99           N
ATOM     40  CA  ASN A   6       6.831   2.310   4.318  1.00 12.30           C
ATOM     41  C   ASN A   6       7.854   2.761   5.324  1.00 13.40           C
ATOM     42  O   ASN A   6       8.219   3.943   5.374  1.00 13.92           O
ATOM     43  CB  ASN A   6       7.065   3.016   2.993  1.00 12.13           C
ATOM     44  CG  ASN A   6       5.961   2.735   2.003  1.00 12.77           C
ATOM     45  OD1 ASN A   6       5.798   1.604   1.551  1.00 14.27           O
ATOM     46  ND2 ASN A   6       5.195   3.747   1.679  1.00 10.07           N
ATOM     47  N   TYR A   7       8.292   1.817   6.147  1.00 14.70           N
ATOM     48  CA  TYR A   7       9.159   2.144   7.299  1.00 15.18           C
ATOM     49  C   TYR A   7      10.603   2.331   6.885  1.00 15.91           C
ATOM     50  O   TYR A   7      11.041   1.811   5.855  1.00 15.76           O
ATOM     51  CB  TYR A   7       9.061   1.065   8.369  1.00 15.35           C
ATOM     52  CG  TYR A   7       7.665   0.929   8.902  1.00 14.45           C
ATOM     53  CD1 TYR A   7       6.771   0.021   8.327  1.00 15.68           C
ATOM     54  CD2 TYR A   7       7.210   1.756   9.920  1.00 14.80           C
ATOM     55  CE1 TYR A   7       5.480  -0.094   8.796  1.00 13.46           C
ATOM     56  CE2 TYR A   7       5.904   1.649  10.416  1.00 14.33           C
ATOM     57  CZ  TYR A   7       5.047   0.729   9.831  1.00 15.09           C
ATOM     58  OH  TYR A   7       3.766   0.589  10.291  1.00 14.39           O
ATOM     59  OXT TYR A   7      11.358   2.999   7.612  1.00 17.49           O
TER      60      TYR A   7
HETATM   61  O   HOH A   8      -6.471   5.227   7.124  1.00 22.62           O
HETATM   62  O   HOH A   9      10.431   1.858   3.216  1.00 19.71           O
HETATM   63  O   HOH A  10     -11.286   1.756  -1.468  1.00 17.08           O
HETATM   64  O   HOH A  11      11.808   4.179   9.970  1.00 23.99           O
HETATM   65  O   HOH A  12      13.605   1.327   9.198  1.00 26.17           O
HETATM   66  O   HOH A  13      -2.749   3.429  10.024  1.00 39.15           O
HETATM   67  O   HOH A  14      -1.500   0.682  10.967  1.00 43.49           O
END
"""

def run():
  pdb_inp = iotbx.pdb.input(source_info=None, lines=pdb_str)
  model = mmtbx.model.manager(model_input = pdb_inp)
  xrs = model.get_xray_structure()
  sel = model.selection(string="water")
  #
  f_obs = abs(xrs.structure_factors(d_min=1.0, algorithm="direct").f_calc())
  flags = f_obs.generate_r_free_flags()
  sfg_params = mmtbx.f_model.sf_and_grads_accuracy_master_params.extract()
  sfg_params.algorithm="direct"
  #
  xrs.shake_occupancies(selection = sel)
  xrs.shake_adp(selection = sel)
  xrs.shake_sites_in_place(mean_distance=0.3, selection=sel)
  #
  fmodel = mmtbx.f_model.manager(
    f_obs          = f_obs,
    target_name    = "ls_wunit_kunit",
    xray_structure = xrs,
    sf_and_grads_accuracy_params = sfg_params)
  print("r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(), fmodel.r_free()))
  #
  o = wrappers.unrestrained_qbr_fsr(
    fmodel    = fmodel,
    model     = model,
    selection = sel,
    log       = sys.stdout,
    macro_cycles = 20)
  print("Final: r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(), fmodel.r_free()))
  assert fmodel.r_work() < 0.0005

if(__name__ == "__main__"):
  t0 = time.time()
  run()
  print("Time: %6.4f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_mmtbx_refinement_wrappers_1.py
from __future__ import division
import iotbx.pdb
import mmtbx.model
import mmtbx.f_model
from scitbx.array_family import flex
import sys, time
from libtbx.utils import null_out
from mmtbx.refinement import wrappers
import mmtbx.refinement.refinement_flags

import random
random.seed(0)
flex.set_random_seed(0)

pdb_str = """
CRYST1   21.937    4.866   23.477  90.00 107.08  90.00 P 1 21 1      2
ATOM      1  N   GLY A   1      -9.009   4.612   6.102  1.00 20.00           N
ATOM      2  CA  GLY A   1      -9.052   4.207   4.651  1.00 20.00           C
ATOM      3  C   GLY A   1      -8.015   3.140   4.419  1.00 20.00           C
ATOM      4  O   GLY A   1      -7.523   2.521   5.381  1.00 20.00           O
ATOM      5  N   ASN A   2      -7.656   2.923   3.155  1.00 20.00           N
ATOM      6  CA  ASN A   2      -6.522   2.038   2.831  1.00 20.00           C
ATOM      7  C   ASN A   2      -5.241   2.537   3.427  1.00 20.00           C
ATOM      8  O   ASN A   2      -4.978   3.742   3.426  1.00 20.00           O
ATOM      9  CB  ASN A   2      -6.346   1.881   1.341  1.00 20.00           C
ATOM     10  CG  ASN A   2      -7.584   1.342   0.692  1.00 20.00           C
ATOM     11  OD1 ASN A   2      -8.025   0.227   1.016  1.00 20.00           O
ATOM     12  ND2 ASN A   2      -8.204   2.155  -0.169  1.00 20.00           N
ATOM     13  N   ASN A   3      -4.438   1.590   3.905  1.00 20.00           N
ATOM     14  CA  ASN A   3      -3.193   1.904   4.589  1.00 20.00           C
ATOM     15  C   ASN A   3      -1.955   1.332   3.895  1.00 20.00           C
ATOM     16  O   ASN A   3      -1.872   0.119   3.648  1.00 20.00           O
ATOM     17  CB  ASN A   3      -3.259   1.378   6.042  1.00 20.00           C
ATOM     18  CG  ASN A   3      -2.006   1.739   6.861  1.00 20.00           C
ATOM     19  OD1 ASN A   3      -1.702   2.925   7.072  1.00 20.00           O
ATOM     20  ND2 ASN A   3      -1.271   0.715   7.306  1.00 20.00           N
ATOM     21  N   GLN A   4      -1.005   2.228   3.598  1.00 20.00           N
ATOM     22  CA  GLN A   4       0.384   1.888   3.199  1.00 20.00           C
ATOM     23  C   GLN A   4       1.435   2.606   4.088  1.00 20.00           C
ATOM     24  O   GLN A   4       1.547   3.843   4.115  1.00 20.00           O
ATOM     25  CB  GLN A   4       0.656   2.148   1.711  1.00 20.00           C
ATOM     26  CG  GLN A   4       1.944   1.458   1.213  1.00 20.00           C
ATOM     27  CD  GLN A   4       2.504   2.044  -0.089  1.00 20.00           C
ATOM     28  OE1 GLN A   4       2.744   3.268  -0.190  1.00 20.00           O
ATOM     29  NE2 GLN A   4       2.750   1.161  -1.091  1.00 20.00           N
ATOM     30  N   GLN A   5       2.154   1.821   4.871  1.00 20.00           N
ATOM     31  CA  GLN A   5       3.270   2.361   5.640  1.00 20.00           C
ATOM     32  C   GLN A   5       4.594   1.768   5.172  1.00 20.00           C
ATOM     33  O   GLN A   5       4.768   0.546   5.054  1.00 20.00           O
ATOM     34  CB  GLN A   5       3.056   2.183   7.147  1.00 20.00           C
ATOM     35  CG  GLN A   5       1.829   2.950   7.647  1.00 20.00           C
ATOM     36  CD  GLN A   5       1.344   2.414   8.954  1.00 20.00           C
ATOM     37  OE1 GLN A   5       0.774   1.325   9.002  1.00 20.00           O
ATOM     38  NE2 GLN A   5       1.549   3.187  10.039  1.00 20.00           N
ATOM     39  N   ASN A   6       5.514   2.664   4.856  1.00 20.00           N
ATOM     40  CA  ASN A   6       6.831   2.310   4.318  1.00 20.00           C
ATOM     41  C   ASN A   6       7.854   2.761   5.324  1.00 20.00           C
ATOM     42  O   ASN A   6       8.219   3.943   5.374  1.00 20.00           O
ATOM     43  CB  ASN A   6       7.065   3.016   2.993  1.00 20.00           C
ATOM     44  CG  ASN A   6       5.961   2.735   2.003  1.00 20.00           C
ATOM     45  OD1 ASN A   6       5.798   1.604   1.551  1.00 20.00           O
ATOM     46  ND2 ASN A   6       5.195   3.747   1.679  1.00 20.00           N
ATOM     47  N   TYR A   7       8.292   1.817   6.147  1.00 20.00           N
ATOM     48  CA  TYR A   7       9.159   2.144   7.299  1.00 20.00           C
ATOM     49  C   TYR A   7      10.603   2.331   6.885  1.00 20.00           C
ATOM     50  O   TYR A   7      11.041   1.811   5.855  1.00 20.00           O
ATOM     51  CB  TYR A   7       9.061   1.065   8.369  1.00 20.00           C
ATOM     52  CG  TYR A   7       7.665   0.929   8.902  1.00 20.00           C
ATOM     53  CD1 TYR A   7       6.771   0.021   8.327  1.00 20.00           C
ATOM     54  CD2 TYR A   7       7.210   1.756   9.920  1.00 20.00           C
ATOM     55  CE1 TYR A   7       5.480  -0.094   8.796  1.00 20.00           C
ATOM     56  CE2 TYR A   7       5.904   1.649  10.416  1.00 20.00           C
ATOM     57  CZ  TYR A   7       5.047   0.729   9.831  1.00 20.00           C
ATOM     58  OH  TYR A   7       3.766   0.589  10.291  1.00 20.00           O
ATOM     59  OXT TYR A   7      11.358   2.999   7.612  1.00 20.00           O
TER      60      TYR A   7
HETATM   61  O   HOH A   8      -6.471   5.227   7.124  1.00 20.00           O
HETATM   62  O   HOH A   9      10.431   1.858   3.216  1.00 20.00           O
HETATM   63  O   HOH A  10     -11.286   1.756  -1.468  1.00 20.00           O
HETATM   64  O   HOH A  11      11.808   4.179   9.970  1.00 20.00           O
HETATM   65  O   HOH A  12      13.605   1.327   9.198  1.00 20.00           O
HETATM   66  O   HOH A  13      -2.749   3.429  10.024  1.00 20.00           O
HETATM   67  O   HOH A  14      -1.500   0.682  10.967  1.00 20.00           O
END
"""

def run():
  # Ground truth model
  pdb_inp = iotbx.pdb.input(source_info=None, lines=pdb_str)
  model = mmtbx.model.manager(model_input = pdb_inp, log = null_out())
  model.process(make_restraints = True)
  xrs = model.get_xray_structure()
  # Fobs from ground truth model
  f_obs = abs(xrs.structure_factors(d_min=1.0).f_calc())
  r_free_flags = f_obs.generate_r_free_flags()
  # Generate list of trial sites_cart and shake B factors
  sites_cart_list = []
  for it in range(3):
    xrs_dc = xrs.deep_copy_scatterers()
    xrs_dc.shake_sites_in_place(mean_distance=0.3)
    sites_cart_list.append(xrs_dc.sites_cart())
  xrs_dc.shake_adp()
  model.set_xray_structure(xrs_dc)
  # Set refinement flags
  rf = mmtbx.refinement.refinement_flags.manager(
    individual_sites   = True,
    individual_adp     = True,
    sites_individual   = flex.bool(model.size(), True),
    adp_individual_iso = flex.bool(model.size(), True))
  model.set_refinement_flags(flags = rf)
  #
  fmodel = mmtbx.f_model.manager(
    f_obs          = f_obs,
    r_free_flags   = r_free_flags,
    target_name="ls_wunit_k1",
    xray_structure = xrs_dc)
  fmodel.update_all_scales()
  print("r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(), fmodel.r_free()))
  assert model.get_xray_structure() == fmodel.xray_structure
  #
  # Run refinement
  #
  o = wrappers.simple_fsr(
    model           = model,
    fmodel          = fmodel,
    sites_cart_list = sites_cart_list,
    log             = sys.stdout)
  o.run()
  # Results
  for result in o.results:
    print()
    print("start xyz:", result.sites_cart_start)
    print("final xyz:", result.sites_cart_final)
    print("final r_work, r_free:", result.r_work, result.r_free)
    print()

if(__name__ == "__main__"):
  t0 = time.time()
  run()
  print("Time: %6.4f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_mmtbx_refinement_wrappers_2.py
from __future__ import division
import iotbx.pdb
import mmtbx.model
import mmtbx.f_model
from scitbx.array_family import flex
import sys, time
from libtbx.utils import null_out
from mmtbx.refinement import wrappers
import mmtbx.refinement.refinement_flags
import pydiscamb
from libtbx.test_utils import approx_equal
from cctbx import maptbx, miller
from mmtbx import map_tools

import random
random.seed(0)
flex.set_random_seed(0)

def compute_maps(fmodel, crystal_gridding, map_type):
  map_coefficients = map_tools.electron_density_map(
    fmodel = fmodel).map_coefficients(
      map_type         = map_type,
      isotropize       = True,
      fill_missing     = False)
  fft_map = miller.fft_map(
    crystal_gridding     = crystal_gridding,
    fourier_coefficients = map_coefficients)
  fft_map.apply_sigma_scaling()
  return fft_map.real_map_unpadded(), map_coefficients

pdb_str = """
CRYST1   20.584   14.037   18.865  90.00  90.00  90.00 P 1
ATOM      1  N   GLN A   5       6.376   6.692   8.279  1.00 20.00           N
ATOM      2  CA  GLN A   5       7.421   7.443   8.965  1.00 20.00           C
ATOM      3  C   GLN A   5       8.806   6.937   8.573  1.00 20.00           C
ATOM      4  O   GLN A   5       9.098   5.747   8.689  1.00 20.00           O
ATOM      5  CB  GLN A   5       7.238   7.355  10.481  1.00 20.00           C
ATOM      6  CG  GLN A   5       5.942   7.968  10.987  1.00 20.00           C
ATOM      7  CD  GLN A   5       5.554   7.459  12.361  1.00 20.00           C
ATOM      8  OE1 GLN A   5       5.133   6.313  12.515  1.00 20.00           O
ATOM      9  NE2 GLN A   5       5.695   8.312  13.369  1.00 20.00           N
ATOM     10  N   ASN A   6       9.655   7.851   8.108  1.00 20.00           N
ATOM     11  CA  ASN A   6      11.017   7.527   7.691  1.00 20.00           C
ATOM     12  C   ASN A   6      11.965   7.928   8.815  1.00 20.00           C
ATOM     13  O   ASN A   6      12.295   9.106   8.975  1.00 20.00           O
ATOM     14  CB  ASN A   6      11.366   8.231   6.384  1.00 20.00           C
ATOM     15  CG  ASN A   6      10.372   7.935   5.278  1.00 20.00           C
ATOM     16  OD1 ASN A   6      10.269   6.802   4.808  1.00 20.00           O
ATOM     17  ND2 ASN A   6       9.634   8.955   4.857  1.00 20.00           N
ATOM     18  N   TYR A   7      12.403   6.944   9.594  1.00 20.00           N
ATOM     19  CA  TYR A   7      13.314   7.194  10.705  1.00 20.00           C
ATOM     20  C   TYR A   7      14.752   7.322  10.215  1.00 20.00           C
ATOM     21  O   TYR A   7      15.093   6.871   9.122  1.00 20.00           O
ATOM     22  CB  TYR A   7      13.209   6.077  11.746  1.00 20.00           C
ATOM     23  CG  TYR A   7      11.853   5.980  12.406  1.00 20.00           C
ATOM     24  CD1 TYR A   7      11.499   6.836  13.441  1.00 20.00           C
ATOM     25  CD2 TYR A   7      10.925   5.032  11.995  1.00 20.00           C
ATOM     26  CE1 TYR A   7      10.260   6.751  14.047  1.00 20.00           C
ATOM     27  CE2 TYR A   7       9.683   4.939  12.595  1.00 20.00           C
ATOM     28  CZ  TYR A   7       9.357   5.801  13.621  1.00 20.00           C
ATOM     29  OH  TYR A   7       8.122   5.713  14.222  1.00 20.00           O
ATOM     30  OXT TYR A   7      15.608   7.881  10.901  1.00 20.00           O
TER
END
"""

def run(d_min            = 1.0,
        scattering_table = "electron",
        algorithm        = "direct",
        macro_cycles     = 10,
        max_iterations   = 50,
        shake_model      = True,
        use_cctbx        = True):
  # Ground truth model
  pdb_inp = iotbx.pdb.input(source_info=None, lines=pdb_str)
  model = mmtbx.model.manager(model_input = pdb_inp, log = null_out())
  model.process(make_restraints = True)
  model.setup_scattering_dictionaries(
    scattering_table = scattering_table,
    d_min            = d_min)
  xrs = model.get_xray_structure()
  # Fobs from ground truth model
  f_obs = abs(xrs.structure_factors(d_min=d_min, algorithm=algorithm).f_calc())
  if not use_cctbx:
    wrapper = pydiscamb.DiscambWrapper(xrs, method=pydiscamb.FCalcMethod.TAAM)
    wrapper.set_indices(f_obs.indices())
    data = flex.complex_double(wrapper.f_calc())
    f_obs = f_obs.array(data = flex.abs(data))
  r_free_flags = f_obs.generate_r_free_flags()
  assert scattering_table == xrs.get_scattering_table(), [
    scattering_table, xrs.get_scattering_table()]
  # Generate list of trial sites_cart and shake B factors
  sites_cart_list = []
  xrs_dc = xrs.deep_copy_scatterers()
  if shake_model:
    xrs_dc.shake_sites_in_place(mean_distance=0.1)
    xrs_dc.shake_adp()
  sites_cart_list.append(xrs_dc.sites_cart())
  model.set_xray_structure(xrs_dc)
  model.setup_scattering_dictionaries( # deep_copy_scatterers looses the table!
    scattering_table = scattering_table,
    d_min            = d_min)
  # get fmodel from data manager
  xrs = model.get_xray_structure()
  assert scattering_table == xrs.get_scattering_table(), [
    scattering_table, xrs.get_scattering_table()]
  rf = mmtbx.refinement.refinement_flags.manager(
    individual_sites   = True,
    individual_adp     = True,
    sites_individual   = flex.bool(model.size(), True),
    adp_individual_iso = flex.bool(model.size(), True))
  model.set_refinement_flags(flags = rf)
  #
  sfparams = mmtbx.f_model.sf_and_grads_accuracy_master_params.extract()
  sfparams.algorithm = algorithm
  fmodel = mmtbx.f_model.manager(
    f_obs          = f_obs,
    r_free_flags   = r_free_flags,
    target_name    = "ls_wunit_k1", # ml in reality
    sf_and_grads_accuracy_params = sfparams,
    xray_structure = model.get_xray_structure(),
    discamb_mode = None if use_cctbx else "taam")
  fmodel.update_all_scales()
  print("r_work=%6.4f r_free=%6.4f"%(fmodel.r_work(), fmodel.r_free()))
  assert model.get_xray_structure() == fmodel.xray_structure
  #
  # Run refinement
  #
  sc_start = model.get_sites_cart().deep_copy()
  o = wrappers.simple_fsr(
    model           = model,
    fmodel          = fmodel,
    macro_cycles    = macro_cycles,
    max_iterations  = max_iterations,
    sites_cart_list = [model.get_sites_cart(),],
    log             = sys.stdout,
    refine_xyz      = True,
    refine_adp      = True,
    )
  o.run()
  # Sanity checks
  print()
  sc_final = model.get_sites_cart()
  print("shift from start:", flex.mean(flex.sqrt((sc_start - sc_final).dot())))
  assert approx_equal(o.results[-1].r_work, fmodel.r_work())
  fmodel.update_xray_structure(
    xray_structure = model.get_xray_structure(), update_f_calc=True)
  assert approx_equal(o.results[-1].r_work, fmodel.r_work())
  #
  print()
  fmodel.show(show_header=False, show_approx=False)
  #
  with open("refined.pdb", "w") as fo:
    fo.write(model.model_as_pdb())
  # Compute maps
  crystal_gridding = fmodel.f_obs().crystal_gridding(
    d_min             = d_min,
    symmetry_flags    = maptbx.use_space_group_symmetry,
    resolution_factor = 1./4)
  fofc_map, fofc = compute_maps(
    fmodel           = fmodel,
    crystal_gridding = crystal_gridding,
    map_type         = "mFo-DFc")
  tfofc_map, tfofc = compute_maps(
    fmodel           = fmodel,
    crystal_gridding = crystal_gridding,
    map_type         = "2mFo-DFc")
  # Output maps as MTZ
  mtz_dataset = fofc.as_mtz_dataset(column_root_label = "mFobs-DFmodel")
  mtz_dataset.add_miller_array(
    miller_array      = tfofc,
    column_root_label = "2mFobs-DFmodel")
  mtz_object = mtz_dataset.mtz_object()
  mtz_object.write(file_name = "refined.mtz")

if(__name__ == "__main__"):
  t0 = time.time()
  run()
  print("Time: %6.4f"%(time.time()-t0))


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_model_map.py
from __future__ import absolute_import, division, print_function
from scitbx.array_family import flex
import iotbx.pdb
import iotbx.mrcfile
import iotbx.xplor.map
from libtbx import easy_run
import time

pdb_str = """
CRYST1   21.937    4.866   23.477  90.00 107.08  90.00 P 1 21 1      2
ATOM      1  N   GLY A   1      -9.009   4.612   6.102  1.00 16.77           N
ATOM      2  CA  GLY A   1      -9.052   4.207   4.651  1.00 16.57           C
ATOM      3  C   GLY A   1      -8.015   3.140   4.419  1.00 16.16           C
ATOM      4  O   GLY A   1      -7.523   2.521   5.381  1.00 16.78           O
ATOM      5  N   ASN A   2      -7.656   2.923   3.155  1.00 15.02           N
ATOM      6  CA  ASN A   2      -6.522   2.038   2.831  1.00 14.10           C
ATOM      7  C   ASN A   2      -5.241   2.537   3.427  1.00 13.13           C
ATOM      8  O   ASN A   2      -4.978   3.742   3.426  1.00 11.91           O
ATOM      9  CB  ASN A   2      -6.346   1.881   1.341  1.00 15.38           C
ATOM     10  CG  ASN A   2      -7.584   1.342   0.692  1.00 14.08           C
ATOM     11  OD1 ASN A   2      -8.025   0.227   1.016  1.00 17.46           O
ATOM     12  ND2 ASN A   2      -8.204   2.155  -0.169  1.00 11.72           N
ATOM     13  N   ASN A   3      -4.438   1.590   3.905  1.00 12.26           N
ATOM     14  CA  ASN A   3      -3.193   1.904   4.589  1.00 11.74           C
ATOM     15  C   ASN A   3      -1.955   1.332   3.895  1.00 11.10           C
ATOM     16  O   ASN A   3      -1.872   0.119   3.648  1.00 10.42           O
ATOM     17  CB  ASN A   3      -3.259   1.378   6.042  1.00 12.15           C
ATOM     18  CG  ASN A   3      -2.006   1.739   6.861  1.00 12.82           C
ATOM     19  OD1 ASN A   3      -1.702   2.925   7.072  1.00 15.05           O
ATOM     20  ND2 ASN A   3      -1.271   0.715   7.306  1.00 13.48           N
ATOM     21  N   GLN A   4      -1.005   2.228   3.598  1.00 10.29           N
ATOM     22  CA  GLN A   4       0.384   1.888   3.199  1.00 10.53           C
ATOM     23  C   GLN A   4       1.435   2.606   4.088  1.00 10.24           C
ATOM     24  O   GLN A   4       1.547   3.843   4.115  1.00  8.86           O
ATOM     25  CB  GLN A   4       0.656   2.148   1.711  1.00  9.80           C
ATOM     26  CG  GLN A   4       1.944   1.458   1.213  1.00 10.25           C
ATOM     27  CD  GLN A   4       2.504   2.044  -0.089  1.00 12.43           C
ATOM     28  OE1 GLN A   4       2.744   3.268  -0.190  1.00 14.62           O
ATOM     29  NE2 GLN A   4       2.750   1.161  -1.091  1.00  9.05           N
ATOM     30  N   GLN A   5       2.154   1.821   4.871  1.00 10.38           N
ATOM     31  CA  GLN A   5       3.270   2.361   5.640  1.00 11.39           C
ATOM     32  C   GLN A   5       4.594   1.768   5.172  1.00 11.52           C
ATOM     33  O   GLN A   5       4.768   0.546   5.054  1.00 12.05           O
ATOM     34  CB  GLN A   5       3.056   2.183   7.147  1.00 11.96           C
ATOM     35  CG  GLN A   5       1.829   2.950   7.647  1.00 10.81           C
ATOM     36  CD  GLN A   5       1.344   2.414   8.954  1.00 13.10           C
ATOM     37  OE1 GLN A   5       0.774   1.325   9.002  1.00 10.65           O
ATOM     38  NE2 GLN A   5       1.549   3.187  10.039  1.00 12.30           N
ATOM     39  N   ASN A   6       5.514   2.664   4.856  1.00 11.99           N
ATOM     40  CA  ASN A   6       6.831   2.310   4.318  1.00 12.30           C
ATOM     41  C   ASN A   6       7.854   2.761   5.324  1.00 13.40           C
ATOM     42  O   ASN A   6       8.219   3.943   5.374  1.00 13.92           O
ATOM     43  CB  ASN A   6       7.065   3.016   2.993  1.00 12.13           C
ATOM     44  CG  ASN A   6       5.961   2.735   2.003  1.00 12.77           C
ATOM     45  OD1 ASN A   6       5.798   1.604   1.551  1.00 14.27           O
ATOM     46  ND2 ASN A   6       5.195   3.747   1.679  1.00 10.07           N
ATOM     47  N   TYR A   7       8.292   1.817   6.147  1.00 14.70           N
ATOM     48  CA  TYR A   7       9.159   2.144   7.299  1.00 15.18           C
ATOM     49  C   TYR A   7      10.603   2.331   6.885  1.00 15.91           C
ATOM     50  O   TYR A   7      11.041   1.811   5.855  1.00 15.76           O
ATOM     51  CB  TYR A   7       9.061   1.065   8.369  1.00 15.35           C
ATOM     52  CG  TYR A   7       7.665   0.929   8.902  1.00 14.45           C
ATOM     53  CD1 TYR A   7       6.771   0.021   8.327  1.00 15.68           C
ATOM     54  CD2 TYR A   7       7.210   1.756   9.920  1.00 14.80           C
ATOM     55  CE1 TYR A   7       5.480  -0.094   8.796  1.00 13.46           C
ATOM     56  CE2 TYR A   7       5.904   1.649  10.416  1.00 14.33           C
ATOM     57  CZ  TYR A   7       5.047   0.729   9.831  1.00 15.09           C
ATOM     58  OH  TYR A   7       3.766   0.589  10.291  1.00 14.39           O
ATOM     59  OXT TYR A   7      11.358   2.999   7.612  1.00 17.49           O
TER
HETATM   61  O   HOH A   8      -6.471   5.227   7.124  1.00 22.62           O
HETATM   62  O   HOH A   9      10.431   1.858   3.216  1.00 19.71           O
HETATM   63  O   HOH A  10     -11.286   1.756  -1.468  1.00 17.08           O
HETATM   64  O   HOH A  11      11.808   4.179   9.970  1.00 23.99           O
HETATM   65  O   HOH A  12      13.605   1.327   9.198  1.00 26.17           O
HETATM   66  O   HOH A  13      -2.749   3.429  10.024  1.00 39.15           O
HETATM   67  O   HOH A  14      -1.500   0.682  10.967  1.00 43.49           O
END
"""

def run(prefix="tst_model_map"):
  """
  Exercise phenix.model_map
  """
  # original (zero-origin) map and model
  pdb_inp = iotbx.pdb.input(source_info=None, lines=pdb_str)
  pdb_inp.write_pdb_file(file_name="%s.pdb"%prefix)
  ph = pdb_inp.construct_hierarchy()
  xrs = pdb_inp.xray_structure_simple()
  fc0 = xrs.structure_factors(d_min=3.0).f_calc()
  #
  assert not easy_run.call("phenix.model_map %s.pdb output_file_name_prefix=%s"%(
    prefix, prefix))
  m1 = iotbx.mrcfile.map_reader(file_name="%s.ccp4"%prefix).data.as_double()
  m2 = iotbx.xplor.map.reader(file_name="%s.xplor"%prefix).data
  #
  fc1 = fc0.structure_factors_from_map(
    map            = m1,
    use_scale      = True,
    anomalous_flag = False,
    use_sg         = False)
  fc2 = fc0.structure_factors_from_map(
    map            = m2,
    use_scale      = True,
    anomalous_flag = False,
    use_sg         = False)
  cc1 = flex.linear_correlation(
    x=abs(fc0).data(), y=abs(fc1).data()).coefficient()
  cc2 = flex.linear_correlation(
    x=abs(fc0).data(), y=abs(fc2).data()).coefficient()
  print(cc1, cc2)
  assert cc1>0.9999
  assert cc2>0.97 # WHY?

if (__name__ == "__main__"):
  t0 = time.time()
  run()
  print("Time: %6.3f"%(time.time()-t0))
  print("OK")


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_model_vs_map.py
from __future__ import absolute_import, division, print_function

import time
from libtbx import easy_run
#import libtbx.load_env
import time
from iotbx import pdb

cryst_str = """\n
CRYST1   34.917   22.246   44.017  90.00  90.00  90.00 P 1
SCALE1      0.028639  0.000000  0.000000        0.00000
SCALE2      0.000000  0.044952  0.000000        0.00000
SCALE3      0.000000  0.000000  0.022718        0.00000
"""
# taken from phenix_regression/refinement/ncs/tst_ncs_0.py
# ncs-related chain omitted
pdb_str = """\
ATOM      1  N   ALA A   1      27.344  16.348  30.784  1.00 10.00           N
ATOM      2  CA  ALA A   1      26.429  15.281  31.335  1.00 10.00           C
ATOM      3  C   ALA A   1      26.610  14.025  30.603  1.00 10.00           C
ATOM      4  O   ALA A   1      26.479  13.979  29.356  1.00 10.00           O
ATOM      5  CB  ALA A   1      24.874  15.800  31.300  1.00 10.00           C
ATOM      1  N   ALA A   2      26.812  12.925  31.345  1.00 10.00           N
ATOM      2  CA  ALA A   2      27.084  11.577  30.797  1.00 10.00           C
ATOM      3  C   ALA A   2      25.856  10.737  30.707  1.00 10.00           C
ATOM      4  O   ALA A   2      25.741   9.860  29.891  1.00 10.00           O
ATOM      5  CB  ALA A   2      28.151  10.950  31.721  1.00 10.00           C
ATOM      1  N   ALA A   3      25.009  10.973  31.714  1.00 10.00           N
ATOM      2  CA  ALA A   3      23.621  10.543  31.560  1.00 10.00           C
ATOM      3  C   ALA A   3      23.023  11.008  30.214  1.00 10.00           C
ATOM      4  O   ALA A   3      22.786  10.233  29.249  1.00 10.00           O
ATOM      5  CB  ALA A   3      22.760  11.040  32.654  1.00 10.00           C
ATOM      1  N   ALA A   4      22.798  12.304  30.175  1.00 10.00           N
ATOM      2  CA  ALA A   4      22.329  13.084  28.981  1.00 10.00           C
ATOM      3  C   ALA A   4      23.116  12.816  27.721  1.00 10.00           C
ATOM      4  O   ALA A   4      22.533  12.805  26.670  1.00 10.00           O
ATOM      5  CB  ALA A   4      22.372  14.607  29.318  1.00 10.00           C
ATOM      1  N   ALA A   5      24.448  12.622  27.823  1.00 10.00           N
ATOM      2  CA  ALA A   5      25.228  12.407  26.573  1.00 10.00           C
ATOM      3  C   ALA A   5      25.222  10.947  26.143  1.00 10.00           C
ATOM      4  O   ALA A   5      25.386  10.664  24.983  1.00 10.00           O
ATOM      5  CB  ALA A   5      26.634  12.906  26.746  1.00 10.00           C
ATOM      1  N   ALA A   6      24.976  10.048  27.071  1.00 10.00           N
ATOM      2  CA  ALA A   6      24.857   8.614  26.805  1.00 10.00           C
ATOM      3  C   ALA A   6      23.537   8.349  26.054  1.00 10.00           C
ATOM      4  O   ALA A   6      23.439   7.570  25.057  1.00 10.00           O
ATOM      5  CB  ALA A   6      24.874   7.845  28.114  1.00 10.00           C
ATOM      1  N   ALA A   7      22.542   9.039  26.580  1.00 10.00           N
ATOM      2  CA  ALA A   7      21.228   8.903  25.942  1.00 10.00           C
ATOM      3  C   ALA A   7      21.329   9.698  24.628  1.00 10.00           C
ATOM      4  O   ALA A   7      20.707   9.383  23.632  1.00 10.00           O
ATOM      5  CB  ALA A   7      20.146   9.465  26.862  1.00 10.00           C
ATOM      1  N   ALA A   8      22.181  10.696  24.613  1.00 10.00           N
ATOM      2  CA  ALA A   8      22.526  11.372  23.378  1.00 10.00           C
ATOM      3  C   ALA A   8      23.351  10.555  22.448  1.00 10.00           C
ATOM      4  O   ALA A   8      23.618  10.883  21.252  1.00 10.00           O
ATOM      5  CB  ALA A   8      23.168  12.697  23.693  1.00 10.00           C
ATOM      1  N   ALA A   9      23.864   9.423  22.961  1.00 10.00           N
ATOM      2  CA  ALA A   9      24.785   8.541  22.264  1.00 10.00           C
ATOM      3  C   ALA A   9      24.057   7.451  21.484  1.00 10.00           C
ATOM      4  O   ALA A   9      24.127   7.381  20.257  1.00 10.00           O
ATOM      5  CB  ALA A   9      25.815   7.975  23.249  1.00 10.00           C
ATOM      1  N   ALA A  10      23.518   6.548  22.264  1.00 10.00           N
ATOM      2  CA  ALA A  10      22.629   5.525  21.690  1.00 10.00           C
ATOM      3  C   ALA A  10      21.549   6.308  21.009  1.00 10.00           C
ATOM      4  O   ALA A  10      21.114   5.933  19.930  1.00 10.00           O
ATOM      5  CB  ALA A  10      22.057   4.714  22.784  1.00 10.00           C
ATOM      1  N   ALA A  11      21.120   7.452  21.541  1.00 10.00           N
ATOM      2  CA  ALA A  11      20.186   8.260  20.874  1.00 10.00           C
ATOM      3  C   ALA A  11      20.978   9.215  19.937  1.00 10.00           C
ATOM      4  O   ALA A  11      20.386  10.177  19.507  1.00 10.00           O
ATOM      5  CB  ALA A  11      19.295   9.031  21.867  1.00 10.00           C
ATOM      1  N   ALA A  12      22.222   8.932  19.598  1.00 10.00           N
ATOM      2  CA  ALA A  12      22.896   9.709  18.563  1.00 10.00           C
ATOM      3  C   ALA A  12      22.924   8.925  17.308  1.00 10.00           C
ATOM      4  O   ALA A  12      22.982   9.445  16.193  1.00 10.00           O
ATOM      5  CB  ALA A  12      24.294  10.138  18.994  1.00 10.00           C
ATOM      1  N   ALA A  13      22.951   7.633  17.508  1.00 10.00           N
ATOM      2  CA  ALA A  13      22.709   6.629  16.554  1.00 10.00           C
ATOM      3  C   ALA A  13      21.275   6.673  16.206  1.00 10.00           C
ATOM      4  O   ALA A  13      20.870   6.521  15.092  1.00 10.00           O
ATOM      5  CB  ALA A  13      23.077   5.254  17.025  1.00 10.00           C
ATOM      1  N   ALA A  14      20.471   6.929  17.226  1.00 10.00           N
ATOM      2  CA  ALA A  14      19.039   6.992  17.025  1.00 10.00           C
ATOM      3  C   ALA A  14      18.676   8.380  16.528  1.00 10.00           C
ATOM      4  O   ALA A  14      17.748   8.556  15.761  1.00 10.00           O
ATOM      5  CB  ALA A  14      18.240   6.715  18.272  1.00 10.00           C
ATOM      1  N   ALA A  15      19.381   9.390  17.055  1.00 10.00           N
ATOM      2  CA  ALA A  15      19.204  10.743  16.669  1.00 10.00           C
ATOM      3  C   ALA A  15      19.407  10.807  15.174  1.00 10.00           C
ATOM      4  O   ALA A  15      18.402  10.987  14.424  1.00 10.00           O
ATOM      5  CB  ALA A  15      20.190  11.665  17.493  1.00 10.00           C
ATOM      1  N   ALA A  16      20.702  10.653  14.831  1.00 10.00           N
ATOM      2  CA  ALA A  16      21.206  10.546  13.480  1.00 10.00           C
ATOM      3  C   ALA A  16      20.484   9.612  12.585  1.00 10.00           C
ATOM      4  O   ALA A  16      20.380   9.918  11.386  1.00 10.00           O
ATOM      5  CB  ALA A  16      22.631  10.174  13.475  1.00 10.00           C
ATOM      1  N   ALA A  17      20.064   8.475  13.175  1.00 10.00           N
ATOM      2  CA  ALA A  17      19.355   7.473  12.426  1.00 10.00           C
ATOM      3  C   ALA A  17      17.924   7.807  12.064  1.00 10.00           C
ATOM      4  O   ALA A  17      17.535   7.721  10.871  1.00 10.00           O
ATOM      5  CB  ALA A  17      19.359   6.123  13.216  1.00 10.00           C
ATOM      1  N   ALA A  18      17.152   8.115  13.031  1.00 10.00           N
ATOM      2  CA  ALA A  18      15.835   8.594  12.861  1.00 10.00           C
ATOM      3  C   ALA A  18      15.811   9.835  11.861  1.00 10.00           C
ATOM      4  O   ALA A  18      15.020   9.889  10.868  1.00 10.00           O
ATOM      5  CB  ALA A  18      15.272   8.918  14.234  1.00 10.00           C
ATOM      1  N   ALA A  19      16.661  10.845  12.100  1.00 10.00           N
ATOM      2  CA  ALA A  19      16.435  12.061  11.275  1.00 10.00           C
ATOM      3  C   ALA A  19      17.004  11.815   9.833  1.00 10.00           C
ATOM      4  O   ALA A  19      16.334  12.117   8.857  1.00 10.00           O
ATOM      5  CB  ALA A  19      17.059  13.242  11.866  1.00 10.00           C
ATOM      1  N   ALA A  20      18.191  11.200   9.841  1.00 10.00           N
ATOM      2  CA  ALA A  20      19.091  11.247   8.697  1.00 10.00           C
ATOM      3  C   ALA A  20      19.549   9.835   8.231  1.00 10.00           C
ATOM      4  O   ALA A  20      20.670   9.692   7.663  1.00 10.00           O
ATOM      5  CB  ALA A  20      20.326  12.105   9.035  1.00 10.00           C
ATOM      1  N   ALA A  21      18.654   8.850   8.523  1.00 10.00           N
ATOM      2  CA  ALA A  21      18.827   7.437   8.168  1.00 10.00           C
ATOM      3  C   ALA A  21      17.565   6.607   8.282  1.00 10.00           C
ATOM      4  O   ALA A  21      16.485   6.992   7.820  1.00 10.00           O
ATOM      5  CB  ALA A  21      19.888   6.838   8.983  1.00 10.00           C
TER
"""

def exercise(prefix="tst_model_vs_data1"):
  pdb_file = open("%s_start.pdb" % prefix, "w")
  pdb_file.write(cryst_str)
  pdb_file.write(pdb_str)
  pdb_file.close()
  cmd = " ".join([
      "phenix.model_map",
      "%s_start.pdb" % prefix,
      "output_file_name_prefix=%s.map" % prefix,
      ">%s_mm.log" % prefix])
  print(cmd)
  assert not easy_run.call(cmd)
  cmd = " ".join([
      "phenix.model_vs_map",
      "%s_start.pdb" % prefix,
      "%s.map.ccp4" % prefix,
      "resolution=5",
      ">%s_mvsm_ccp4.log" % prefix])
  print(cmd)
  assert not easy_run.call(cmd)
  # xplor is not supported...
  # cmd = " ".join([
  #     "phenix.model_vs_map",
  #     "%s_start.pdb" % prefix,
  #     "%s.map.xplor" % prefix,
  #     "resolution=5",
  #     ">%s_mvsm_xpl.log" % prefix])
  # print cmd
  # assert not easy_run.call(cmd)

if (__name__ == "__main__"):
  t0 = time.time()
  exercise()
  print()
  print("Time:", round(time.time()-t0, 3))


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_models_to_from_chains.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb
from cctbx.array_family import flex
from libtbx import easy_run
from cctbx import miller
from libtbx.test_utils import approx_equal

pdb_str = """
CRYST1   73.110   85.164   25.674  90.00  90.00  90.00 P 1
MODEL        1
ATOM      1  N   MET A   1       6.018   9.573   5.000  1.00 30.00           N
ATOM      2  CA  MET A   1       6.167   8.775   6.243  1.00 30.00           C
ATOM      3  C   MET A   1       5.758   9.566   7.448  1.00 30.00           C
ATOM      4  O   MET A   1       5.000   9.074   8.283  1.00 30.00           O
ATOM      5  CB  MET A   1       7.620   8.264   6.399  1.00 30.00           C
ATOM      6  CG  MET A   1       7.823   7.287   7.573  1.00 30.00           C
ATOM      7  SD  MET A   1       6.760   5.817   7.493  1.00 30.00           S
ATOM      8  CE  MET A   1       7.423   5.000   8.970  1.00 30.00           C
TER
ENDMDL
MODEL        2
ATOM      1  N   MET A   1      29.179  17.377   7.934  1.00 30.00           N
ATOM      2  CA  MET A   1      29.606  16.685   9.177  1.00 30.00           C
ATOM      3  C   MET A   1      28.940  17.277  10.381  1.00 30.00           C
ATOM      4  O   MET A   1      28.410  16.545  11.217  1.00 30.00           O
ATOM      5  CB  MET A   1      31.145  16.731   9.331  1.00 30.00           C
ATOM      6  CG  MET A   1      31.686  15.890  10.506  1.00 30.00           C
ATOM      7  SD  MET A   1      31.222  14.137  10.425  1.00 30.00           S
ATOM      8  CE  MET A   1      32.135  13.614  11.902  1.00 30.00           C
TER
ENDMDL
MODEL        3
ATOM      1  N   MET A   1      47.992  33.026  10.855  1.00 30.00           N
ATOM      2  CA  MET A   1      48.638  32.534  12.098  1.00 30.00           C
ATOM      3  C   MET A   1      47.804  32.846  13.303  1.00 30.00           C
ATOM      4  O   MET A   1      47.573  31.973  14.138  1.00 30.00           O
ATOM      5  CB  MET A   1      50.059  33.129  12.253  1.00 30.00           C
ATOM      6  CG  MET A   1      50.865  32.539  13.426  1.00 30.00           C
ATOM      7  SD  MET A   1      51.062  30.736  13.345  1.00 30.00           S
ATOM      8  CE  MET A   1      52.103  30.574  14.821  1.00 30.00           C
TER
ENDMDL
MODEL        4
ATOM      1  N   MET A   1      59.934  54.401  13.778  1.00 30.00           N
ATOM      2  CA  MET A   1      60.716  54.173  15.021  1.00 30.00           C
ATOM      3  C   MET A   1      59.826  54.166  16.226  1.00 30.00           C
ATOM      4  O   MET A   1      59.923  53.268  17.062  1.00 30.00           O
ATOM      5  CB  MET A   1      61.828  55.239  15.176  1.00 30.00           C
ATOM      6  CG  MET A   1      62.793  54.977  16.348  1.00 30.00           C
ATOM      7  SD  MET A   1      63.625  53.365  16.266  1.00 30.00           S
ATOM      8  CE  MET A   1      64.654  53.587  17.743  1.00 30.00           C
TER
ENDMDL
MODEL        5
ATOM      1  N   MET A   1      63.411  78.601  16.713  1.00 30.00           N
ATOM      2  CA  MET A   1      64.223  78.668  17.954  1.00 30.00           C
ATOM      3  C   MET A   1      63.396  78.342  19.161  1.00 30.00           C
ATOM      4  O   MET A   1      63.810  77.538  19.995  1.00 30.00           O
ATOM      5  CB  MET A   1      64.878  80.062  18.109  1.00 30.00           C
ATOM      6  CG  MET A   1      65.874  80.164  19.281  1.00 30.00           C
ATOM      7  SD  MET A   1      67.228  78.958  19.199  1.00 30.00           S
ATOM      8  CE  MET A   1      68.110  79.536  20.674  1.00 30.00           C
TER
ENDMDL
END
"""

def r(x,y):
  x = abs(x.deep_copy()).data()
  y = abs(y.deep_copy()).data()
  n = flex.sum(flex.abs(x-y))
  d = flex.sum(flex.abs(x+y))
  return n/d

def exercise(prefix="tst_models_to_from_chains"):
  # inputs
  expected_n = 5
  xrs = iotbx.pdb.input(source_info=None, lines=pdb_str).xray_structure_simple()
  input_file_name = "%s.pdb"%prefix
  of = open(input_file_name,"w")
  print(pdb_str, file=of)
  of.close()
  mi = flex.miller_index(((0,0,1), ))
  ms = miller.set(xrs.crystal_symmetry(), mi,  anomalous_flag=False)
  complete_set = ms.complete_set(d_min=3)
  fc = complete_set.structure_factors_from_scatterers(
    xray_structure=xrs).f_calc()
  # models -> chains
  assert not easy_run.call("phenix.models_as_chains %s"%input_file_name)
  pdb_inp = iotbx.pdb.input(file_name="chains_"+input_file_name)
  h = pdb_inp.construct_hierarchy()
  assert len(list(h.chains()))==expected_n
  assert len(list(h.models()))==1
  xrs_c = pdb_inp.xray_structure_simple()
  fc_c = complete_set.structure_factors_from_scatterers(
    xray_structure=xrs_c).f_calc()
  #
  assert approx_equal(0, r(fc, fc_c)  )

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_msa.py
from __future__ import absolute_import, division, print_function

import mmtbx.msa
import iotbx.pdb
import libtbx.load_env
from six.moves import cStringIO as StringIO

def exercise():
  if (not libtbx.env.has_module(name="muscle")):
    print("Skipping MUSCLE tests: muscle module not available.")
    return
  fasta_sequences = """\
>1MRU_A
GSHMTTPSHLSDRYELGEILGFGGMSEVHLARDLRLHRDVAVKVLRADLARDPSFYLRFRREAQNAAALNHPAIVAVYDT
GEAETPAGPLPYIVMEYVDGVTLRDIVHTEGPMTPKRAIEVIADACQALNFSHQNGIIHRDVKPANIMISATNAVKVMDF
GIARAIADSGNSVTQTAAVIGTAQYLSPEQARGDSVDARSDVYSLGCVLYEVLTGEPPFTGDSPVSVAYQHVREDPIPPS
ARHEGLSADLDAVVLKALAKNPENRYQTAAEMRADLVRVHNGEPPEAPKVLTDAERTSLLSSAAGNLSGPR
>1L3R_E
GNAAAAKKGSEQESVKEFLAKAKEDFLKKWETPSQNTAQLDQFDRIKTLGTGSFGRVMLVKHKESGNHYAMKILDKQKVV
KLKQIEHTLNEKRILQAVNFPFLVKLEFSFKDNSNLYMVMEYVAGGEMFSHLRRIGRFSEPHARFYAAQIVLTFEYLHSL
DLIYRDLKPENLLIDQQGYIQVTDFGFAKRVKGRTWTLCGTPEYLAPEIILSKGYNKAVDWWALGVLIYEMAAGYPPFFA
DQPIQIYEKIVSGKVRFPSHFSSDLKDLLRNLLQVDLTKRFGNLKNGVNDIKNHKWFATTDWIAIYQRKVEAPFIPKFKG
PGDTSNFDDYEEEEIRVSINEKCGKEFTEF
>2A19_B
GAHTVDKRFGMDFKEIELIGSGGFGQVFKAKHRIDGKTYVIKRVKYNNEKAEREVKALAKLDHVNIVHYNGCWDGFDYDP
ETSSKNSSRSKTKCLFIQMEFCDKGTLEQWIEKRRGEKLDKVLALELFEQITKGVDYIHSKKLINRDLKPSNIFLVDTKQ
VKIGDFGLVTSLKNDGKRTRSKGTLRYMSPEQISSQDYGKEVDLYALGLILAELLHVCDTAFETSKFFTDLRDGIISDIF
DKKEKTLLQKLLSKKPEDRPNTSEILRTLTVWKKSPEKNERHTA"""
  clustal_aln, errors = mmtbx.msa.get_muscle_alignment(fasta_sequences)
  assert (clustal_aln.names == ['1MRU_A', '2A19_B', '1L3R_E'])
  assert (len(clustal_aln.alignments[0]) == 371)
  pdb_sequences = [
    "XXATKGQNEPKKHFMVILSTCYGWSDD",
    "VTKGNDPKRHYIVLLTGAGSCFGWSDDARY",
    "GSHXXATKGQNDPKRHYMILSCYGWDDRY",
  ]
  pdb_names = ["pdb1","pdb2","pdb3"]
  pdb_offsets = [0, 0, 3]
  reference_sequence = "MIATKGQNEPKKHFMVILSTCYGWSDDAKFGG"
  for arg in [False, True] :
    m = mmtbx.msa.align_pdb_residues(
      pdb_sequences=pdb_sequences,
      pdb_names=pdb_names,
      pdb_offsets=pdb_offsets,
      reference_sequence=reference_sequence,
      substitute_names=arg)
    assert (m.convert_residue_number("pdb3", -2) is None)
    assert (m.convert_residue_number("pdb1", 10) == 10)
    assert (m.convert_residue_number("pdb2", 5) == 8)
    assert (m.convert_residue_number("pdb2", 16) == 19)
    assert (m.convert_residue_number("pdb2", 18) is None)
    assert (m.convert_residue_number("pdb1", 27) == 27)
    assert (m.convert_residue_number("pdb2", 30) == 30)
  pdb_str_1 = """\
ATOM      2  CA  GLY A   3      -9.052   4.207   4.651  1.00 16.57           C
ATOM      6  CA  ASN A   4      -6.522   2.038   2.831  1.00 14.10           C
ATOM     14  CA  ASN A   5      -3.193   1.904   4.589  1.00 11.74           C
ATOM     22  CA  GLN A   6       0.384   1.888   3.199  1.00 10.53           C
ATOM     22  CA  ALA A   6A      0.384   1.888   3.199  1.00 10.53           C
ATOM     22  CA  GLY A   6B      0.384   1.888   3.199  1.00 10.53           C
ATOM     31  CA  GLN A   7       3.270   2.361   5.640  1.00 11.39           C
ATOM     40  CA  ASN A   8       6.831   2.310   4.318  1.00 12.30           C
ATOM     48  CA  TYR A   9       9.159   2.144   7.299  1.00 15.18           C
"""
  pdb_str_2 = """\
ATOM      2  CA  GLY A   4      -9.052   4.207   4.651  1.00 16.57           C
ATOM      6  CA  ASN A   5      -6.522   2.038   2.831  1.00 14.10           C
ATOM     14  CA  ASN A   6      -3.193   1.904   4.589  1.00 11.74           C
ATOM     22  CA  GLN A   7       0.384   1.888   3.199  1.00 10.53           C
ATOM     31  CA  GLN A   8       3.270   2.361   5.640  1.00 11.39           C
ATOM     40  CA  ASN A   9       6.831   2.310   4.318  1.00 12.30           C
ATOM     48  CA  TYR A  10       9.159   2.144   7.299  1.00 15.18           C
"""
  pdb1 = iotbx.pdb.input(lines=pdb_str_1, source_info=None)
  pdb2 = iotbx.pdb.input(lines=pdb_str_2, source_info=None)
  hierarchies = [ pdb1.construct_hierarchy(), pdb2.construct_hierarchy() ]
  for arg in [False, True] :
    m = mmtbx.msa.align_pdb_hierarchies(
      hierarchies=hierarchies,
      hierarchy_names=["pdb1","pdb2"],
      substitute_names=arg,
      log=StringIO())
    assert (m.get_residue_position("pdb1", resid="3") == "3")
    assert (m.get_residue_position("pdb2", resid="4") == "3")
    assert (m.get_residue_position("pdb2", resid="10") == "9")
    assert (m.get_residue_position("pdb1", resid="6A") == "6A")
    assert (m.get_resid_array_index("pdb1", "3") == 3)
    assert (m.get_alignment_size() == 12)
    assert (m.get_resid_array_index("pdb1", "6A") == 7)
    assert (m.get_resid_array_index("pdb2", "10") == 11)
    assert (m.get_all_resids_at_index(0) == [None, None])
    assert (m.get_all_resids_at_index(7) == ["6A", None])
    assert (m.get_reference_resid(7) == "6A")
    assert (m.get_reference_resid(0) is None)
  # test GUI applet runtime
  pdb_str = """\
%s
TER
ATOM     50  O   HOH     1       0.000   0.000   0.000  1.0  20.0            O
END
""" % pdb_str_1
  open("tmp1.pdb", "w").write(pdb_str)
  open("tmp2.fa", "w").write(">tmp2\nAVGNNQQNY")
  open("tmp3.fa", "w").write(">tmp3\nNNQQNY")
  open("tmp4.dat", "w").write("AVNNQQNF")
  params = mmtbx.msa.master_phil.fetch().extract()
  params.muscle.seq_file.extend(["tmp1.pdb", "tmp2.fa", "tmp3.fa", "tmp4.dat"])
  (aln_file, alignment) = mmtbx.msa.run(params=params, out=StringIO())
  # XXX not checking the full alignment because it is host-dependent
  assert ("tmp4            AV-NNQ--QNF" in alignment)
  print("OK")

if __name__ == "__main__" :
  exercise()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_mtz2map.py

from __future__ import absolute_import, division, print_function
from libtbx.test_utils import Exception_expected
from libtbx.utils import null_out, Sorry
import iotbx.pdb
from six.moves import cStringIO as StringIO
import os.path

def exercise():
  from mmtbx.regression.make_fake_anomalous_data import generate_cd_cl_inputs
  from mmtbx.command_line import mtz2map
  import mmtbx.utils
  from iotbx import file_reader
  from scitbx.array_family import flex
  mtz_file, pdb_file = generate_cd_cl_inputs(file_base = "tst_mmtbx_mtz2map")
  pdb_in = iotbx.pdb.input(pdb_file)
  xrs = pdb_in.xray_structure_simple()
  mtz_in = file_reader.any_file(mtz_file)
  f_obs = mtz_in.file_server.miller_arrays[0]
  f_obs_mean = f_obs.average_bijvoet_mates()
  flags = mtz_in.file_server.miller_arrays[1]
  flags = flags.customized_copy(data=flags.data()==1)
  fmodel = mmtbx.utils.fmodel_simple(
    f_obs=f_obs,
    r_free_flags=flags,
    xray_structures=[xrs],
    scattering_table="n_gaussian",
    skip_twin_detection=True)
  assert f_obs.anomalous_flag()
  mtz_data = f_obs.as_mtz_dataset(column_root_label="F")
  #mtz_data.add_miller_array(
  #  miller_array=f_obs.average_bijvoet_mates(),
  #  column_root_label="F_mean")
  mtz_data.add_miller_array(
    miller_array=fmodel.f_model(),
    column_root_label="FMODEL")
  mtz_data.add_miller_array(
    miller_array=fmodel.f_model().average_bijvoet_mates().phases(deg=True),
    column_root_label="PHI",
    column_types="P")
  mtz_data.add_miller_array(
    miller_array=f_obs_mean.customized_copy(
      data=flex.double(f_obs_mean.data().size(), 0.95),
      sigmas=None).set_observation_type(None),
    column_root_label="FOM",
    column_types="W")
  two_fofc_map = fmodel.map_coefficients(map_type="2mFo-DFc")
  fofc_map = fmodel.map_coefficients(map_type="mFo-Dfc")
  anom_map = fmodel.map_coefficients(map_type="anom")
  mtz_data.add_miller_array(
    miller_array=two_fofc_map.average_bijvoet_mates(),
    column_root_label="2FOFCWT")
  mtz_data.add_miller_array(
    miller_array=fmodel.map_coefficients(map_type="mFo-DFc"),
    column_root_label="FOFCWT")
  mtz_data.add_miller_array(
    miller_array=fmodel.map_coefficients(map_type="anom"),
    column_root_label="ANOM")
  mtz_data.add_miller_array(flags,
    column_root_label="FreeR_flag")
  map_file = "tst_mmtbx_mtz2map_map_coeffs.mtz"
  mtz_data.mtz_object().write(map_file)
  # exercise defaults with PDB file
  file_info = mtz2map.run([pdb_file, map_file], log=null_out())
  file_info = [ (os.path.basename(fn), desc) for fn, desc in file_info ]
  assert (file_info == [
    ('tst_mmtbx_mtz2map_map_coeffs_2mFo-DFc.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_mFo-DFc.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_anom.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_4.ccp4', 'CCP4 map')
  ])
  # without PDB file
  file_info_2 = mtz2map.run([map_file], log=null_out())
  file_info_2 = [ (os.path.basename(fn), desc) for fn, desc in file_info_2 ]
  assert file_info_2 == file_info, file_info_2
  # with FMODEL
  file_info_3 = mtz2map.run([pdb_file, map_file, "include_fmodel=True"],
    log=null_out())
  file_info_3 = [ (os.path.basename(fn), desc) for fn, desc in file_info_3 ]
  assert (file_info_3 == [
    ('tst_mmtbx_mtz2map_map_coeffs_fmodel.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_2mFo-DFc.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_mFo-DFc.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_anom.ccp4', 'CCP4 map'),
    ('tst_mmtbx_mtz2map_map_coeffs_5.ccp4', 'CCP4 map')
  ])
  # exercise bad parameter
  try :
    file_info = mtz2map.run([pdb_file, "1yjp_mtz2map_map_coeffs.mtz",
      "output.directory=1yjp_mtz2map_map_coeffs.mtz"],
      log=null_out())
  except Sorry :
    pass
  else :
    raise Exception_expected
  # bad atom selection
  try :
    file_info = mtz2map.run([pdb_file, map_file, "selection=\"resname ZN\""],
      log=null_out())
  except Sorry as s  :
    assert (str(s) == "No atoms found matching the specified selection.")
  else :
    raise Exception_expected
  # remove R-free flags
  out = StringIO()
  mtz2map.run([pdb_file, "tst_mmtbx_mtz2map_map_coeffs.mtz",
    "r_free_flags.remove=True"], log=out)
  assert (out.getvalue().count("R-free flagged reflections")==4)
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_multi_residue_class.py
from __future__ import absolute_import, division, print_function
import sys

from iotbx import pdb
from six.moves import range

pdb_lines = '''
ATOM  18755  N   LYS N  56      48.225  62.706 -53.862  1.00 69.77           N
ATOM  18756  CA  LYS N  56      47.122  61.816 -53.629  1.00 70.02           C
ATOM  18757  C   LYS N  56      46.793  61.775 -52.151  1.00 70.49           C
ATOM  18758  O   LYS N  56      45.732  62.272 -51.762  1.00 70.82           O
ATOM  18759  CB  LYS N  56      47.445  60.405 -54.119  1.00 69.96           C
ATOM  18760  CG  LYS N  56      47.862  60.366 -55.558  1.00 69.09           C
ATOM  18761  CD  LYS N  56      46.738  60.829 -56.449  1.00 69.14           C
ATOM  18762  CE  LYS N  56      47.154  60.761 -57.900  1.00 68.65           C
ATOM  18763  NZ  LYS N  56      46.070  61.230 -58.799  1.00 67.64           N
ATOM  18764  N   LYS N  57      47.630  61.207 -51.295  1.00 70.59           N
ATOM  18765  CA  LYS N  57      47.259  61.174 -49.888  1.00 70.64           C
ATOM  18766  C   LYS N  57      48.216  61.977 -49.013  1.00 71.13           C
ATOM  18767  O   LYS N  57      47.781  62.990 -48.461  1.00 71.98           O
ATOM  18768  CB  LYS N  57      47.055  59.726 -49.452  1.00 70.28           C
ATOM  18769  CG  LYS N  57      45.619  59.278 -49.768  1.00 70.08           C
ATOM  18770  CD  LYS N  57      45.350  58.763 -51.161  1.00 68.27           C
ATOM  18771  CE  LYS N  57      43.872  58.439 -51.282  1.00 67.38           C
ATOM  18772  NZ  LYS N  57      43.719  57.886 -52.654  1.00 66.40           N
ATOM  18773  N   VAL N  58      49.522  61.811 -49.121  1.00 71.03           N
ATOM  18774  CA  VAL N  58      50.479  60.749 -49.246  1.00 70.78           C
ATOM  18775  C   VAL N  58      50.801  60.494 -47.743  1.00 70.09           C
ATOM  18776  O   VAL N  58      50.009  60.889 -46.880  1.00 70.44           O
ATOM  18777  CB  VAL N  58      51.665  61.148 -50.115  1.00 71.15           C
ATOM  18778  CG1 VAL N  58      51.233  61.264 -51.566  1.00 71.41           C
ATOM  18779  CG2 VAL N  58      52.289  62.461 -49.638  1.00 71.37           C
ATOM  18780  N   PRO N  59      51.836  59.722 -47.347  1.00 69.26           N
ATOM  18781  CA  PRO N  59      53.160  59.201 -46.949  1.00 68.80           C
ATOM  18782  C   PRO N  59      54.389  59.494 -47.837  1.00 68.33           C
ATOM  18783  O   PRO N  59      54.177  59.842 -48.977  1.00 68.60           O
ATOM  18784  CB  PRO N  59      52.909  57.680 -46.892  1.00 68.81           C
ATOM  18785  CG  PRO N  59      51.511  57.540 -46.598  1.00 69.03           C
ATOM  18786  CD  PRO N  59      50.868  58.605 -47.385  1.00 69.11           C
ATOM  18787  N   PHE N  60      55.619  59.124 -47.487  1.00 67.22           N
ATOM  18788  CA  PHE N  60      56.155  58.824 -46.158  1.00 65.75           C
ATOM  18789  C   PHE N  60      57.465  59.615 -46.163  1.00 65.03           C
ATOM  18790  O   PHE N  60      58.327  59.487 -45.292  1.00 64.85           O
ATOM  18791  CB  PHE N  60      56.325  57.317 -45.873  1.00 65.65           C
ATOM  18792  CG  PHE N  60      57.281  56.587 -46.787  1.00 65.73           C
ATOM  18793  CD1 PHE N  60      56.849  56.085 -48.007  1.00 66.68           C
ATOM  18794  CD2 PHE N  60      58.580  56.314 -46.380  1.00 66.05           C
ATOM  18795  CE1 PHE N  60      57.713  55.378 -48.834  1.00 67.64           C
ATOM  18796  CE2 PHE N  60      59.451  55.605 -47.199  1.00 67.13           C
ATOM  18797  CZ  PHE N  60      59.015  55.134 -48.427  1.00 67.63           C
ATOM  18798  N   LEU N  61      57.540  60.450 -47.206  1.00 64.08           N
ATOM  18799  CA  LEU N  61      58.603  61.375 -47.593  1.00 63.10           C
ATOM  18800  C   LEU N  61      57.880  62.245 -48.648  1.00 62.48           C
ATOM  18801  O   LEU N  61      56.647  62.255 -48.570  1.00 62.00           O
ATOM  18802  CB  LEU N  61      59.905  60.590 -47.871  1.00 62.99           C
ATOM  18803  CG  LEU N  61      60.257  59.711 -49.072  1.00 62.57           C
ATOM  18804  CD1 LEU N  61      61.732  59.308 -49.013  1.00 62.70           C
ATOM  18805  CD2 LEU N  61      59.353  58.526 -49.229  1.00 61.75           C
ATOM  18806  N   SER N  62      58.466  63.043 -49.565  1.00 61.91           N
ATOM  18807  CA  SER N  62      59.847  63.261 -50.010  1.00 61.11           C
ATOM  18808  C   SER N  62      60.085  64.721 -50.329  1.00 60.49           C
ATOM  18809  O   SER N  62      59.168  65.539 -50.236  1.00 60.11           O
ATOM  18810  CB  SER N  62      60.128  62.434 -51.262  1.00 60.97           C
ATOM  18811  OG  SER N  62      61.494  62.508 -51.606  1.00 61.00           O
'''

def run():
  filename = 'tst_multi.pdb'
  f=open(filename, 'w')
  f.write(pdb_lines)
  f.close()
  pdb_inp = pdb.input(filename)
  pdb_hierarchy = pdb_inp.construct_hierarchy()
  from mmtbx.conformation_dependent_library.testing_utils import \
      get_geometry_restraints_manager
  geometry_restraints_manager = get_geometry_restraints_manager(filename)
  pdb_hierarchy.reset_i_seq_if_necessary()
  refine = [False, # -179
            True,  # -44
            False, # 86
            True,  # -22
            False, # -179
            ]
  refine += [True]*5
  refine += [False]*14
  omegalyze = [False,
               False,
               False,
               True,
               False,
               ]
  omegalyze += [True]*3
  omegalyze += [False]*16
  from mmtbx.conformation_dependent_library import generate_protein_threes
  for i, threes in enumerate(generate_protein_threes(pdb_hierarchy,
                                        geometry_restraints_manager,
                                        cdl_class=True,
                                        #verbose=verbose,
                                        )):
    print(i, threes)
    print('  omega   %5.1f' % threes.get_omega_value())
    print("  cis?    %-5s %s" % (threes.cis_group(), threes.cis_group(limit=30)))
    print("  trans?  %-5s %s" % (threes.trans_group(), threes.trans_group(limit=30)))
    print("  rama    %s" % threes.get_ramalyze_key())
    print('  conf    %s' % threes.is_pure_main_conf())
    assert threes.cis_group()==refine[i], '%s!=%s' % (threes.cis_group(), refine[i])
    assert threes.cis_group(limit=30)==omegalyze[i]

  for j in range(0,181,10):
    i+=1
    print("  %3d %-5s %-8s %-5s" % (
      j,
      threes._define_omega_a_la_duke_using_limit(j)=='cis',
      threes._define_omega_a_la_duke_using_limit(j, limit=30),
      refine[i],
    ))
    assert (threes._define_omega_a_la_duke_using_limit(j)=='cis')==refine[i]



if __name__=="__main__":
  args = sys.argv[1:]
  del sys.argv[1:]
  run()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_origin_ids.py
from __future__ import absolute_import, division, print_function
from mmtbx.regression import model_1yjp, model_1yjp_with_waters
from iotbx.data_manager import DataManager

count_1yjp = {
              'Bond | covalent geometry | restraints': 59,
              'Bond angle | covalent geometry | restraints': 79,
              'Dihedral angle | covalent geometry | restraints': 22,
              '    harmonic':  7,
              '  sinusoidal': 15,
              'Planarity | covalent geometry | restraints': 13,
              'Chirality | covalent geometry | restraints': 6,
              # 'C-Beta improper torsion angle restraints': 12,
              'Dihedral angle | C-Beta improper | restraints': 12,
              # 'Parallelity restraints': 0,
              #'User supplied restraints': 0,
              #'User supplied torsion angle restraints': 0,
              #'User supplied angle restraints': 0,
              #'Metal coordination angle restraints': 0,
              #'Disulphide bridge torsion angle restraints': 0,
              #'Side chain torsion angle restraints': 0,
              #'Secondary Structure restraints around h-bond angle restraints': 0,
              #'Bond-like restraints': 0,
              #'Metal coordination restraints': 0,
              #'Disulphide bridge angle restraints': 0,
              #'Disulphide bridge restraints': 0,
              'Nonbonded | unspecified | interactions': 990,
              #
              # 'Bond | User supplied | restraints': -1,
              }
count_1yjp_with_waters = count_1yjp.copy()
count_1yjp_with_waters['Nonbonded | unspecified | interactions'] = 1178

edits = '''
refinement.geometry_restraints.edits {
  bond {
    action = *add
    atom_selection_1 = resname HOH and resid 10 and name O
    atom_selection_2 = resname ASN and resid 2 and name ND2
    symmetry_operation = None
    distance_ideal = 2.1
    sigma = 0.02
    slack = None
  }
}
'''

def check_geo(geo_lines):
  rc = {}
  for line in geo_lines.splitlines():
    tmp = line.split(':')
    tmp = list(filter(None, tmp))
    if len(tmp)!= 2: continue
    rc[tmp[0]]=int(tmp[1])
  return rc

def check_diff(d1,d2):
  outl = 'diff\n%s\n%s\n' % (d1,d2)
  for key in d1:
    print(d1)
    print(d2)
    if d1[key]!=d2[key]:
      outl += '%s : %d %d\n' % (key, d1[key], d2[key])
  return outl

def main():
  dm = DataManager()
  dm.process_model_str('testing', model_1yjp)
  model = dm.get_model()
  rc = model.restraints_as_geo(force=True)
  rc = check_geo(rc)
  assert rc == count_1yjp, check_diff(rc, count_1yjp)

  dm = DataManager()
  dm.process_model_str('testing', model_1yjp_with_waters)
  model = dm.get_model()
  rc = model.restraints_as_geo(force=True)
  rc = check_geo(rc)
  assert rc == count_1yjp_with_waters, '%s != %s' % (count_1yjp_with_waters, rc)

  params = model.get_default_pdb_interpretation_params()
  edits_1yjp = params.geometry_restraints.edits

  edits_1yjp.bond[0].action='add'
  edits_1yjp.bond[0].atom_selection_1='resname HOH and resid 10 and name O'
  edits_1yjp.bond[0].atom_selection_2='resname ASN and resid 2 and name ND2'
  edits_1yjp.bond[0].distance_ideal=2.1
  edits_1yjp.bond[0].sigma=0.1
  model.process(pdb_interpretation_params=params,
                make_restraints=True)
  rc = model.restraints_as_geo(force=True)
  rc = check_geo(rc)
  current = count_1yjp_with_waters.copy()
  # current['User supplied restraints'] = 1
  current['Bond | User supplied | restraints'] = 1
  current['Nonbonded | unspecified | interactions']   = 1176
  assert rc == current, check_diff(rc, current)

  edits_1yjp.angle[0].action='add'
  edits_1yjp.angle[0].atom_selection_1='resname HOH and resid 10 and name O'
  edits_1yjp.angle[0].atom_selection_2='resname ASN and resid 2 and name ND2'
  edits_1yjp.angle[0].atom_selection_3='resname ASN and resid 2 and name CG'
  edits_1yjp.angle[0].angle_ideal=21.9
  edits_1yjp.angle[0].sigma=1.1
  model.process(pdb_interpretation_params=params,
                make_restraints=True)
  rc = model.restraints_as_geo(force=True)
  rc = check_geo(rc)
  current = count_1yjp_with_waters.copy()
  current['Bond | User supplied | restraints'] = 1
  current['Bond angle | User supplied | restraints'] = 1
  current['Nonbonded | unspecified | interactions']   = 1176
  assert rc == current, check_diff(rc, current)

  edits_1yjp.dihedral[0].action='add'
  edits_1yjp.dihedral[0].atom_selection_1='resname HOH and resid 10 and name O'
  edits_1yjp.dihedral[0].atom_selection_2='resname ASN and resid 2 and name ND2'
  edits_1yjp.dihedral[0].atom_selection_3='resname ASN and resid 2 and name CG'
  edits_1yjp.dihedral[0].atom_selection_4='resname ASN and resid 2 and name CB'
  edits_1yjp.dihedral[0].angle_ideal=121.9
  edits_1yjp.dihedral[0].sigma=1.12
  edits_1yjp.dihedral[0].periodicity=10
  model.process(pdb_interpretation_params=params,
                make_restraints=True)
  rc = model.restraints_as_geo(force=True)
  rc = check_geo(rc)
  current = count_1yjp_with_waters.copy()
  current['Bond | User supplied | restraints'] = 1
  current['Bond angle | User supplied | restraints'] = 1
  current['Dihedral angle | User supplied | restraints'] = 1
  #current['  sinusoidal'] = 16
  current['Nonbonded | unspecified | interactions']   = 1176
  assert rc == current, check_diff(rc, current)
  print('OK')

if __name__ == '__main__':
  main()


 *******************************************************************************


 *******************************************************************************
mmtbx/regression/tst_pdbtools.py
from __future__ import absolute_import, division, print_function
#import libtbx.load_env
import sys, os, math
from cctbx.array_family import flex
from libtbx.utils import remove_files
from mmtbx import utils
from libtbx.test_utils import approx_equal, not_approx_equal, run_command, \
  show_diff
import iotbx.pdb
from scitbx.array_family import flex
from cctbx import adptbx
import mmtbx.model
from six.moves import cStringIO as StringIO, zip
from libtbx import easy_run

full_params = mmtbx.model.manager.get_default_pdb_interpretation_params()
full_params.pdb_interpretation.flip_symmetric_amino_acids=False

class xray_structure_plus(object):
  def __init__(self, file_name):
    log = StringIO()
    pdb_inp = iotbx.pdb.input(file_name=file_name)
    self.model = mmtbx.model.manager(model_input = pdb_inp, log = log)
    self.model.process(pdb_interpretation_params = full_params)
    self.xray_structure = self.model.get_xray_structure()
    uc = self.model.get_xray_structure().unit_cell()
    self.occ           = self.xray_structure.scatterers().extract_occupancies()
    self.u_iso            = self.xray_structure.scatterers().extract_u_iso()
    self.u_cart           = self.xray_structure.scatterers().extract_u_cart(uc)
    self.sites_cart       = self.xray_structure.sites_cart()
    self.use_u_iso        = self.xray_structure.use_u_iso()
    self.use_u_aniso      = self.xray_structure.use_u_aniso()
    self.u_iso_used       = self.u_iso.select(self.use_u_iso)
    self.u_cart_used      = self.u_cart.select(self.use_u_aniso)
    self.u_iso_not_used   = self.u_iso.select(~self.use_u_iso)
    self.u_cart_not_used  = self.u_cart.select(~self.use_u_aniso)

  def selection(self, selection_strings):
    return utils.get_atom_selections(iselection       = False,
                                     model = self.model,
                                     selection_strings= selection_strings)[0]

def exercise_basic():
  pdb_str = """
CRYST1   12.000   11.000   13.000  80.00 70.00 100.00 P 1           1
ATOM      1  CB  PHE A   1       7.767   5.853   7.671  1.00 17.45           C
ANISOU    1  CB  PHE A   1     1090   2307   3233   1244   1260   2218       C
ATOM      2  CG  PHE A   1       6.935   5.032   8.622  1.00 17.61           C
ANISOU    2  CG  PHE A   1     1258   2172   3262   1259   1261   2264       C
ATOM      3  CD1 PHE A   1       5.918   4.176   8.140  1.00 17.66           C
ANISOU    3  CD1 PHE A   1     1321   2083   3304   1237   1214   2356       C
ATOM      4  CD2 PHE A   1       7.161   5.107  10.012  1.00 17.82           C
ANISOU    4  CD2 PHE A   1     1374   2150   3248   1279   1308   2217       C
ATOM      5  CE1 PHE A   1       5.126   3.395   9.038  1.00 17.96           C
ANISOU    5  CE1 PHE A   1     1508   1983   3333   1224   1216   2398       C
ATOM      6  CE2 PHE A   1       6.382   4.336  10.930  1.00 18.17           C
ANISOU    6  CE2 PHE A   1     1573   2056   3276   1258   1310   2261       C
ATOM      7  CZ  PHE A   1       5.360   3.476  10.439  1.00 18.27           C
ANISOU    7  CZ  PHE A   1     1645   1979   3318   1226   1265   2351       C
ATOM      8  C   PHE A   1       7.956   7.811   6.133  1.00 17.21           C
ANISOU    8  C   PHE A   1      816   2415   3307   1079   1332   2287       C
ATOM      9  O   PHE A   1       8.506   7.237   5.169  1.00 17.39           O
ANISOU    9  O   PHE A   1      818   2555   3234   1097   1244   2232       O
ATOM     10  OXT PHE A   1       8.143   9.010   6.428  1.00 17.15           O
ANISOU   10  OXT PHE A   1      737   2422   3356   1020   1411   2296       O
ATOM     13  N   PHE A   1       5.875   6.461   6.183  1.00 17.13           N
ANISOU   13  N   PHE A   1      934   2156   3419   1076   1303   2452       N
ATOM     15  CA  PHE A   1       7.000   7.000   7.000  1.00 17.18           C
ANISOU   15  CA  PHE A   1      931   2249   3347   1119   1342   2337       C
ATOM     13  CB  PHE B   2      11.715   4.672   7.185  1.00 34.89           C
ATOM     14  CG  PHE B   2      10.876   4.117   8.301  1.00 35.22           C
ATOM     15  CD2 PHE B   2      10.127   2.966   8.118  1.00 35.30           C
ATOM     16  CD1 PHE B   2      10.836   4.746   9.534  1.00 35.63           C
ATOM     17  CE2 PHE B   2       9.355   2.454   9.143  1.00 35.88           C
ATOM     18  CE1 PHE B   2      10.066   4.239  10.563  1.00 36.30           C
ATOM     19  CZ  PHE B   2       9.324   3.091  10.367  1.00 36.47           C
ATOM     20  C   PHE B   2      11.961   6.316   5.313  1.00 34.38           C
ATOM     21  O   PHE B   2      11.902   5.976   4.132  1.00 34.72           O
ATOM     22  OXT PHE B   2      12.817   7.140   5.635  1.00 34.24           O
ATOM     23  N   PHE B   2       9.817   5.175   5.710  1.00 34.25           N
ATOM     24  CA  PHE B   2      11.002   5.735   6.347  1.00 34.35           C
ATOM      1  CB  PHE C   3      10.767   8.853   7.671  1.00 52.27           C
ANISOU    1  CB  PHE C   3     3279   6815   9766   3688   3821   6736       C
ATOM      2  CG  PHE C   3       9.935   8.032   8.622  1.00 52.60           C
ANISOU    2  CG  PHE C   3     3617   6545   9825   3719   3822   6829       C
ATOM      3  CD1 PHE C   3       8.918   7.176   8.140  1.00 52.70           C
ANISOU    3  CD1 PHE C   3     3745   6367   9912   3673   3727   7011       C
ATOM      4  CD2 PHE C   3      10.161   8.107  10.012  1.00 53.03           C
ANISOU    4  CD2 PHE C   3     3850   6502   9797   3761   3917   6735       C
ATOM      5  CE1 PHE C   3       8.126   6.395   9.038  1.00 53.33           C
ANISOU    5  CE1 PHE C   3     4119   6169   9973   3647   3734   7098       C
ATOM      6  CE2 PHE C   3       9.382   7.336  10.930  1.00 53.74           C
ANISOU    6  CE2 PHE C   3     4248   6315   9853   3723   3923   6823       C
ATOM      7  CZ  PHE C   3       8.360   6.476  10.439  1.00 53.93           C
ANISOU    7  CZ  PHE C   3     4391   6159   9943   3655   3834   7005       C
ATOM      8  C   PHE C   3      10.956  10.811   6.133  1.00 51.80           C
ANISOU    8  C   PHE C   3     2733   7032   9917   3360   3966   6875       C
ATOM      9  O   PHE C   3      11.506  10.237   5.169  1.00 52.17           O
ANISOU    9  O   PHE C   3     2737   7311   9773   3399   3791   6767       O
ATOM     10  OXT PHE C   3      11.143  12.010   6.428  1.00 51.70           O
ANISOU   10  OXT PHE C   3     2580   7045  10018   3240   4125   6894       O
ATOM     13  N   PHE C   3       8.875   9.461   6.183  1.00 51.64           N
ANISOU   13  N   PHE C   3     2968   6515  10138   3352   3906   7205       N
ATOM     15  CA  PHE C   3      10.000  10.000   7.000  1.00 51.73           C
ANISOU   15  CA  PHE C   3     2963   6697   9995   3440   3985   6975       C
END
"""
  verbose=False
  file_name = "exercise_basic_pdbtools.pdb"
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str)
  pi.write_pdb_file(file_name=file_name)
  output = "exercise_basic_pdbtools_mod.pdb"
  xrsp_init = xray_structure_plus(file_name = file_name)
  assert file_name.find('"') < 0
  base = \
      'phenix.pdbtools "%s" suffix=none output.prefix=%s '%(file_name, output.replace(".pdb",""))
  for selection_str in [None, "chain A or chain C"]:
    selection = xrsp_init.selection(selection_strings = selection_str)
    if(selection_str is None):
      assert selection.size() == selection.count(True)
    else:
      assert selection.size() == 36 and selection.count(True) == 24
    #
    cmd = base + 'adp.randomize=true modify.selection="%s"'%str(selection_str)
    print(cmd)
    check_adp_rand(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base + 'adp.set_b_iso=10.0 modify.selection="%s"'%str(selection_str)
    print(cmd)
    check_adp_set_b_iso(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base + 'adp.shift_b_iso=20.0 modify.selection="%s"'%str(selection_str)
    print(cmd)
    check_adp_rand(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base + 'adp.scale_adp=2.0 modify.selection="%s"'%str(selection_str)
    print(cmd)
    check_adp_rand(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base + 'adp.convert_to_iso=true modify.selection="%s"'%str(selection_str)
    print(cmd)
    check_adp_to_iso(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base + 'adp.convert_to_aniso=true modify.selection="%s"'%str(selection_str)
    print(cmd)
    check_adp_to_aniso(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    shake = 1.5
    cmd = base+'sites.shake=%s modify.selection="%s"'%(str(shake), str(selection_str))
    print(cmd)
    check_sites_shake(
      cmd, xrsp_init, output, selection, selection_str, shake, verbose)
    #
    cmd = base+'sites.rotate="1,2,3" sites.translate="4,5,6" modify.selection="%s"'%(
                                                            str(selection_str))
    print(cmd)
    check_sites_rt(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base+'occupancies.randomize=true modify.selection="%s"'%(str(selection_str))
    print(cmd)
    check_occ_randomize(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    cmd = base+'occupancies.set=0.75 modify.selection="%s"'%(str(selection_str))
    print(cmd)
    check_occ_set(
      cmd, xrsp_init, output, selection, selection_str, verbose)
    #
    remove_selection_str = "element C"
    cmd = base+'remove="%s" modify.selection="%s"'%(
      str(remove_selection_str), str(selection_str))
    print(cmd)
    check_remove_selection(
      cmd, xrsp_init, output, selection, selection_str,
      remove_selection_str, verbose)
    #
    keep_selection_str = "element C"
    cmd = base+'keep="%s" modify.selection="%s"'%(
      str(keep_selection_str), str(selection_str))
    print(cmd)
    check_keep_selection(
      cmd, xrsp_init, output, selection, selection_str,
      keep_selection_str, verbose)
    #
  #
  cmd = base
  print(cmd)
  check_all_none(cmd, xrsp_init, output, verbose)
  #
  cmd = base
  check_keep_remove_conflict(cmd, output, verbose)

def check_adp_rand(
      cmd, xrsp_init, output, selection, selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,        xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.sites_cart, xrsp_init.sites_cart,tolerance)
  assert approx_equal(xrsp.use_u_iso,  xrsp_init.use_u_iso,tolerance)
  assert approx_equal(xrsp.use_u_aniso,xrsp_init.use_u_aniso,tolerance)
  assert approx_equal(xrsp.u_iso_not_used,  xrsp_init.u_iso_not_used,tolerance)
  assert approx_equal(xrsp.u_cart_not_used,xrsp_init.u_cart_not_used,tolerance)
  if(selection_str is None):
    assert not_approx_equal(xrsp.u_iso_used,  xrsp_init.u_iso_used,tolerance)
    assert not_approx_equal(xrsp.u_cart_used, xrsp_init.u_cart_used,tolerance)
  else:
    arg1 = xrsp.u_iso_used.select(selection.select(xrsp.use_u_iso))
    arg2 = xrsp_init.u_iso_used.select(selection.select(xrsp_init.use_u_iso))
    if(arg1.size() > 0): assert not_approx_equal(arg1, arg2,tolerance)
    arg1 =xrsp.u_cart_used.select(selection.select(xrsp.use_u_aniso))
    arg2 =xrsp_init.u_cart_used.select(selection.select(xrsp_init.use_u_aniso))
    if(arg1.size() > 0): assert not_approx_equal(arg1, arg2,tolerance)

def check_adp_set_b_iso(
      cmd, xrsp_init, output, selection, selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,        xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.sites_cart, xrsp_init.sites_cart,tolerance)
  assert approx_equal(xrsp.use_u_iso,  xrsp_init.use_u_iso,tolerance)
  assert approx_equal(xrsp.use_u_aniso,xrsp_init.use_u_aniso,tolerance)
  assert approx_equal(xrsp.u_iso_not_used,  xrsp_init.u_iso_not_used,tolerance)
  assert approx_equal(xrsp.u_cart_not_used,xrsp_init.u_cart_not_used,tolerance)
  if(selection_str is None):
    assert not_approx_equal(xrsp.u_iso_used,  xrsp_init.u_iso_used,tolerance)
    for ucart in xrsp.u_cart:
      b_iso = adptbx.u_as_b(adptbx.u_cart_as_u_iso(ucart))
      if b_iso > 0: assert approx_equal(b_iso, 10, 0.005)
      else: assert approx_equal(b_iso, -78.956, 0.005)
  else:
    arg1 = xrsp.u_iso_used.select(selection.select(xrsp.use_u_iso))
    arg2 = xrsp_init.u_iso_used.select(selection.select(xrsp_init.use_u_iso))
    if(arg1.size() > 0): assert not_approx_equal(arg1, arg2,tolerance)
    for ucart in xrsp.u_cart:
      b_iso = adptbx.u_as_b(adptbx.u_cart_as_u_iso(ucart))
      if b_iso > 0: assert approx_equal(b_iso, 10, 0.005)
      else: assert approx_equal(b_iso, -78.956, 0.005)

def check_adp_to_iso(
      cmd, xrsp_init, output, selection, selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,        xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.sites_cart, xrsp_init.sites_cart,tolerance)
  assert not_approx_equal(xrsp.use_u_iso,  xrsp_init.use_u_iso,tolerance)
  assert not_approx_equal(xrsp.use_u_aniso,xrsp_init.use_u_aniso,tolerance)
  assert xrsp.u_iso_not_used.size() == 0
  assert xrsp_init.u_iso_not_used.size() > 0
  assert xrsp.u_cart_used.size() == 0
  assert xrsp_init.u_cart_used.size() > 0

def check_adp_to_aniso(
      cmd, xrsp_init, output, selection, selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,        xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.sites_cart, xrsp_init.sites_cart,tolerance)
  if(selection_str is None):
    assert not_approx_equal(xrsp.use_u_iso,  xrsp_init.use_u_iso,tolerance)
    assert not_approx_equal(xrsp.use_u_aniso,xrsp_init.use_u_aniso,tolerance)
    assert xrsp.u_iso_used.size() == 0
    assert xrsp_init.u_iso_used.size() > 0
    assert xrsp.u_cart_not_used.size() == 0
    assert xrsp_init.u_cart_not_used.size() > 0
  else:
    assert approx_equal(xrsp.use_u_iso,  xrsp_init.use_u_iso,tolerance)
    assert approx_equal(xrsp.use_u_aniso,xrsp_init.use_u_aniso,tolerance)

def check_sites_shake(
      cmd, xrsp_init, output, selection, selection_str, shake, verbose,
      tolerance=1.e-2):
  remove_files(output)
  print(cmd)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,    xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.u_iso,  xrsp_init.u_iso,tolerance)
  assert approx_equal(xrsp.u_cart, xrsp_init.u_cart,tolerance)
  if(selection_str is None):
    diff = xrsp.sites_cart - xrsp_init.sites_cart
    assert approx_equal(
                      math.sqrt(flex.mean(diff.dot())), shake, 1.e-3,tolerance)
  else:
    diff = xrsp.sites_cart - xrsp_init.sites_cart
    assert approx_equal(
              math.sqrt(flex.mean(diff.select(selection).dot())), shake, 1.e-3)
    assert approx_equal(
              math.sqrt(flex.mean(diff.select(~selection).dot())),0.,tolerance)

def check_sites_rt(
      cmd, xrsp_init, output, selection, selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,    xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.u_iso,  xrsp_init.u_iso,tolerance)
  assert approx_equal(xrsp.u_cart, xrsp_init.u_cart,tolerance)
  if(selection_str is None):
    diff = xrsp.sites_cart - xrsp_init.sites_cart
    assert math.sqrt(flex.mean(diff.dot())) > 1.0
  else:
    diff = xrsp.sites_cart - xrsp_init.sites_cart
    assert math.sqrt(flex.mean(diff.select(selection).dot())) > 1.0
    assert approx_equal(
              math.sqrt(flex.mean(diff.select(~selection).dot())),0.,tolerance)

def check_occ_randomize(
      cmd, xrsp_init, output, selection,selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.sites_cart,xrsp_init.sites_cart,tolerance)
  assert approx_equal(xrsp.u_iso,     xrsp_init.u_iso,tolerance)
  assert approx_equal(xrsp.u_cart,    xrsp_init.u_cart,tolerance)
  if(selection_str is None):
    diff = flex.abs(xrsp.occ - xrsp_init.occ)
    assert flex.mean(diff) > 0.0
    assert flex.max(diff) > 0.0
  else:
    diff = flex.abs(xrsp.occ - xrsp_init.occ)
    assert flex.mean(diff) > 0.0
    assert flex.max(diff) > 0.0
    assert approx_equal(flex.mean(diff.select(~selection)),0.,tolerance)

def check_occ_set(
      cmd, xrsp_init, output, selection,selection_str, verbose,
      tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.sites_cart,xrsp_init.sites_cart,tolerance)
  assert approx_equal(xrsp.u_iso,     xrsp_init.u_iso,tolerance)
  assert approx_equal(xrsp.u_cart,    xrsp_init.u_cart,tolerance)
  if(selection_str is None):
    diff = flex.abs(xrsp.occ - xrsp_init.occ)
    assert flex.mean(diff) > 0.0
    assert flex.max(diff) > 0.0
  else:
    occ_init = xrsp_init.occ
    occ_mod  = xrsp.occ
    assert occ_init.all_eq(1.0)
    assert occ_mod.select(~selection).all_eq(1.0)
    assert occ_mod.select(selection).all_eq(0.75)

def check_remove_selection(
      cmd, xrsp_init, output, selection, selection_str,
      remove_selection_str, verbose, tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  remove_selection = ~xrsp_init.selection(
                                      selection_strings = remove_selection_str)
  assert remove_selection.size() > remove_selection.count(True)
  assert approx_equal(xrsp.sites_cart,
                      xrsp_init.sites_cart.select(remove_selection),tolerance)
  assert approx_equal(
                    xrsp.occ, xrsp_init.occ.select(remove_selection),tolerance)
  assert approx_equal(
                xrsp.u_iso, xrsp_init.u_iso.select(remove_selection),tolerance)
  assert approx_equal(
              xrsp.u_cart, xrsp_init.u_cart.select(remove_selection),tolerance)
  sct1 = xrsp_init.xray_structure.scatterers().extract_scattering_types()
  assert sct1.count("C") > 0
  sct2 = xrsp.xray_structure.scatterers().extract_scattering_types()
  assert sct2.count("C") == 0
  assert sct2.size() == remove_selection.count(True)
  assert sct1.size() > sct2.size()

def check_keep_selection(
      cmd, xrsp_init, output, selection, selection_str,
      keep_selection_str, verbose, tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  keep_selection = xrsp_init.selection(selection_strings = keep_selection_str)
  assert approx_equal(xrsp.sites_cart,
                      xrsp_init.sites_cart.select(keep_selection),tolerance)
  assert approx_equal(xrsp.occ, xrsp_init.occ.select(keep_selection),tolerance)
  assert approx_equal(
    xrsp.u_iso, xrsp_init.u_iso.select(keep_selection),tolerance)
  assert approx_equal(
    xrsp.u_cart, xrsp_init.u_cart.select(keep_selection),tolerance)
  sct1 = xrsp_init.xray_structure.scatterers().extract_scattering_types()
  assert sct1.count("C") > 0 and sct1.size() > sct1.count("C")
  sct2 = xrsp.xray_structure.scatterers().extract_scattering_types()
  assert sct2.count("C") == sct2.size()
  assert sct1.size() > keep_selection.count(True)
  assert sct1.size() > sct2.size()

def check_all_none(cmd, xrsp_init, output, verbose, tolerance=1.e-3):
  remove_files(output)
  run_command(command=cmd, verbose=verbose)
  xrsp = xray_structure_plus(file_name = output)
  assert approx_equal(xrsp.occ,         xrsp_init.occ,tolerance)
  assert approx_equal(xrsp.sites_cart,  xrsp_init.sites_cart,tolerance)
  assert approx_equal(xrsp.use_u_iso,   xrsp_init.use_u_iso,tolerance)
  assert approx_equal(xrsp.use_u_aniso, xrsp_init.use_u_aniso,tolerance)
  assert approx_equal(xrsp.u_iso,       xrsp_init.u_iso,tolerance)
  assert approx_equal(xrsp.u_cart,      xrsp_init.u_cart,tolerance)

def check_keep_remove_conflict(cmd, output, verbose):
  cmd += " keep=all remove=all "
  print(cmd)
  r = easy_run.go(cmd)
  assert r.stdout_lines[-1]==\
    "Sorry: 'keep' and 'remove' keywords cannot be used simultaneously."

def exercise_multiple():
  pdb_str = """\
ATOM      1  O   HOH A   2       5.131   5.251   5.823  1.00 10.00           O
ATOM      2  CA  LYS B  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      3  CB  LYS B  32       9.193   8.732  12.170  1.00 12.23           C
ATOM      4  CA  VAL C  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      5  CB  VAL C  33      11.101   4.227  14.591  1.00 11.47           C
ATOM      6  O   HOH C   3       1.132   5.963   7.065  1.00 15.00           O
ATOM      7  O   HOH C   4       4.132   9.963   7.800  1.00 15.00           O
TER
END
"""
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str)
  ph_met_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="exercise_multiple.pdb")
  params = """\
modify{
adp {
  atom_selection = chain A
  randomize = True
}
adp {
  atom_selection = chain B
  shift_b_iso = 10
}
sites {
  atom_selection = chain B
  shake = 1.5
}
sites {
  atom_selection = chain A or chain C
  translate = 1 2 3
  rotate = 4 5 6
}
occupancies
{
  atom_selection = chain A
  randomize = True
}
occupancies
{
  atom_selection = chain C
  set = 0.1
}
}
"""
  with open("params", "w") as f:
    f.write(params)
  cmd = 'phenix.pdbtools exercise_multiple.pdb params'
  print(cmd)
  result = run_command(command=cmd, verbose=False)
  lines = [l.strip() for l in result.stdout_lines]
  expected_lines = [
    "Randomizing ADP: selected atoms: 1 of 7",
    "Adding shift = 10.00 to all ADP: selected atoms: 2 of 7",
    "Shaking sites (RMS = 1.500): selected atoms: 2 of 7",
    "Rigid body shift: selected atoms: 5 of 7",
    "Randomizing occupancies: selected atoms: 1 of 7",
    "Setting occupancies to:    0.100: selected atoms: 4 of 7"
  ]
  for line in expected_lines:
    assert line in lines

def exercise_no_cryst1():
  pdb_str = """
ATOM      1  N  AMET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA AMET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  AMET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  AMET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB AMET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG AMET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD AMET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE AMET B  37       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  BMET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA BMET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  BMET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  BMET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB BMET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG BMET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD BMET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE BMET B  37       8.775   5.000  10.645  1.00 10.00           C
TER
END
  """
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str)
  ph_met_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="exercise_no_cryst1.pdb")
  cmd = 'phenix.pdbtools exercise_no_cryst1.pdb sites.rotate="0 0 0"'
  print(cmd)
  run_command(command=cmd, verbose=False)
  lines1 = []
  with open("exercise_no_cryst1.pdb","r") as f:
    lines = f.readlines()
  for line in lines:
    line = line.strip()
    assert line.count("CRYST1") == 0
    if(line.startswith("ATOM") or line.startswith("HETATM")):
      lines1.append(line)
  lines2 = []
  with open("exercise_no_cryst1_modified.pdb","r") as f:
    lines = f.readlines()
  for line in lines:
    line = line.strip()
    assert line.count("CRYST1") == 0
    if(line.startswith("ATOM") or line.startswith("HETATM")):
      lines2.append(line)
  assert len(lines1) == len(lines2)
  for l1,l2 in zip(lines1, lines2):
    assert l1[11:70].strip() == l2[11:70].strip()

def exercise_truncate_to_polyala():
  pdb_str = """
ATOM      1  N  AMET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA AMET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  AMET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  AMET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB AMET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG AMET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD AMET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE AMET B  37       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  BMET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA BMET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  BMET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  BMET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB BMET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG BMET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD BMET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE BMET B  37       8.775   5.000  10.645  1.00 10.00           C
TER
END
  """
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str)
  ph_met_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="exercise_exercise_truncate_to_polyala.pdb")
  cmd = 'phenix.pdbtools exercise_exercise_truncate_to_polyala.pdb truncate_to_polyala=true'
  print(cmd)
  run_command(command=cmd)
  gly_atom_names = [" N  ", " CA ", " C  ", " O  ", " CB "]
  pdb_inp = iotbx.pdb.input(
    file_name="exercise_exercise_truncate_to_polyala_modified.pdb")
  for a in pdb_inp.construct_hierarchy().atoms_with_labels():
    assert a.name in gly_atom_names

def exercise_set_charge():
  input_pdb = """
ATOM      1  CL  CL  X   1       0.000   0.000   0.000  1.00 20.00          CL
END
"""
  with open("tmp_cl.pdb", "w") as f:
    f.write(input_pdb)
  cmd='phenix.pdbtools tmp_cl.pdb charge_selection="element Cl" charge=-1'
  print(cmd)
  run_command(command=cmd, verbose=False)
  pdb_in = iotbx.pdb.input("tmp_cl_modified.pdb")
  hierarchy = pdb_in.construct_hierarchy()
  xrs = pdb_in.xray_structure_simple()
  assert (xrs.scatterers()[0].scattering_type == 'Cl1-')
  assert (hierarchy.atoms()[0].charge == '1-')

def exercise_renumber_residues():
  input_pdb = """
ATOM      1  O   GLY A   3       1.434   1.460   2.496  1.00  6.04           O
ATOM      2  O   CYS A   7       2.196   4.467   3.911  1.00  4.51           O
ATOM      3  O   CYS A   1      -1.433   4.734   5.405  1.00  7.85           O
TER
ATOM      4  O   SER B   4       0.297   0.843   7.226  1.00  7.65           O
ATOM      5  OG ASER B   4      -2.625   1.057   4.064  0.50  5.46           O
ATOM      6  OG BSER B   4      -0.885   0.189   3.843  0.50 11.74           O
ATOM      7  O   LEU B   8       3.613   4.307   6.646  1.00  5.39           O
ATOM      8  O   PRO B  -1       4.398   6.723   8.658  1.00  6.65           O
ATOM      9  O   TYR B   7       7.294   7.360   6.923  1.00  8.75           O
ATOM     10  O   CYS B   0       5.256   8.262   4.185  1.00  6.08           O
ATOM     11  O   ALA B   9       3.028  10.447   5.584  1.00  7.39           O
TER
ATOM     12  O   LEU C   0       5.613  12.448   6.864  1.00  7.32           O
TER
END
"""
  expected_output_pdb = """ATOM      1  O   GLY A   1       1.434   1.460   2.496  1.00  6.04           O
ATOM      2  O   CYS A   2       2.196   4.467   3.911  1.00  4.51           O
ATOM      3  O   CYS A   3      -1.433   4.734   5.405  1.00  7.85           O
TER
ATOM      4  O   SER B   1       0.297   0.843   7.226  1.00  7.65           O
ATOM      5  OG ASER B   1      -2.625   1.057   4.064  0.50  5.46           O
ATOM      6  OG BSER B   1      -0.885   0.189   3.843  0.50 11.74           O
ATOM      7  O   LEU B   2       3.613   4.307   6.646  1.00  5.39           O
ATOM      8  O   PRO B   3       4.398   6.723   8.658  1.00  6.65           O
ATOM      9  O   TYR B   4       7.294   7.360   6.923  1.00  8.75           O
ATOM     10  O   CYS B   5       5.256   8.262   4.185  1.00  6.08           O
ATOM     11  O   ALA B   6       3.028  10.447   5.584  1.00  7.39           O
TER
ATOM     12  O   LEU C   1       5.613  12.448   6.864  1.00  7.32           O
TER
"""
  ifn = "exercise_renumber_residues.pdb"
  with open(ifn,"w") as f:
    f.write(input_pdb)
  cmd = 'phenix.pdbtools "%s" renumber_residues=true'%ifn
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("exercise_renumber_residues_modified.pdb") as f:
    lines = f.readlines()
  for line1, line2 in zip(lines, expected_output_pdb.splitlines()):
    line1 = line1.strip()
    line2 = line2.strip()
    assert line1 == line2,[line1, line2]
  # now only a selected chain
  expected_output_pdb_2 = """\
ATOM      1  O   GLY A   3       1.434   1.460   2.496  1.00  6.04           O
ATOM      2  O   CYS A   7       2.196   4.467   3.911  1.00  4.51           O
ATOM      3  O   CYS A   1      -1.433   4.734   5.405  1.00  7.85           O
TER
ATOM      4  O   SER B   1       0.297   0.843   7.226  1.00  7.65           O
ATOM      5  OG ASER B   1      -2.625   1.057   4.064  0.50  5.46           O
ATOM      6  OG BSER B   1      -0.885   0.189   3.843  0.50 11.74           O
ATOM      7  O   LEU B   2       3.613   4.307   6.646  1.00  5.39           O
ATOM      8  O   PRO B   3       4.398   6.723   8.658  1.00  6.65           O
ATOM      9  O   TYR B   4       7.294   7.360   6.923  1.00  8.75           O
ATOM     10  O   CYS B   5       5.256   8.262   4.185  1.00  6.08           O
ATOM     11  O   ALA B   6       3.028  10.447   5.584  1.00  7.39           O
TER
ATOM     12  O   LEU C   0       5.613  12.448   6.864  1.00  7.32           O
TER
"""
  cmd = "phenix.pdbtools \"%s\" renumber_residues=true modify.selection=\"chain B\"" % ifn
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("exercise_renumber_residues_modified.pdb") as f:
    for line1, line2 in zip(f.readlines(), expected_output_pdb_2.splitlines()):
      assert (line1.strip() == line2.strip())
  cmd="phenix.pdbtools \"%s\" increment_resseq=10 modify.selection=\"chain B\"" % ifn
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("exercise_renumber_residues_modified.pdb") as f:
    pdb_new = f.read()
  expected_output_pdb_3 = """\
ATOM      1  O   GLY A   3       1.434   1.460   2.496  1.00  6.04           O
ATOM      2  O   CYS A   7       2.196   4.467   3.911  1.00  4.51           O
ATOM      3  O   CYS A   1      -1.433   4.734   5.405  1.00  7.85           O
TER
ATOM      4  O   SER B  14       0.297   0.843   7.226  1.00  7.65           O
ATOM      5  OG ASER B  14      -2.625   1.057   4.064  0.50  5.46           O
ATOM      6  OG BSER B  14      -0.885   0.189   3.843  0.50 11.74           O
ATOM      7  O   LEU B  18       3.613   4.307   6.646  1.00  5.39           O
ATOM      8  O   PRO B   9       4.398   6.723   8.658  1.00  6.65           O
ATOM      9  O   TYR B  17       7.294   7.360   6.923  1.00  8.75           O
ATOM     10  O   CYS B  10       5.256   8.262   4.185  1.00  6.08           O
ATOM     11  O   ALA B  19       3.028  10.447   5.584  1.00  7.39           O
TER
ATOM     12  O   LEU C   0       5.613  12.448   6.864  1.00  7.32           O
TER
END
"""
  assert not show_diff(pdb_new, expected_output_pdb_3)

def exercise_neutralize_scatterers():
  input_pdb = """ATOM      1  N   TYR    22      -0.813  -2.199   1.423  1.00  0.00           N
ATOM      2  CA  TYR    22       0.612  -2.082   1.127  1.00  0.00           C
ATOM      3  C   TYR    22       1.441  -2.790   2.171  1.00  0.00           C
ATOM      4  O   TYR    22       0.927  -3.375   3.128  1.00  0.00           O
ATOM      5  CB  TYR    22       1.052  -0.589   1.096  1.00  0.00           C
ATOM      6  CG  TYR    22       0.390   0.302   0.038  1.00  0.00           C
ATOM      7  CD1 TYR    22       0.807   0.254  -1.296  1.00  0.00           C
ATOM      8  CD2 TYR    22      -0.647   1.164   0.406  1.00  0.00           C
ATOM      9  CE1 TYR    22       0.188   1.057  -2.250  1.00  0.00           C
ATOM     10  CE2 TYR    22      -1.264   1.966  -0.549  1.00  0.00           C
ATOM     11  CZ  TYR    22      -0.846   1.912  -1.877  1.00  0.00           C
ATOM     12  OH  TYR    22      -1.452   2.696  -2.817  1.00  0.00           O1-
"""
  expected_output_pdb = """ATOM      1  N   TYR    22      -0.813  -2.199   1.423  1.00 10.00           N
ATOM      2  CA  TYR    22       0.612  -2.082   1.127  1.00 10.00           C
ATOM      3  C   TYR    22       1.441  -2.790   2.171  1.00 10.00           C
ATOM      4  O   TYR    22       0.927  -3.375   3.128  1.00 10.00           O
ATOM      5  CB  TYR    22       1.052  -0.589   1.096  1.00 10.00           C
ATOM      6  CG  TYR    22       0.390   0.302   0.038  1.00 10.00           C
ATOM      7  CD1 TYR    22       0.807   0.254  -1.296  1.00 10.00           C
ATOM      8  CD2 TYR    22      -0.647   1.164   0.406  1.00 10.00           C
ATOM      9  CE1 TYR    22       0.188   1.057  -2.250  1.00 10.00           C
ATOM     10  CE2 TYR    22      -1.264   1.966  -0.549  1.00 10.00           C
ATOM     11  CZ  TYR    22      -0.846   1.912  -1.877  1.00 10.00           C
ATOM     12  OH  TYR    22      -1.452   2.696  -2.817  1.00 10.00           O
"""
  ifn = "exercise_neutralize_scatterers.pdb"
  with open(ifn,"w") as f:
    f.write(input_pdb)
  cmd = 'phenix.pdbtools "%s" neutralize_scatterers=true adp.set_b_iso=10'%ifn
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open(ifn.replace(".pdb","_modified.pdb")) as f:
    lines = f.readlines()
  for line1, line2 in zip(lines, expected_output_pdb.splitlines()):
    line1 = line1.strip()
    line2 = line2.strip()
    assert line1 == line2

def exercise_remove_atoms():
  pdb_str = """
ATOM      1  N  AMET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA AMET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  AMET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  AMET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB AMET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG AMET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD AMET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE AMET B  37       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  BMET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA BMET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  BMET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  BMET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB BMET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG BMET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD BMET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE BMET B  37       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  AMET B  38       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA AMET B  38       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  AMET B  38       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  AMET B  38       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB AMET B  38       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG AMET B  38       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD AMET B  38       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE AMET B  38       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  BMET B  38       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA BMET B  38       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  BMET B  38       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  BMET B  38       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB BMET B  38       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG BMET B  38       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD BMET B  38       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE BMET B  38       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  AMET B  39       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA AMET B  39       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  AMET B  39       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  AMET B  39       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB AMET B  39       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG AMET B  39       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD AMET B  39       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE AMET B  39       8.775   5.000  10.645  1.00 10.00           C
ATOM      1  N  BMET B  39       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA BMET B  39       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C  BMET B  39       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O  BMET B  39       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB BMET B  39       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG BMET B  39       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD BMET B  39       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE BMET B  39       8.775   5.000  10.645  1.00 10.00           C
TER
END
  """
  # Initial size - 48 atoms
  with open("exercise_remove_atoms.pdb", 'w') as f:
    f.write(pdb_str)
  cmd = " ".join([
    "phenix.pdbtools",
    "exercise_remove_atoms.pdb",
    "remove_fraction=0.1"])
  print(cmd)
  run_command(command=cmd, verbose=False)
  inp = iotbx.pdb.input(file_name="exercise_remove_atoms_modified.pdb")
  # removed 5 atoms (~10%).
  assert inp.atoms().size() == 43, inp.atoms().size()

def exercise_change_of_basis():
  with open("tmp_pdbtools_cb_op.pdb", "w") as f:
    f.write("""\
CRYST1   21.937    4.866   23.477  90.00 107.08  90.00 P 1 21 1      2
ATOM      1  N   GLY A   1      -9.009   4.612   6.102  1.00 16.77           N
ATOM      2  CA  GLY A   1      -9.052   4.207   4.651  1.00 16.57           C
ATOM      3  C   GLY A   1      -8.015   3.140   4.419  1.00 16.16           C
ATOM      4  O   GLY A   1      -7.523   2.521   5.381  1.00 16.78           O  """)
  cmd = "phenix.pdbtools tmp_pdbtools_cb_op.pdb change_of_basis='a,c,b'"
  run_command(command=cmd, verbose=False)
  with open("tmp_pdbtools_cb_op_modified.pdb") as f:
    lines = f.readlines()
  for line in lines:
    if line.startswith("CRYST1"):
      assert (line.strip() ==
        """CRYST1   21.937   23.477    4.866  90.00  90.00 107.08 P 1 1 21""")
      break

def exercise_mmcif_support():
  from libtbx.test_utils import open_tmp_file
  f = open_tmp_file(suffix="pdbtools.cif")
  f.write("""\
data_phenix
_space_group.name_H-M_alt         'C 1 2 1'
_space_group.name_Hall            ' C 2y'
_cell.length_a                    46.053
_cell.length_b                    9.561
_cell.length_c                    20.871
_cell.angle_alpha                 90.0
_cell.angle_beta                  97.43
_cell.angle_gamma                 90.0
_cell.volume                      9112.60599144
loop_
  _atom_site.group_PDB
  _atom_site.id
  _atom_site.label_atom_id
  _atom_site.label_alt_id
  _atom_site.label_comp_id
  _atom_site.auth_asym_id
  _atom_site.auth_seq_id
  _atom_site.pdbx_PDB_ins_code
  _atom_site.Cartn_x
  _atom_site.Cartn_y
  _atom_site.Cartn_z
  _atom_site.occupancy
  _atom_site.B_iso_or_equiv
  _atom_site.type_symbol
  _atom_site.pdbx_formal_charge
  _atom_site.label_asym_id
  _atom_site.label_entity_id
  _atom_site.label_seq_id
  _atom_site.pdbx_PDB_model_num
  ATOM      2  CA  .  LYS  A  1  ?    7.49733  -0.62028   4.35289  1.000  10.25989  C  ?  A  ?   1  1
  ATOM     11  CA  .  LEU  A  2  ?    3.72032  -0.19320   3.89326  1.000   7.80433  C  ?  A  ?   2  1
  ATOM     19  CA  .  VAL  A  3  ?    0.78668  -0.39555   6.35234  1.000   5.03864  C  ?  A  ?   3  1
  ATOM     26  CA  .  PHE  A  4  ?   -2.75438  -0.21383   5.02429  1.000   8.93080  C  ?  A  ?   4  1
  ATOM     37  CA  .  PHE  A  5  ?   -6.05155  -0.46197   6.85390  1.000   9.57417  C  ?  A  ?   5  1
  ATOM     48  CA  .  ALA  A  6  ?   -9.57646  -0.10942   5.55847  1.000  17.73488  C  ?  A  ?   6  1
  ATOM     54  CA  .  LYS  B  1  ?   -8.86604  -5.20044   5.46515  1.000  16.15297  C  ?  B  ?   7  1
""")
  f.close()
  cmd = " ".join(["phenix.pdbtools", "\"%s\"" % f.name,
    "rename_chain_id.old_id=A",
    "rename_chain_id.new_id=C"])
  print(cmd)
  run_command(command=cmd, verbose=False)
  ofn = f.name[:].replace(".cif","_modified.cif")
  assert os.path.isfile(ofn)
  pdb_inp = iotbx.pdb.input(file_name=ofn)
  assert pdb_inp.file_type() == "mmcif"
  hierarchy = pdb_inp.construct_hierarchy()
  assert [chain.id for chain in hierarchy.chains()] == ['C', 'B']

  # check target_output_format=pdb
  cmd = " ".join(["phenix.pdbtools", "\"%s\"" % f.name,
    "rename_chain_id.old_id=A",
    "rename_chain_id.new_id=C",
    "target_output_format=pdb",])
  print(cmd)
  run_command(command=cmd, verbose=False)
  ofn = f.name[:].replace(".cif","_modified.pdb")
  assert os.path.isfile(ofn)

def exercise_mmcif_support_2(prefix="tst_pdbtools_mmcif2"):
  f = open("%s.pdb" % prefix, 'w')
  f.write("""\
HELIX    1   1 GLN A   10  GLN A   14  5                                   5
HELIX    2   2 ARG A   17  ASN A   29  1                                  13
SHEET    1   A 2 GLN A  33  GLN A  38  0
SHEET    2   A 2 GLN A  51  GLN A  56  1  O  VAL A  54   N  ILE A  35
SSBOND   1 CYS A    4    CYS A   49
CRYST1   62.654   62.654   45.906  90.00  90.00  90.00 P 43 21 2
SCALE1      0.015961  0.000000  0.000000        0.00000
SCALE2      0.000000  0.015961  0.000000        0.00000
SCALE3      0.000000  0.000000  0.021784        0.00000
ATOM      1  N   GLN A   3      23.762  12.429   1.265  1.00 45.30           N
ATOM      2  CA  GLN A   3      22.670  12.004   2.148  1.00 39.46           C
ATOM      3  C   GLN A   3      21.818  10.942   1.458  1.00 42.86           C
ATOM      4  O   GLN A   3      21.337  11.133   0.339  1.00 44.81           O
ATOM      5  CB  GLN A   3      21.794  13.195   2.571  1.00 42.53           C
ATOM      6  N   CYS A   4      21.620   9.817   2.129  1.00 36.33           N
ATOM      7  CA  CYS A   4      20.902   8.709   1.518  1.00 31.46           C
ATOM      8  C   CYS A   4      19.419   8.891   1.670  1.00 34.16           C
ATOM      9  O   CYS A   4      18.979   9.537   2.607  1.00 38.12           O
ATOM     10  CB  CYS A   4      21.307   7.409   2.205  1.00 31.53           C
ATOM     11  SG  CYS A   4      23.070   7.194   2.148  1.00 29.88           S
ATOM     12  N   SER A   5      18.657   8.290   0.760  1.00 33.83           N
ATOM     13  CA  SER A   5      17.211   8.293   0.854  1.00 38.94           C
ATOM     14  C   SER A   5      16.676   6.917   1.254  1.00 32.88           C
ATOM     15  O   SER A   5      17.295   5.879   0.981  1.00 32.57           O
ATOM     16  CB  SER A   5      16.603   8.683  -0.488  1.00 39.48           C
ATOM     17  OG  SER A   5      16.893   7.668  -1.432  1.00 47.16           O
ATOM     18  N   GLY A   6      15.520   6.924   1.901  1.00 31.69           N
ATOM     19  CA  GLY A   6      14.811   5.694   2.191  1.00 32.41           C
ATOM     20  C   GLY A   6      15.257   5.112   3.511  1.00 29.00           C
ATOM      2  CA  GLN A  10      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  11      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  12      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  13      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  14      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  33      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  34      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  35      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  36      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  37      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  38      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  51      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  52      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  53      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  54      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  55      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  56      22.670  12.004   2.148  1.00 39.46           C
""")
  f.close()
  cmd = " ".join([
      "phenix.pdb_as_cif",
      "%s.pdb" % prefix])
  run_command(command=cmd, verbose=False)
  cmd = " ".join([
      "phenix.pdbtools",
      "%s.cif" % prefix,
      "suffix=none",
      "output.prefix=%s" % prefix])
  print(cmd)
  run_command(command=cmd, verbose=False)
  cif_f = open("%s.cif" % prefix, 'r')
  cif_l = cif_f.readlines()
  cif_f.close()
  for l in ["_cell.angle_alpha                 90.000\n",
      "  _struct_conf.pdbx_PDB_helix_id\n",
      "  _struct_sheet.id\n",
      "  _struct_sheet_range.id\n",
      "  _atom_site.label_atom_id\n"]:
    assert l in cif_l, "%s not in cif file!" % l

def exercise_move_waters():
  pdb_in = """\
ATOM     16  O  AHOH A   2       5.131   5.251   5.823  0.60 10.00           O
ATOM     60  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM     63  CB ALYS A  32       9.197   8.686  12.246  0.29 14.71           C
ATOM     64  CB BLYS A  32       9.193   8.732  12.170  0.71 12.23           C
ATOM     74  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM     77  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM     18  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM     19  H1  HOH A   3       1.160   5.211   6.437  1.00 15.00           H
ATOM     20  H2  HOH A   3       1.122   5.579   7.967  1.00 15.00           H
HETATM 2397  P   PO4     1      -7.520  25.376  38.369  1.00 39.37           P
HETATM 2398  O1  PO4     1      -6.610  24.262  38.967  1.00 40.00           O
HETATM 2399  O2  PO4     1      -6.901  25.919  37.049  1.00 41.07           O
HETATM 2400  O3  PO4     1      -8.894  24.741  38.097  1.00 45.09           O
HETATM 2401  O4  PO4     1      -7.722  26.556  39.350  1.00 42.48           O
ATOM     23 CL   CL  B   1       6.302   6.419   1.560  0.50 10.00          CL
HETATM 6362  O   HOH B   2      47.616  10.724 150.212  1.00 46.48       B   O
HETATM 6363  O  AHOH B   3      46.408  16.672 146.066  0.50 12.81       B   O
HETATM 6364  O   HOH B   4      29.343  12.806 185.898  1.00 35.57       B   O
HETATM 6365  O  BHOH B   5      43.786  12.615 147.734  0.50 28.43       B   O
HETATM 6366  O   HOH B   6      35.068  19.167 155.349  1.00 15.97       B   O
"""
  pdb_out = """\
ATOM      1  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      2  CB ALYS A  32       9.197   8.686  12.246  0.29 14.71           C
ATOM      3  CB BLYS A  32       9.193   8.732  12.170  0.71 12.23           C
ATOM      4  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      5  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
TER
HETATM    6  O1  PO4     1      -6.610  24.262  38.967  1.00 40.00           O
HETATM    7  O2  PO4     1      -6.901  25.919  37.049  1.00 41.07           O
HETATM    8  O3  PO4     1      -8.894  24.741  38.097  1.00 45.09           O
HETATM    9  O4  PO4     1      -7.722  26.556  39.350  1.00 42.48           O
HETATM   10  P   PO4     1      -7.520  25.376  38.369  1.00 39.37           P
ATOM     11 CL   CL  B   1       6.302   6.419   1.560  0.50 10.00          Cl
ATOM     12  O  AHOH A   2       5.131   5.251   5.823  0.60 10.00           O
ATOM     13  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM     14  H1  HOH A   3       1.160   5.211   6.437  1.00 15.00           H
ATOM     15  H2  HOH A   3       1.122   5.579   7.967  1.00 15.00           H
HETATM   16  O   HOH B   2      47.616  10.724 150.212  1.00 46.48       B   O
HETATM   17  O  AHOH B   3      46.408  16.672 146.066  0.50 12.81       B   O
HETATM   18  O   HOH B   4      29.343  12.806 185.898  1.00 35.57       B   O
HETATM   19  O  BHOH B   5      43.786  12.615 147.734  0.50 28.43       B   O
HETATM   20  O   HOH B   6      35.068  19.167 155.349  1.00 15.97       B   O
END
"""
  with open("tst_pdbtools_move_waters.pdb", "w") as f:
    f.write(pdb_in)
  cmd = "phenix.pdbtools tst_pdbtools_move_waters.pdb move_waters_last=True"
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("tst_pdbtools_move_waters_modified.pdb") as f:
    pdb_new = f.read()
  assert pdb_new == pdb_out, pdb_new

def exercise_stop_for_unknowns():
  pdb_in = """\
HETATM   16  O   UNK B   2      47.616  10.724 150.212  1.00 46.48       B   O
HETATM   17  O   UNK B   3      46.408  16.672 146.066  0.50 12.81       B   O
HETATM   18  O   UNK B   4      29.343  12.806 185.898  1.00 35.57       B   O
HETATM   19  O   UNK B   5      43.786  12.615 147.734  0.50 28.43       B   O
HETATM   20  O   UNK B   6      35.068  19.167 155.349  1.00 15.97       B   O
"""
  with open("tst_pdbtools_unknown.pdb", "w") as f:
    f.write(pdb_in)
  cmd = "phenix.pdbtools tst_pdbtools_unknown.pdb set_b_iso=20"
  print(cmd)
  run_command(command=cmd, sorry_expected=True)
  cmd2 = cmd + " stop_for_unknowns=False"
  print(cmd2)
  run_command(command=cmd2)

def exercise_average_alt_confs(prefix='tst_pdbtools_average_alt_confs'):
  pdb_in = """\
ATOM     16  O  AHOH A   2       5.131   5.251   5.823  0.60 10.00           O
ATOM     60  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM     63  CB ALYS A  32       9.197   8.686  12.246  0.29 14.71           C
ATOM     64  CB BLYS A  32       9.193   8.732  12.170  0.71 12.23           C
ATOM     74  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM     77  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM     18  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM     19  O  BHOH A   4       4.132   9.963   7.800  0.50 15.00           O
"""
  with open("%s.pdb" % prefix, "w") as f:
    f.write(pdb_in)
  cmd = "phenix.pdbtools %s.pdb average_alt_confs=True" % prefix
  print(cmd)
  run_command(command=cmd, verbose=False)

  with open("%s_modified.pdb" % prefix) as f:
    pdb_new = f.read()
  assert (pdb_new == '''\
ATOM      1  O  AHOH A   2       5.131   5.251   5.823  0.60 10.00           O
ATOM      2  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      3  CB ALYS A  32       9.195   8.709  12.208  0.29 14.71           C
ATOM      4  CB BLYS A  32       9.195   8.709  12.208  0.71 12.23           C
ATOM      5  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      6  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM      7  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM      8  O  BHOH A   4       4.132   9.963   7.800  0.50 15.00           O
TER
END
''')

def exercise_remove_alt_confs():
  pdb_in = """\
ATOM     16  O  AHOH A   2       5.131   5.251   5.823  0.60 10.00           O
ATOM     60  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM     63  CB ALYS A  32       9.197   8.686  12.246  0.29 14.71           C
ATOM     64  CB BLYS A  32       9.193   8.732  12.170  0.71 12.23           C
ATOM     74  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM     77  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM     18  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM     19  O  BHOH A   4       4.132   9.963   7.800  0.50 15.00           O
"""
  with open("tst_pdbtools_alt_confs.pdb", "w") as f:
    f.write(pdb_in)
  cmd = "phenix.pdbtools tst_pdbtools_alt_confs.pdb remove_alt_confs=True"
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("tst_pdbtools_alt_confs_modified.pdb") as f:
    pdb_new = f.read()
  assert (pdb_new == """\
ATOM      1  O   HOH A   2       5.131   5.251   5.823  1.00 10.00           O
ATOM      2  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      3  CB  LYS A  32       9.197   8.686  12.246  1.00 14.71           C
ATOM      4  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      5  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM      6  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
TER
END
""")
  cmd = "phenix.pdbtools tst_pdbtools_alt_confs.pdb remove_alt_confs=True " +\
    "always_keep_one_conformer=True"
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("tst_pdbtools_alt_confs_modified.pdb") as f:
    pdb_new = f.read()
  assert (pdb_new == """\
ATOM      1  O   HOH A   2       5.131   5.251   5.823  1.00 10.00           O
ATOM      2  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      3  CB  LYS A  32       9.193   8.732  12.170  1.00 12.23           C
ATOM      4  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      5  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM      6  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM      7  O   HOH A   4       4.132   9.963   7.800  1.00 15.00           O
TER
END
""")
  cmd = "phenix.pdbtools tst_pdbtools_alt_confs.pdb remove_alt_confs=True altloc_to_keep='B' "
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("tst_pdbtools_alt_confs_modified.pdb") as f:
    pdb_new = f.read()

  assert (pdb_new == """\
ATOM      1  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      2  CB  LYS A  32       9.193   8.732  12.170  1.00 12.23           C
ATOM      3  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      4  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM      5  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM      6  O   HOH A   4       4.132   9.963   7.800  1.00 15.00           O
TER
END
""")
  cmd = "phenix.pdbtools tst_pdbtools_alt_confs.pdb remove_alt_confs=True " +\
    "always_keep_one_conformer=True altloc_to_keep='B' "
  print(cmd)
  run_command(command=cmd, verbose=False)
  with open("tst_pdbtools_alt_confs_modified.pdb") as f:
    pdb_new = f.read()
  assert (pdb_new == """\
ATOM      1  O   HOH A   2       5.131   5.251   5.823  1.00 10.00           O
ATOM      2  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      3  CB  LYS A  32       9.193   8.732  12.170  1.00 12.23           C
ATOM      4  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      5  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
ATOM      6  O   HOH A   3       1.132   5.963   7.065  1.00 15.00           O
ATOM      7  O   HOH A   4       4.132   9.963   7.800  1.00 15.00           O
TER
END
""")


def exercise_convert_met_to_semet():
  pdb_str_met = """
ATOM      1  N   MET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA  MET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C   MET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O   MET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB  MET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG  MET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD  MET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE  MET B  37       8.775   5.000  10.645  1.00 10.00           C
TER
END
  """
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str_met)
  ph_met_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="exercise_convert_met_to_semet.pdb")
  cmd = " ".join([
    "phenix.pdbtools",
    "exercise_convert_met_to_semet.pdb",
    "convert_met_to_semet=true"])
  print(cmd)
  run_command(command=cmd, verbose=False)
  pi_out = iotbx.pdb.input(
    file_name="exercise_convert_met_to_semet_modified.pdb"
    ).construct_hierarchy()
  for rg in pi_out.residue_groups():
      for rn in rg.unique_resnames():
        assert rn=="MSE"
  cmd = " ".join([
    "phenix.pdbtools",
    "exercise_convert_met_to_semet_modified.pdb",
    "convert_semet_to_met=true"])
  run_command(command=cmd, verbose=False)
  pi_out = iotbx.pdb.input(
    file_name="exercise_convert_met_to_semet_modified_modified.pdb"
    ).construct_hierarchy()
  for rg in pi_out.residue_groups():
      for rn in rg.unique_resnames():
        assert rn=="MET"

def exercise_switch_rotamers(prefix="exercise_switch_rotamers"):
  pdb_str_met = """
ATOM      1  N   MET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA  MET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C   MET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O   MET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB  MET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG  MET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD  MET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE  MET B  37       8.775   5.000  10.645  1.00 10.00           C
TER
END
  """
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str_met)
  ph_met_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="%s.pdb"%prefix)
  for o in ["max_distant","min_distant","exact_match","fix_outliers"]:
    cmd = " ".join([
      "phenix.pdbtools",
      "%s.pdb"%prefix,
      "switch_rotamers=%s"%o,
      "suffix=none",
      "output.prefix=%s_%s"%(o,prefix)])
    print(cmd)
    run_command(command=cmd, verbose=False)

def exercise_segid_manipulations(prefix="tst_pdbtools_ex_segid"):
  pdb_str_met = """
ATOM      1  N   MET B  37       7.525   5.296   6.399  1.00 10.00      A    N
ATOM      2  CA  MET B  37       6.533   6.338   6.634  1.00 10.00      A    C
ATOM      3  C   MET B  37       6.175   7.044   5.330  1.00 10.00      A    C
ATOM      4  O   MET B  37       5.000   7.200   5.000  1.00 10.00      A    O
ATOM      5  CB  MET B  37       7.051   7.351   7.655  1.00 10.00      A    C
ATOM      6  CG  MET B  37       7.377   6.750   9.013  1.00 10.00      A    C
ATOM      7  SD  MET B  37       8.647   5.473   8.922  1.00 10.00      A    S
ATOM      8  CE  MET B  37       8.775   5.000  10.645  1.00 10.00      A    C
TER
END
  """
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str_met)
  ph_met_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="%s.pdb"%prefix)
  for o  in ["clear_seg_id", "set_seg_id_to_chain_id"]:
    cmd = " ".join([
        "phenix.pdbtools",
        "%s.pdb"%prefix,
        "%s=True" % o,
        "suffix=none",
        "output.prefix=%s_%s"%(o,prefix)])
    print(cmd)
    run_command(command=cmd, verbose=False)
    with open("%s_%s.pdb"%(o,prefix)) as f:
      pdb_new = f.read()
    if o == "clear_seg_id":
      assert (pdb_new == """\
ATOM      1  N   MET B  37       7.525   5.296   6.399  1.00 10.00           N
ATOM      2  CA  MET B  37       6.533   6.338   6.634  1.00 10.00           C
ATOM      3  C   MET B  37       6.175   7.044   5.330  1.00 10.00           C
ATOM      4  O   MET B  37       5.000   7.200   5.000  1.00 10.00           O
ATOM      5  CB  MET B  37       7.051   7.351   7.655  1.00 10.00           C
ATOM      6  CG  MET B  37       7.377   6.750   9.013  1.00 10.00           C
ATOM      7  SD  MET B  37       8.647   5.473   8.922  1.00 10.00           S
ATOM      8  CE  MET B  37       8.775   5.000  10.645  1.00 10.00           C
TER
END
"""), pdb_new
    else:
      assert (pdb_new == """\
ATOM      1  N   MET B  37       7.525   5.296   6.399  1.00 10.00      B    N
ATOM      2  CA  MET B  37       6.533   6.338   6.634  1.00 10.00      B    C
ATOM      3  C   MET B  37       6.175   7.044   5.330  1.00 10.00      B    C
ATOM      4  O   MET B  37       5.000   7.200   5.000  1.00 10.00      B    O
ATOM      5  CB  MET B  37       7.051   7.351   7.655  1.00 10.00      B    C
ATOM      6  CG  MET B  37       7.377   6.750   9.013  1.00 10.00      B    C
ATOM      7  SD  MET B  37       8.647   5.473   8.922  1.00 10.00      B    S
ATOM      8  CE  MET B  37       8.775   5.000  10.645  1.00 10.00      B    C
TER
END
"""), pdb_new

def exercise_flip_symmetric_amino_acids(
  prefix="exercise_flip_symmetric_amino_acids"):
  pdb_str_in = """
ATOM   3356  N   ARG H 228      20.811-103.620  24.514  1.00 56.77           N
ATOM   3357  CA  ARG H 228      21.863-104.460  23.967  1.00 64.89           C
ATOM   3358  C   ARG H 228      21.258-105.679  23.284  1.00 69.98           C
ATOM   3359  O   ARG H 228      20.179-106.141  23.657  1.00 70.23           O
ATOM   3360  CB  ARG H 228      22.810-104.925  25.075  1.00 63.55           C
ATOM   3361  CG  ARG H 228      23.354-103.810  25.936  1.00 64.01           C
ATOM   3362  CD  ARG H 228      24.570-104.271  26.712  1.00 65.11           C
ATOM   3363  NE  ARG H 228      25.126-103.194  27.523  1.00 68.09           N
ATOM   3364  CZ  ARG H 228      26.373-103.169  27.982  1.00 66.49           C
ATOM   3365  NH1 ARG H 228      26.790-102.145  28.717  1.00 64.08           N
ATOM   3366  NH2 ARG H 228      27.205-104.163  27.694  1.00 65.11           N
TER
END
  """
  pdb_str_out = """
ATOM   3355  N   ARG H 228      20.811-103.620  24.514  1.00 56.77           N
ATOM   3356  CA  ARG H 228      21.863-104.460  23.967  1.00 64.89           C
ATOM   3357  C   ARG H 228      21.258-105.679  23.284  1.00 69.98           C
ATOM   3358  O   ARG H 228      20.179-106.141  23.657  1.00 70.23           O
ATOM   3359  CB  ARG H 228      22.810-104.925  25.075  1.00 63.55           C
ATOM   3360  CG  ARG H 228      23.354-103.810  25.936  1.00 64.01           C
ATOM   3361  CD  ARG H 228      24.570-104.271  26.712  1.00 65.11           C
ATOM   3362  NE  ARG H 228      25.126-103.194  27.523  1.00 68.09           N
ATOM   3363  CZ  ARG H 228      26.373-103.169  27.982  1.00 66.49           C
ATOM   3364  NH1 ARG H 228      27.205-104.163  27.694  1.00 65.11           N
ATOM   3365  NH2 ARG H 228      26.790-102.145  28.717  1.00 64.08           N
TER
END
  """
  pi = iotbx.pdb.input(source_info=None, lines=pdb_str_in)
  ph_in = pi.construct_hierarchy()
  pi.write_pdb_file(file_name="%s.pdb"%prefix)
  cmd = " ".join([
    "phenix.pdbtools",
    "%s.pdb"%prefix,
    "flip_symmetric_amino_acids=True",
    "output.prefix=%s"%prefix])
  print(cmd)
  run_command(command=cmd, verbose=False)
  h1 = iotbx.pdb.input(source_info=None, lines=pdb_str_out).construct_hierarchy()
  h2 = iotbx.pdb.input(file_name=
    "exercise_flip_symmetric_amino_acids_modified.pdb").construct_hierarchy()
  assert h1.is_similar_hierarchy(h2)
  ph_in.flip_symmetric_amino_acids()
  assert h1.is_similar_hierarchy(ph_in)

def exercise_result_is_empty(prefix='exercise_result_is_empty'):
  pdb_str = """
HELIX    1   1 GLN A   10  GLN A   14  5                                   5
HELIX    2   2 ARG A   17  ASN A   29  1                                  13
SHEET    1   A 2 GLN A  33  GLN A  38  0
SHEET    2   A 2 GLN A  51  GLN A  56  1  O  VAL A  54   N  ILE A  35
SSBOND   1 CYS A    4    CYS A   49
CRYST1   62.654   62.654   45.906  90.00  90.00  90.00 P 43 21 2
SCALE1      0.015961  0.000000  0.000000        0.00000
SCALE2      0.000000  0.015961  0.000000        0.00000
SCALE3      0.000000  0.000000  0.021784        0.00000
ATOM      1  N   GLN A   3      23.762  12.429   1.265  1.00 45.30           N
ATOM      2  CA  GLN A   3      22.670  12.004   2.148  1.00 39.46           C
ATOM      3  C   GLN A   3      21.818  10.942   1.458  1.00 42.86           C
ATOM      4  O   GLN A   3      21.337  11.133   0.339  1.00 44.81           O
ATOM      5  CB  GLN A   3      21.794  13.195   2.571  1.00 42.53           C
ATOM      6  N   CYS A   4      21.620   9.817   2.129  1.00 36.33           N
ATOM      7  CA  CYS A   4      20.902   8.709   1.518  1.00 31.46           C
ATOM      8  C   CYS A   4      19.419   8.891   1.670  1.00 34.16           C
ATOM      9  O   CYS A   4      18.979   9.537   2.607  1.00 38.12           O
ATOM     10  CB  CYS A   4      21.307   7.409   2.205  1.00 31.53           C
ATOM     11  SG  CYS A   4      23.070   7.194   2.148  1.00 29.88           S
ATOM     12  N   SER A   5      18.657   8.290   0.760  1.00 33.83           N
ATOM     13  CA  SER A   5      17.211   8.293   0.854  1.00 38.94           C
ATOM     14  C   SER A   5      16.676   6.917   1.254  1.00 32.88           C
ATOM     15  O   SER A   5      17.295   5.879   0.981  1.00 32.57           O
ATOM     16  CB  SER A   5      16.603   8.683  -0.488  1.00 39.48           C
ATOM     17  OG  SER A   5      16.893   7.668  -1.432  1.00 47.16           O
ATOM     18  N   GLY A   6      15.520   6.924   1.901  1.00 31.69           N
ATOM     19  CA  GLY A   6      14.811   5.694   2.191  1.00 32.41           C
ATOM     20  C   GLY A   6      15.257   5.112   3.511  1.00 29.00           C
ATOM      2  CA  GLN A  10      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  11      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  12      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  13      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  14      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  33      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  34      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  35      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  36      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  37      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  38      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  51      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  52      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  53      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  54      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  55      22.670  12.004   2.148  1.00 39.46           C
ATOM      2  CA  GLN A  56      22.670  12.004   2.148  1.00 39.46           C
"""

  with open("%s.pdb"%prefix, 'w') as f:
    f.write(pdb_str)
  cmd = " ".join([
      "phenix.pdbtools",
      "%s.pdb"%prefix,
      "keep='resname ALA'",
      "output.prefix=out_%s"%(prefix)])
  print(cmd)
  run_command(command=cmd, verbose=False)
  # assert os.path.isfile("out_%s_modified.pdb"%(prefix))
  with open("out_%s_modified.pdb"%(prefix), 'r') as f:
    pdb_new = f.read()
    assert pdb_new == """\
CRYST1   62.654   62.654   45.906  90.00  90.00  90.00 P 43 21 2
SCALE1      0.015961  0.000000  0.000000        0.00000
SCALE2      0.000000  0.015961  0.000000        0.00000
SCALE3      0.000000  0.000000  0.021784        0.00000
END
"""

def exercise_renumber_and_move_waters(prefix='exercise_renumber_and_move_waters'):
  pdb_str = """
ATOM     16  O   HOH A   2       5.131   5.251   5.823  0.60 10.00           O
ATOM     18  O   HOH AAFF4       1.132   5.963   7.065  1.00 15.00           O
ATOM     19  O   HOH A   4       4.132   9.963   7.800  0.50 15.00           O
TER
ATOM     60  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM     64  CB  LYS A  32       9.193   8.732  12.170  1.00 12.23           C
ATOM     74  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM     77  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
"""

  with open("%s.pdb"%prefix, 'w') as f:
    f.write(pdb_str)
  cmd = " ".join([
      "phenix.pdbtools",
      "%s.pdb"%prefix,
      "renumber_and_move_waters=True",
      "output.prefix=out_%s"%(prefix)])
  print(cmd)
  run_command(command=cmd, verbose=False)
  # assert os.path.isfile("out_%s_modified.pdb"%(prefix))
  with open("out_%s_modified.pdb"%(prefix), 'r') as f:
    pdb_new = f.read()
    assert pdb_new == """\
ATOM      1  CA  LYS A  32      10.574   8.177  11.768  1.00 11.49           C
ATOM      2  CB  LYS A  32       9.193   8.732  12.170  1.00 12.23           C
ATOM      3  CA  VAL A  33      11.708   5.617  14.332  1.00 11.42           C
ATOM      4  CB  VAL A  33      11.101   4.227  14.591  1.00 11.47           C
TER
ATOM      5  O   HOH A 100       5.131   5.251   5.823  0.60 10.00           O
ATOM      6  O   HOH A 101       1.132   5.963   7.065  1.00 15.00           O
ATOM      7  O   HOH A 102       4.132   9.963   7.800  0.50 15.00           O
END
"""

def exercise(args):
  exercise_average_alt_confs()
  exercise_flip_symmetric_amino_acids()
  exercise_switch_rotamers()
  exercise_mmcif_support_2()
  exercise_basic()
  exercise_multiple()
  exercise_no_cryst1()
  exercise_renumber_residues()
  exercise_change_of_basis()
  exercise_move_waters()
  exercise_remove_alt_confs()
  exercise_truncate_to_polyala()
  exercise_convert_met_to_semet()
  exercise_set_charge()
  exercise_neutralize_scatterers()
  exercise_remove_atoms()
  exercise_mmcif_support()
  exercise_segid_manipulations()
  exercise_result_is_empty()
  exercise_renumber_and_move_waters()
  print("OK")

if (__name__ == "__main__"):
  exercise(sys.argv[1:])


 *******************************************************************************
