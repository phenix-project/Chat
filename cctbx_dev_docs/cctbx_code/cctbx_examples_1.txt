

 *******************************************************************************
cctbx/examples/tst_structure_factor_derivatives_4.py
from __future__ import absolute_import, division, print_function
from cctbx import xray
from cctbx import miller
from cctbx.examples.structure_factor_derivatives_4 import structure_factors
from cctbx.examples.exp_i_alpha_derivatives import least_squares
from cctbx.array_family import flex
from cctbx.development import random_structure
from cctbx.development import debug_utils
from iotbx.kriber import strudat
from libtbx.test_utils import approx_equal
import libtbx.load_env
import random
from itertools import count
from six.moves import cStringIO as StringIO
import sys, os
from six.moves import range
from six.moves import zip

random.seed(0)
flex.set_random_seed(0)

def scatterer_as_list(self):
  if (self.flags.use_u_iso_only()):
    return list(self.site) + [self.u_iso, self.occupancy, self.fp, self.fdp]
  return list(self.site) + list(self.u_star) \
       + [self.occupancy, self.fp, self.fdp]

def scatterer_from_list(l):
  if (len(l) == 7):
    return xray.scatterer(
      site=l[:3],
      u=l[3],
      occupancy=l[4],
      scattering_type="?",
      fp=l[5],
      fdp=l[6])
  return xray.scatterer(
    site=l[:3],
    u=l[3:9],
    occupancy=l[9],
    scattering_type="?",
    fp=l[10],
    fdp=l[11])

def d_target_d_params_finite(d_order, f_obs, xray_structure, eps=1.e-8):
  assert d_order in [1,2]
  result = flex.double()
  scatterers = xray_structure.scatterers()
  site_symmetry_table = xray_structure.site_symmetry_table()
  xray_structure_eps = xray_structure.deep_copy_scatterers()
  scatterers_eps = xray_structure_eps.scatterers()
  for i_scatterer,scatterer in enumerate(scatterers):
    if (not site_symmetry_table.is_special_position(i_scatterer)):
      site_symmetry_ops = None
      if (not scatterer.flags.use_u_aniso()):
        ips = range(7)
      else:
        ips = range(12)
    else:
      site_symmetry_ops = site_symmetry_table.get(i_scatterer)
      site_constraints = site_symmetry_ops.site_constraints()
      ips = list(site_constraints.independent_indices)
      if (not scatterer.flags.use_u_aniso()):
        ips.extend(list(range(3,7)))
      else:
        adp_constraints = site_symmetry_ops.adp_constraints()
        ips.extend([i+3 for i in adp_constraints.independent_indices])
        ips.extend(list(range(9,12)))
    dx = []
    for ip in ips:
      vs = []
      for signed_eps in [eps, -eps]:
        si_eps = scatterer_as_list(scatterer)
        si_eps[ip] += signed_eps
        if (site_symmetry_ops is not None):
          if (ip < 3):
            all_params = site_constraints.all_params(
              independent_params=site_constraints.independent_params(
              all_params=si_eps[:3]))
            si_eps = list(all_params) + si_eps[3:]
          elif (scatterer.flags.use_u_aniso() and ip < 9):
            all_params = adp_constraints.all_params(
              independent_params=adp_constraints.independent_params(
                all_params=si_eps[3:9]))
            si_eps = si_eps[:3] + list(all_params) + si_eps[9:]
        scatterers_eps[i_scatterer] = scatterer_from_list(si_eps)
        scatterers_eps[i_scatterer].scattering_type = scatterer.scattering_type
        xray_structure_eps.re_apply_symmetry(i_scatterer)
        sf = structure_factors(
          xray_structure=xray_structure_eps, miller_set=f_obs)
        if (d_order == 1):
          sum_target_f = 0
          for obs,f in zip(f_obs.data(), sf.fs()):
            target = least_squares(obs=obs, calc=f)
            sum_target_f += target.f()
          vs.append(sum_target_f)
        else:
          dp = sf.d_target_d_params(f_obs=f_obs, target_type=least_squares)
          vs.append(dp)
      diff = (vs[0]-vs[1])/(2*eps)
      if (d_order == 1):
        result.append(diff)
      else:
        result.extend(diff)
    scatterers_eps[i_scatterer] = scatterer
  return result

def compare_analytical_and_finite(
      f_obs,
      xray_structure,
      gradients_should_be_zero,
      eps,
      out):
  grads_fin = d_target_d_params_finite(
    d_order=1, f_obs=f_obs, xray_structure=xray_structure)
  print("grads_fin:", list(grads_fin), file=out)
  sf = structure_factors(
    xray_structure=xray_structure, miller_set=f_obs)
  grads_ana = sf.d_target_d_params(f_obs=f_obs, target_type=least_squares)
  print("grads_ana:", list(grads_ana), file=out)
  if (gradients_should_be_zero):
    flex.compare_derivatives(grads_ana, flex.double(grads_ana.size(), 0), eps)
  else:
    flex.compare_derivatives(grads_ana, grads_fin, eps)
  curvs_fin = d_target_d_params_finite(
    d_order=2, f_obs=f_obs, xray_structure=xray_structure)
  print("curvs_fin:", list(curvs_fin), file=out)
  curvs_ana = sf.d2_target_d_params(f_obs=f_obs, target_type=least_squares)
  print("curvs_ana:", list(curvs_ana), file=out)
  flex.compare_derivatives(curvs_ana.as_1d(), curvs_fin, eps)
  assert curvs_ana.matrix_is_symmetric(relative_epsilon=1e-10)
  print(file=out)
  #
  for i_method,curvs_method in enumerate([
        sf.d2_target_d_params_diag,
        sf.d2_target_d_params_diag_cpp]):
    curvs_diag_ana = curvs_method(f_obs=f_obs, target_type=least_squares)
    if (i_method != 0):
      flex.compare_derivatives(grads_ana, curvs_diag_ana.grads, eps=1e-12)
      curvs_diag_ana = curvs_diag_ana.curvs
    assert curvs_diag_ana.size() == curvs_ana.focus()[0]
    flex.compare_derivatives(
      curvs_ana.matrix_diagonal().as_1d(), curvs_diag_ana, eps=1e-12)
  #
  if (gradients_should_be_zero):
    return flex.max(flex.abs(grads_fin))

def exercise(
      xray_structure,
      anomalous_flag,
      max_n_indices,
      out):
  xray_structure.show_summary(f=out).show_scatterers(f=out)
  miller_set = miller.build_set(
    crystal_symmetry=xray_structure,
    anomalous_flag=anomalous_flag,
    d_min=max(1, min(xray_structure.unit_cell().parameters()[:3])/2.5))
  n_indices = miller_set.indices().size()
  if (n_indices > max_n_indices):
    miller_set = miller_set.select(
      flex.random_size_t(size=max_n_indices) % n_indices)
  sf = structure_factors(
    xray_structure=xray_structure,
    miller_set=miller_set)
  f_calc = miller_set.structure_factors_from_scatterers(
    xray_structure=xray_structure,
    algorithm="direct",
    cos_sin_table=False).f_calc()
  f_calc.show_summary(f=out)
  assert approx_equal(sf.fs(), f_calc.data())
  f_obs = miller_set.array(data=flex.abs(sf.fs()))
  noise_fin = compare_analytical_and_finite(
    f_obs=f_obs,
    xray_structure=xray_structure,
    gradients_should_be_zero=True,
    eps=1.e-5,
    out=out)
  compare_analytical_and_finite(
    f_obs=f_obs.customized_copy(
      data=f_obs.data()*(flex.random_double(size=f_obs.size())+0.5)),
    xray_structure=xray_structure,
    gradients_should_be_zero=False,
    eps=max(1.e-5, noise_fin),
    out=out)

zeolite_edi = """\
*EDI
Code: EDI

P-4m2
 6.926 6.926 6.410 90.000 90.000 90.000
SI1 0.2680 0.0000 0.1184 4
SI2 0.0000 0.0000 0.5000 4
----------------------------------------
"""

def run_call_back(flags,
      space_group_info,
      max_n_indices=5,
      anomalous_flag=True):
  if (not flags.Verbose):
    out = StringIO()
  else:
    out = sys.stdout
  if (flags.chunk):
    chunk_n,chunk_i = [int(i) for i in flags.chunk.split(",")]
  else:
    chunk_n = 1
    chunk_i = 0
  if (flags.tag):
    if (flags.tag == "internal"):
      strudat_contents = strudat.read_all_entries(StringIO(zeolite_edi))
      strudat_entries = strudat_contents.entries
    else:
      atlas_file = libtbx.env.find_in_repositories(
        relative_path="phenix_regression/misc/strudat_zeolite_atlas",
        test=os.path.isfile)
      assert atlas_file is not None
      strudat_contents = strudat.read_all_entries(open(atlas_file))
      if (not isinstance(flags.tag, str)):
        strudat_entries = strudat_contents.entries
      else:
        strudat_entries = [strudat_contents.get(tag=flags.tag)]
        assert strudat_entries[0] is not None
  if (flags.isotropic):
    use_u_aniso_flags = [False]
  elif (flags.anisotropic):
    use_u_aniso_flags = [True]
  else:
    use_u_aniso_flags = [False, True]
  if (not flags.tag):
    for n_scatterers in range(2,3+1):
      for use_u_aniso in use_u_aniso_flags:
        xray_structure = random_structure.xray_structure(
          space_group_info=space_group_info,
          n_scatterers=n_scatterers,
          elements="random",
          volume_per_atom=100,
          general_positions_only=False,
          random_f_prime_d_min=1,
          random_f_double_prime=anomalous_flag,
          use_u_aniso = use_u_aniso,
          use_u_iso = not(use_u_aniso),
          random_u_iso=True,
          random_u_iso_scale=0.3,
          random_occupancy=True)
        exercise(
          xray_structure=xray_structure,
          anomalous_flag=anomalous_flag,
          max_n_indices=max_n_indices,
          out=out)
        out.flush()
  else:
    i_structure = count()
    for entry in strudat_entries:
      if (next(i_structure) % chunk_n != chunk_i): continue
      # XXX Not sure why this stderr output is necessary. Disabling to clean
      # up t96 output.
      # print >> sys.stderr, "strudat tag:", entry.tag
      # sys.stderr.flush()
      print("strudat tag:", entry.tag, file=out)
      out.flush()
      for use_u_aniso in use_u_aniso_flags:
        xray_structure = entry.as_xray_structure()
        xray_structure = random_structure.xray_structure(
          space_group_info=xray_structure.space_group_info(),
          unit_cell=xray_structure.unit_cell(),
          sites_frac=xray_structure.sites_frac(),
          elements="random",
          random_f_prime_d_min=1,
          random_f_double_prime=anomalous_flag,
          use_u_aniso = use_u_aniso,
          use_u_iso = not(use_u_aniso),
          random_u_iso=True,
          random_u_iso_scale=0.3,
          random_occupancy=True)
        exercise(
          xray_structure=xray_structure,
          anomalous_flag=anomalous_flag,
          max_n_indices=max_n_indices,
          out=out)
        out.flush()
  if (flags.tag):
    return False

def run(args):
  debug_utils.parse_options_loop_space_groups(args, run_call_back, (
    "chunk",
    "isotropic",
    "anisotropic",
    "tag"))

if (__name__ == "__main__"):
  run(sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
cctbx/examples/unit_cell_minimizers.py
from __future__ import absolute_import, division, print_function
from cctbx import uctbx
from cctbx.eltbx import wavelengths
from cctbx.array_family import flex
import scitbx.lbfgs
import scitbx.lbfgsb
import scitbx.minimizers
import libtbx.utils
import platform
import sys
from six.moves import range
from six.moves import zip

def residual(
      two_thetas_obs, miller_indices, wavelength, unit_cell):
  two_thetas_calc = unit_cell.two_theta(miller_indices, wavelength, deg=True)
  return flex.sum(flex.pow2(two_thetas_obs - two_thetas_calc))

def gradients(
      two_thetas_obs, miller_indices, wavelength, unit_cell, eps=1.e-6):
  result = flex.double()
  for i in range(6):
    rs = []
    for signed_eps in [eps, -eps]:
      params_eps = list(unit_cell.parameters())
      params_eps[i] += signed_eps
      rs.append(
        residual(
          two_thetas_obs, miller_indices, wavelength,
          uctbx.unit_cell(params_eps)))
    result.append((rs[0]-rs[1])/(2*eps))
  return result

def hessian(
      two_thetas_obs, miller_indices, wavelength, unit_cell, eps=1.e-6):
  result = flex.double()
  for i in range(6):
    rs = []
    for signed_eps in [eps, -eps]:
      params_eps = list(unit_cell.parameters())
      params_eps[i] += signed_eps
      rs.append(
        gradients(
          two_thetas_obs, miller_indices, wavelength,
          uctbx.unit_cell(params_eps)))
    result.extend((rs[0]-rs[1])/(2*eps))
  result.reshape(flex.grid(6,6))
  u = result.matrix_symmetric_as_packed_u(relative_epsilon=eps*10)
  return u.matrix_packed_u_as_symmetric()

class refinery:

  def __init__(self,
        two_thetas_obs, miller_indices, wavelength, unit_cell,
        mode):
    self.two_thetas_obs = two_thetas_obs
    self.miller_indices = miller_indices
    self.wavelength = wavelength
    #
    self.mode = mode
    self.number_of_gradient_evaluations = 0
    self.functionals = []
    if (mode < 2):
      self.plot_legend = "%d:newton_%s" % (mode, ["full", "diag"][mode])
      m = scitbx.minimizers.newton_more_thuente_1994(
        function=self, x0=flex.double(unit_cell.parameters()))
      m.show_statistics()
      self.x = m.x_star
    elif (mode < 7):
      diagco, use_hessian, lbfgs_impl_switch = [
        (0, 0, 0),
        (0, 0, 1),
        (1, 1, 0),
        (1, 1, 1),
        (2, 1, 1)][mode-2]
      self.plot_legend = "%d:lbfgs_d=%d_u=%d_l=%d" % (
        mode, diagco, use_hessian, lbfgs_impl_switch)
      print("plot_legend:", self.plot_legend)
      self.x = self.run_lbfgs_raw(
        unit_cell=unit_cell,
        diagco=diagco,
        use_hessian=use_hessian,
        lbfgs_impl_switch=lbfgs_impl_switch)
    elif (mode < 8):
      self.plot_legend = "%d:lbfgsb" % mode
      print("plot_legend:", self.plot_legend)
      self.x = self.run_lbfgsb(unit_cell=unit_cell)
    else:
      raise AssertionError("bad mode=%d" % mode)

  def unit_cell(self):
    return uctbx.unit_cell(iter(self.x))

  def functional(self, x):
    if (0):
      print("functional(): x =", list(x))
    if (flex.min(x[:3]) < 1):
      print("FunctionalException: small length")
      raise scitbx.minimizers.FunctionalException
    if (flex.min(x[3:]) < 50):
      print("FunctionalException: small angle")
      raise scitbx.minimizers.FunctionalException
    try:
      result = residual(
        self.two_thetas_obs, self.miller_indices, self.wavelength,
        unit_cell=uctbx.unit_cell(iter(x)))
    except KeyboardInterrupt: raise
    except Exception as e:
      print("FunctionalException:", str(e))
      raise scitbx.minimizers.FunctionalException
    if (len(self.functionals) != 0 and result > 2 * self.functionals[0]):
      print("FunctionalException: greater than 2 * initial")
      raise scitbx.minimizers.FunctionalException
    if (0):
      print("functional result:", result)
    self.functionals.append(result)
    return result

  def gradients(self, x):
    self.number_of_gradient_evaluations += 1
    return gradients(
      self.two_thetas_obs, self.miller_indices, self.wavelength,
      unit_cell=uctbx.unit_cell(iter(x)))

  def hessian(self, x):
    result = hessian(
      self.two_thetas_obs, self.miller_indices, self.wavelength,
      unit_cell=uctbx.unit_cell(iter(x)))
    if (self.mode == 1):
      d = result.matrix_diagonal()
      result = flex.double(flex.grid(6,6), 0)
      result.matrix_diagonal_set_in_place(diagonal=d)
    if (0):
      from scitbx import matrix
      print("hessian:")
      print(matrix.sqr(result))
    return result

  def run_lbfgs_raw(self,
        unit_cell,
        diagco,
        use_hessian,
        lbfgs_impl_switch):
    assert use_hessian in [0,1,2]
    n = 6
    m = 5
    x = flex.double(unit_cell.parameters())
    x_last = x.deep_copy()
    diag = flex.double(n, 0)
    iprint = [1, 0]
    eps = 1.0e-5
    xtol = 1.0e-16
    size_w = n*(2*m+1)+2*m
    w = flex.double(size_w)
    def diag_from_hessian():
      h = self.hessian(x)
      d = h.matrix_diagonal()
      assert d.all_gt(0)
      return 1/d
    iflag = 0
    while True:
      assert iflag in [0,1,2,100]
      if (iflag in [0,1]):
        try: f = self.functional(x=x)
        except scitbx.minimizers.FunctionalException: return x_last
        x_last = x.deep_copy()
        g = self.gradients(x=x)
      if (iflag == 0):
        if (diagco == 0):
          diag = flex.double(n, 0)
        elif (use_hessian == 0):
          diag = flex.double(n, 1)
        else:
          diag = diag_from_hessian()
          if (use_hessian == 1):
            diag0 = diag.deep_copy()
      elif (iflag == 2):
        if (use_hessian == 0):
          diag = flex.double(n, 1)
        elif (use_hessian == 1):
          diag = diag0.deep_copy()
        else:
          diag = diag_from_hessian()
      iflag = [scitbx.lbfgs.raw_reference,
               scitbx.lbfgs.raw][lbfgs_impl_switch](
        n=n, m=m, x=x, f=f, g=g, diagco=diagco, diag=diag,
        iprint=iprint, eps=eps, xtol=xtol, w=w, iflag=iflag)
      if (iflag <= 0): break
    return x

  def run_lbfgsb(self, unit_cell, iprint=1):
    l = flex.double([1,1,1,50,50,50])
    u = flex.double(6, 0)
    nbd = flex.int(6, 1) # all x have lower bound
    minimizer = scitbx.lbfgsb.minimizer(
      n=6,
      m=5,
      l=l,
      u=u,
      nbd=nbd,
      factr=1.0e+7,
      pgtol=1.0e-5,
      iprint=iprint)
    x = flex.double(unit_cell.parameters())
    f = 0
    g = flex.double(6, 0)
    while True:
      if (minimizer.process(x, f, g)):
        f = self.functional(x=x)
        g = self.gradients(x=x)
      elif (minimizer.is_terminated()):
        break
    return x

def show_fit(two_thetas_obs, miller_indices, wavelength, unit_cell):
  two_thetas_calc = unit_cell.two_theta(miller_indices, wavelength, deg=True)
  for h,o,c in zip(miller_indices, two_thetas_obs, two_thetas_calc):
    print("(%2d, %2d, %2d)" % h, "%6.2f - %6.2f = %6.2f" % (o, c, o-c))
  print()

two_theta_and_index_list = """\
  8.81   0  1  1
 12.23   0  0  2
 12.71   0  2  0
 12.97   1  1  0
 13.79   0  1  2
 14.11   0  2  1
 14.35   1  1  1
 16.68   1  0  2
 17.03   1  2  0
 17.67   0  2  2
 17.86   1  1  2
 19.47   0  1  3
 21.03   1  2  2
 22.26   1  3  0
 22.41   0  2  3
 22.56   1  1  3
 22.72   2  0  0
 23.10   1  3  1
 24.40   2  1  1
 24.60   0  0  4
 25.17   1  2  3
 25.43   0  1  4
 25.87   2  0  2
 26.11   2  2  0
 26.32   0  4  1
 26.66   2  1  2
 26.84   2  2  1
 27.15   1  0  4
 27.78   0  2  4
 27.90   1  1  4
 28.44   0  4  2
 28.72   1  4  1
 28.92   2  2  2
 29.02   1  3  3
 30.08   2  1  3
 30.49   2  3  1
 30.69   1  4  2
 31.34   0  3  4
 31.56   0  1  5
 32.12   2  2  3
""".splitlines()

def run(args):
  two_thetas_obs = flex.double()
  miller_indices = flex.miller_index()
  for line in two_theta_and_index_list:
    fields = line.split()
    assert len(fields) == 4
    two_thetas_obs.append(float(fields[0]))
    miller_indices.append([int(s) for s in fields[1:]])

  wavelength = wavelengths.characteristic("CU").as_angstrom()
  unit_cell_start = uctbx.unit_cell((10,10,10,80,100,80))
  show_fit(
    two_thetas_obs, miller_indices, wavelength, unit_cell_start)

  refined_accu = []
  assert len(args) in [0,1]
  if (len(args) != 0):
    arg = args[0]
    if (arg.find(",") > 0):
      modes = eval("["+arg+"]")
    elif (arg.find(":") > 0):
      modes = eval("range("+arg.replace(":",",")+"+1)")
    else:
      modes = [eval(arg)]
  else:
    modes = list(range(8))
  print("modes:", modes)
  print()
  for mode in modes:
    refined = refinery(
      two_thetas_obs, miller_indices, wavelength, unit_cell_start, mode=mode)
    refined_accu.append(refined)
    print()

  p = open("tmp.xy", "w")
  print("@with g0", file=p)
  print('@ title "%s"' % "\\n".join([
    platform.platform(),
    platform.node()]), file=p)
  for i,r in enumerate(refined_accu):
    print('@ s%d legend "%s"' % (i, r.plot_legend), file=p)
    print('@ s%d symbol 1' % i, file=p)
  for refined in refined_accu:
    for x,y in enumerate(refined.functionals):
      if (x > 15): break
      print(x,y, file=p)
    print("&", file=p)
  del p

  if (0):
    show_fit(
      two_thetas_obs, miller_indices, wavelength, refined.unit_cell())

  print(refined.unit_cell())
  print()
  print(libtbx.utils.format_cpu_times())

if (__name__ == "__main__"):
  run(args=sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
cctbx/examples/unit_cell_refinement.py
from __future__ import absolute_import, division, print_function
from six.moves import range
from six.moves import zip
two_theta_and_index_list = """\
  8.81   0  1  1
 12.23   0  0  2
 12.71   0  2  0
 12.97   1  1  0
 13.79   0  1  2
 14.11   0  2  1
 14.35   1  1  1
 16.68   1  0  2
 17.03   1  2  0
 17.67   0  2  2
 17.86   1  1  2
 19.47   0  1  3
 21.03   1  2  2
 22.26   1  3  0
 22.41   0  2  3
 22.56   1  1  3
 22.72   2  0  0
 23.10   1  3  1
 24.40   2  1  1
 24.60   0  0  4
 25.17   1  2  3
 25.43   0  1  4
 25.87   2  0  2
 26.11   2  2  0
 26.32   0  4  1
 26.66   2  1  2
 26.84   2  2  1
 27.15   1  0  4
 27.78   0  2  4
 27.90   1  1  4
 28.44   0  4  2
 28.72   1  4  1
 28.92   2  2  2
 29.02   1  3  3
 30.08   2  1  3
 30.49   2  3  1
 30.69   1  4  2
 31.34   0  3  4
 31.56   0  1  5
 32.12   2  2  3
""".splitlines()

from cctbx import uctbx
from cctbx.eltbx import wavelengths
from cctbx.array_family import flex
import scitbx.lbfgs
import libtbx.utils

def residual(
      two_thetas_obs, miller_indices, wavelength, unit_cell):
  two_thetas_calc = unit_cell.two_theta(miller_indices, wavelength, deg=True)
  return flex.sum(flex.pow2(two_thetas_obs - two_thetas_calc))

def gradients(
      two_thetas_obs, miller_indices, wavelength, unit_cell, eps=1.e-6):
  result = flex.double()
  for i in range(6):
    rs = []
    for signed_eps in [eps, -eps]:
      params_eps = list(unit_cell.parameters())
      params_eps[i] += signed_eps
      rs.append(
        residual(
          two_thetas_obs, miller_indices, wavelength,
          uctbx.unit_cell(params_eps)))
    result.append((rs[0]-rs[1])/(2*eps))
  return result

class refinery:

  def __init__(self, two_thetas_obs, miller_indices, wavelength, unit_cell):
    self.two_thetas_obs = two_thetas_obs
    self.miller_indices = miller_indices
    self.wavelength = wavelength
    self.x = flex.double(unit_cell.parameters())
    scitbx.lbfgs.run(target_evaluator=self)

  def unit_cell(self):
    return uctbx.unit_cell(iter(self.x))

  def compute_functional_and_gradients(self):
    unit_cell = self.unit_cell()
    f = residual(
      self.two_thetas_obs, self.miller_indices, self.wavelength, unit_cell)
    g = gradients(
      self.two_thetas_obs, self.miller_indices, self.wavelength, unit_cell)
    print("functional: %12.6g" % f, "gradient norm: %12.6g" % g.norm())
    return f, g

  def callback_after_step(self, minimizer):
    print("LBFGS step")

def show_fit(two_thetas_obs, miller_indices, wavelength, unit_cell):
  two_thetas_calc = unit_cell.two_theta(miller_indices, wavelength, deg=True)
  for h,o,c in zip(miller_indices, two_thetas_obs, two_thetas_calc):
    print("(%2d, %2d, %2d)" % h, "%6.2f - %6.2f = %6.2f" % (o, c, o-c))
  print()

def run():
  two_thetas_obs = flex.double()
  miller_indices = flex.miller_index()
  for line in two_theta_and_index_list:
    fields = line.split()
    assert len(fields) == 4
    two_thetas_obs.append(float(fields[0]))
    miller_indices.append([int(s) for s in fields[1:]])

  wavelength = wavelengths.characteristic("CU").as_angstrom()
  unit_cell_start = uctbx.unit_cell((10,10,10,90,90,90))
  show_fit(
    two_thetas_obs, miller_indices, wavelength, unit_cell_start)

  refined = refinery(
    two_thetas_obs, miller_indices, wavelength, unit_cell_start)
  print()

  show_fit(
    two_thetas_obs, miller_indices, wavelength, refined.unit_cell())

  print(refined.unit_cell())
  print()
  print(libtbx.utils.format_cpu_times())

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
cctbx/examples/view_fft_map.py
"""
Loads the file map_coeff.pickle (see random_f_calc.py) and displays
the FFT map based on these coefficients in PyMOL. Also computes
and displays a list of peaks in the map.

Usage:

Setup the cctbx environment (e.g. source setpaths.csh) and
launch PyMOL from the command line. Inside PyMOL enter:

run view_fft_map.py
show_fft()
"""
from __future__ import absolute_import, division, print_function
from six.moves import range
from six.moves import zip

print("Loading module:", __name__)

# cctbx imports
from cctbx import maptbx
from libtbx import easy_pickle

# PyMOL imports
from chempy.map import Map
from pymol import cmd
from pymol import cgo

def show_map(unit_cell, map_covering_unit_cell, label, level):
  map_grid = map_covering_unit_cell.focus()
  print("map_grid:", map_grid)
  ucell_params = unit_cell.parameters()
  first = [0,0,0]
  last = [map_grid[i] + 1 for i in range(3)]
  c_obj_map = maptbx.as_CObjectZYX(
    map_unit_cell=map_covering_unit_cell,
    first=first,
    last=last,
    apply_sigma_scaling=True)
  map=Map()
  map.from_c_object(c_obj_map,'CObjectZYXfloat',
                    ucell_params[0:3], ucell_params[3:6],
                    list(map_grid), first, last)
  cmd.load_map(map, label+"_cell")
  print("map loaded into PyMol")
  cmd.isomesh(label+"_con", label+"_cell", level) # create mesh
  cmd.color('gray', label+"_cell") # color wire frame
  cmd.set('auto_zoom', '0')    # disable zooming
  cmd.set('ortho', '1')        # orthoscopic projects
  cmd.enable(label+"_cell") # put box around map object
  cmd.color('cyan', label+"_con")   # color mesh

def show_peaks(unit_cell, clusters, radius=2.0):
  go = []
  go.extend([cgo.COLOR, 1, 0, 0,])
  height0 = None
  for site,height in zip(clusters.sites(), clusters.heights()):
    print("%8.5f %8.5f %8.5f" % site, height)
    if (height0 == None): height0 = height
    go.extend(  [cgo.SPHERE]
              + list(unit_cell.orthogonalize(site))
              + [radius*height/height0])
  cmd.load_cgo(go, "peaks")

def show_fft(file="map_coeff.pickle", map_level=3.0):
  cmd.delete("all")
  map_coeff = easy_pickle.load(file)
  map_coeff.show_summary()
  fft_map = map_coeff.fft_map(
    symmetry_flags=maptbx.use_space_group_symmetry)
  print("map gridding:", fft_map.n_real())
  show_map(fft_map.unit_cell(), fft_map.real_map(), "fft_map", map_level)
  clusters = fft_map.tags().peak_search(
    parameters=maptbx.peak_search_parameters(
      min_distance_sym_equiv=3.0,
      max_clusters=10),
    map=fft_map.real_map()).all()
  show_peaks(fft_map.unit_cell(), clusters)
  cmd.zoom('all', 15.0) # zoom with additional border of 15 Ang.
  print()

if (__name__ == "pymol"):
  cmd.extend("show_fft", show_fft)


 *******************************************************************************
