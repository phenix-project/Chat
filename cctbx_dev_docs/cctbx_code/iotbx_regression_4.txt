

 *******************************************************************************
iotbx/regression/tst_pdb_as_fasta.py
from __future__ import absolute_import, division, print_function
from libtbx.test_utils import show_diff

def exercise():
  from iotbx.command_line import pdb_as_fasta
  pdb_str = """\
ATOM      2  CA  GLY A   3      -9.052   4.207   4.651  1.00 16.57           C
ATOM      6  CA  ASN A   4      -6.522   2.038   2.831  1.00 14.10           C
ATOM     14  CA  ASN A   5      -3.193   1.904   4.589  1.00 11.74           C
ATOM     22  CA  GLN A   6       0.384   1.888   3.199  1.00 10.53           C
ATOM     22  CA  ALA A   6A      0.384   1.888   3.199  1.00 10.53           C
ATOM     22  CA  GLY A   6B      0.384   1.888   3.199  1.00 10.53           C
ATOM     31  CA  GLN A   7       3.270   2.361   5.640  1.00 11.39           C
ATOM     40  CA  ASN A   8       6.831   2.310   4.318  1.00 12.30           C
ATOM     48  CA  PTR A   9       9.159   2.144   7.299  1.00 15.18           C
TER
ATOM     50  O   HOH     1       0.000   0.000   0.000  1.0  20.0            O
END"""
  pdb_str_2 = """\
ATOM      2  CA  GLY A   1      -9.052   4.207   4.651  1.00 16.57           C
ATOM      6  CA  ASN A   2      -6.522   2.038   2.831  1.00 14.10           C
ATOM     14  CA  MSE A   3      -3.193   1.904   4.589  1.00 11.74           C
ATOM     22  CA  GLN A   4       0.384   1.888   3.199  1.00 10.53           C
TER
ATOM     22  P   G  BB  83       0.000   0.000   0.000  1.00 10.53           P
ATOM     22  P   A  BB  84       0.000   0.000   0.000  1.00 10.53           P
ATOM     22  P   C  BB  87       0.000   0.000   0.000  1.00 10.53           P
ATOM     22  P   U  BB  88       0.000   0.000   0.000  1.00 10.53           P
TER
ATOM     90  O   HOH X   1       0.000   0.000   0.000  1.00 20.00           0
END
"""
  with open("tst_pdb_as_fasta1.pdb", "w") as f:
    f.write(pdb_str)
  with open("tst_pdb_as_fasta2.pdb", "w") as f:
    f.write(pdb_str_2)
  params = pdb_as_fasta.master_phil.fetch().extract()
  params.pdb_as_fasta.file_name.extend(["tst_pdb_as_fasta1.pdb", "tst_pdb_as_fasta2.pdb"])
  of = pdb_as_fasta.run(params=params)
  with open(of) as f:
    seq_in = f.read()
  assert not show_diff(seq_in, """\
>tst_pdb_as_fasta1 chain ' A'
XXGNNQAGQNY
>tst_pdb_as_fasta2 chain ' A'
GNMQ
>tst_pdb_as_fasta2 chain 'BB'
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXGAXXCU""")
  params.pdb_as_fasta.pad_missing_residues=False
  of = pdb_as_fasta.run(params=params)
  with open(of) as f:
    seq_in = f.read()
  assert not show_diff(seq_in, """\
>tst_pdb_as_fasta1 chain ' A'
GNNQAGQNY
>tst_pdb_as_fasta2 chain ' A'
GNMQ
>tst_pdb_as_fasta2 chain 'BB'
GACU""")
  params.pdb_as_fasta.include_insertion_residues = False
  of = pdb_as_fasta.run(params=params)
  with open(of) as f:
    seq_in = f.read()
  assert not show_diff(seq_in, """\
>tst_pdb_as_fasta1 chain ' A'
GNNQQNY
>tst_pdb_as_fasta2 chain ' A'
GNMQ
>tst_pdb_as_fasta2 chain 'BB'
GACU""")
  params.pdb_as_fasta.pad_missing_residues = True
  params.pdb_as_fasta.include_insertion_residues = True
  params.pdb_as_fasta.ignore_missing_residues_at_start = True
  of = pdb_as_fasta.run(params=params)
  with open(of) as f:
    seq_in = f.read()
  assert not show_diff(seq_in, """\
>tst_pdb_as_fasta1 chain ' A'
GNNQAGQNY
>tst_pdb_as_fasta2 chain ' A'
GNMQ
>tst_pdb_as_fasta2 chain 'BB'
GAXXCU""")

if (__name__ == "__main__"):
  exercise()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_pdb_cif_cells.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb

#
# Example from PDB ID 7c9c
#

t_pdb_str = """\
CRYST1    1.000    1.000    1.000  90.00  90.00  90.00 P 1
ORIGX1      1.000000  0.000000  0.000000        0.00000
ORIGX2      0.000000  1.000000  0.000000        0.00000
ORIGX3      0.000000  0.000000  1.000000        0.00000
SCALE1      1.000000  0.000000  0.000000        0.00000
SCALE2      0.000000  1.000000  0.000000        0.00000
SCALE3      0.000000  0.000000  1.000000        0.00000
ATOM      1  P    DT D   1     166.659 153.609 135.182  1.00 61.01           P
ATOM      2  OP1  DT D   1     166.715 152.154 135.422  1.00 61.01           O
ATOM      3  OP2  DT D   1     166.269 154.124 133.851  1.00 61.01           O
ATOM      4  O5'  DT D   1     165.696 154.272 136.272  1.00 61.01           O
ATOM      5  C5'  DT D   1     166.016 154.187 137.657  1.00 61.01           C
ATOM      6  C4'  DT D   1     166.635 155.480 138.154  1.00 61.01           C
ATOM      7  O4'  DT D   1     165.721 156.583 137.917  1.00 61.01           O
ATOM      8  C3'  DT D   1     166.950 155.515 139.650  1.00 61.01           C
ATOM      9  O3'  DT D   1     168.189 156.162 139.861  1.00 61.01           O
ATOM     10  C2'  DT D   1     165.801 156.336 140.211  1.00 61.01           C
ATOM     11  C1'  DT D   1     165.600 157.334 139.096  1.00 61.01           C
ATOM     12  N1   DT D   1     164.274 157.975 139.127  1.00 61.01           N
ATOM     13  C2   DT D   1     164.180 159.327 138.934  1.00 61.01           C
ATOM     14  O2   DT D   1     165.141 160.036 138.720  1.00 61.01           O
ATOM     15  N3   DT D   1     162.912 159.825 138.994  1.00 61.01           N
ATOM     16  C4   DT D   1     161.753 159.119 139.229  1.00 61.01           C
ATOM     17  O4   DT D   1     160.654 159.657 139.264  1.00 61.01           O
ATOM     18  C5   DT D   1     161.924 157.705 139.429  1.00 61.01           C
ATOM     19  C7   DT D   1     160.735 156.834 139.691  1.00 61.01           C
ATOM     20  C6   DT D   1     163.163 157.207 139.374  1.00 61.01           C
ATOM     21  P    DT D   2     168.926 156.085 141.287  1.00 56.21           P
ATOM     22  OP1  DT D   2     170.334 155.745 141.021  1.00 56.21           O
ATOM     23  OP2  DT D   2     168.132 155.242 142.199  1.00 56.21           O
ATOM     24  O5'  DT D   2     168.871 157.586 141.817  1.00 56.21           O
ATOM     25  C5'  DT D   2     169.222 158.639 140.942  1.00 56.21           C
ATOM     26  C4'  DT D   2     168.956 159.998 141.561  1.00 56.21           C
ATOM     27  O4'  DT D   2     167.552 160.326 141.452  1.00 56.21           O
ATOM     28  C3'  DT D   2     169.313 160.123 143.038  1.00 56.21           C
ATOM     29  O3'  DT D   2     170.046 161.312 143.239  1.00 56.21           O
ATOM     30  C2'  DT D   2     167.950 160.183 143.722  1.00 56.21           C
ATOM     31  C1'  DT D   2     167.118 160.874 142.665  1.00 56.21           C
ATOM     32  N1   DT D   2     165.663 160.625 142.790  1.00 56.21           N
ATOM     33  C2   DT D   2     164.787 161.668 142.631  1.00 56.21           C
ATOM     34  O2   DT D   2     165.142 162.807 142.394  1.00 56.21           O
ATOM     35  N3   DT D   2     163.471 161.332 142.759  1.00 56.21           N
ATOM     36  C4   DT D   2     162.955 160.085 143.024  1.00 56.21           C
ATOM     37  O4   DT D   2     161.753 159.880 143.123  1.00 56.21           O
ATOM     38  C5   DT D   2     163.923 159.037 143.179  1.00 56.21           C
ATOM     39  C7   DT D   2     163.475 157.639 143.468  1.00 56.21           C
ATOM     40  C6   DT D   2     165.218 159.353 143.056  1.00 56.21           C
"""
t_cif_str = """\
data_7C9C
_cell.angle_alpha                  90.00
_cell.angle_alpha_esd              ?
_cell.angle_beta                   90.00
_cell.angle_beta_esd               ?
_cell.angle_gamma                  90.00
_cell.angle_gamma_esd              ?
_cell.entry_id                     7C9C
_cell.details                      ?
_cell.formula_units_Z              ?
_cell.length_a                     1.00
_cell.length_a_esd                 ?
_cell.length_b                     1.00
_cell.length_b_esd                 ?
_cell.length_c                     1.00
_cell.length_c_esd                 ?
_cell.volume                       ?
_cell.volume_esd                   ?
_cell.Z_PDB                        ?
#
_symmetry.entry_id                         7C9C
_symmetry.cell_setting                     ?
_symmetry.Int_Tables_number                1
_symmetry.space_group_name_Hall            ?
_symmetry.space_group_name_H-M             'P 1'
_symmetry.pdbx_full_space_group_name_H-M   ?
#

loop_
_atom_site.group_PDB
_atom_site.id
_atom_site.type_symbol
_atom_site.label_atom_id
_atom_site.label_alt_id
_atom_site.label_comp_id
_atom_site.label_asym_id
_atom_site.label_entity_id
_atom_site.label_seq_id
_atom_site.pdbx_PDB_ins_code
_atom_site.Cartn_x
_atom_site.Cartn_y
_atom_site.Cartn_z
_atom_site.occupancy
_atom_site.B_iso_or_equiv
_atom_site.pdbx_formal_charge
_atom_site.auth_seq_id
_atom_site.auth_comp_id
_atom_site.auth_asym_id
_atom_site.auth_atom_id
_atom_site.pdbx_PDB_model_num
ATOM   1    P  P     . DT  A 1 1   ? 166.659 153.609 135.182 1.00 61.01  ? 1   DT  D P     1
ATOM   2    O  OP1   . DT  A 1 1   ? 166.715 152.154 135.422 1.00 61.01  ? 1   DT  D OP1   1
ATOM   3    O  OP2   . DT  A 1 1   ? 166.269 154.124 133.851 1.00 61.01  ? 1   DT  D OP2   1
ATOM   4    O  "O5'" . DT  A 1 1   ? 165.696 154.272 136.272 1.00 61.01  ? 1   DT  D "O5'" 1
ATOM   5    C  "C5'" . DT  A 1 1   ? 166.016 154.187 137.657 1.00 61.01  ? 1   DT  D "C5'" 1
ATOM   6    C  "C4'" . DT  A 1 1   ? 166.635 155.480 138.154 1.00 61.01  ? 1   DT  D "C4'" 1
ATOM   7    O  "O4'" . DT  A 1 1   ? 165.721 156.583 137.917 1.00 61.01  ? 1   DT  D "O4'" 1
ATOM   8    C  "C3'" . DT  A 1 1   ? 166.950 155.515 139.650 1.00 61.01  ? 1   DT  D "C3'" 1
ATOM   9    O  "O3'" . DT  A 1 1   ? 168.189 156.162 139.861 1.00 61.01  ? 1   DT  D "O3'" 1
ATOM   10   C  "C2'" . DT  A 1 1   ? 165.801 156.336 140.211 1.00 61.01  ? 1   DT  D "C2'" 1
ATOM   11   C  "C1'" . DT  A 1 1   ? 165.600 157.334 139.096 1.00 61.01  ? 1   DT  D "C1'" 1
ATOM   12   N  N1    . DT  A 1 1   ? 164.274 157.975 139.127 1.00 61.01  ? 1   DT  D N1    1
ATOM   13   C  C2    . DT  A 1 1   ? 164.180 159.327 138.934 1.00 61.01  ? 1   DT  D C2    1
ATOM   14   O  O2    . DT  A 1 1   ? 165.141 160.036 138.720 1.00 61.01  ? 1   DT  D O2    1
ATOM   15   N  N3    . DT  A 1 1   ? 162.912 159.825 138.994 1.00 61.01  ? 1   DT  D N3    1
ATOM   16   C  C4    . DT  A 1 1   ? 161.753 159.119 139.229 1.00 61.01  ? 1   DT  D C4    1
ATOM   17   O  O4    . DT  A 1 1   ? 160.654 159.657 139.264 1.00 61.01  ? 1   DT  D O4    1
ATOM   18   C  C5    . DT  A 1 1   ? 161.924 157.705 139.429 1.00 61.01  ? 1   DT  D C5    1
ATOM   19   C  C7    . DT  A 1 1   ? 160.735 156.834 139.691 1.00 61.01  ? 1   DT  D C7    1
ATOM   20   C  C6    . DT  A 1 1   ? 163.163 157.207 139.374 1.00 61.01  ? 1   DT  D C6    1
ATOM   21   P  P     . DT  A 1 2   ? 168.926 156.085 141.287 1.00 56.21  ? 2   DT  D P     1
ATOM   22   O  OP1   . DT  A 1 2   ? 170.334 155.745 141.021 1.00 56.21  ? 2   DT  D OP1   1
ATOM   23   O  OP2   . DT  A 1 2   ? 168.132 155.242 142.199 1.00 56.21  ? 2   DT  D OP2   1
ATOM   24   O  "O5'" . DT  A 1 2   ? 168.871 157.586 141.817 1.00 56.21  ? 2   DT  D "O5'" 1
ATOM   25   C  "C5'" . DT  A 1 2   ? 169.222 158.639 140.942 1.00 56.21  ? 2   DT  D "C5'" 1
ATOM   26   C  "C4'" . DT  A 1 2   ? 168.956 159.998 141.561 1.00 56.21  ? 2   DT  D "C4'" 1
ATOM   27   O  "O4'" . DT  A 1 2   ? 167.552 160.326 141.452 1.00 56.21  ? 2   DT  D "O4'" 1
ATOM   28   C  "C3'" . DT  A 1 2   ? 169.313 160.123 143.038 1.00 56.21  ? 2   DT  D "C3'" 1
ATOM   29   O  "O3'" . DT  A 1 2   ? 170.046 161.312 143.239 1.00 56.21  ? 2   DT  D "O3'" 1
ATOM   30   C  "C2'" . DT  A 1 2   ? 167.950 160.183 143.722 1.00 56.21  ? 2   DT  D "C2'" 1
ATOM   31   C  "C1'" . DT  A 1 2   ? 167.118 160.874 142.665 1.00 56.21  ? 2   DT  D "C1'" 1
ATOM   32   N  N1    . DT  A 1 2   ? 165.663 160.625 142.790 1.00 56.21  ? 2   DT  D N1    1
ATOM   33   C  C2    . DT  A 1 2   ? 164.787 161.668 142.631 1.00 56.21  ? 2   DT  D C2    1
ATOM   34   O  O2    . DT  A 1 2   ? 165.142 162.807 142.394 1.00 56.21  ? 2   DT  D O2    1
ATOM   35   N  N3    . DT  A 1 2   ? 163.471 161.332 142.759 1.00 56.21  ? 2   DT  D N3    1
ATOM   36   C  C4    . DT  A 1 2   ? 162.955 160.085 143.024 1.00 56.21  ? 2   DT  D C4    1
ATOM   37   O  O4    . DT  A 1 2   ? 161.753 159.880 143.123 1.00 56.21  ? 2   DT  D O4    1
ATOM   38   C  C5    . DT  A 1 2   ? 163.923 159.037 143.179 1.00 56.21  ? 2   DT  D C5    1
ATOM   39   C  C7    . DT  A 1 2   ? 163.475 157.639 143.468 1.00 56.21  ? 2   DT  D C7    1
ATOM   40   C  C6    . DT  A 1 2   ? 165.218 159.353 143.056 1.00 56.21  ? 2   DT  D C6    1
"""

def exercise():
  pdb_inp = iotbx.pdb.input(lines=t_pdb_str, source_info=None)
  cif_inp = iotbx.pdb.input(lines=t_cif_str, source_info=None)
  pdb_cs = pdb_inp.crystal_symmetry()
  cif_cs = cif_inp.crystal_symmetry()
  # print(pdb_cs.unit_cell())
  # print(cif_cs.unit_cell())
  assert pdb_cs.unit_cell() == cif_cs.unit_cell()

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_pdb_cif_inputs.py
from __future__ import absolute_import, division, print_function
import sys
import iotbx.pdb
from iotbx.pdb.mmcif import cif_input
import inspect
import six

t_pdb_str = """\
ATOM      1  N   ALA     2       1.643  -2.366  -1.408  1.00
ATOM      3  CA  ALA     2       1.280  -3.608  -2.069  1.00
ATOM      6  CB  ALA     2       1.361  -4.762  -1.068  1.00
ATOM     10  C   ALA     2      -0.114  -3.466  -2.684  1.00
ATOM     11  O   ALA     2      -0.327  -3.827  -3.840  1.00
"""
t_cif_str = """\
data_1UCS
#
loop_
_atom_site.group_PDB
_atom_site.id
_atom_site.type_symbol
_atom_site.label_atom_id
_atom_site.label_alt_id
_atom_site.label_comp_id
_atom_site.label_asym_id
_atom_site.label_entity_id
_atom_site.label_seq_id
_atom_site.pdbx_PDB_ins_code
_atom_site.Cartn_x
_atom_site.Cartn_y
_atom_site.Cartn_z
_atom_site.occupancy
_atom_site.B_iso_or_equiv
_atom_site.pdbx_formal_charge
_atom_site.auth_seq_id
_atom_site.auth_comp_id
_atom_site.auth_asym_id
_atom_site.auth_atom_id
_atom_site.pdbx_PDB_model_num
ATOM   1    N N    . ASN A 1 1  ? 12.388 -5.203 29.298 1.00 13.23 ? 1   ASN A N    1
ATOM   2    C CA   . ASN A 1 1  ? 12.398 -3.931 28.500 1.00 6.85  ? 1   ASN A CA   1
ATOM   3    C C    A ASN A 1 1  ? 12.384 -4.463 27.091 0.45 6.81  ? 1   ASN A C    1
ATOM   4    C C    B ASN A 1 1  ? 12.891 -4.205 27.064 0.55 9.54  ? 1   ASN A C    1
ATOM   5    O O    A ASN A 1 1  ? 12.645 -5.635 26.750 0.45 8.28  ? 1   ASN A O    1
ATOM   6    O O    B ASN A 1 1  ? 14.004 -4.638 26.750 0.55 12.04 ? 1   ASN A O    1
ATOM   7    C CB   . ASN A 1 1  ? 13.493 -3.033 29.043 1.00 7.32  ? 1   ASN A CB   1
ATOM   8    C CG   . ASN A 1 1  ? 13.414 -1.559 28.658 1.00 7.93  ? 1   ASN A CG   1
ATOM   9    O OD1  . ASN A 1 1  ? 14.388 -0.782 28.842 1.00 10.99 ? 1   ASN A OD1  1
ATOM   10   N ND2  . ASN A 1 1  ? 12.315 -1.201 28.134 1.00 11.12 ? 1   ASN A ND2  1
ATOM   11   H H1   . ASN A 1 1  ? 11.748 -5.740 28.993 1.00 19.85 ? 1   ASN A H1   1
ATOM   12   H H2   . ASN A 1 1  ? 12.235 -5.016 30.155 1.00 19.85 ? 1   ASN A H2   1
ATOM   13   H H3   . ASN A 1 1  ? 13.177 -5.609 29.220 1.00 19.85 ? 1   ASN A H3   1
ATOM   14   H HA   . ASN A 1 1  ? 11.542 -3.479 28.654 1.00 8.22  ? 1   ASN A HA   1
ATOM   15   H HB2  . ASN A 1 1  ? 13.482 -3.094 30.011 1.00 8.78  ? 1   ASN A HB2  1
ATOM   16   H HB3  . ASN A 1 1  ? 14.347 -3.380 28.741 1.00 8.78  ? 1   ASN A HB3  1
ATOM   17   H HD21 . ASN A 1 1  ? 12.204 -0.386 27.881 1.00 13.35 ? 1   ASN A HD21 1
ATOM   18   H HD22 . ASN A 1 1  ? 11.681 -1.773 28.031 1.00 13.35 ? 1   ASN A HD22 1
"""

def get_pdb_inp_functions(pdb_inp):
  exclusions = [
      # Seems that nobody uses these 4 outside C++ code, could be private
      'break_indices',
      'chain_indices',
      'model_atom_counts',
      'bookkeeping_section',
      # Not very much used as well
      'extract_LINK_records',
      'extract_authors',
      'extract_connectivity',
      'extract_remark_iii_records',
      'get_link_records',
      'miscellaneous_features_section',
      'primary_structure_section',
      'record_type_counts',
      'secondary_structure_section',
      'sequence_from_SEQRES',
      'unknown_section']
  result = []
  # pdb_inp = iotbx.pdb.input(source_info=None, lines=t_pdb_str.split('\n'))
  pdb_members = dir(pdb_inp)
  for member in pdb_members:
    if not member.startswith('_') and member not in exclusions:
      result.append(member)
  return result

def find_out_extras(list1, list2):
  result = []
  for x in list1:
    if x not in list2:
      result.append(x)
  return result

def exercise():
  fail_mgs = """
  This test ensures similarity of cif_input and pdb_input interfaces.
  If it fails, inspect extra_in_pdb and extra_in_cif to figure out what
  was added to one of the class and not added to another one.
  """
  pdb_inp = iotbx.pdb.input(source_info=None, lines=t_pdb_str.split('\n'))
  cif_inp = iotbx.pdb.input(source_info=None, lines=t_cif_str.split('\n'))

  pdb_member_functions = get_pdb_inp_functions(pdb_inp)
  predicate = inspect.ismethod
  if six.PY3:
    predicate = inspect.isfunction
  cif_member_functions = [
      x[0] for x in inspect.getmembers(cif_input, predicate=predicate) \
      if not x[0].startswith('_')]
  extra_in_pdb = find_out_extras(pdb_member_functions, cif_member_functions)
  extra_in_cif = find_out_extras(cif_member_functions, pdb_member_functions)
  assert extra_in_pdb == [], " %s %s" % (extra_in_pdb, fail_mgs)
  assert extra_in_cif == [], " %s %s" % (extra_in_cif, fail_mgs)
  # check that the signatures are the same
  for cif_member in cif_member_functions:
    pdb_funct = eval('pdb_inp.%s' % cif_member)
    cif_funct = eval('cif_inp.%s' % cif_member)
    try:
      assert inspect.signature(pdb_funct) == inspect.signature(cif_funct), \
          "Function %s has different signatures: %s !=  %s" % (
              cif_member, inspect.signature(pdb_funct), inspect.signature(cif_funct))
    except ValueError:
      pass
  print("OK")
  # print extra_in_pdb
  # print "="*20
  # print extra_in_cif

if (__name__ == "__main__"):
  if sys.version_info.major > 2:
    exercise()
  else:
    print("Skipping - Python 3 required")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_pdb_link_records.py
from __future__ import absolute_import, division, print_function
from libtbx import easy_run
from libtbx.test_utils import assert_lines_in_file
import mmtbx.monomer_library.server
from mmtbx import monomer_library


# from here: https://www.wwpdb.org/documentation/file-format-content/format33/sect6.html
# LINK
# Overview

# The LINK records specify connectivity between residues that is not implied by the primary structure. Connectivity is expressed in terms of the atom names. They also include the distance associated with the each linkage following the symmetry operations at the end of each record.

# This record supplements information given in CONECT records and is provided here for convenience in searching.

# Record Format

# COLUMNS         DATA TYPE      FIELD           DEFINITION
# ------------------------------------------------------------------------------------
#  1 -  6         Record name    "LINK  "
# 13 - 16         Atom           name1           Atom name.
# 17              Character      altLoc1         Alternate location indicator.
# 18 - 20         Residue name   resName1        Residue  name.
# 22              Character      chainID1        Chain identifier.
# 23 - 26         Integer        resSeq1         Residue sequence number.
# 27              AChar          iCode1          Insertion code.
# 43 - 46         Atom           name2           Atom name.
# 47              Character      altLoc2         Alternate location indicator.
# 48 - 50         Residue name   resName2        Residue name.
# 52              Character      chainID2        Chain identifier.
# 53 - 56         Integer        resSeq2         Residue sequence number.
# 57              AChar          iCode2          Insertion code.
# 60 - 65         SymOP          sym1            Symmetry operator atom 1.
# 67 - 72         SymOP          sym2            Symmetry operator atom 2.
# 74 - 78         Real(5.2)      Length          Link distance
# Details

# The atoms involved in bonds between HET groups or between a HET group and standard residue are listed.
# Inter-residue linkages not implied by the primary structure are listed (e.g., reduced peptide bond).
# Non-standard linkages between residues, e.g., side-chain to side-chain, are listed.
# Each LINK record specifies one linkage.
# These records do not specify connectivity within a HET group (see CONECT) or disulfide bridges (see SSBOND).
# sym1 and sym2 are right justified and are given as blank when the identity operator (and no cell translation) is to be applied to the atom.
# - For NMR entries, only one set (or model) of LINK records will be supplied.
# - Coordinate bonds are also listed as LINKs
# Verification/Validation/Value Authority Control

# The distance between the pair of atoms listed must be consistent with the bonding.

# Relationships to Other Record Types

# CONECT records are generated from LINKs when both atoms are present in the entry. If symmetry operators are given to generate one of the residues involved in the bond, REMARK 290 defines the symmetry transformation.

# Example

#          1         2         3         4         5         6         7         8
# 12345678901234567890123456789012345678901234567890123456789012345678901234567890
# LINK         O   GLY A  49                NA    NA A6001     1555   1555  2.98
# LINK         OG1 THR A  51                NA    NA A6001     1555   1555  2.72
# LINK         OD2 ASP A  66                NA    NA A6001     1555   1555  2.72
# LINK         NE  ARG A  68                NA    NA A6001     1555   1555  2.93

# LINK         NE  ARG A  68                NA    NA A6001     1555   1555  2.93
# LINK         C21 2EG A   7                 C22 2EG B  19     1555   1555  1.56


restr_cif_txt = """
data_comp_list
loop_
_chem_comp.id
_chem_comp.three_letter_code
_chem_comp.name
_chem_comp.group
_chem_comp.number_atoms_all
_chem_comp.number_atoms_nh
_chem_comp.desc_level
MCM        MCM '7-amino-4-methyl-2H-chromen-2-one' ligand 22 13 .
#
data_comp_MCM
#
loop_
_chem_comp_atom.comp_id
_chem_comp_atom.atom_id
_chem_comp_atom.type_symbol
_chem_comp_atom.type_energy
_chem_comp_atom.partial_charge
_chem_comp_atom.x
_chem_comp_atom.y
_chem_comp_atom.z
MCM         N      N   NH2   .         -3.8313    0.0126   -0.1203
MCM         CA     C   CR6   .         -2.4124    0.0126   -0.1203
MCM         C2     C   CR16  .         -1.7183    0.0126    1.0827
MCM         C3     C   CR66  .         -0.3102    0.0126    1.0833
MCM         C4     C   CR6   .          1.7583    0.0126    2.2891
MCM         C5     C   CR16  .          2.4557    0.0126    1.0847
MCM         C6     C   CR6   .          1.7703    0.0126   -0.1062
MCM         C7     C   CR66  .          0.3770    0.0126   -0.1073
MCM         C8     C   CR16  .         -0.3279    0.0126   -1.3263
MCM         C9     C   CR16  .         -1.7167    0.0126   -1.3257
MCM         C10    C   CH3   .          2.5277   -0.0477   -1.4146
MCM         O1     O   O     .          0.3860    0.0126    2.2882
MCM         O2     O   OC    .          2.3647    0.0146    3.3417
MCM         HN1    H   HNH2  .         -4.2873    0.8024   -0.1159
MCM         HN2    H   HNH2  .         -4.2873   -0.7772   -0.1160
MCM         H2     H   HCR6  .         -2.2066    0.0126    1.9279
MCM         H5     H   HCR6  .          3.4319    0.0126    1.0860
MCM         H8     H   HCR6  .          0.1597    0.0126   -2.1720
MCM         H9     H   HCR6  .         -2.2050    0.0131   -2.1709
MCM        H101    H   HCH3  .          2.3139    0.7394   -1.9509
MCM        H102    H   HCH3  .          3.4869   -0.0680   -1.2348
MCM        H103    H   HCH3  .          2.2709   -0.8533   -1.9024
"""

pdb_1c_id = """
HETATM 2888  OH  ALY C   5     -15.286  24.739   8.076  1.00 45.73      C    O
HETATM 2889  CH  ALY C   5     -16.455  25.116   7.877  1.00 41.87      C    C
HETATM 2890  CH3 ALY C   5     -16.828  25.980   6.695  1.00 36.75      C    C
HETATM 2891  NZ  ALY C   5     -17.470  24.749   8.740  1.00 48.84      C    N
HETATM 2892  CE  ALY C   5     -17.263  23.930   9.901  1.00 39.21      C    C
HETATM 2893  CD  ALY C   5     -18.562  23.629  10.640  1.00 41.37      C    C
HETATM 2894  CG  ALY C   5     -18.329  22.814  11.892  1.00 41.99      C    C
HETATM 2895  CB  ALY C   5     -19.662  22.656  12.590  1.00 45.24      C    C
HETATM 2896  CA  ALY C   5     -19.524  22.011  13.974  1.00 51.20      C    C
HETATM 2897  N   ALY C   5     -20.755  21.670  14.665  1.00 49.87      C    N
HETATM 2898  C   ALY C   5     -18.619  22.936  14.781  1.00 47.11      C    C
HETATM 2899  O   ALY C   5     -17.427  22.728  15.024  1.00 49.30      C    O
HETATM 2900  N   MCM C   6     -19.324  23.360  15.960  1.00 49.19      C    N
HETATM 2901  CA  MCM C   6     -18.698  24.321  16.695  1.00 44.46      C    C
HETATM 2902  C2  MCM C   6     -19.284  25.579  16.752  1.00 49.13      C    C
HETATM 2903  C3  MCM C   6     -18.708  26.580  17.525  1.00 48.36      C    C
HETATM 2904  C4  MCM C   6     -18.700  28.830  18.338  1.00 45.36      C    C
HETATM 2905  C5  MCM C   6     -17.544  28.627  19.099  1.00 42.82      C    C
HETATM 2906  C6  MCM C   6     -16.902  27.390  19.114  1.00 45.52      C    C
HETATM 2907  C7  MCM C   6     -17.484  26.294  18.302  1.00 46.42      C    C
HETATM 2908  C8  MCM C   6     -16.929  25.030  18.246  1.00 40.92      C    C
HETATM 2909  C9  MCM C   6     -17.552  24.060  17.457  1.00 43.70      C    C
HETATM 2910  C10 MCM C   6     -15.654  27.180  19.937  1.00 42.32      C    C
HETATM 2911  O1  MCM C   6     -19.260  27.832  17.578  1.00 46.61      C    O
HETATM 2912  O2  MCM C   6     -19.248  29.950  18.344  1.00 44.55      C    O
"""

pdb_2c_id = """
HETATM 2888  OH  ALYaC   5     -15.286  24.739   8.076  1.00 45.73      C    O
HETATM 2889  CH  ALYaC   5     -16.455  25.116   7.877  1.00 41.87      C    C
HETATM 2890  CH3 ALYaC   5     -16.828  25.980   6.695  1.00 36.75      C    C
HETATM 2891  NZ  ALYaC   5     -17.470  24.749   8.740  1.00 48.84      C    N
HETATM 2892  CE  ALYaC   5     -17.263  23.930   9.901  1.00 39.21      C    C
HETATM 2893  CD  ALYaC   5     -18.562  23.629  10.640  1.00 41.37      C    C
HETATM 2894  CG  ALYaC   5     -18.329  22.814  11.892  1.00 41.99      C    C
HETATM 2895  CB  ALYaC   5     -19.662  22.656  12.590  1.00 45.24      C    C
HETATM 2896  CA  ALYaC   5     -19.524  22.011  13.974  1.00 51.20      C    C
HETATM 2897  N   ALYaC   5     -20.755  21.670  14.665  1.00 49.87      C    N
HETATM 2898  C   ALYaC   5     -18.619  22.936  14.781  1.00 47.11      C    C
HETATM 2899  O   ALYaC   5     -17.427  22.728  15.024  1.00 49.30      C    O
HETATM 2900  N   MCMaC   6     -19.324  23.360  15.960  1.00 49.19      C    N
HETATM 2901  CA  MCMaC   6     -18.698  24.321  16.695  1.00 44.46      C    C
HETATM 2902  C2  MCMaC   6     -19.284  25.579  16.752  1.00 49.13      C    C
HETATM 2903  C3  MCMaC   6     -18.708  26.580  17.525  1.00 48.36      C    C
HETATM 2904  C4  MCMaC   6     -18.700  28.830  18.338  1.00 45.36      C    C
HETATM 2905  C5  MCMaC   6     -17.544  28.627  19.099  1.00 42.82      C    C
HETATM 2906  C6  MCMaC   6     -16.902  27.390  19.114  1.00 45.52      C    C
HETATM 2907  C7  MCMaC   6     -17.484  26.294  18.302  1.00 46.42      C    C
HETATM 2908  C8  MCMaC   6     -16.929  25.030  18.246  1.00 40.92      C    C
HETATM 2909  C9  MCMaC   6     -17.552  24.060  17.457  1.00 43.70      C    C
HETATM 2910  C10 MCMaC   6     -15.654  27.180  19.937  1.00 42.32      C    C
HETATM 2911  O1  MCMaC   6     -19.260  27.832  17.578  1.00 46.61      C    O
HETATM 2912  O2  MCMaC   6     -19.248  29.950  18.344  1.00 44.55      C    O
"""
def exercise_1(prefix="tst_pdb_link_records_1"):
  with open('%s_mcm.cif' % prefix, 'w') as f:
    f.write(restr_cif_txt)
  with open('%s.pdb' % prefix, 'w') as f:
    f.write(pdb_1c_id)
  cmd = "phenix.geometry_minimization %s.pdb %s_mcm.cif write_geo=False" % (prefix, prefix)
  assert not easy_run.call(cmd)
  assert_lines_in_file('%s_minimized.pdb' % prefix,
      "LINK         C   ALY C   5                 N   MCM C   6 ",
      remove_white_spaces=False)
#LINK         O   GLY A  49                NA    NA A6001     1555   1555  2.98
#LINK         C   ALY C   5                 N   MCM C   6
#LINK         C   ALYaC   5                 N   MCMaC   6
def exercise_2(prefix="tst_pdb_link_records_2"):
  with open('%s_mcm.cif' % prefix, 'w') as f:
    f.write(restr_cif_txt)
  with open('%s.pdb' % prefix, 'w') as f:
    f.write(pdb_2c_id)
  cmd = "phenix.geometry_minimization %s.pdb %s_mcm.cif write_geo=False" % (prefix, prefix)
  assert not easy_run.call(cmd)
  assert_lines_in_file('%s_minimized.pdb' % prefix,
      "LINK         C   ALYaC   5                 N   MCMaC   6 ",
      remove_white_spaces=False)

if __name__ == '__main__':
  mon_lib_srv = None
  ener_lib = None
  try:
    mon_lib_srv = monomer_library.server.server()
    ener_lib = monomer_library.server.ener_lib()
  except: # intentional
    print("Can not initialize monomer_library, skipping test.")
  if mon_lib_srv is not None and ener_lib is not None:
    exercise_1()
    exercise_2()
    print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_pdbx_mmcif_tutorial.py
from __future__ import absolute_import, division, print_function
import os
from libtbx import easy_run
import libtbx.load_env

def exercise():
  if (not libtbx.env.has_module("phenix_regression")):
    print("phenix_regression not configured, skipping tst_pdbx_mmcif_tutorial.py")
    return
  mmcif_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/pdb/3orl.cif",
    test=os.path.isfile)
  py_file = libtbx.env.find_in_repositories(
    relative_path="iotbx/examples/pdbx_mmcif_tutorial.py",
    test=os.path.isfile)
  command = "iotbx.python %s %s" %(py_file, mmcif_file)
  print(command)
  result = easy_run.fully_buffered(command=command).raise_if_errors()

if __name__ == "__main__":
  exercise()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_phases.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb.xray_structure
from cctbx.development import random_structure
from cctbx import miller
from cctbx import crystal
from cctbx import sgtbx
from cctbx.array_family import flex
from libtbx.test_utils import show_diff
from six.moves import cStringIO as StringIO
import math
import sys

def exercise_basic():
  a = flex.double((10,20))
  p = flex.double((-25,355))
  c = flex.polar(a, p, True)
  f = flex.double((0.3,0.9))
  s = miller.set(
    crystal_symmetry=crystal.symmetry(
      unit_cell=(10,10,10,90,90,90),
      space_group_symbol="P1"),
    indices=flex.miller_index([(1,2,3),(-3,4,-6)]),
    anomalous_flag=False)
  out = StringIO()
  s.array(data=c).as_phases_phs(out=out)
  assert not show_diff(out.getvalue(), """\
   1   2   3 4999.99    1.00  -25.00
  -3   4  -6 9999.99    1.00   -5.00
""")
  out = StringIO()
  s.array(data=c).as_phases_phs(out=out, scale_amplitudes=False)
  assert not show_diff(out.getvalue(), """\
   1   2   3   10.00    1.00  -25.00
  -3   4  -6   20.00    1.00   -5.00
""")
  for phases in [s.array(data=p), p]:
    out = StringIO()
    s.array(data=c).amplitudes().as_phases_phs(
      out=out, phases=phases, phases_deg=True)
    assert not show_diff(out.getvalue(), """\
   1   2   3 4999.99    1.00  -25.00
  -3   4  -6 9999.99    1.00  355.00
""")
  for phases in [s.array(data=p*(math.pi/180)), p*(math.pi/180)]:
    out = StringIO()
    s.array(data=c).amplitudes().as_phases_phs(
      out=out, phases=phases, phases_deg=False)
    assert not show_diff(out.getvalue(), """\
   1   2   3 4999.99    1.00  -25.00
  -3   4  -6 9999.99    1.00  355.00
""")
  for figures_of_merit in [s.array(data=f), f]:
    out = StringIO()
    s.array(data=c).as_phases_phs(out=out, figures_of_merit=figures_of_merit)
    assert not show_diff(out.getvalue(), """\
   1   2   3 4999.99    0.30  -25.00
  -3   4  -6 9999.99    0.90   -5.00
""")

def generate_random_f_calc(
      space_group_info,
      n_elements=10,
      d_min=1.5,
      verbose=0):
  structure = random_structure.xray_structure(
    space_group_info,
    elements=["Si"]*n_elements,
    volume_per_atom=1000,
    min_distance=3.,
    general_positions_only=False)
  if (0 or verbose):
    structure.show_summary()
    structure.show_scatterers()
    print()
  print("Writing tmp.pdb")
  s = structure.as_pdb_file(
    remark="random structure",
    resname="RND")
  with open("tmp.pdb", "w") as f:
    f.write(s)
  if (0 or verbose):
    print()
  f_calc = structure.structure_factors(
    d_min=d_min, anomalous_flag=False).f_calc()
  if (0 or verbose):
    f_calc.show_summary()
    print()
  print("Writing: tmp.phs")
  with open("tmp.phs", "w") as f:
    f_calc.as_phases_phs(out=f)
  if (0 or verbose):
    print()

def run():
  exercise_basic()
  if (len(sys.argv) > 1):
    verbose = 0
    args = []
    for arg in sys.argv[1:]:
      if (arg.lower() == "--verbose"):
        verbose = 1
      else:
        args.append(arg)
    for arg in args:
      generate_random_f_calc(sgtbx.space_group_info(arg), verbose=verbose)
  print("OK")

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_phil.py
from __future__ import absolute_import, division, print_function
import iotbx.phil
from libtbx.test_utils import show_diff, Exception_expected
from libtbx.utils import Sorry
from libtbx import Auto
import os

def exercise():
  master = iotbx.phil.parse(input_string="""\
u=10,12 13 80,90 100
  .type=unit_cell
s=19
  .type=space_group
U=None
  .type=unit_cell
S=None
  .type=space_group
ua=Auto
  .type=unit_cell
sa=Auto
  .type=space_group
""")
  assert not show_diff(master.format(master.extract()).as_str(), """\
u = 10 12 13 80 90 100
s = "P 21 21 21"
U = None
S = None
ua = Auto
sa = Auto
""")
  custom = iotbx.phil.parse(input_string="""\
ua = None
s = Auto
U = 1,2,3
u = Auto
S = 33
sa = None
""")
  assert not show_diff(
    master.fetch(source=custom).extract_format().as_str(), """\
u = Auto
s = Auto
U = 1 2 3 90 90 90
S = "P n a 21"
ua = None
sa = None
""")
  # make sure Unicode strings work!
  custom = iotbx.phil.parse(input_string=u"""\
U = 1 2 3 90 105 90
S = P21
""")
  assert not show_diff(
    master.fetch(source=custom).extract_format().as_str(), """\
u = 10 12 13 80 90 100
s = "P 21 21 21"
U = 1 2 3 90 105 90
S = "P 1 21 1"
ua = Auto
sa = Auto
""")
  #
  master = iotbx.phil.parse(input_string="""\
s=None
  .type=space_group
  .multiple=True
""")
  custom = iotbx.phil.parse(input_string="""\
s=p212121
s=19
""")
  assert not show_diff(master.fetch(source=custom).as_str(), """\
s = 19
""")
  custom = iotbx.phil.parse(input_string="""\
s=19
s=p212121
""")
  assert not show_diff(master.fetch(source=custom).as_str(), """\
s = p212121
""")
  custom = iotbx.phil.parse(input_string="""\
s=18
s=p212121
""")
  assert not show_diff(master.fetch(source=custom).as_str(), """\
s = 18
s = p212121
""")
  #
  master = iotbx.phil.parse(input_string="""\
sel = None
  .type = atom_selection
  .multiple = True
""")
  clai = master.command_line_argument_interpreter()
  assert not show_diff(clai.process(
    "sel=altloc  ' ' or  name C\\* ").as_str(), """\
sel = altloc ' ' or name C\\*
""")
  user = iotbx.phil.parse(input_string="""\
sel = "altloc ' ' or name C\\*"
sel = altloc ' ' or name D\\*
""")
  work = master.fetch(user)
  assert not show_diff(work.as_str(), """\
sel = "altloc ' ' or name C\\\\*"
sel = altloc ' ' or name D\\*
""")
  ex = work.extract()
  assert len(ex.sel) == 2
  assert ex.sel[0] == "altloc ' ' or name C\\*"
  assert ex.sel[1] == "altloc ' ' or name D\\*"
  #
  pcl = iotbx.phil.process_command_line(args=["s = 230"], master_string="""\
s=None
  .type=space_group
""")
  assert not show_diff(str(pcl.work.extract().s), "I a -3 d")
  #
  master_phil_str = """
model = None
  .type = path
use_geometry_restraints = False
  .type = bool
"""
  with open("model.pdb", "w") as f:
    f.write("""\
ATOM      1  O   HOH     1      53.448  18.599 -10.134  1.00 20.00
""")
  pcl = iotbx.phil.process_command_line_with_files(
    args=["model.pdb", "--use_geometry_restraints"],
    master_phil_string=master_phil_str,
    pdb_file_def="model")
  assert (pcl.get_file_type_count("pdb") == 1)
  assert (pcl.get_file_type_count("hkl") == 0)
  params = pcl.work.extract()
  pdb_in = pcl.get_cached_file(params.model)
  assert (pdb_in is not None)
  assert (params.model == os.path.join(os.getcwd(), "model.pdb"))
  assert (params.use_geometry_restraints)
  model_in = pcl.get_file(params.model, force_type="pdb")
  master_phil_str = """
data_dir = None
  .type = path
d_min = None
  .type = float
nproc = None
  .type = int
"""
  pcl = iotbx.phil.process_command_line_with_files(
    args=["/", "3.0", "5"],
    master_phil_string=master_phil_str,
    directory_def="data_dir",
    integer_def="nproc",
    float_def="d_min")
  params = pcl.work.extract()
  assert (params.data_dir == "/")
  assert (params.d_min == 3.0)
  assert (params.nproc == 5)
  # shelx file hack
  with open("tst_iotbx_phil.hkl", "w") as f:
    f.write("""\
   1   2  -1  -23.34    4.56   1
   2  -3   9   12.45    6.12   2
99999999999999999.9999999.999999
-999-999-999-9999.99-9999.99-999
   0   0   0    0.00    0.00   0""")
  master_phil_str = """
data = None
  .type = path
space_group = None
  .type = space_group
unit_cell = None
  .type = unit_cell
"""
  pcl = iotbx.phil.process_command_line_with_files(
    args=[
      "tst_iotbx_phil.hkl",
      "P6122",
      "50,50,40,90,90,120",
    ],
    master_phil_string=master_phil_str,
    reflection_file_def="data",
    space_group_def="space_group",
    unit_cell_def="unit_cell")
  params = pcl.work.extract()
  assert (str(params.space_group) == "P 61 2 2")
  assert (str(params.unit_cell) == "(50, 50, 40, 90, 90, 120)")
  from iotbx.file_reader import any_file
  try :
    hkl_in = any_file(params.data, force_type="hkl")
    print(hkl_in.file_server.miller_arrays[0].is_xray_intensity_array())
  except Sorry as s :
    assert ("Unresolved amplitude/intensity ambiguity" in str(s))
  else :
    raise Exception_expected
  pcl = iotbx.phil.process_command_line_with_files(
    args=["tst_iotbx_phil.hkl=hklf3"],
    master_phil_string=master_phil_str,
    reflection_file_def="data")
  params = pcl.work.extract()
  assert (params.data == "tst_iotbx_phil.hkl=hklf3")
  hkl_in = any_file(params.data, force_type="hkl")
  ma = hkl_in.file_server.miller_arrays[0]
  assert ma.is_xray_amplitude_array()
  assert ma.anomalous_flag() is False

  with open("tst_iotbx_phil.ncs", "w") as f:
    f.write("""
REMARK 350   BIOMT1   1  1.000000  0.000000  0.000000        0.00000
REMARK 350   BIOMT2   1  0.000000  1.000000  0.000000        0.00000
REMARK 350   BIOMT3   1  0.000000  0.000000  1.000000        0.00000
REMARK 350   BIOMT1   2  0.623490  0.781831  0.000000        0.00000
REMARK 350   BIOMT2   2 -0.781831  0.623490  0.000000        0.00000
REMARK 350   BIOMT3   2  0.000000  0.000000  1.000000        0.00000

""")
  master_phil_str = """
ncs_file = None
  .type = path
"""
  pcl = iotbx.phil.process_command_line_with_files(
    args=[
      "tst_iotbx_phil.ncs",
    ],
    master_phil_string=master_phil_str,
    ncs_file_def="ncs_file")
  params = pcl.work.extract()
  assert (os.path.split(str(params.ncs_file))[-1] == "tst_iotbx_phil.ncs")

  with open("tst_iotbx_phil.ncs_spec", "w") as f:
    f.write("""
Summary of NCS information
Wed Mar 16 15:02:22 2016
/Users/terwill/Desktop/working/Jan_2015/phenix/cryo-pdb/3j9c/build

source_info ncs_biomtr.ncs




new_ncs_group
new_operator

rota_matrix    1.0000    0.0000    0.0000
rota_matrix    0.0000    1.0000    0.0000
rota_matrix    0.0000    0.0000    1.0000
tran_orth     0.0000    0.0000    0.0000

center_orth    0.0000    0.0000    0.0000
new_operator

rota_matrix    0.6235   -0.7818    0.0000
rota_matrix    0.7818    0.6235   -0.0000
rota_matrix   -0.0000    0.0000    1.0000
tran_orth     0.0000    0.0000    0.0000

""")
  master_phil_str = """
ncs_file = None
  .type = path
"""
  pcl = iotbx.phil.process_command_line_with_files(
    args=[
      "tst_iotbx_phil.ncs_spec",
    ],
    master_phil_string=master_phil_str,
    ncs_file_def="ncs_file")
  params = pcl.work.extract()
  assert (os.path.split(str(params.ncs_file))[-1] == "tst_iotbx_phil.ncs_spec")



  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_poscar.py
from __future__ import absolute_import, division, print_function
def exercise():
  import libtbx.load_env
  import os
  op = os.path
  inp_dir = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/poscar",
    test=op.isdir)
  if (inp_dir is None):
    print("Skipping POSCAR tests: input files not available")
    return
  import iotbx.poscar
  for node in os.listdir(inp_dir):
    if (not node.startswith("POSCAR-")): continue
    file_name = op.join(inp_dir, node)
    with open(file_name) as f:
      lines = f.read().splitlines()
    poscar = iotbx.poscar.reader(lines=lines)
    assert poscar.make_up_types_if_necessary() is poscar
    xs = poscar.xray_structure(u_iso=0.1)
    assert str(xs.space_group_info()) == "P 1"
    assert xs.scatterers().size() == len(poscar.sites)

def run(args):
  assert len(args) == 0
  exercise()
  print("OK")

if (__name__ == "__main__"):
  import sys
  run(args=sys.argv[1:])


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_reflection_file_editor.py

from __future__ import absolute_import, division, print_function
from iotbx import reflection_file_editor, file_reader
from iotbx.reflection_file_editor import master_phil
from cctbx import miller
from cctbx import crystal, sgtbx, uctbx
from scitbx.array_family import flex
import libtbx.load_env
from libtbx.test_utils import Exception_expected, approx_equal
from libtbx.utils import Sorry, null_out
import warnings
import os.path
import sys
from six.moves import range

# this will run without phenix_regression
def exercise_basic(verbose=False):
  symm = crystal.symmetry(
    space_group_info=sgtbx.space_group_info("P212121"),
    unit_cell=uctbx.unit_cell((6,7,8,90,90,90)))
  set1 = miller.build_set(
    crystal_symmetry=symm,
    anomalous_flag=True,
    d_min=1.0)
  assert (set1.indices().size() == 341)
  data0 = flex.double(set1.indices().size(), 100.)
  sigmas1 = flex.double(set1.indices().size(), 4.)
  for i in range(10):
    data0[2+i*30] = -1
  for i in range(10):
    data0[5+i*30] = 7.5
  array0 = set1.array(data=data0, sigmas=sigmas1)
  array0.set_observation_type_xray_intensity()
  flags = array0.generate_r_free_flags(
    use_lattice_symmetry=True).average_bijvoet_mates()
  mtz0 = array0.as_mtz_dataset(column_root_label="I-obs")
  mtz0.add_miller_array(flags, column_root_label="R-free-flags")
  mtz0.mtz_object().write("tst_data.mtz")
  # convert intensities to amplitudes
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst1.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data.mtz
    labels = I-obs(+),SIGI-obs(+),I-obs(-),SIGI-obs(-)
    output_labels = I-obs(+) SIGI-obs(+) I-obs(-) SIGI-obs(-)
  }
  miller_array {
    file_name = tst_data.mtz
    labels = R-free-flags
    output_labels = R-free-flags
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  log = sys.stdout
  if (not verbose):
    log = null_out()
  def run_and_reload(params, file_name):
    p = reflection_file_editor.process_arrays(params, log=log)
    p.finish()
    mtz_in = file_reader.any_file(file_name)
    miller_arrays = mtz_in.file_object.as_miller_arrays()
    return miller_arrays
  params.mtz_file.miller_array[0].output_as = "amplitudes"
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("inconsistent with" in str(e)), str(e)
  else :
    raise Exception_expected
  params.mtz_file.miller_array[0].output_labels = ['F-obs(+)', 'SIGF-obs(+)',
    'F-obs(-)', 'SIGF-obs(-)']
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].info().labels == ['F-obs(+)', 'SIGF-obs(+)',
    'F-obs(-)', 'SIGF-obs(-)'])
  assert miller_arrays[0].is_xray_amplitude_array()
  data1 = miller_arrays[0].data()
  assert (flex.min(data1) == 0)
  # now with French-Wilson treatment
  params.mtz_file.miller_array[0].output_as = "amplitudes_fw"
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].info().labels == ['F-obs(+)', 'SIGF-obs(+)',
    'F-obs(-)', 'SIGF-obs(-)'])
  assert miller_arrays[0].is_xray_amplitude_array()
  assert (len(miller_arrays[0].data()) == 341)
  assert (flex.min(miller_arrays[0].data()) > 0)
  # force data type change
  params.mtz_file.miller_array[0].output_as = "auto"
  params.mtz_file.miller_array[0].force_type = "amplitudes"
  params.mtz_file.miller_array[0].output_labels = ['F-obs(+)', 'SIGF-obs(+)',
    'F-obs(-)', 'SIGF-obs(-)']
  params.mtz_file.output_file = "tst2.mtz"
  miller_arrays = run_and_reload(params, "tst2.mtz")
  mtz_orig = file_reader.any_file("tst_data.mtz")
  orig_arrays = mtz_orig.file_server.miller_arrays
  data0 = orig_arrays[0].data()
  data2 = miller_arrays[0].data()
  assert miller_arrays[0].is_xray_amplitude_array()
  assert (data0.all_eq(data2)) and (data0.all_ne(data1))
  # convert to and from anomalous data
  params.mtz_file.output_file = "tst1.mtz"
  params.mtz_file.miller_array[0].force_type = "auto"
  params.mtz_file.miller_array[0].anomalous_data = "merged"
  try :
    run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("too many column labels" in str(e)), str(e)
  else :
    raise Exception_expected
  params.mtz_file.miller_array[0].output_labels = ["I-obs", "SIGI-obs"]
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (not miller_arrays[0].anomalous_flag())
  params.mtz_file.miller_array[1].anomalous_data = "anomalous"
  try :
    run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("not specified enough" in str(e)), str(e)
  else :
    raise Exception_expected
  params.mtz_file.miller_array[1].output_labels = ['R-free-flags(+)',
    'R-free-flags(-)']
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert miller_arrays[1].anomalous_flag()
  # filter by signal-to-noise ratio
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].filter_by_signal_to_noise = 2.0
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data = miller_arrays[0].data()
  sigmas = miller_arrays[0].sigmas()
  assert (data.size() == 321) and ((data / sigmas).all_ge(2.0))
  # data scaling
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].scale_factor = 2.0
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data2 = miller_arrays[0].data()
  assert approx_equal(flex.max(data2), 2.*flex.max(data))
  # remove negatives
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].remove_negatives = True
  miller_arrays = run_and_reload(params, "tst1.mtz")
  n_refl = miller_arrays[0].data().size()
  assert (n_refl == 331), n_refl
  # scale to maximum value
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].scale_max = 2000.
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data3 = miller_arrays[0].data()
  assert (flex.max(data3) == 2000.), flex.max(data3)
  # apply isotropic B-factor
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].add_b_iso = 20.0
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data_b = miller_arrays[0].data()
  sigmas_b = miller_arrays[0].sigmas()
  assert approx_equal(data_b[0], 72.68358, eps=0.00001)
  # apply anisotropic B-factor
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].add_b_aniso = (20.,20.,20.,0.,0.,0.)
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data_b = miller_arrays[0].data()
  sigmas_b = miller_arrays[0].sigmas()
  assert approx_equal(data_b[0], 72.68358, eps=0.00001)
  # shuffle data randomly
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].shuffle_values = True
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data_shuffled = miller_arrays[0].data()
  assert (not data0.all_eq(data_shuffled))
  params.mtz_file.miller_array[0].reset_values_to = 12345.6
  miller_arrays = run_and_reload(params, "tst1.mtz")
  data_reset = miller_arrays[0].data()
  assert (data_reset.all_eq(data_reset[0]))
  # improper operations on R-free flags
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].scale_factor = None
  params.mtz_file.miller_array[1].output_as = "amplitudes"
  # this one won't actually crash (it will be ignored)
  miller_arrays = run_and_reload(params, "tst1.mtz")
  params.mtz_file.miller_array[1].output_as = "auto"
  params.mtz_file.miller_array[1].force_type = "amplitudes"
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    pass
  else :
    raise Exception_expected
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[1].filter_by_signal_to_noise = 2.0
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    pass
  else :
    raise Exception_expected
  # improper output labels
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[1].output_labels.append("NULL")
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("number of output labels" in str(e))
  else :
    raise Exception_expected
  params.mtz_file.miller_array[1].output_labels.pop()
  params.mtz_file.miller_array[0].output_labels.pop()
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("number of output labels" in str(e))
  else :
    raise Exception_expected
  # use column_root_label instead
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[0].column_root_label = "I_tst"
  params.mtz_file.miller_array[1].column_root_label = "FREE"
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].info().label_string() ==
          "I_tst(+),SIGI_tst(+),I_tst(-),SIGI_tst(-)")
  assert (miller_arrays[1].info().label_string() == "FREE")
  # incorrect root label
  params.mtz_file.miller_array[0].column_root_label = "asdf"
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as s :
    assert ("inconsistent" in str(s))
  else :
    raise Exception_expected
  params.mtz_file.miller_array[0].column_root_label = "F_tst"
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as s :
    assert ("inconsistent" in str(s))
  else :
    raise Exception_expected
  # same root label, but now with compatible array type
  params.mtz_file.miller_array[0].output_as = "amplitudes"
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].info().label_string() ==
          "F_tst(+),SIGF_tst(+),F_tst(-),SIGF_tst(-)")
  # R-free label conflicts
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.r_free_flags.force_generate = True
  params.mtz_file.r_free_flags.new_label = "R-free-flags"
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry :
    pass
  else :
    raise Exception_expected
  params.mtz_file.resolve_label_conflicts = True
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[-1].info().label_string() == "R-free-flags_2")
  # resolution filter
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.d_min = 2.0
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert approx_equal(miller_arrays[0].d_min(), 2.0, eps=0.01)
  assert approx_equal(miller_arrays[1].d_min(), 2.0, eps=0.01)
  # resolution filter for a specific array
  params.mtz_file.d_min = None
  params.mtz_file.miller_array[0].d_min = 2.0
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert approx_equal(miller_arrays[0].d_min(), 2.0, eps=0.01)
  assert approx_equal(miller_arrays[1].d_min(), 1.0, eps=0.01)
  # filter by index
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.exclude_reflection.append((1,1,1))
  params.mtz_file.exclude_reflection.append((1,2,3))
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].indices().size() == (set1.indices().size() - 2))
  # change-of-basis (reindexing)
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.crystal_symmetry.change_of_basis = "b,a,c"
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].unit_cell().parameters() ==
    (7.0, 6.0, 8.0, 90.0, 90.0, 90.0))
  # again, with bad operator
  params.mtz_file.crystal_symmetry.change_of_basis = "P222"
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry :
    pass
  else :
    raise Exception_expected
  # r-free flags in same ASU
  params.mtz_file.crystal_symmetry.change_of_basis = "l,k,-h"
  params.mtz_file.output_file = "tst_c_o_b.mtz"
  miller_arrays = run_and_reload(params, "tst_c_o_b.mtz")
  assert (miller_arrays[0].completeness(use_binning=False) ==
          miller_arrays[1].completeness(use_binning=False) == 1.0)
  # expand symmetry (expand_to_p1=True)
  params.mtz_file.output_file = "tst1.mtz"
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.crystal_symmetry.expand_to_p1 = True
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].space_group_info().type().number() == 1)
  # change space group without changing anything else
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.crystal_symmetry.output_space_group = \
    sgtbx.space_group_info("P21212")
  miller_arrays = run_and_reload(params, "tst1.mtz")
  ma_new = miller_arrays[0].customized_copy(crystal_symmetry=array0)
  ma_new, array_orig = ma_new.common_sets(other=array0)
  assert ma_new.sigmas().all_eq(array_orig.sigmas())
  # expand symmetry (different output space group)
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.crystal_symmetry.output_space_group = \
    sgtbx.space_group_info("P21")
  miller_arrays = run_and_reload(params, "tst1.mtz")
  assert (miller_arrays[0].space_group_info().type().number() == 4)
  # incompatible input space_group/unit_cell
  params.mtz_file.crystal_symmetry.space_group = sgtbx.space_group_info("P4")
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("Input unit cell" in str(e))
  else :
    raise Exception_expected
  # incompatible output space_group/unit_cell
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.crystal_symmetry.output_space_group = \
    sgtbx.space_group_info("P6322")
  try :
    miller_arrays = run_and_reload(params, "tst1.mtz")
  except Sorry as e :
    assert ("incompatible with the specified" in str(e))
  else :
    raise Exception_expected
  # R-free manipulation (starting from incomplete flags)
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array[1].d_min = 1.2
  params.mtz_file.output_file = "tst_data2.mtz"
  miller_arrays = run_and_reload(params, "tst_data2.mtz")
  assert (miller_arrays[1].data().size() == 138)
  flags1 = miller_arrays[1].data()
  params = master_phil.fetch(source=new_phil).extract()
  # now extend the incomplete flags
  params.mtz_file.r_free_flags.extend = True
  for ma in params.mtz_file.miller_array :
    ma.file_name = "tst_data2.mtz"
  params.mtz_file.output_file = "tst4a.mtz"
  miller_arrays = run_and_reload(params, "tst4a.mtz")
  assert (miller_arrays[1].data().size() == 221)
  params.mtz_file.r_free_flags.relative_to_complete_set = True
  miller_arrays = run_and_reload(params, "tst4a.mtz")
  assert (miller_arrays[1].data().size() == 222)
  # and now to arbitrarily high resolution
  params.mtz_file.r_free_flags.relative_to_complete_set = False
  params.mtz_file.d_min = 0.8
  miller_arrays = run_and_reload(params, "tst4a.mtz")
  assert (miller_arrays[1].data().size() == 221)
  params.mtz_file.r_free_flags.relative_to_complete_set = True
  miller_arrays = run_and_reload(params, "tst4a.mtz")
  assert (miller_arrays[1].data().size() == 428)
  # export for ccp4 programs (flag=0, everything else > 0)
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.r_free_flags.export_for_ccp4 = True
  params.mtz_file.r_free_flags.preserve_input_values = False
  params.mtz_file.output_file = "tst_data3.mtz"
  miller_arrays = run_and_reload(params, "tst_data3.mtz")
  f_obs_orig = miller_arrays[1]
  free_selection = (miller_arrays[1].data() == 0)
  old_selection = (orig_arrays[1].data() == 1)
  assert (free_selection.all_eq(old_selection))
  # preserve input values (now in tst_data3.mtz)
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.output_file = "tst4.mtz"
  for ma in params.mtz_file.miller_array :
    ma.file_name = "tst_data3.mtz"
  # flags will be preserved here...
  miller_arrays = run_and_reload(params, "tst4.mtz")
  new_selection = (miller_arrays[1].data() == 0)
  assert (free_selection.all_eq(new_selection))
  # ...and here... [extending a CCP4 test set]
  params.mtz_file.miller_array[1].d_min = 1.2
  params.mtz_file.output_file = "tst_data4.mtz"
  truncated_arrays = run_and_reload(params, "tst_data4.mtz")
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.r_free_flags.extend = True
  for ma in params.mtz_file.miller_array :
    ma.file_name = "tst_data4.mtz"
  params.mtz_file.output_file = "tst4.mtz"
  miller_arrays = run_and_reload(params, "tst4.mtz")
  common_flags = truncated_arrays[1].common_set(other=miller_arrays[1])
  common_flags2 = miller_arrays[1].common_set(other=truncated_arrays[1])
  assert (common_flags2.data().all_eq(common_flags.data()))
  # ...but not here
  for ma in params.mtz_file.miller_array :
    ma.file_name = "tst_data3.mtz"
  params.mtz_file.output_file = "tst4.mtz"
  params.mtz_file.miller_array[1].d_min = None
  params.mtz_file.r_free_flags.preserve_input_values = False
  miller_arrays = run_and_reload(params, "tst4.mtz")
  new_selection = (miller_arrays[1].common_set(other=f_obs_orig).data() == 1)
  assert (free_selection.all_eq(new_selection))
  #
  # XXX note that the tests for adjust_fraction in cctbx.r_free_utils are
  # much more rigorous, because they use a larger test set - I keep it small
  # here to save on speed (especially I/O time).
  #
  # expand the test set
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.output_file = "tst4.mtz"
  params.mtz_file.r_free_flags.fraction = 0.15
  params.mtz_file.r_free_flags.adjust_fraction = True
  try :
    miller_arrays = run_and_reload(params, "tst4.mtz")
  except Sorry as s :
    assert ("resizing" in str(s))
  else :
    raise Exception_expected
  params.mtz_file.r_free_flags.preserve_input_values = False
  miller_arrays = run_and_reload(params, "tst4.mtz")
  flags_expanded = miller_arrays[-1]
  fraction_free = flags_expanded.data().count(1) / flags_expanded.data().size()
  assert (fraction_free > 0.145) and (fraction_free < 0.155)
  # now shrink it
  params.mtz_file.r_free_flags.fraction = 0.05
  miller_arrays = run_and_reload(params, "tst4.mtz")
  flags_shrunken = miller_arrays[-1]
  fraction_free = flags_shrunken.data().count(1) / flags_shrunken.data().size()
  assert (fraction_free > 0.049) and (fraction_free < 0.051)
  # more R-free manipulations
  mtz2 = array0.as_mtz_dataset(column_root_label="I-obs")
  flags2 = flags.generate_bijvoet_mates()
  mtz2.add_miller_array(flags2, column_root_label="R-free-flags")
  mtz2.mtz_object().write("tst_data4.mtz")
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst5.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data4.mtz
    labels = I-obs(+),SIGI-obs(+),I-obs(-),SIGI-obs(-)
    output_labels = I-obs(+) SIGI-obs(+) I-obs(-) SIGI-obs(-)
  }
  miller_array {
    file_name = tst_data4.mtz
    labels = R-free-flags(+),R-free-flags(-)
    output_labels = R-free-flags
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  miller_arrays = run_and_reload(params, "tst5.mtz")
  assert ((miller_arrays[0].anomalous_flag()) and
          (not miller_arrays[1].anomalous_flag()))
  # flags all the same value
  mtz2 = array0.as_mtz_dataset(column_root_label="I-obs")
  flags2 = flags.generate_bijvoet_mates()
  flags2 = flags2.customized_copy(
    data=flex.int(flags2.data().size(), 1))
  mtz2.add_miller_array(flags2, column_root_label="R-free-flags")
  mtz2.mtz_object().write("tst_data4.mtz")
  try :
    miller_arrays = run_and_reload(params, "tst5.mtz")
  except Sorry as s :
    pass
  else :
    raise Exception_expected
  # now force them through (no conversion to flex.bool)
  params.mtz_file.r_free_flags.extend = False
  params.mtz_file.r_free_flags.warn_if_all_same_value = False
  miller_arrays = run_and_reload(params, "tst5.mtz")
  assert miller_arrays[1].data().all_eq(1)
  # reconstructed amplitudes, yuck
  mtz3 = array0.as_mtz_dataset(column_root_label="I-obs")
  indices = array0.average_bijvoet_mates().indices()
  # XXX why does this come out as an unmerged array?
  mtz3.add_column(label="F", type="F").set_reals(
    miller_indices=indices,
    data=flex.double(indices.size(), 100.))
  mtz3.add_column(label="SIGF", type="Q").set_reals(
    miller_indices=indices,
    data=flex.double(indices.size(), 5.))
  mtz3.add_column(label="DANO", type="D").set_reals(
    miller_indices=indices,
    data=flex.double(indices.size(), 10.))
  mtz3.add_column(label="SIGDANO", type="Q").set_reals(
    miller_indices=indices,
    data=flex.double(indices.size(), 4.))
  mtz3.mtz_object().write("tst_data5.mtz")
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst6.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data5.mtz
    labels = I-obs(+),SIGI-obs(+),I-obs(-),SIGI-obs(-)
    output_labels = I-obs(+) SIGI-obs(+) I-obs(-) SIGI-obs(-)
  }
  miller_array {
    file_name = tst_data5.mtz
    labels = F,SIGF,DANO,SIGDANO,merged
    output_labels = F SIGF DANO SIGDANO
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  try :
    miller_arrays = run_and_reload(params, "tst6.mtz")
  except Sorry as e :
    assert ("Five columns" in str(e))
  else :
    raise Exception_expected
  #params.mtz_file.miller_array[1].output_labels = ["F","SIGF"]
  #params.mtz_file.miller_array
  #print miller_arrays[1].info().label_string()
  params.mtz_file.miller_array[1].output_labels.append("ISYM")
  miller_arrays = run_and_reload(params, "tst6.mtz")
  arrays = mtz3.mtz_object().as_miller_arrays()
  assert (arrays[1].is_xray_reconstructed_amplitude_array())
  labels = reflection_file_editor.guess_array_output_labels(arrays[1])
  assert (labels == ["F","SIGF","DANO","SIGDANO","ISYM"])
  # now merged
  params.mtz_file.miller_array[1].output_labels = ["F","SIGF"]
  params.mtz_file.miller_array[1].anomalous_data = "merged"
  miller_arrays = run_and_reload(params, "tst6.mtz")
  assert (miller_arrays[1].is_xray_amplitude_array())
  assert (miller_arrays[1].info().label_string() == "F,SIGF")
  # handle duplicate array labels
  params.mtz_file.output_file = "tst7.mtz"
  params.mtz_file.miller_array[1].anomalous_data = "Auto"
  params.mtz_file.miller_array[1].file_name = "tst_data.mtz"
  params.mtz_file.miller_array[1].labels = \
    "I-obs(+),SIGI-obs(+),I-obs(-),SIGI-obs(-)"
  params.mtz_file.miller_array[1].output_labels = \
    "I-obs(+) SIGI-obs(+) I-obs(-) SIGI-obs(-)".split()
  try :
    miller_arrays = run_and_reload(params, "tst7.mtz")
  except Sorry as e :
    assert ("Duplicate column label 'I-obs(+)'" in str(e))
  else :
    raise Exception_expected
  params.mtz_file.resolve_label_conflicts = True
  miller_arrays = run_and_reload(params, "tst7.mtz")
  assert (miller_arrays[1].info().label_string() ==
          "I-obs_2(+),SIGI-obs_2(+),I-obs_2(-),SIGI-obs_2(-)")
  # bad output path
  params.mtz_file.output_file = os.path.join("/foo", "bar", str(os.getpid()),
    "data.mtz")
  try :
    miller_arrays = run_and_reload(params, "tst6.mtz")
  except Sorry as e :
    pass
  else :
    raise Exception_expected
  # no input arrays
  params = master_phil.fetch(source=new_phil).extract()
  params.mtz_file.miller_array = []
  try :
    miller_arrays = run_and_reload(params, "tst6.mtz")
  except Sorry as e :
    pass
  else :
    raise Exception_expected
  # eliminate_sys_absent
  symm2 = symm.customized_copy(
    space_group_info=sgtbx.space_group_info("P222"))
  set2 = miller.build_set(
    crystal_symmetry=symm2,
    anomalous_flag=True,
    d_min=1.0)
  data2 = flex.double(set2.indices().size(), 100.)
  sigmas2 = flex.double(set2.indices().size(), 4.)
  array2 = set2.array(data=data2, sigmas=sigmas2)
  array2.set_observation_type_xray_amplitude()
  flags2 = array2.generate_r_free_flags(
    use_lattice_symmetry=True).average_bijvoet_mates()
  mtz2 = array2.as_mtz_dataset(column_root_label="F-obs",
    wavelength=1.54)
  mtz2.add_miller_array(flags2, column_root_label="R-free-flags")
  mtz2.mtz_object().write("tst_data8.mtz")
  assert (array2.indices().size() == 352)
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst8.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data8.mtz
    labels = F-obs(+),SIGF-obs(+),F-obs(-),SIGF-obs(-)
    output_labels = F-obs(+) SIGF-obs(+) F-obs(-) SIGF-obs(-)
  }
  miller_array {
    file_name = tst_data8.mtz
    labels = R-free-flags
    output_labels = R-free-flags
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  miller_arrays = run_and_reload(params, "tst8.mtz")
  assert (miller_arrays[0].indices().size() == 341)
  params.mtz_file.crystal_symmetry.eliminate_sys_absent = False
  miller_arrays = run_and_reload(params, "tst8.mtz")
  assert (miller_arrays[0].indices().size() == 352)
  # wavelength
  assert approx_equal(miller_arrays[0].info().wavelength, 1.54)
  params.mtz_file.wavelength = 1.116
  params.mtz_file.output_file = "tst9.mtz"
  miller_arrays = run_and_reload(params, "tst9.mtz")
  assert approx_equal(miller_arrays[0].info().wavelength, 1.116)
  # second MTZ file with wavelength set by default to 1.0 (and ignored)
  mtz3 = array2.average_bijvoet_mates().as_mtz_dataset(
    column_root_label="F-obs_2",
    wavelength=None)
  mtz3.add_miller_array(flags2, column_root_label="R-free-flags")
  mtz3.mtz_object().write("tst_data9.mtz")
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst9.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data8.mtz
    labels = F-obs(+),SIGF-obs(+),F-obs(-),SIGF-obs(-)
    output_labels = F-obs(+) SIGF-obs(+) F-obs(-) SIGF-obs(-)
  }
  miller_array {
    file_name = tst_data9.mtz
    labels = F-obs_2,SIGF-obs_2
    output_labels = F-obs_2 SIGF-obs_2
  }
  miller_array {
    file_name = tst_data8.mtz
    labels = R-free-flags
    output_labels = R-free-flags
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  miller_arrays = run_and_reload(params, "tst9.mtz")
  assert approx_equal(miller_arrays[0].info().wavelength, 1.54)
  # now try two MTZ files with wavelengths not equal to 1.0
  mtz3 = array2.average_bijvoet_mates().as_mtz_dataset(
    column_root_label="F-obs_2",
    wavelength=1.116)
  mtz3.add_miller_array(flags2, column_root_label="R-free-flags")
  mtz3.mtz_object().write("tst_data9.mtz")
  try :
    miller_arrays = run_and_reload(params, "tst9.mtz")
  except Sorry as s :
    assert (str(s) == """Multiple wavelengths present in input experimental data arrays: 1.116, 1.54.  Please specify the wavelength parameter explicitly.""")
  else :
    raise Exception_expected
  params.mtz_file.wavelength = 1.54
  miller_arrays = run_and_reload(params, "tst9.mtz")
  assert approx_equal(miller_arrays[0].info().wavelength, 1.54)
  # Make sure wavelengths from non-experimental data arrays are ignored
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst9.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data8.mtz
    labels = F-obs(+),SIGF-obs(+),F-obs(-),SIGF-obs(-)
    output_labels = F-obs(+) SIGF-obs(+) F-obs(-) SIGF-obs(-)
  }
  miller_array {
    file_name = tst_data9.mtz
    labels = R-free-flags
    output_labels = R-free-flags
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  miller_arrays = run_and_reload(params, "tst9.mtz")
  assert approx_equal(miller_arrays[0].info().wavelength, 1.54)
  # map coefficients
  n_refl = len(array2.indices())
  d1 = flex.random_double(n_refl)
  d2 = flex.random_double(n_refl)
  coeffs_data = flex.complex_double(d1, d2)
  map_coeffs = array2.customized_copy(data=coeffs_data,
    sigmas=None).average_bijvoet_mates()
  map_coeffs.as_mtz_dataset(column_root_label="2FOFCWT").mtz_object().write(
    "tst_data10.mtz")
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst10.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 6,7,8,90,90,90
  miller_array {
    file_name = tst_data10.mtz
    labels = 2FOFCWT,PHI2FOFCWT
    output_labels = 2FOFCWT PHI2FOFCWT
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  miller_arrays = run_and_reload(params, "tst10.mtz")
  # R-free mismatches
  symm = crystal.symmetry(
    space_group_info=sgtbx.space_group_info("P212121"),
    unit_cell=uctbx.unit_cell((60,70,80,90,90,90)))
  set1 = miller.build_set(
    crystal_symmetry=symm,
    anomalous_flag=True,
    d_min=1.0)
  flags = set1.generate_r_free_flags(fraction=0.1, max_free=None)
  n_flipped = 0
  for i_hkl, (h,k,l) in enumerate(flags.indices()):
    if (i_hkl % 100 == 0) and (h > 0) and (k > 0) and (l > 0):
      flag = flags.data()[i_hkl]
      if (not flag):
        n_flipped += 1
        flags.data()[i_hkl] = True
  assert (n_flipped > 0)
  flags.as_mtz_dataset(column_root_label="FreeR_flag").mtz_object().write(
    "tst_data11.mtz")
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst11.mtz
  crystal_symmetry.space_group = P212121
  crystal_symmetry.unit_cell = 60,70,80,90,90,90
  miller_array {
    file_name = tst_data11.mtz
    labels = FreeR_flag(+),FreeR_flag(-)
    output_labels = FreeR_flag
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  try :
    miller_arrays = run_and_reload(params, "tst11.mtz")
  except Sorry :
    pass
  else :
    raise Exception_expected
  params.mtz_file.r_free_flags.remediate_mismatches = True
  params.mtz_file.r_free_flags.preserve_input_values = False
  miller_arrays = run_and_reload(params, "tst11.mtz")
  # R-free flags extension - corner case where (1,1,0) was being missed
  symm = crystal.symmetry(
    unit_cell=(45.23, 51.24, 80.49, 90, 90, 90),
    space_group_symbol="P212121")
  ms = miller.build_set(
    crystal_symmetry=symm,
    d_min=1.67290,
    anomalous_flag=True).resolution_filter(d_max=33.9095)
  ma = ms.array(data=flex.double(ms.size(), 100.0),
                sigmas=flex.double(ms.size(), 1.0))
  #FIXME check on other systems
  #assert (ma.average_bijvoet_mates().size() == 22238)
  ma.set_observation_type_xray_intensity()
  ma.export_as_scalepack_unmerged(file_name="tst_data12.sca")
  flags = ma.generate_r_free_flags().average_bijvoet_mates()
  cs2 = symm.customized_copy(unit_cell=(45.215, 51.203, 80.425, 90, 90, 90))
  flags = flags.customized_copy(crystal_symmetry=cs2).resolution_filter(
    d_max=24.396, d_min=1.94701)
  flags.as_mtz_dataset(column_root_label="FreeR_flag").mtz_object().write(
    "tst_flags.mtz")
  new_phil = libtbx.phil.parse("""
mtz_file {
  output_file = tst12.mtz
  crystal_symmetry {
    unit_cell = 45.215 51.203 80.425 90 90 90
    space_group = P 21 21 21
    output_unit_cell = 45.23 51.24 80.49 90 90 90
  }
  miller_array {
    file_name = tst_data12.sca
    labels = I(+),SIGI(+),I(-),SIGI(-),merged
    output_labels = I(+) SIGI(+) I(-) SIGI(-)
  }
  miller_array {
    file_name = tst_flags.mtz
    labels = FreeR_flag
    output_labels = FreeR_flag
  }
  r_free_flags {
    extend = True
    relative_to_complete_set = True
  }
}""")
  params = master_phil.fetch(source=new_phil).extract()
  miller_arrays = run_and_reload(params, "tst12.mtz")
  f_obs, r_free_flags = miller_arrays
  ls = f_obs.average_bijvoet_mates().lone_set(other=r_free_flags)
  assert (ls.size() == 0)

########################################################################
# this requires data in phenix_regression
# TODO replace this with equivalent using synthetic data
def exercise_command_line():
  if (not libtbx.env.has_module("phenix_regression")):
    print("phenix_regression not available, skipping")
    return
  file1 = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/enk.mtz",
    test=os.path.isfile)
  file2 = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/enk_r1A.mtz",
    test=os.path.isfile)
  log = null_out()
  test_file = "tst_hkl_editor_cmdline-1.mtz"
  test_file2 = "tst_hkl_editor_cmdline-2.mtz"
  if os.path.exists(test_file2):
    os.remove(test_file2)
  try :
    p = reflection_file_editor.run(
      args=[file1, file2, "dry_run=True"],
      out=log)
  except Sorry as e :
    assert str(e).startswith("Duplicate column label 'R-free-flags'.")
  else :
    raise Exception_expected
  p = reflection_file_editor.run(
    args=[file1, file2, "dry_run=True", "resolve_label_conflicts=True",
          "output_file=%s" % test_file],
    out=log)
  assert ([ c.label() for c in p.mtz_object.columns() ] ==
    ['H','K','L','I-obs','SIGI-obs','F-obs','R-free-flags','R-free-flags_2'])
  p.finish()
  mtz_in = file_reader.any_file(test_file)
  miller_arrays = mtz_in.file_object.as_miller_arrays()
  flags1 = miller_arrays[-2]
  assert flags1.info().label_string() == "R-free-flags"
  (d_max, d_min) = flags1.d_max_min()
  assert (approx_equal(d_max, 11.14, eps=0.01) and
          approx_equal(d_min, 1.503, eps=0.01))
  flags2 = miller_arrays[-1]
  assert flags2.info().label_string() == "R-free-flags_2"
  (d_max, d_min) = flags2.d_max_min()
  assert (approx_equal(d_max, 11.14, eps=0.01) and
          approx_equal(d_min,1.00,eps=0.01))
  p = reflection_file_editor.run(
    args=[file1, file2, "resolve_label_conflicts=True", "extend=True",
          "output_file=%s" % test_file],
    out=log)
  mtz_in = file_reader.any_file(test_file)
  miller_arrays = mtz_in.file_object.as_miller_arrays()
  (d_max_first, d_min_first) = miller_arrays[1].d_max_min()
  (d_max_last, d_min_last) = miller_arrays[-1].d_max_min()
  assert (d_max_first <= d_max_last)
  assert (d_min_first == d_min_last)
  #os.remove(test_file)
  old_r_free_1 = miller_arrays[-2]
  old_r_free_2 = miller_arrays[-1]
  # export to CCP4 convention
  p = reflection_file_editor.run(
    args=[file1, file2, "resolve_label_conflicts=True", "extend=False",
          "export_for_ccp4=False", "output_file=%s" % test_file],
     out=log)
  mtz_in = file_reader.any_file(test_file)
  miller_arrays = mtz_in.file_object.as_miller_arrays()
  # os.remove(test_file)
  assert miller_arrays[-2].info().label_string() == "R-free-flags"
  assert miller_arrays[-1].info().label_string() == "R-free-flags_2"
  old_r_free_1 = miller_arrays[-2]
  old_r_free_2 = miller_arrays[-1]
  p = reflection_file_editor.run(
    args=[file1, file2, "resolve_label_conflicts=True", "extend=False",
          "export_for_ccp4=True", "preserve_input_values=False",
          "output_file=%s" % test_file2],
    out=log)
  mtz_in = file_reader.any_file(test_file2)
  miller_arrays = mtz_in.file_object.as_miller_arrays()
  assert (len(set(miller_arrays[-2].data())) == 5)
  assert (len(set(miller_arrays[-1].data())) == 10)
  old_flags_1 = (old_r_free_1.data() == 1)
  old_flags_2 = (old_r_free_2.data() == 1)
  new_flags_1 = (miller_arrays[-2].data() == 0)
  new_flags_2 = (miller_arrays[-1].data() == 0) #.select(old_flags_2)
  assert (old_flags_1 == new_flags_1).count(False) == 0
  assert (old_flags_2 == new_flags_2).count(False) == 0
  cns_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/l.cv",
    test=os.path.isfile)
  p = reflection_file_editor.run(
    args=[cns_file, "space_group=P212121", "output_file=l_new.mtz",
          "unit_cell=28.17,52.857,68.93,90,90,90"],
    out=log)
  mtz_in = file_reader.any_file("l_new.mtz")
  assert (mtz_in.file_server.miller_arrays[0].info().labels ==
          ['F_INFL(+)', 'S_INFL(+)', 'F_INFL(-)', 'S_INFL(-)'])

# this mainly just tests recycling of wavelength
def exercise_xds_input():
  xds_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/xds_correct_unmerged.hkl",
    test=os.path.isfile)
  if (xds_file is None):
    print("phenix_regression not available, skipping exercise_xds_input")
    return False
  xds_in = file_reader.any_file(xds_file)
  wl = xds_in.file_server.miller_arrays[0].info().wavelength
  p = reflection_file_editor.run(
    args=[xds_file, "output_file=xds.mtz",],
    out=null_out())
  mtz_in = file_reader.any_file("xds.mtz")
  wl2 = mtz_in.file_server.miller_arrays[0].info().wavelength
  assert approx_equal(wl, wl2)
  p = reflection_file_editor.run(
    args=[xds_file, "output_file=xds.mtz", "wavelength=0.9792",],
    out=null_out())
  mtz_in = file_reader.any_file("xds.mtz")
  wl2 = mtz_in.file_server.miller_arrays[0].info().wavelength
  assert approx_equal(wl2, 0.9792)

def exercise_cif():
  if (not libtbx.env.has_module("phenix_regression")):
    print("phenix_regression not available, skipping")
    return
  cif_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/1yjp-sf.cif",
    test=os.path.isfile)
  p = reflection_file_editor.run(
    args=[cif_file, "dry_run=True",
          "output_file=cif_file.mtz"],
    out=null_out())
  assert ([ c.label() for c in p.mtz_object.columns() ] == [
     'H', 'K', 'L', 'crystal_id', 'wavelength_id', 'scale_group_code', 'F_meas_au', 'F_meas_sigma_au', 'FreeR_flag'])
  p.finish()
  mtz_in = file_reader.any_file("cif_file.mtz")
  miller_arrays = mtz_in.file_object.as_miller_arrays()
  assert [str(ma.info()) for ma in miller_arrays] == ['cif_file.mtz:crystal_id', 'cif_file.mtz:wavelength_id', 'cif_file.mtz:scale_group_code', 'cif_file.mtz:F_meas_au,F_meas_sigma_au', 'cif_file.mtz:FreeR_flag']


if __name__ == "__main__" :
  with warnings.catch_warnings(record=True) as w:
    exercise_basic(verbose=("--verbose" in sys.argv))
    assert (len(w) == 7), len(w)
    exercise_command_line()
    exercise_xds_input()
    exercise_cif()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_reflection_file_reader.py

"""
Collection of miscellaneous tests for iotbx.reflection_file_reader; this is
tested more thoroughly elsewhere.
"""

from __future__ import absolute_import, division, print_function
from iotbx import reflection_file_reader

def exercise_sigma_filtering():
  xds_raw = """\
!FORMAT=XDS_ASCII    MERGE=FALSE    FRIEDEL'S_LAW=FALSE
!OUTPUT_FILE=XDS_ASCII.HKL        DATE=23-Jan-2014
!Generated by CORRECT   (VERSION March 30, 2013)
!PROFILE_FITTING= TRUE
!NAME_TEMPLATE_OF_DATA_FRAMES=lysozyme_1.???? TIFF
!DATA_RANGE=       1     180
!ROTATION_AXIS=  0.999949  0.004913  0.008775
!OSCILLATION_RANGE=  0.500000
!STARTING_ANGLE=     0.000
!STARTING_FRAME=       1
!INCLUDE_RESOLUTION_RANGE=    50.000     2.9
!SPACE_GROUP_NUMBER=  150
!UNIT_CELL_CONSTANTS=   160.000   160.000    90.000  90.000  90.000 120.000
!REFLECTING_RANGE_E.S.D.=     0.139
!BEAM_DIVERGENCE_E.S.D.=     0.038
!X-RAY_WAVELENGTH=  1.746250
!INCIDENT_BEAM_DIRECTION= -0.002021 -0.001420  0.572650
!FRACTION_OF_POLARIZATION=   0.950
!POLARIZATION_PLANE_NORMAL=  0.000000  1.000000  0.000000
!AIR=  0.001981
!SILICON= 20.291441
!SENSOR_THICKNESS=  0.000000
!DETECTOR=CCDCHESS
!OVERLOAD=     65000
!NX=  4096  NY=  4096    QX=  0.073242  QY=  0.073242
!ORGX=   2062.24  ORGY=   2069.99
!DETECTOR_DISTANCE=   225.252
!DIRECTION_OF_DETECTOR_X-AXIS=   1.00000   0.00000   0.00000
!DIRECTION_OF_DETECTOR_Y-AXIS=   0.00000   1.00000   0.00000
!VARIANCE_MODEL=  4.530E+00  3.238E-04
!NUMBER_OF_ITEMS_IN_EACH_DATA_RECORD=12
!ITEM_H=1
!ITEM_K=2
!ITEM_L=3
!ITEM_IOBS=4
!ITEM_SIGMA(IOBS)=5
!ITEM_XD=6
!ITEM_YD=7
!ITEM_ZD=8
!ITEM_RLP=9
!ITEM_PEAK=10
!ITEM_CORR=11
!ITEM_PSI=12
!END_OF_HEADER
    -9    -2     0  1.229E+03 -4.897E+01  1686.8  1965.1     96.6 0.03139 100  70  -27.03
     9     2     0  1.427E+03 -5.665E+01  2416.2  2159.0     42.0 0.03114 100  67    0.58
    -2    -9     0  1.687E+03 -6.973E+01  1825.4  1759.3     23.1 0.09835  99  64  -34.39
     2   -11     0  1.614E+03  6.764E+01  1938.8  1701.4     14.2 0.11686 100  67  -45.67
     9   -11     0  1.802E+03  7.375E+01  2196.5  1713.5      2.0 0.11339 100  66  -55.56
     2     9     0  1.661E+03  6.853E+01  2277.7  2365.4      5.5 0.09825 100  66   29.11
"""
  with open("tst_iotbx_hkl_reader.hkl", "w") as f:
    f.write(xds_raw)
  hkl_in = reflection_file_reader.any_reflection_file(
    "tst_iotbx_hkl_reader.hkl")
  ma = hkl_in.as_miller_arrays(merge_equivalents=False)
  assert (ma[0].size() == 3)
  ma = hkl_in.as_miller_arrays(merge_equivalents=False,
    enforce_positive_sigmas=True)
  assert (ma[0].size() == 3)


if (__name__ == "__main__"):
  exercise_sigma_filtering()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_reflection_file_utils.py
from __future__ import absolute_import, division, print_function
import libtbx.load_env
from six.moves import range
if (libtbx.env.has_module("ccp4io")):
  from iotbx import reflection_file_reader
  from iotbx.reflection_file_utils import reflection_file_server, \
    guess_r_free_flag_value
  from iotbx import mtz
else:
  mtz = None
from cctbx import miller
from cctbx import crystal
from cctbx.array_family import flex
from libtbx.test_utils import Exception_expected, show_diff
from libtbx.utils import Sorry, null_out
from six.moves import cStringIO as StringIO
import os

def exercise_get_amplitudes_and_get_phases_deg():
  crystal_symmetry = crystal.symmetry(
    unit_cell=(10,11,12,85,95,100),
    space_group_symbol="P 1")
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=False,
    d_min=3)
  input_arrays = [miller_set.array(
    data=flex.random_double(size=miller_set.indices().size()))
      .set_observation_type_xray_amplitude()
        for i in [0,1]]
  mtz_dataset = input_arrays[0].as_mtz_dataset(column_root_label="F0")
  mtz_dataset.mtz_object().write("tmp_rfu1.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp_rfu1.mtz")]
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files)
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=None,
    convert_to_amplitudes_if_necessary=True,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert str(ampl.info()) == "tmp_rfu1.mtz:F0"
  ampl = reflection_file_srv.get_miller_array(labels="F0")
  assert str(ampl.info()) == "tmp_rfu1.mtz:F0"
  mtz_dataset.add_miller_array(
    miller_array=input_arrays[1], column_root_label="F1")
  mtz_dataset.mtz_object().write("tmp_rfu2.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp_rfu2.mtz")]
  err = StringIO()
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files,
    err=err)
  try:
    reflection_file_srv.get_amplitudes(
      file_name=None,
      labels=None,
      convert_to_amplitudes_if_necessary=True,
      parameter_scope="amplitudes",
      parameter_name="labels")
  except Sorry:
    assert not show_diff(err.getvalue(), """\

Multiple equally suitable arrays of amplitudes found.

Possible choices:
  tmp_rfu2.mtz:F0
  tmp_rfu2.mtz:F1

Please use amplitudes.labels
to specify an unambiguous substring of the target label.

""")
    err = reflection_file_srv.err = StringIO()
  else:
    raise Exception_expected
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=["F1"],
    convert_to_amplitudes_if_necessary=True,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert str(ampl.info()) == "tmp_rfu2.mtz:F1"
  try:
    reflection_file_srv.get_amplitudes(
      file_name=None,
      labels=["F2"],
      convert_to_amplitudes_if_necessary=True,
      parameter_name="labels",
      parameter_scope=None)
  except Sorry:
    assert not show_diff(err.getvalue(), """\

No matching array: labels=F2

Possible choices:
  tmp_rfu2.mtz:F0
  tmp_rfu2.mtz:F1

Please use labels
to specify an unambiguous substring of the target label.

""")
    err = reflection_file_srv.err = StringIO()
  else:
    raise Exception_expected
  assert len(reflection_file_srv.file_name_miller_arrays) == 1
  ampl = reflection_file_srv.get_amplitudes(
    file_name="tmp_rfu1.mtz",
    labels=None,
    convert_to_amplitudes_if_necessary=True,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert len(reflection_file_srv.file_name_miller_arrays) == 2
  assert str(ampl.info()) == "tmp_rfu1.mtz:F0"
  ampl = reflection_file_srv.get_amplitudes(
    file_name=os.path.abspath("tmp_rfu1.mtz"),
    labels=["f0"],
    convert_to_amplitudes_if_necessary=True,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert len(reflection_file_srv.file_name_miller_arrays) == 2
  assert str(ampl.info()) == "tmp_rfu1.mtz:F0"
  try:
    reflection_file_srv.get_amplitudes(
      file_name=None,
      labels=None,
      convert_to_amplitudes_if_necessary=True,
      parameter_scope=None,
      parameter_name=None)
  except Sorry:
    assert not show_diff(err.getvalue(), """\

Multiple equally suitable arrays of amplitudes found.

Possible choices:
  tmp_rfu2.mtz:F0
  tmp_rfu2.mtz:F1

Please specify an unambiguous substring of the target label.

""")
    err = reflection_file_srv.err = StringIO()
  else:
    raise Exception_expected
  #
  mtz_dataset.add_miller_array(
    miller_array=miller_set.array(
      data=flex.polar(
        flex.random_double(size=miller_set.indices().size()),
        flex.random_double(size=miller_set.indices().size()))),
    column_root_label="F2")
  mtz_dataset.add_miller_array(
    miller_array=miller_set.array(
      data=flex.random_double(size=miller_set.indices().size()),
      sigmas=flex.random_double(size=miller_set.indices().size())/10)
        .set_observation_type_xray_intensity(),
    column_root_label="F3")
  mtz_dataset.add_miller_array(
    miller_array=miller_set.array(
      data=flex.hendrickson_lattman(miller_set.indices().size(), (0,0,0,0))),
    column_root_label="P")
  mtz_dataset.mtz_object().write("tmp_rfu3.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp_rfu3.mtz")]
  err = StringIO()
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files,
    err=err)
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=["f2"],
    convert_to_amplitudes_if_necessary=False,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert str(ampl.info()) == "tmp_rfu3.mtz:F2,PHIF2"
  assert ampl.is_complex_array()
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=["f2"],
    convert_to_amplitudes_if_necessary=True,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert str(ampl.info()) == "tmp_rfu3.mtz:F2"
  assert ampl.is_real_array()
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=["f3"],
    convert_to_amplitudes_if_necessary=False,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert str(ampl.info()) == "tmp_rfu3.mtz:F3,SIGF3"
  assert ampl.is_xray_intensity_array()
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=["f3"],
    convert_to_amplitudes_if_necessary=True,
    parameter_scope="amplitudes",
    parameter_name="labels")
  assert str(ampl.info()) == "tmp_rfu3.mtz:F3,as_amplitude_array"
  assert ampl.is_real_array()
  ampl = reflection_file_srv.get_amplitudes(
    file_name=None,
    labels=None,
    convert_to_amplitudes_if_necessary=False,
    parameter_scope="amplitudes",
    parameter_name="labels",
    return_all_valid_arrays=True,
    strict=True)
  assert (len(ampl) == 2)
  for f in ampl :
    assert (not f.is_xray_intensity_array()) and (not f.is_complex_array())
  #
  phases = reflection_file_srv.get_phases_deg(
    file_name=None,
    labels=["f2"],
    convert_to_phases_if_necessary=False,
    original_phase_units=None,
    parameter_scope="phases",
    parameter_name="labels")
  assert str(phases.info()) == "tmp_rfu3.mtz:F2,PHIF2"
  assert phases.is_complex_array()
  phases = reflection_file_srv.get_phases_deg(
    file_name=None,
    labels=["f2"],
    convert_to_phases_if_necessary=True,
    original_phase_units=None,
    parameter_scope=None,
    parameter_name="labels")
  assert str(phases.info()) == "tmp_rfu3.mtz:PHIF2"
  assert phases.is_real_array()
  assert flex.mean(phases.data()) > 5
  phases = reflection_file_srv.get_phases_deg(
    file_name=None,
    labels=["PA"],
    convert_to_phases_if_necessary=False,
    original_phase_units=None,
    parameter_scope="phases",
    parameter_name="labels")
  assert str(phases.info()) == "tmp_rfu3.mtz:PA,PB,PC,PD"
  phases = reflection_file_srv.get_phases_deg(
    file_name=None,
    labels=["PA"],
    convert_to_phases_if_necessary=True,
    original_phase_units=None,
    parameter_scope="phases",
    parameter_name="labels")
  assert str(phases.info()) \
      == "tmp_rfu3.mtz:PA,PB,PC,PD,converted_to_centroid_phases"
  assert phases.is_real_array()
  for original_phase_units in [None, "deg", "rad"]:
    phases = reflection_file_srv.get_phases_deg(
      file_name=None,
      labels=["F0"],
      convert_to_phases_if_necessary=False,
      original_phase_units=original_phase_units,
      parameter_scope=None,
      parameter_name="labels")
    if (original_phase_units != "rad"):
      assert str(phases.info()) == "tmp_rfu3.mtz:F0"
    else:
      assert str(phases.info()) == "tmp_rfu3.mtz:F0,converted_to_deg"

def exercise_get_xtal_data():
  crystal_symmetry = crystal.symmetry(
    unit_cell=(10,11,12,85,95,100),
    space_group_symbol="P 1")
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=False,
    d_min=3)
  input_arrays = [miller_set.array(
    data=flex.random_double(size=miller_set.indices().size()),
    sigmas=flex.random_double(size=miller_set.indices().size())/10)
      .set_observation_type_xray_intensity()
        for i in [0,1]]
  mtz_dataset = input_arrays[0].as_mtz_dataset(column_root_label="F0")
  mtz_dataset.mtz_object().write("tmp_rfu1.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp_rfu1.mtz")]
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files)
  f_obs = reflection_file_srv.get_xray_data(
    file_name=None,
    labels=None,
    ignore_all_zeros=False,
    parameter_scope="xray_data")
  assert str(f_obs.info()) == "tmp_rfu1.mtz:F0,SIGF0"
  mtz_dataset.add_miller_array(
    miller_array=input_arrays[1], column_root_label="F1")
  mtz_dataset.mtz_object().write("tmp_rfu2.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp_rfu2.mtz")]
  err = StringIO()
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files,
    err=err)
  try:
    f_obs = reflection_file_srv.get_xray_data(
      file_name=None,
      labels=None,
      ignore_all_zeros=True,
      parameter_scope="xray_data")
  except Sorry:
    assert err.getvalue() == """\

Multiple equally suitable arrays of observed xray data found.

Possible choices:
  tmp_rfu2.mtz:F0,SIGF0
  tmp_rfu2.mtz:F1,SIGF1

Please use xray_data.labels
to specify an unambiguous substring of the target label.

"""
    err = reflection_file_srv.err = StringIO()
  else:
    raise Exception_expected
  f_obs_list = reflection_file_srv.get_xray_data(
    file_name = None,
    labels = None,
    ignore_all_zeros=True,
    parameter_scope="xray_data",
    return_all_valid_arrays=True,
    minimum_score=1)
  assert len(f_obs_list) == 2
  f_obs = reflection_file_srv.get_xray_data(
    file_name=None,
    labels=["F1", "SIGF1"],
    ignore_all_zeros=True,
    parameter_scope="xray_data")
  assert str(f_obs.info()) == "tmp_rfu2.mtz:F1,SIGF1"
  try:
    f_obs = reflection_file_srv.get_xray_data(
      file_name=None,
      labels=["F1", "SIGF0"],
      ignore_all_zeros=True,
      parameter_scope="xray_data")
  except Sorry:
    assert err.getvalue() == """\

No matching array: xray_data.labels=F1 SIGF0

Possible choices:
  tmp_rfu2.mtz:F0,SIGF0
  tmp_rfu2.mtz:F1,SIGF1

Please use xray_data.labels
to specify an unambiguous substring of the target label.

"""
    err = reflection_file_srv.err = StringIO()
  else:
    raise Exception_expected
  assert len(reflection_file_srv.file_name_miller_arrays) == 1
  f_obs = reflection_file_srv.get_xray_data(
    file_name="tmp_rfu1.mtz",
    labels=None,
    ignore_all_zeros=True,
    parameter_scope="xray_data")
  assert len(reflection_file_srv.file_name_miller_arrays) == 2
  assert str(f_obs.info()) == "tmp_rfu1.mtz:F0,SIGF0"
  f_obs = reflection_file_srv.get_xray_data(
    file_name=os.path.abspath("tmp_rfu1.mtz"),
    labels=["sigf0"],
    ignore_all_zeros=True,
    parameter_scope="xray_data")
  assert len(reflection_file_srv.file_name_miller_arrays) == 2
  assert str(f_obs.info()) == "tmp_rfu1.mtz:F0,SIGF0"
  try:
    f_obs = reflection_file_srv.get_xray_data(
      file_name=None,
      labels=None,
      ignore_all_zeros=True,
      parameter_scope="xray_data")
  except Sorry:
    assert err.getvalue() == """\

Multiple equally suitable arrays of observed xray data found.

Possible choices:
  tmp_rfu2.mtz:F0,SIGF0
  tmp_rfu2.mtz:F1,SIGF1

Please use xray_data.labels
to specify an unambiguous substring of the target label.

"""
    err = reflection_file_srv.err = StringIO()
  else:
    raise Exception_expected
  # test preference for anomalous (or merged) data
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=True,
    d_min=3)
  i_obs = miller_set.array(
    data=flex.random_double(size=miller_set.indices().size()),
    sigmas=flex.random_double(size=miller_set.indices().size())/10
      ).set_observation_type_xray_intensity()
  i_mean = i_obs.average_bijvoet_mates()
  mtz_data = i_obs.as_mtz_dataset(column_root_label="I")
  mtz_data.add_miller_array(i_mean, column_root_label="I")
  mtz_data.mtz_object().write("tmp_rfu3.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp_rfu3.mtz")]
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files)
  err = reflection_file_srv.err = StringIO()
  try :
    i_obs = reflection_file_srv.get_xray_data(
      file_name=None,
      labels=None,
      ignore_all_zeros=False,
      parameter_scope="xray_data")
  except Sorry :
    pass
  i_obs = reflection_file_srv.get_xray_data(
    file_name=None,
    labels=None,
    ignore_all_zeros=False,
    parameter_scope="xray_data",
    prefer_anomalous=True)
  assert (i_obs.info().label_string() == "I(+),SIGI(+),I(-),SIGI(-)")
  i_obs = reflection_file_srv.get_xray_data(
    file_name=None,
    labels=None,
    ignore_all_zeros=False,
    parameter_scope="xray_data",
    prefer_anomalous=False)
  assert (i_obs.info().label_string() == "I,SIGI")

def exercise_get_r_free_flags():
  crystal_symmetry = crystal.symmetry(
    unit_cell=(30,31,32,85,95,100),
    space_group_symbol="P 1")
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=False,
    d_min=3)
  n = miller_set.indices().size()
  exercise_flag_arrays = []
  exercise_flag_arrays.append(
    flex.int(list(flex.random_permutation(size=n)%10)))
  exercise_flag_arrays.append(flex.int(range(n)))
  exercise_flag_arrays.append(flex.int(n, 0))
  for style in ["ccp4", "cns", "shelx", "bool"]:
    for i_exercise,exercise_flag_array in enumerate(exercise_flag_arrays):
      for reversed in [False, True]:
        if (style == "ccp4"):
          if (reversed): break
          data = exercise_flag_array
          test_flag_value = 3
        else:
          if (not reversed):
            data = (exercise_flag_array == 0)
            test_flag_value = True
          else:
            data = (exercise_flag_array != 0)
            test_flag_value = False
          if (style == "cns"):
            data = data.as_int()
            test_flag_value = int(test_flag_value)
          elif (style == "shelx"):
            data = -data.as_int()
            data.set_selected((data == 0), 1)
            if (not reversed): test_flag_value = -1
            else:              test_flag_value = 1
        input_array = miller_set.array(data=data)
        mtz_dataset = input_array.as_mtz_dataset(
          column_root_label="FreeRflags")
        mtz_dataset.mtz_object().write("tmp.mtz")
        reflection_files = [reflection_file_reader.any_reflection_file(
          file_name="tmp.mtz")]
        err = StringIO()
        reflection_file_srv = reflection_file_server(
          crystal_symmetry=crystal_symmetry,
          force_symmetry=True,
          reflection_files=reflection_files,
          err=err)
        for trial_test_flag_value in [None, test_flag_value]:
          for trial_label in [None, "free", "foo"]:
            try:
              r_free_flags, actual_test_flag_value = \
                reflection_file_srv.get_r_free_flags(
                  file_name=None,
                  label=trial_label,
                  test_flag_value=trial_test_flag_value,
                  disable_suitability_test=False,
                  parameter_scope="r_free_flags")
            except Sorry as e:
              if (trial_label != "foo"):
                assert i_exercise > 0
                if (trial_label is None):
                  assert str(e) == """\
No array of R-free flags found.

For manual selection define:
  r_free_flags.test_flag_value
  r_free_flags.disable_suitability_test=True"""
                else:
                  assert str(e) == \
                      "Not a suitable array of R-free flags:" \
                    + " r_free_flags=free\n" \
                    + "To override the suitability test define:" \
                    + " r_free_flags.disable_suitability_test=True"
              else:
                assert str(e) == "No matching array: r_free_flags=foo"
                if (i_exercise == 0):
                  assert err.getvalue() == """\

No matching array: r_free_flags=foo

Possible choices:
  tmp.mtz:FreeRflags

Please use r_free_flags
to specify an unambiguous substring of the target label.

"""
                else:
                  assert err.getvalue() == """\

No matching array: r_free_flags=foo

"""
              err = reflection_file_srv.err = StringIO()
            else:
              assert i_exercise == 0
              actual_test_flag_value_2 = guess_r_free_flag_value(
                miller_array=r_free_flags,
                test_flag_value=trial_test_flag_value)
              assert (actual_test_flag_value_2 == actual_test_flag_value)
  for second_label in ["test", "foo"]:
    input_array = miller_set.array(data=exercise_flag_arrays[0])
    mtz_dataset = input_array.as_mtz_dataset(
      column_root_label="FreeRflags")
    mtz_dataset.add_miller_array(
      miller_array=input_array,
      column_root_label=second_label)
    mtz_dataset.mtz_object().write("tmp.mtz")
    reflection_files = [reflection_file_reader.any_reflection_file(
      file_name="tmp.mtz")]
    err = StringIO()
    reflection_file_srv = reflection_file_server(
      crystal_symmetry=crystal_symmetry,
      force_symmetry=True,
      reflection_files=reflection_files,
      err=err)
    try:
      reflection_file_srv.get_r_free_flags(
        file_name=None,
        label=None,
        test_flag_value=None,
        disable_suitability_test=False,
        parameter_scope="r_free_flags")
    except Sorry as e:
      assert str(e)=="Multiple equally suitable arrays of R-free flags found."
      assert err.getvalue() == """\

Multiple equally suitable arrays of R-free flags found.

Possible choices:
  tmp.mtz:FreeRflags
  tmp.mtz:test

Please use r_free_flags
to specify an unambiguous substring of the target label.

"""
      err = reflection_file_srv.err = StringIO()
    else:
      assert str(r_free_flags.info()) == "tmp.mtz:FreeRflags"
  r_free_flags, actual_test_flag_value = \
    reflection_file_srv.get_r_free_flags(
      file_name=None,
      label="FreeRflags",
      test_flag_value=3,
      disable_suitability_test=True,
      parameter_scope="r_free_flags")
  assert r_free_flags.info().label_string() == "FreeRflags"
  assert actual_test_flag_value == 3
  for label,test_flag_value in [(None,3), ("FreeRflags",None)]:
    try:
      reflection_file_srv.get_r_free_flags(
        file_name=None,
        label=label,
        test_flag_value=test_flag_value,
        disable_suitability_test=True,
        parameter_scope="r_free_flags")
    except Sorry as e:
      assert str(e) == "r_free_flags.disable_suitability_test=True:" \
        " Suitability test for R-free flags can only be disabled if both" \
        " r_free_flags.label and r_free_flags.test_flag_value are defined."
    else: raise Exception_expected
  # test corrupted R-free flags
  r_free_flags = miller_set.generate_r_free_flags()
  int_flags = r_free_flags.data().as_int()
  int_flags[100] = 10000000
  r_free_flags = r_free_flags.customized_copy(data=int_flags)
  mtz_dataset = r_free_flags.as_mtz_dataset(
    column_root_label="TEST")
  mtz_dataset.mtz_object().write("tmp.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp.mtz")]
  err = StringIO()
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files,
    err=err)
  flags, value = reflection_file_srv.get_r_free_flags(
    file_name=None,
    label=None,
    test_flag_value=None,
    disable_suitability_test=False,
    parameter_scope="r_free_flags")
  assert (value == 1)

def exercise_get_experimental_phases():
  crystal_symmetry = crystal.symmetry(
    unit_cell=(30,31,32,85,95,100),
    space_group_symbol="P 1")
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=False,
    d_min=3)
  input_array = miller_set.array(
    data=flex.hendrickson_lattman(miller_set.indices().size(), (0,0,0,0)))
  mtz_dataset = input_array.as_mtz_dataset(column_root_label="P")
  mtz_dataset.mtz_object().write("tmp.mtz")
  reflection_files = [reflection_file_reader.any_reflection_file(
    file_name="tmp.mtz")]
  err = StringIO()
  reflection_file_srv = reflection_file_server(
    crystal_symmetry=crystal_symmetry,
    force_symmetry=True,
    reflection_files=reflection_files,
    err=err)
  experimental_phases = reflection_file_srv.get_experimental_phases(
    file_name=None,
    labels=None,
    ignore_all_zeros=False,
    parameter_scope="experimental_phases")
  assert str(experimental_phases.info()) == "tmp.mtz:PA,PB,PC,PD"
  try:
    reflection_file_srv.get_experimental_phases(
      file_name=None,
      labels=None,
      ignore_all_zeros=True,
      parameter_scope="experimental_phases")
  except Sorry as e:
    assert str(e) == "No array of experimental phases found."
    assert err.getvalue() == """\

No array of experimental phases found.

"""
  else: raise Exception_expected

def exercise_hklf_plus_ins_or_res():
  import textwrap
  from os import path
  import shutil
  from libtbx.test_utils import approx_equal

  try:
    hklf4 = ['   1   0   0    1.11    0.11',
             '   0   1  -1    2.22    0.22',
             '  -1   0   1    4.44    0.44']
    hklf4 = [li + '\n' for li in hklf4]
    ins = textwrap.dedent(
    """\
    TITL 03srv209 in Pbca
    CELL 0.71073 7.35 9.541 12.842 90 90 90
    ZERR 4 0.002 0.002 0.003 0 0 0
    LATT 1
    SYMM 0.5-X,-Y,0.5+Z
    SYMM -X,0.5+Y,0.5-Z
    SYMM 0.5+X,0.5-Y,-Z
    SFAC C H O N
    UNIT 32 40 16 8
    HKLF 4
    """)
    folder = 'temp_data_hklf_plus_ins_res'
    if not path.exists(folder):
      os.mkdir(folder)
    insfn = path.join(folder, '03srv209.ins')
    hklfn = path.join(folder, '03srv209.hkl')
    with open(insfn, 'w') as f:
      f.write(ins)
    with open(hklfn, 'w') as f:
      f.writelines(hklf4)
    rf = reflection_file_reader.any_reflection_file(hklfn+'=hklf+ins/res')
    ma = rf.as_miller_arrays()[0]
    cs = ma.crystal_symmetry()
    assert cs.is_identical_symmetry(
      crystal.symmetry(unit_cell='7.35 9.541 12.842 90 90 90',
                       space_group_symbol='Pbca'))
    assert all(ma.indices() == flex.miller_index([(1,0,0), (0,1,-1), (-1,0,1)]))
    assert approx_equal(ma.data(), [1.11, 2.22, 4.44])
    assert approx_equal(ma.sigmas(), [0.11, 0.22, 0.44])
  finally:
    shutil.rmtree(folder, ignore_errors=True)

def exercise_extract_miller_array_from_file():
  from iotbx import reflection_file_utils as rfu
  from libtbx.test_utils import approx_equal
  log = null_out()
  sorry_counts = 0
  crystal_symmetry = crystal.symmetry(
    unit_cell=(30,31,32,85,95,100),
    space_group_symbol="P 1")
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=False,
    d_min=3)
  size = miller_set.indices().size()
  a1 = miller_set.array(
    data=flex.hendrickson_lattman(size, (1,1,1,1)))
  a2 = miller_set.array(data=flex.double(size, 2))
  a3 = miller_set.array(data=flex.double(size, 3))
  a4 = miller_set.array(data=flex.complex_double(size, 4+4j))
  a5 = miller_set.array(data=flex.complex_double(size, 5+5j))
  #
  mtz_dataset = a1.as_mtz_dataset(column_root_label="A1")
  mtz_dataset.mtz_object().write("tmp.mtz")
  ma = rfu.extract_miller_array_from_file(file_name="tmp.mtz", log=log)
  assert type(ma.data()) == flex.hendrickson_lattman
  #
  mtz_dataset = a5.as_mtz_dataset(column_root_label="A5")
  mtz_dataset.mtz_object().write("tmp.mtz")
  ma = rfu.extract_miller_array_from_file(file_name="tmp.mtz", log=log)
  assert type(ma.data()) == flex.complex_double
  #
  for tp in [None, "complex"]:
    mtz_dataset = a4.as_mtz_dataset(column_root_label="A4")
    mtz_dataset.add_miller_array(
      miller_array=a5, column_root_label="A5")
    mtz_dataset.mtz_object().write("tmp.mtz")
    try:
      rfu.extract_miller_array_from_file(file_name="tmp.mtz",type=tp, log=log)
    except Sorry as e:
      assert ("Multiple choices available." in str(e))
      sorry_counts += 1
  #
  for tp in [None, "real"]:
    mtz_dataset = a2.as_mtz_dataset(column_root_label="A2")
    mtz_dataset.add_miller_array(
      miller_array=a3, column_root_label="A3")
    mtz_dataset.mtz_object().write("tmp.mtz")
    try: rfu.extract_miller_array_from_file(file_name="tmp.mtz",type=tp,log=log)
    except Sorry as e:
      assert ("Multiple choices available." in str(e))
      sorry_counts += 1
  #
  mtz_dataset = a3.as_mtz_dataset(column_root_label="A3")
  mtz_dataset.add_miller_array(
    miller_array=a4, column_root_label="A4")
  mtz_dataset.mtz_object().write("tmp.mtz")
  try: rfu.extract_miller_array_from_file(file_name="tmp.mtz",log=log)
  except Sorry as e:
    assert ("Multiple choices available." in str(e))
    sorry_counts += 1
  #
  mtz_dataset = a4.as_mtz_dataset(column_root_label="A4")
  mtz_dataset.add_miller_array(
    miller_array=a5, column_root_label="A5")
  mtz_dataset.mtz_object().write("tmp.mtz")
  try:
    rfu.extract_miller_array_from_file(file_name="tmp.mtz",type="real",
      log=log)
  except Sorry as e:
    assert str(e)=="No suitable arrays."
    sorry_counts += 1
  #
  mtz_dataset = a2.as_mtz_dataset(column_root_label="A2")
  mtz_dataset.add_miller_array(
    miller_array=a3, column_root_label="A3")
  mtz_dataset.mtz_object().write("tmp.mtz")
  try:
    rfu.extract_miller_array_from_file(file_name="tmp.mtz",type="complex",
      log=log)
  except Sorry as e:
    assert str(e)=="No suitable arrays."
    sorry_counts += 1
  #
  mtz_dataset = a4.as_mtz_dataset(column_root_label="A4")
  mtz_dataset.add_miller_array(
    miller_array=a5, column_root_label="A5")
  mtz_dataset.mtz_object().write("tmp.mtz")
  ma = rfu.extract_miller_array_from_file(file_name="tmp.mtz",label="A5,PHIA5",
    log=log)
  assert approx_equal(ma.data()[0], 5+5j)
  #
  mtz_dataset = a4.as_mtz_dataset(column_root_label="A4")
  mtz_dataset.add_miller_array(
    miller_array=a5, column_root_label="A5")
  mtz_dataset.mtz_object().write("tmp.mtz")
  try:
    rfu.extract_miller_array_from_file(file_name="tmp.mtz",
      label="A5,PHIA5", type="real", log=log)
  except Sorry as e:
    assert str(e)=="No suitable arrays."
    sorry_counts += 1
  #
  assert sorry_counts == 8

def exercise_automation_wrappers():
  from iotbx.reflection_file_utils import process_raw_data, \
    change_space_group, load_f_obs_and_r_free
  from cctbx import sgtbx
  from libtbx.test_utils import approx_equal
  mtz_file = "tmp_iotbx_reflection_file_utils.mtz"
  crystal_symmetry = crystal.symmetry(
    unit_cell=(10,11,12,90,95,90),
    space_group_symbol="P 2")
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=True,
    d_min=1.5)
  n_obs = miller_set.indices().size()
  i_obs = miller_set.array(
    data=flex.random_double(size=n_obs)).set_observation_type_xray_intensity()
  i_obs = i_obs.customized_copy(sigmas=flex.sqrt(i_obs.data()))
  r_free_flags = miller_set.generate_r_free_flags()
  r_free_flags_partial = r_free_flags.select(flex.random_bool(n_obs, 0.9))
  out = StringIO()
  processed = process_raw_data(
    obs=i_obs,
    r_free_flags=None,
    test_flag_value=None,
    log=out)
  assert ("""WARNING: R-free flags not supplied.""" in out.getvalue())
  assert (processed.data_labels() == "F(+),SIGF(+),F(-),SIGF(-)")
  assert (processed.phase_labels() is None)
  assert (processed.flags_are_new())
  out2 = StringIO()
  processed2 = process_raw_data(
    obs=i_obs,
    r_free_flags=r_free_flags_partial,
    test_flag_value=True,
    log=out2)
  assert ("""WARNING: R-free flags are incomplete""" in out2.getvalue())
  assert (not processed2.flags_are_new())
  assert (processed.n_obs() == processed2.n_obs())
  processed.write_mtz_file(mtz_file, title="tst_iotbx", wavelength=0.9792)
  f_obs, r_free = load_f_obs_and_r_free(mtz_file)
  change_space_group(mtz_file, sgtbx.space_group_info("P21"))
  f_obs_new, r_free_new = load_f_obs_and_r_free(mtz_file)
  assert (f_obs_new.size() == f_obs.size() - 4)
  f_obs_new, r_free_new = load_f_obs_and_r_free(mtz_file,
    anomalous_flag=True)
  assert (str(f_obs_new.space_group_info()) == "P 1 21 1")
  assert (approx_equal(f_obs_new.info().wavelength, 0.9792))

def exercise():
  if (mtz is None):
    print("Skipping iotbx/tst_reflection_file_utils.py: ccp4io not available")
    return
  exercise_hklf_plus_ins_or_res()
  exercise_get_amplitudes_and_get_phases_deg()
  exercise_get_xtal_data()
  exercise_get_r_free_flags()
  exercise_get_experimental_phases()
  exercise_extract_miller_array_from_file()
  exercise_automation_wrappers()

def run():
  exercise()
  print("OK")

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_reflection_statistics.py
from __future__ import absolute_import, division, print_function
import libtbx.load_env
if (libtbx.env.has_module("ccp4io")):
  from iotbx.command_line import reflection_statistics
  from iotbx import mtz
else:
  mtz = None
from cctbx.array_family import flex
from cctbx import miller
from cctbx import crystal
from cctbx import sgtbx
from cctbx.sgtbx import subgroups
from cctbx.development import debug_utils
from six.moves import cStringIO as StringIO
import sys

def generate_mtz_files(space_group_info, anomalous_flag):
  crystal_symmetry = crystal.symmetry(
    unit_cell=space_group_info.any_compatible_unit_cell(volume=1000),
    space_group_info=space_group_info)
  miller_set = miller.build_set(
    crystal_symmetry=crystal_symmetry,
    anomalous_flag=anomalous_flag,
    d_min=1)
  miller_array = miller.array(
    miller_set=miller_set,
    data=flex.random_double(size=miller_set.indices().size()))
  miller_array_p1 = miller_array.expand_to_p1()
  miller_arrays = []
  file_names = []
  subgrs = subgroups.subgroups(space_group_info).groups_parent_setting()
  for i_subgroup, subgroup in enumerate(subgrs):
    subgroup_miller_array = miller_array_p1.customized_copy(
      space_group_info=sgtbx.space_group_info(group=subgroup)) \
        .merge_equivalents() \
        .array() \
        .as_reference_setting() \
        .set_observation_type_xray_intensity()
    file_name = "tmp_refl_stats%d.mtz" % i_subgroup
    mtz_object = subgroup_miller_array.as_mtz_dataset(
      column_root_label="FOBS").mtz_object().write(file_name=file_name)
    miller_arrays.append(
      subgroup_miller_array.f_sq_as_f().expand_to_p1().map_to_asu())
    file_names.append(file_name)
  return miller_arrays, file_names

def exercise_reflection_statistics(
      anomalous_flag,
      miller_arrays,
      file_names,
      verbose):
  out = StringIO()
  try:
    sys.stdout = out
    reflection_statistics.run(
      args=["--lattice_symmetry_max_delta=0.01"]+file_names)
  finally:
    sys.stdout = sys.__stdout__
    if (0 or verbose):
      sys.stdout.write(out.getvalue())
  done = set()
  for line in out.getvalue().splitlines():
    if (line.startswith("CC ")):
      type,i,j,cc,cb_op = line.split()[1:6]
      key = " ".join([type,i,j])
      cc = float(cc)
      if (key not in done):
        if (cc != 1.000):
          raise AssertionError(line.strip())
        done.add(key)
      # check reindexing matrices
      assert type in ["Obs", "Ano"]
      if (type == "Obs"):
        i, j = int(i)-1, int(j)-1
        ma_j = miller_arrays[j].change_basis(cb_op).expand_to_p1().map_to_asu()
        ma_i, ma_j = miller_arrays[i].common_sets(other=ma_j)
        if (float("%6.3f" % ma_i.correlation(ma_j).coefficient()) != cc):
          raise AssertionError(line.strip())
  n = len(file_names)
  expected_number_of_cc_lines = n*(n-1)//2
  if (anomalous_flag):
    expected_number_of_cc_lines *= 2
  assert len(done) == expected_number_of_cc_lines

def run_call_back(flags, space_group_info):
  for anomalous_flag in [False, True]:
    if (flags.Verbose):
      print(space_group_info, "anomalous_flag:", anomalous_flag)
    if (anomalous_flag and space_group_info.group().is_centric()): continue
    miller_arrays, file_names = generate_mtz_files(
      space_group_info=space_group_info,
      anomalous_flag=anomalous_flag)
    exercise_reflection_statistics(
      anomalous_flag=anomalous_flag,
      miller_arrays=miller_arrays,
      file_names=file_names,
      verbose=flags.Verbose)

def exercise():
  if (mtz is None):
    print("Skipping iotbx/regression/tst_reflection_statistics.py:" \
      " ccp4io not available")
    return
  debug_utils.parse_options_loop_space_groups(sys.argv[1:], run_call_back)

def run():
  exercise()
  print("OK")

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_reindex.py
from __future__ import absolute_import, division, print_function

import libtbx.load_env
from libtbx.test_utils import approx_equal
from libtbx.utils import null_out
import os

def exercise():
  hkl_file = libtbx.env.find_in_repositories(
    relative_path="phenix_regression/reflection_files/1yjp.mtz",
    test=os.path.isfile)
  if (hkl_file is None):
    print("Skipping")
    return
  from iotbx.command_line import reindex
  from iotbx import file_reader
  output_file = reindex.run(args=[hkl_file, "change_of_basis=c,b,a",
    "output_file=tmp666.mtz"], out=null_out())
  assert os.path.isfile(output_file)
  arrays_in = file_reader.any_file(hkl_file).file_server.miller_arrays
  arrays_out = file_reader.any_file(output_file).file_server.miller_arrays
  assert (approx_equal(arrays_in[0].unit_cell().parameters(),
    (21.937, 4.866, 23.477, 90.0, 107.08, 90.0), eps=0.001))
  assert (approx_equal(arrays_out[0].unit_cell().parameters(),
    (23.477, 4.866, 21.937, 90.0, 107.08, 90.0), eps=0.001))
  assert (arrays_out[0].info().labels == ["FOBS_X","SIGFOBS_X"])

if (__name__ == "__main__"):
  exercise()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_restraints_merge.py
from __future__ import division, print_function
import os

from iotbx.cif import restraint_file_merge

scn1 = '''
data_comp_list
loop_
_chem_comp.id
_chem_comp.three_letter_code
_chem_comp.name
_chem_comp.group
_chem_comp.number_atoms_all
_chem_comp.number_atoms_nh
_chem_comp.desc_level
 SCN SCN THIOCYANATEION NON-POLYMER 3 3 "."
#
data_comp_SCN
loop_
_chem_comp_atom.comp_id
_chem_comp_atom.atom_id
_chem_comp_atom.type_symbol
_chem_comp_atom.type_energy
 SCN S S S1
 SCN C C CSP
 SCN N N N
#
loop_
_chem_comp_bond.comp_id
_chem_comp_bond.atom_id_1
_chem_comp_bond.atom_id_2
_chem_comp_bond.type
_chem_comp_bond.value_dist
_chem_comp_bond.value_dist_esd
 SCN S C single 1.574 0.02
 SCN C N triple 1.173 0.02
#
loop_
_chem_comp_angle.comp_id
_chem_comp_angle.atom_id_1
_chem_comp_angle.atom_id_2
_chem_comp_angle.atom_id_3
_chem_comp_angle.value_angle
_chem_comp_angle.value_angle_esd
 SCN S C N 178.4 1.5
 '''

scn2 = '''
 data_comp_list
loop_
_chem_comp.id
_chem_comp.three_letter_code
_chem_comp.name
_chem_comp.group
_chem_comp.number_atoms_all
_chem_comp.number_atoms_nh
_chem_comp.desc_level
SCN        SCN 'thiocyanate              ' ligand 3 3 .
#
data_comp_SCN
#
loop_
_chem_comp_atom.comp_id
_chem_comp_atom.atom_id
_chem_comp_atom.type_symbol
_chem_comp_atom.type_energy
_chem_comp_atom.charge
_chem_comp_atom.partial_charge
_chem_comp_atom.x
_chem_comp_atom.y
_chem_comp_atom.z
SCN         S      S   S     -1    .      -1.0850    0.0000    0.0000
SCN         C      C   CSP    0    .       0.7250    0.0000    0.0000
SCN         N      N   NS     0    .       1.8610    0.0000    0.0000
#
loop_
_chem_comp_bond.comp_id
_chem_comp_bond.atom_id_1
_chem_comp_bond.atom_id_2
_chem_comp_bond.type
_chem_comp_bond.value_dist
_chem_comp_bond.value_dist_esd
_chem_comp_bond.value_dist_neutron
SCN   S       C     single        1.810 0.020     1.810
SCN   C       N     triple        1.136 0.020     1.136
#
loop_
_chem_comp_angle.comp_id
_chem_comp_angle.atom_id_1
_chem_comp_angle.atom_id_2
_chem_comp_angle.atom_id_3
_chem_comp_angle.value_angle
_chem_comp_angle.value_angle_esd
SCN   N       C       S           180.00 3.000
'''

def main():
  restraint_file_merge.run([scn1, scn2],
                           'restraint_file_merge_01.cif',
                           no_file_access=True,
                           )
  restraint_file_merge.run([scn2, scn1],
                           'restraint_file_merge_02.cif',
                           no_file_access=True,
                           )
  restraint_file_merge.run([scn1, scn2],
                           'restraint_file_merge_03.cif',
                           no_file_access=True,
                           no_file_but_save=True,
                           )
  restraint_file_merge.run([scn2, scn1],
                           'restraint_file_merge_04.cif',
                           no_file_access=True,
                           no_file_but_save=True,
                           )
  filenames = os.listdir('.')
  assert 'restraint_file_merge_01.cif' not in filenames
  assert 'restraint_file_merge_02.cif' not in filenames
  assert 'restraint_file_merge_03.cif' in filenames
  assert 'restraint_file_merge_04.cif' in filenames

if __name__ == '__main__':
  main()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_selected_hierarchy_flip.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb

pdb_str = """
SSBOND   1 CYS     30    CYS    115
CRYST1   28.174   52.857   68.929  90.00  90.00  90.00 P 21 21 21
ATOM    233  N   CYS    30      20.478 -18.192  14.641  1.00  7.59           N
ATOM    234  CA  CYS    30      20.362 -19.361  15.504  1.00  7.59           C
ATOM    235  C   CYS    30      20.010 -18.961  16.933  1.00  7.59           C
ATOM    236  O   CYS    30      19.363 -19.717  17.658  1.00  7.59           O
ATOM    237  CB  CYS    30      21.661 -20.169  15.489  1.00  7.59           C
ATOM    238  SG  CYS    30      23.138 -19.221  15.922  1.00  7.59           S
ATOM    884  N   CYS   115      24.507 -23.447  17.578  1.00  7.59           N
ATOM    885  CA  CYS   115      25.208 -22.644  16.583  1.00  7.59           C
ATOM    886  C   CYS   115      26.689 -23.004  16.526  1.00  7.59           C
ATOM    887  O   CYS   115      27.240 -23.233  15.449  1.00  7.59           O
ATOM    888  CB  CYS   115      25.040 -21.153  16.883  1.00  7.59           C
ATOM    889  SG  CYS   115      25.798 -20.055  15.662  1.00  7.59           S
ATOM    910  N   ASP   119      28.272 -25.962  10.279  1.00  7.59           N
ATOM    911  CA  ASP   119      28.924 -25.690   9.004  1.00  7.59           C
ATOM    912  C   ASP   119      27.987 -24.944   8.060  1.00  7.59           C
ATOM    913  O   ASP   119      26.943 -25.464   7.667  1.00  7.59           O
ATOM    914  CB  ASP   119      29.397 -26.993   8.355  1.00  7.59           C
ATOM    915  CG  ASP   119      30.145 -26.760   7.057  1.00  7.59           C
ATOM    916  OD1 ASP   119      30.431 -25.589   6.731  1.00  7.59           O
ATOM    917  OD2 ASP   119      30.453 -27.752   6.362  1.00  7.59           O
TER
END
"""

def run():
  ph = iotbx.pdb.input(source_info=None, lines=pdb_str).construct_hierarchy()
  asc = ph.atom_selection_cache()
  sel = asc.selection("name SG and (resseq 30 or resseq 115)")
  h = ph.select(~sel)
  h.flip_symmetric_amino_acids()

if (__name__ == "__main__"):
  run()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_show_systematic_absences.py

from __future__ import absolute_import, division, print_function
from iotbx.command_line import show_systematic_absences
from cctbx.development import random_structure
from cctbx import sgtbx
from scitbx.array_family import flex
from libtbx.utils import Sorry
from libtbx.test_utils import Exception_expected
from six.moves import cStringIO as StringIO
import random

def exercise():
  flex.set_random_seed(12345)
  random.seed(12345)
  xrs = random_structure.xray_structure(
    sgtbx.space_group_info("P21212"),
    elements=["const"]*100)
  f_calc = xrs.structure_factors(d_min=2.5).f_calc()
  i_calc = abs(f_calc).f_as_f_sq().set_observation_type_xray_intensity()
  i_calc = i_calc.customized_copy(
    space_group_info=sgtbx.space_group_info("P222"),
    sigmas=flex.double(i_calc.size(), 1.0))
  complete_set = i_calc.complete_set()
  lone_set = complete_set.lone_set(other=i_calc)
  i_abs = lone_set.array(data=flex.double(lone_set.size(), 5),
    sigmas=flex.double(lone_set.size(), 10))
  i_calc = i_calc.concatenate(other=i_abs).set_observation_type_xray_intensity()
  i_calc.export_as_scalepack_unmerged(file_name="tst_sys_absent.sca")
  args = ["tst_sys_absent.sca"]
  out = StringIO()
  try :
    show_systematic_absences.run(args=args, out=out)
  except Sorry :
    pass
  else :
    raise Exception_expected
  args.append(",".join([ str(x) for x in xrs.unit_cell().parameters() ]))
  show_systematic_absences.run(args=args, out=out)
  assert (out.getvalue().count("  (   0,    3,    0): i/sigi =    0.5") == 4)
  i_calc = i_calc.customized_copy(sigmas=None)
  i_calc.as_mtz_dataset(column_root_label="I").mtz_object().write("tst_sys_absent.mtz")
  args = ["tst_sys_absent.mtz"]
  try :
    show_systematic_absences.run(args=args, out=out)
  except Sorry :
    pass
  else :
    raise Exception_expected

if (__name__ == "__main__"):
  exercise()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_simple_map_coefficients.py

from __future__ import absolute_import, division, print_function

def exercise():
  from iotbx import file_reader
  from cctbx.array_family import flex
  from cctbx import crystal
  from cctbx import xray
  from libtbx import easy_run
  file_base = "tmp_iotbx_simple_map_coefficients"
  quartz_structure = xray.structure(
    special_position_settings=crystal.special_position_settings(
      crystal_symmetry=crystal.symmetry(
        unit_cell=(5.01,5.01,5.47,90,90,120),
        space_group_symbol="P6222")),
    scatterers=flex.xray_scatterer([
      xray.scatterer(
        label="Si",
        site=(1/2.,1/2.,1/3.),
        u=0.2,
        fp=0.255, # from Sasaki table @ 1.54 Angstrom
        fdp=0.325),
      xray.scatterer(
        label="O",
        site=(0.197,-0.197,0.83333),
        u=0)]))
  fc = quartz_structure.structure_factors(d_min=1.0).f_calc()
  I = fc.amplitudes().f_as_f_sq()
  PHI = fc.average_bijvoet_mates().phases(deg=True).set_observation_type(None)
  FOM = PHI.customized_copy(
    data=flex.double(PHI.data().size(), 1.0)).set_observation_type(None)
  mtz = I.as_mtz_dataset(column_root_label="I")
  mtz.add_miller_array(PHI,
    column_root_label="PHI",
    column_types="P")
  mtz.add_miller_array(FOM,
    column_root_label="FOM",
    column_types="W")
  mtz_file = file_base + ".mtz"
  mtz.mtz_object().write(mtz_file)
  map_file = "%s_map.mtz" % file_base
  # Fo map
  args = [
    mtz_file,
    "output_file=%s" % map_file,
  ]
  cmd = "iotbx.simple_map_coefficients"
  result = easy_run.fully_buffered("%s %s" % (cmd, " ".join(args))
    ).raise_if_errors()
  assert ("Applying weights in FOM" in result.stdout_lines)
  map_in = file_reader.any_file(map_file).assert_file_type("hkl")
  map_coeffs = map_in.file_server.miller_arrays[0]
  real_map = map_coeffs.fft_map().apply_sigma_scaling().real_map_unpadded()
  site = quartz_structure.sites_frac()[0]
  assert (real_map.eight_point_interpolation(site) > 3)
  # anomalous map
  args.append("map_type=anom")
  result = easy_run.fully_buffered("%s %s" % (cmd, " ".join(args))
    ).raise_if_errors()
  assert (not "Applying weights in FOM" in result.stdout_lines)
  map_in = file_reader.any_file(map_file).assert_file_type("hkl")
  map_coeffs = map_in.file_server.miller_arrays[0]
  real_map = map_coeffs.fft_map().apply_sigma_scaling().real_map_unpadded()
  assert (real_map.eight_point_interpolation(site) > 3)
  # no FOM
  mtz = I.as_mtz_dataset(column_root_label="I")
  mtz.add_miller_array(PHI,
    column_root_label="PHI",
    column_types="P")
  mtz.mtz_object().write(mtz_file)
  args = [
    mtz_file,
    "output_file=%s" % map_file,
  ]
  result = easy_run.fully_buffered("%s %s" % (cmd, " ".join(args))
    ).raise_if_errors()
  assert (not "Applying weights in FOM" in result.stdout_lines)
  map_in = file_reader.any_file(map_file).assert_file_type("hkl")
  map_coeffs = map_in.file_server.miller_arrays[0]
  real_map = map_coeffs.fft_map().apply_sigma_scaling().real_map_unpadded()
  site = quartz_structure.sites_frac()[0]
  assert (real_map.eight_point_interpolation(site) > 3)
  # now check for error when use_weights=True
  args.append("use_weights=True")
  result = easy_run.fully_buffered("%s %s" % (cmd, " ".join(args)))
  assert (result.return_code == 1)
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_simple_parser.py
from __future__ import absolute_import, division, print_function
from iotbx import simple_parser
from libtbx.phil import tokenizer
import sys

def exercise_basic():
  tests = [
  ["a",
    ['a']
  ],
  ["a and b",
    ['a', 'b', 'and']
  ],
  ["a or b",
    ['a', 'b', 'or']
  ],
  ["not a or b",
    ['a', 'not', 'b', 'or']
  ],
  ["not a or b and c",
    ['a', 'not', 'b', 'c', 'and', 'or']
  ],
  ["not (a or b) and c",
    ['a', 'b', 'or', 'not', 'c', 'and']
  ],
  ["(not (a or b) and c)",
    ['a', 'b', 'or', 'not', 'c', 'and']
  ],
  ["not ((a or b) and c)",
    ['a', 'b', 'or', 'c', 'and', 'not']
  ],
  ]
  verbose = "--verbose" in sys.argv[1:]
  for input_string,expected_result in tests:
    infix = tokenizer.word_iterator(input_string=input_string)
    if (verbose): print(input_string)
    postfix = [word
      for word,word_iterator in simple_parser.infix_as_postfix(infix)]
    if (verbose): print([word.value for word in postfix])
    assert [word.value for word in postfix] == expected_result
    if (verbose): print()

def rewrite_parser(
      word_iterator,
      stop_if_parse_stack_is_empty=False,
      stop_word=None,
      expect_nonmatching_closing_parenthesis=False):
  result_stack = []
  for word,word_iterator in simple_parser.infix_as_postfix(
         word_iterator=word_iterator,
         stop_if_parse_stack_is_empty=stop_if_parse_stack_is_empty,
         stop_word=stop_word,
         expect_nonmatching_closing_parenthesis
           =expect_nonmatching_closing_parenthesis):
    if (word.value == "not"):
      arg = result_stack.pop()
      result_stack.append("(!%s)" % arg)
    elif (word.value in ["and", "or"]):
      rhs = result_stack.pop()
      lhs = result_stack.pop()
      if (word.value == "and"):
        result_stack.append("(%s&%s)" % (lhs, rhs))
      else:
        result_stack.append("(%s|%s)" % (lhs, rhs))
    elif (word.value == "within"):
      assert word_iterator.pop().value == "("
      radius = float(word_iterator.pop().value)
      assert word_iterator.pop().value == ","
      nested_result = rewrite_parser(
        word_iterator=word_iterator,
        expect_nonmatching_closing_parenthesis=True)
      if (nested_result == ""): raise RuntimeError("Missing argument.")
      result_stack.append("@(%.2f,%s)" % (radius, nested_result))
    elif (word.value == "around"):
      assert word_iterator.pop().value == "("
      nested_result = rewrite_parser(
        word_iterator=word_iterator,
        stop_word=",")
      if (nested_result == ""): raise RuntimeError("Missing argument.")
      radius = float(word_iterator.pop().value)
      assert word_iterator.pop().value == ")"
      result_stack.append("@(%.2f,%s)" % (radius, nested_result))
    elif (word.value == "for"):
      var = word_iterator.pop().value
      assert word_iterator.pop().value == "in"
      nested_result = rewrite_parser(
        word_iterator=word_iterator,
        stop_if_parse_stack_is_empty=True)
      if (nested_result == ""): raise RuntimeError("Missing argument.")
      result_stack.append("(for %s in %s)" % (var, nested_result))
    else:
      result_stack.append(word.value)
  if (len(result_stack) == 0):
    return ""
  result = result_stack[0]
  for item in result_stack[1:]:
    result = "(%s&%s)" % (result, item)
  return result

def rewrite(input_string):
  word_iterator = tokenizer.word_iterator(input_string=input_string)
  return rewrite_parser(word_iterator=word_iterator)

def exercise_nested():
  tests = [
  ["a",
    "a",
  ],
  ["a and b",
    "(a&b)",
  ],
  ["a and b or c",
    "((a&b)|c)",
  ],
  ["a or b and c",
    "(a|(b&c))",
  ],
  ["within(5, a or b and c)",
    "@(5.00,(a|(b&c)))",
  ],
  ["within(5, (a or b) and c)",
    "@(5.00,((a|b)&c))",
  ],
  ["around(a or b and c, 5)",
    "@(5.00,(a|(b&c)))",
  ],
  ["around((a or b) and c, 5)",
    "@(5.00,((a|b)&c))",
  ],
  ["around((a or b) and within(3, c or d), 5)",
    "@(5.00,((a|b)&@(3.00,(c|d))))"
  ],
  ["for i in a",
    "(for i in a)",
  ],
  ["for i in not a",
    "(for i in (!a))",
  ],
  ["for i in a or b",
    "((for i in a)|b)",
  ],
  ["for i in (a or b)",
    "(for i in (a|b))",
  ],
  ["for i in (a or b) and c",
    "((for i in (a|b))&c)",
  ],
  ]
  verbose = "--verbose" in sys.argv[1:]
  for input_string,expected_result in tests:
    show = verbose or expected_result is None
    if (show): print(input_string)
    result = rewrite(input_string=input_string)
    if (show): print(result)
    if (expected_result is not None):
      assert result == expected_result
    if (show): print()

def exercise():
  exercise_basic()
  exercise_nested()
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_sort_atoms.py
from __future__ import absolute_import, division, print_function

from libtbx import easy_run
import time
import os
from libtbx.test_utils import show_diff

def exercise_1(prefix="tst_sort_atoms_1"):
  """
  In an ideal world, this program should preserve everything that was in
  input pdb file: HEADER, TITLE, REMARKs, CONNECT, etc.
  Right now it preserves only atoms, CRYST1 and HELIX/SHEET records.
  """

  input_pdb_str = """\
HEADER    UNKNOWN FUNCTION                        17-FEB-05   1YWF
TITLE     CRYSTAL STRUCTURE OF MYCOBACTERIUM TUBERCULOSIS PROTEIN
TITLE    2 TYROSINE PHOSPHATASE PTPB
COMPND    MOL_ID: 1;
COMPND   2 MOLECULE: PHOSPHOTYROSINE PROTEIN PHOSPHATASE PTPB;
COMPND   3 CHAIN: A;
COMPND   4 ENGINEERED: YES
SOURCE    MOL_ID: 1;
SOURCE   2 ORGANISM_SCIENTIFIC: MYCOBACTERIUM TUBERCULOSIS;
SOURCE   3 ORGANISM_TAXID: 1773;
SOURCE   4 EXPRESSION_SYSTEM: ESCHERICHIA COLI BL21;
SOURCE   5 EXPRESSION_SYSTEM_TAXID: 511693;
SOURCE   6 EXPRESSION_SYSTEM_STRAIN: BL21;
SOURCE   7 EXPRESSION_SYSTEM_VECTOR_TYPE: PLASMID;
SOURCE   8 EXPRESSION_SYSTEM_PLASMID: PET28B+
KEYWDS    FOUR STRANDED PARALLEL BETA SHEET WITH FLANKING HELICES,
KEYWDS   2 STRUCTURAL GENOMICS, PSI, PROTEIN STRUCTURE INITIATIVE, TB
KEYWDS   3 STRUCTURAL GENOMICS CONSORTIUM, TBSGC, UNKNOWN FUNCTION
EXPDTA    X-RAY DIFFRACTION
AUTHOR    C.GRUNDNER,H.L.NG,T.ALBER,TB STRUCTURAL GENOMICS CONSORTIUM
AUTHOR   2 (TBSGC)
REVDAT   3   24-FEB-09 1YWF    1       VERSN
REVDAT   2   24-OCT-06 1YWF    1       KEYWDS AUTHOR REMARK MASTER
REVDAT   1   22-NOV-05 1YWF    0
JRNL        AUTH   C.GRUNDNER,H.L.NG,T.ALBER
JRNL        TITL   MYCOBACTERIUM TUBERCULOSIS PROTEIN TYROSINE
JRNL        TITL 2 PHOSPHATASE PTPB STRUCTURE REVEALS A DIVERGED FOLD
JRNL        TITL 3 AND A BURIED ACTIVE SITE.
JRNL        REF    STRUCTURE                     V.  13  1625 2005
JRNL        REFN                   ISSN 0969-2126
JRNL        PMID   16271885
JRNL        DOI    10.1016/J.STR.2005.07.017
REMARK   1
REMARK   2
REMARK   2 RESOLUTION.    1.71 ANGSTROMS.
REMARK   3
REMARK   3 REFINEMENT.
REMARK   3   PROGRAM     : REFMAC 5.1.24
REMARK   3   AUTHORS     : MURSHUDOV,VAGIN,DODSON
REMARK   3
REMARK   3    REFINEMENT TARGET : MAXIMUM LIKELIHOOD
REMARK   3
REMARK   3  DATA USED IN REFINEMENT.
REMARK   3   RESOLUTION RANGE HIGH (ANGSTROMS) : 1.71
REMARK   3   RESOLUTION RANGE LOW  (ANGSTROMS) : 79.00
REMARK   3   DATA CUTOFF            (SIGMA(F)) : 0.000
REMARK   3   COMPLETENESS FOR RANGE        (%) : 93.5
REMARK   3   NUMBER OF REFLECTIONS             : 32240
REMARK   3
REMARK   3  FIT TO DATA USED IN REFINEMENT.
REMARK   3   CROSS-VALIDATION METHOD          : THROUGHOUT
REMARK   3   FREE R VALUE TEST SET SELECTION  : RANDOM
REMARK   3   R VALUE     (WORKING + TEST SET) : 0.178
REMARK   3   R VALUE            (WORKING SET) : 0.176
REMARK   3   FREE R VALUE                     : 0.214
REMARK   3   FREE R VALUE TEST SET SIZE   (%) : 5.000
REMARK   3   FREE R VALUE TEST SET COUNT      : 1692
REMARK   3
REMARK   3  FIT IN THE HIGHEST RESOLUTION BIN.
REMARK   3   TOTAL NUMBER OF BINS USED           : 20
REMARK   3   BIN RESOLUTION RANGE HIGH       (A) : 1.71
REMARK   3   BIN RESOLUTION RANGE LOW        (A) : 1.76
REMARK   3   REFLECTION IN BIN     (WORKING SET) : 1609
REMARK   3   BIN COMPLETENESS (WORKING+TEST) (%) : NULL
REMARK   3   BIN R VALUE           (WORKING SET) : 0.2670
REMARK   3   BIN FREE R VALUE SET COUNT          : 89
REMARK   3   BIN FREE R VALUE                    : 0.2680
REMARK   3
REMARK   3  NUMBER OF NON-HYDROGEN ATOMS USED IN REFINEMENT.
REMARK   3   PROTEIN ATOMS            : 1858
REMARK   3   NUCLEIC ACID ATOMS       : 0
REMARK   3   HETEROGEN ATOMS          : 5
REMARK   3   SOLVENT ATOMS            : 264
REMARK   3
REMARK   3  B VALUES.
REMARK   3   FROM WILSON PLOT           (A**2) : NULL
REMARK   3   MEAN B VALUE      (OVERALL, A**2) : 28.71
REMARK   3   OVERALL ANISOTROPIC B VALUE.
REMARK   3    B11 (A**2) : -1.99000
REMARK   3    B22 (A**2) : -1.99000
REMARK   3    B33 (A**2) : 3.98000
REMARK   3    B12 (A**2) : 0.00000
REMARK   3    B13 (A**2) : 0.00000
REMARK   3    B23 (A**2) : 0.00000
REMARK   3
REMARK   3  ESTIMATED OVERALL COORDINATE ERROR.
REMARK   3   ESU BASED ON R VALUE                            (A): 0.094
REMARK   3   ESU BASED ON FREE R VALUE                       (A): 0.098
REMARK   3   ESU BASED ON MAXIMUM LIKELIHOOD                 (A): 0.071
REMARK   3   ESU FOR B VALUES BASED ON MAXIMUM LIKELIHOOD (A**2): 2.244
REMARK   3
REMARK   3 CORRELATION COEFFICIENTS.
REMARK   3   CORRELATION COEFFICIENT FO-FC      : 0.969
REMARK   3   CORRELATION COEFFICIENT FO-FC FREE : 0.955
REMARK   3
REMARK   3  RMS DEVIATIONS FROM IDEAL VALUES        COUNT    RMS    WEIGHT
REMARK   3   BOND LENGTHS REFINED ATOMS        (A):  1889 ; 0.016 ; 0.021
REMARK   3   BOND LENGTHS OTHERS               (A):  1797 ; 0.002 ; 0.020
REMARK   3   BOND ANGLES REFINED ATOMS   (DEGREES):  2561 ; 1.676 ; 1.966
REMARK   3   BOND ANGLES OTHERS          (DEGREES):  4107 ; 0.915 ; 3.000
REMARK   3   TORSION ANGLES, PERIOD 1    (DEGREES):   239 ; 5.557 ; 5.000
REMARK   3   TORSION ANGLES, PERIOD 2    (DEGREES):  NULL ;  NULL ;  NULL
REMARK   3   TORSION ANGLES, PERIOD 3    (DEGREES):  NULL ;  NULL ;  NULL
REMARK   3   TORSION ANGLES, PERIOD 4    (DEGREES):  NULL ;  NULL ;  NULL
REMARK   3   CHIRAL-CENTER RESTRAINTS       (A**3):   295 ; 0.084 ; 0.200
REMARK   3   GENERAL PLANES REFINED ATOMS      (A):  2137 ; 0.007 ; 0.020
REMARK   3   GENERAL PLANES OTHERS             (A):   424 ; 0.005 ; 0.020
REMARK   3   NON-BONDED CONTACTS REFINED ATOMS (A):   444 ; 0.220 ; 0.200
REMARK   3   NON-BONDED CONTACTS OTHERS        (A):  2236 ; 0.251 ; 0.200
REMARK   3   NON-BONDED TORSION REFINED ATOMS  (A):  NULL ;  NULL ;  NULL
REMARK   3   NON-BONDED TORSION OTHERS         (A):  1177 ; 0.087 ; 0.200
REMARK   3   H-BOND (X...Y) REFINED ATOMS      (A):   169 ; 0.173 ; 0.200
REMARK   3   H-BOND (X...Y) OTHERS             (A):  NULL ;  NULL ;  NULL
REMARK   3   POTENTIAL METAL-ION REFINED ATOMS (A):  NULL ;  NULL ;  NULL
REMARK   3   POTENTIAL METAL-ION OTHERS        (A):  NULL ;  NULL ;  NULL
REMARK   3   SYMMETRY VDW REFINED ATOMS        (A):     2 ; 0.260 ; 0.200
REMARK   3   SYMMETRY VDW OTHERS               (A):    18 ; 0.295 ; 0.200
REMARK   3   SYMMETRY H-BOND REFINED ATOMS     (A):    11 ; 0.205 ; 0.200
REMARK   3   SYMMETRY H-BOND OTHERS            (A):  NULL ;  NULL ;  NULL
REMARK   3   SYMMETRY METAL-ION REFINED ATOMS  (A):  NULL ;  NULL ;  NULL
REMARK   3   SYMMETRY METAL-ION OTHERS         (A):  NULL ;  NULL ;  NULL
REMARK   3
REMARK   3  ISOTROPIC THERMAL FACTOR RESTRAINTS.     COUNT   RMS    WEIGHT
REMARK   3   MAIN-CHAIN BOND REFINED ATOMS  (A**2):  1194 ; 0.978 ; 1.500
REMARK   3   MAIN-CHAIN BOND OTHER ATOMS    (A**2):  NULL ;  NULL ;  NULL
REMARK   3   MAIN-CHAIN ANGLE REFINED ATOMS (A**2):  1910 ; 1.788 ; 2.000
REMARK   3   SIDE-CHAIN BOND REFINED ATOMS  (A**2):   695 ; 2.805 ; 3.000
REMARK   3   SIDE-CHAIN ANGLE REFINED ATOMS (A**2):   651 ; 4.729 ; 4.500
REMARK   3
REMARK   3 ANISOTROPIC THERMAL FACTOR RESTRAINTS.    COUNT   RMS   WEIGHT
REMARK   3   RIGID-BOND RESTRAINTS          (A**2):  NULL ;  NULL ;  NULL
REMARK   3   SPHERICITY; FREE ATOMS         (A**2):  NULL ;  NULL ;  NULL
REMARK   3   SPHERICITY; BONDED ATOMS       (A**2):  NULL ;  NULL ;  NULL
REMARK   3
REMARK   3  NCS RESTRAINTS STATISTICS
REMARK   3   NUMBER OF DIFFERENT NCS GROUPS : NULL
REMARK   3
REMARK   3  TLS DETAILS
REMARK   3   NUMBER OF TLS GROUPS  : NULL
REMARK   3
REMARK   3  BULK SOLVENT MODELLING.
REMARK   3   METHOD USED : BABINET MODEL WITH MASK
REMARK   3   PARAMETERS FOR MASK CALCULATION
REMARK   3   VDW PROBE RADIUS   : 1.40
REMARK   3   ION PROBE RADIUS   : 0.80
REMARK   3   SHRINKAGE RADIUS   : 0.80
REMARK   3
REMARK   3  OTHER REFINEMENT REMARKS: HYDROGENS HAVE BEEN ADDED IN THE
REMARK   3  RIDING POSITIONS
REMARK   4
REMARK   4 1YWF COMPLIES WITH FORMAT V. 3.15, 01-DEC-08
REMARK 100
REMARK 100 THIS ENTRY HAS BEEN PROCESSED BY RCSB ON 09-MAR-05.
REMARK 100 THE RCSB ID CODE IS RCSB031997.
REMARK 200
REMARK 200 EXPERIMENTAL DETAILS
REMARK 200  EXPERIMENT TYPE                : X-RAY DIFFRACTION
REMARK 200  DATE OF DATA COLLECTION        : 06-NOV-04
REMARK 200  TEMPERATURE           (KELVIN) : 93
REMARK 200  PH                             : 5.5
REMARK 200  NUMBER OF CRYSTALS USED        : 1
REMARK 200
REMARK 200  SYNCHROTRON              (Y/N) : Y
REMARK 200  RADIATION SOURCE               : ALS
REMARK 200  BEAMLINE                       : 8.3.1
REMARK 200  X-RAY GENERATOR MODEL          : NULL
REMARK 200  MONOCHROMATIC OR LAUE    (M/L) : M
REMARK 200  WAVELENGTH OR RANGE        (A) : 1.1157, 0.97949, 0.97973,
REMARK 200                                   0.93927
REMARK 200  MONOCHROMATOR                  : SI 111 CHANNEL
REMARK 200  OPTICS                         : NULL
REMARK 200
REMARK 200  DETECTOR TYPE                  : CCD
REMARK 200  DETECTOR MANUFACTURER          : ADSC QUANTUM 4
REMARK 200  INTENSITY-INTEGRATION SOFTWARE : HKL-2000
REMARK 200  DATA SCALING SOFTWARE          : SCALEPACK
REMARK 200
REMARK 200  NUMBER OF UNIQUE REFLECTIONS   : 33939
REMARK 200  RESOLUTION RANGE HIGH      (A) : 1.700
REMARK 200  RESOLUTION RANGE LOW       (A) : 79.000
REMARK 200  REJECTION CRITERIA  (SIGMA(I)) : -3.000
REMARK 200
REMARK 200 OVERALL.
REMARK 200  COMPLETENESS FOR RANGE     (%) : 91.2
REMARK 200  DATA REDUNDANCY                : NULL
REMARK 200  R MERGE                    (I) : 0.04100
REMARK 200  R SYM                      (I) : NULL
REMARK 200  <I/SIGMA(I)> FOR THE DATA SET  : 66.7000
REMARK 200
REMARK 200 IN THE HIGHEST RESOLUTION SHELL.
REMARK 200  HIGHEST RESOLUTION SHELL, RANGE HIGH (A) : 1.70
REMARK 200  HIGHEST RESOLUTION SHELL, RANGE LOW  (A) : 1.76
REMARK 200  COMPLETENESS FOR SHELL     (%) : 48.6
REMARK 200  DATA REDUNDANCY IN SHELL       : NULL
REMARK 200  R MERGE FOR SHELL          (I) : NULL
REMARK 200  R SYM FOR SHELL            (I) : NULL
REMARK 200  <I/SIGMA(I)> FOR SHELL         : NULL
REMARK 200
REMARK 200 DIFFRACTION PROTOCOL: MAD
REMARK 200 METHOD USED TO DETERMINE THE STRUCTURE: MAD
REMARK 200 SOFTWARE USED: SOLVE
REMARK 200 STARTING MODEL: NULL
REMARK 200
REMARK 200 REMARK: NULL
REMARK 280
REMARK 280 CRYSTAL
REMARK 280 SOLVENT CONTENT, VS   (%): 56.40
REMARK 280 MATTHEWS COEFFICIENT, VM (ANGSTROMS**3/DA): 2.63
REMARK 280
REMARK 280 CRYSTALLIZATION CONDITIONS: 0.05M KH2PO4, 20% PEG8000, 10MM
REMARK 280  NAACETATE, PH 5.5, VAPOR DIFFUSION, HANGING DROP, TEMPERATURE
REMARK 280  277K
REMARK 290
REMARK 290 CRYSTALLOGRAPHIC SYMMETRY
REMARK 290 SYMMETRY OPERATORS FOR SPACE GROUP: I 41
REMARK 290
REMARK 290      SYMOP   SYMMETRY
REMARK 290     NNNMMM   OPERATOR
REMARK 290       1555   X,Y,Z
REMARK 290       2555   -Y,X+1/2,Z+1/4
REMARK 290       3555   -X+1/2,-Y+1/2,Z+1/2
REMARK 290       4555   Y+1/2,-X,Z+3/4
REMARK 290       5555   X+1/2,Y+1/2,Z+1/2
REMARK 290       6555   -Y+1/2,X,Z+3/4
REMARK 290       7555   -X,-Y,Z
REMARK 290       8555   Y,-X+1/2,Z+1/4
REMARK 290
REMARK 290     WHERE NNN -> OPERATOR NUMBER
REMARK 290           MMM -> TRANSLATION VECTOR
REMARK 290
REMARK 290 CRYSTALLOGRAPHIC SYMMETRY TRANSFORMATIONS
REMARK 290 THE FOLLOWING TRANSFORMATIONS OPERATE ON THE ATOM/HETATM
REMARK 290 RECORDS IN THIS ENTRY TO PRODUCE CRYSTALLOGRAPHICALLY
REMARK 290 RELATED MOLECULES.
REMARK 290   SMTRY1   1  1.000000  0.000000  0.000000        0.00000
REMARK 290   SMTRY2   1  0.000000  1.000000  0.000000        0.00000
REMARK 290   SMTRY3   1  0.000000  0.000000  1.000000        0.00000
REMARK 290   SMTRY1   2  0.000000 -1.000000  0.000000        0.00000
REMARK 290   SMTRY2   2  1.000000  0.000000  0.000000       56.53400
REMARK 290   SMTRY3   2  0.000000  0.000000  1.000000       13.32300
REMARK 290   SMTRY1   3 -1.000000  0.000000  0.000000       56.53400
REMARK 290   SMTRY2   3  0.000000 -1.000000  0.000000       56.53400
REMARK 290   SMTRY3   3  0.000000  0.000000  1.000000       26.64600
REMARK 290   SMTRY1   4  0.000000  1.000000  0.000000       56.53400
REMARK 290   SMTRY2   4 -1.000000  0.000000  0.000000        0.00000
REMARK 290   SMTRY3   4  0.000000  0.000000  1.000000       39.96900
REMARK 290   SMTRY1   5  1.000000  0.000000  0.000000       56.53400
REMARK 290   SMTRY2   5  0.000000  1.000000  0.000000       56.53400
REMARK 290   SMTRY3   5  0.000000  0.000000  1.000000       26.64600
REMARK 290   SMTRY1   6  0.000000 -1.000000  0.000000       56.53400
REMARK 290   SMTRY2   6  1.000000  0.000000  0.000000        0.00000
REMARK 290   SMTRY3   6  0.000000  0.000000  1.000000       39.96900
REMARK 290   SMTRY1   7 -1.000000  0.000000  0.000000        0.00000
REMARK 290   SMTRY2   7  0.000000 -1.000000  0.000000        0.00000
REMARK 290   SMTRY3   7  0.000000  0.000000  1.000000        0.00000
REMARK 290   SMTRY1   8  0.000000  1.000000  0.000000        0.00000
REMARK 290   SMTRY2   8 -1.000000  0.000000  0.000000       56.53400
REMARK 290   SMTRY3   8  0.000000  0.000000  1.000000       13.32300
REMARK 290
REMARK 290 REMARK: NULL
REMARK 300
REMARK 300 BIOMOLECULE: 1
REMARK 300 SEE REMARK 350 FOR THE AUTHOR PROVIDED AND/OR PROGRAM
REMARK 300 GENERATED ASSEMBLY INFORMATION FOR THE STRUCTURE IN
REMARK 300 THIS ENTRY. THE REMARK MAY ALSO PROVIDE INFORMATION ON
REMARK 300 BURIED SURFACE AREA.
REMARK 350
REMARK 350 COORDINATES FOR A COMPLETE MULTIMER REPRESENTING THE KNOWN
REMARK 350 BIOLOGICALLY SIGNIFICANT OLIGOMERIZATION STATE OF THE
REMARK 350 MOLECULE CAN BE GENERATED BY APPLYING BIOMT TRANSFORMATIONS
REMARK 350 GIVEN BELOW.  BOTH NON-CRYSTALLOGRAPHIC AND
REMARK 350 CRYSTALLOGRAPHIC OPERATIONS ARE GIVEN.
REMARK 350
REMARK 350 BIOMOLECULE: 1
REMARK 350 AUTHOR DETERMINED BIOLOGICAL UNIT: MONOMERIC
REMARK 350 APPLY THE FOLLOWING TO CHAINS: A
REMARK 350   BIOMT1   1  1.000000  0.000000  0.000000        0.00000
REMARK 350   BIOMT2   1  0.000000  1.000000  0.000000        0.00000
REMARK 350   BIOMT3   1  0.000000  0.000000  1.000000        0.00000
REMARK 375
REMARK 375 SPECIAL POSITION
REMARK 375 THE FOLLOWING ATOMS ARE FOUND TO BE WITHIN 0.15 ANGSTROMS
REMARK 375 OF A SYMMETRY RELATED ATOM AND ARE ASSUMED TO BE ON SPECIAL
REMARK 375 POSITIONS.
REMARK 375
REMARK 375 ATOM RES CSSEQI
REMARK 375      HOH A 354  LIES ON A SPECIAL POSITION.
REMARK 465
REMARK 465 MISSING RESIDUES
REMARK 465 THE FOLLOWING RESIDUES WERE NOT LOCATED IN THE
REMARK 465 EXPERIMENT. (M=MODEL NUMBER; RES=RESIDUE NAME; C=CHAIN
REMARK 465 IDENTIFIER; SSSEQ=SEQUENCE NUMBER; I=INSERTION CODE.)
REMARK 465
REMARK 465   M RES C SSSEQI
REMARK 465     MET A   -19
REMARK 465     GLY A   -18
REMARK 465     SER A   -17
REMARK 465     SER A   -16
REMARK 465     HIS A   -15
REMARK 465     HIS A   -14
REMARK 465     HIS A   -13
REMARK 465     HIS A   -12
REMARK 465     HIS A   -11
REMARK 465     HIS A   -10
REMARK 465     SER A    -9
REMARK 465     SER A    -8
REMARK 465     GLY A    -7
REMARK 465     LEU A    -6
REMARK 465     VAL A    -5
REMARK 465     PRO A    -4
REMARK 465     ARG A    -3
REMARK 465     GLY A    -2
REMARK 465     SER A    -1
REMARK 465     HIS A     0
REMARK 465     MET A     1
REMARK 465     ALA A     2
REMARK 465     VAL A     3
REMARK 465     ASP A    86
REMARK 465     ASP A    87
REMARK 465     ALA A    88
REMARK 465     ASP A    89
REMARK 465     ASP A    90
REMARK 465     SER A    91
REMARK 465     ALA A    92
REMARK 465     PRO A    93
REMARK 465     HIS A    94
REMARK 465     GLU A    95
REMARK 465     THR A    96
REMARK 465     ALA A    97
REMARK 465     PHE A    98
REMARK 465     LYS A    99
REMARK 465     ARG A   100
REMARK 465     LEU A   101
REMARK 465     LEU A   102
REMARK 465     THR A   103
REMARK 465     ASN A   104
REMARK 465     ASP A   105
REMARK 465     GLY A   106
REMARK 465     SER A   107
REMARK 465     ASN A   108
REMARK 465     GLY A   109
REMARK 465     GLU A   110
REMARK 465     SER A   111
REMARK 465     GLY A   112
REMARK 465     GLU A   113
REMARK 465     SER A   114
REMARK 465     SER A   115
REMARK 465     GLN A   116
REMARK 465     GLY A   276
REMARK 470
REMARK 470 MISSING ATOM
REMARK 470 THE FOLLOWING RESIDUES HAVE MISSING ATOMS(M=MODEL NUMBER;
REMARK 470 RES=RESIDUE NAME; C=CHAIN IDENTIFIER; SSEQ=SEQUENCE NUMBER;
REMARK 470 I=INSERTION CODE):
REMARK 470   M RES CSSEQI  ATOMS
REMARK 470     ARG A  45    CG   CD   NE   CZ   NH1  NH2
REMARK 470     ARG A 226    CG   CD   NE   CZ   NH1  NH2
REMARK 500
REMARK 500 GEOMETRY AND STEREOCHEMISTRY
REMARK 500 SUBTOPIC: CLOSE CONTACTS IN SAME ASYMMETRIC UNIT
REMARK 500
REMARK 500 THE FOLLOWING ATOMS ARE IN CLOSE CONTACT.
REMARK 500
REMARK 500  ATM1  RES C  SSEQI   ATM2  RES C  SSEQI           DISTANCE
REMARK 500   O    HOH A   466     O    HOH A   507              2.15
REMARK 500
REMARK 500 REMARK: NULL
REMARK 500
REMARK 500 GEOMETRY AND STEREOCHEMISTRY
REMARK 500 SUBTOPIC: COVALENT BOND LENGTHS
REMARK 500
REMARK 500 THE STEREOCHEMICAL PARAMETERS OF THE FOLLOWING RESIDUES
REMARK 500 HAVE VALUES WHICH DEVIATE FROM EXPECTED VALUES BY MORE
REMARK 500 THAN 6*RMSD (M=MODEL NUMBER; RES=RESIDUE NAME; C=CHAIN
REMARK 500 IDENTIFIER; SSEQ=SEQUENCE NUMBER; I=INSERTION CODE).
REMARK 500
REMARK 500 STANDARD TABLE:
REMARK 500 FORMAT: (10X,I3,1X,2(A3,1X,A1,I4,A1,1X,A4,3X),1X,F6.3)
REMARK 500
REMARK 500 EXPECTED VALUES PROTEIN: ENGH AND HUBER, 1999
REMARK 500 EXPECTED VALUES NUCLEIC ACID: CLOWNEY ET AL 1996
REMARK 500
REMARK 500  M RES CSSEQI ATM1   RES CSSEQI ATM2   DEVIATION
REMARK 500    LYS A 164   CD    LYS A 164   CE      0.195
REMARK 500
REMARK 500 REMARK: NULL
REMARK 500
REMARK 500 GEOMETRY AND STEREOCHEMISTRY
REMARK 500 SUBTOPIC: COVALENT BOND ANGLES
REMARK 500
REMARK 500 THE STEREOCHEMICAL PARAMETERS OF THE FOLLOWING RESIDUES
REMARK 500 HAVE VALUES WHICH DEVIATE FROM EXPECTED VALUES BY MORE
REMARK 500 THAN 6*RMSD (M=MODEL NUMBER; RES=RESIDUE NAME; C=CHAIN
REMARK 500 IDENTIFIER; SSEQ=SEQUENCE NUMBER; I=INSERTION CODE).
REMARK 500
REMARK 500 STANDARD TABLE:
REMARK 500 FORMAT: (10X,I3,1X,A3,1X,A1,I4,A1,3(1X,A4,2X),12X,F5.1)
REMARK 500
REMARK 500 EXPECTED VALUES PROTEIN: ENGH AND HUBER, 1999
REMARK 500 EXPECTED VALUES NUCLEIC ACID: CLOWNEY ET AL 1996
REMARK 500
REMARK 500  M RES CSSEQI ATM1   ATM2   ATM3
REMARK 500    ASP A 120   CB  -  CG  -  OD2 ANGL. DEV. =   6.1 DEGREES
REMARK 500    LYS A 164   CD  -  CE  -  NZ  ANGL. DEV. = -37.4 DEGREES
REMARK 500    ARG A 271   NE  -  CZ  -  NH2 ANGL. DEV. =  -3.6 DEGREES
REMARK 500
REMARK 500 REMARK: NULL
REMARK 500
REMARK 500 GEOMETRY AND STEREOCHEMISTRY
REMARK 500 SUBTOPIC: TORSION ANGLES
REMARK 500
REMARK 500 TORSION ANGLES OUTSIDE THE EXPECTED RAMACHANDRAN REGIONS:
REMARK 500 (M=MODEL NUMBER; RES=RESIDUE NAME; C=CHAIN IDENTIFIER;
REMARK 500 SSEQ=SEQUENCE NUMBER; I=INSERTION CODE).
REMARK 500
REMARK 500 STANDARD TABLE:
REMARK 500 FORMAT:(10X,I3,1X,A3,1X,A1,I4,A1,4X,F7.2,3X,F7.2)
REMARK 500
REMARK 500 EXPECTED VALUES: GJ KLEYWEGT AND TA JONES (1996). PHI/PSI-
REMARK 500 CHOLOGY: RAMACHANDRAN REVISITED. STRUCTURE 4, 1395 - 1400
REMARK 500
REMARK 500  M RES CSSEQI        PSI       PHI
REMARK 500    ASN A 119       40.85   -101.39
REMARK 500    CYS A 160     -126.55   -127.33
REMARK 500    PHE A 161      -69.45    -90.71
REMARK 500    ASP A 165      -72.55    -98.47
REMARK 500    LEU A 227       45.01     27.68
REMARK 500    SER A 228      150.03    -45.91
REMARK 500
REMARK 500 REMARK: NULL
REMARK 800
REMARK 800 SITE
REMARK 800 SITE_IDENTIFIER: AC1
REMARK 800 EVIDENCE_CODE: SOFTWARE
REMARK 800 SITE_DESCRIPTION: BINDING SITE FOR RESIDUE PO4 A 277
REMARK 900
REMARK 900 RELATED ENTRIES
REMARK 900 RELATED ID: RV0153C   RELATED DB: TARGETDB
DBREF  1YWF A    1   276  UNP    P96830   P96830_MYCTU     1    276
SEQADV 1YWF MET A  -19  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF GLY A  -18  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF SER A  -17  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF SER A  -16  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A  -15  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A  -14  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A  -13  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A  -12  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A  -11  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A  -10  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF SER A   -9  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF SER A   -8  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF GLY A   -7  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF LEU A   -6  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF VAL A   -5  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF PRO A   -4  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF ARG A   -3  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF GLY A   -2  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF SER A   -1  UNP  P96830              CLONING ARTIFACT
SEQADV 1YWF HIS A    0  UNP  P96830              CLONING ARTIFACT
SEQRES   1 A  296  MET GLY SER SER HIS HIS HIS HIS HIS HIS SER SER GLY
SEQRES   2 A  296  LEU VAL PRO ARG GLY SER HIS MET ALA VAL ARG GLU LEU
SEQRES   3 A  296  PRO GLY ALA TRP ASN PHE ARG ASP VAL ALA ASP THR ALA
SEQRES   4 A  296  THR ALA LEU ARG PRO GLY ARG LEU PHE ARG SER SER GLU
SEQRES   5 A  296  LEU SER ARG LEU ASP ASP ALA GLY ARG ALA THR LEU ARG
SEQRES   6 A  296  ARG LEU GLY ILE THR ASP VAL ALA ASP LEU ARG SER SER
SEQRES   7 A  296  ARG GLU VAL ALA ARG ARG GLY PRO GLY ARG VAL PRO ASP
SEQRES   8 A  296  GLY ILE ASP VAL HIS LEU LEU PRO PHE PRO ASP LEU ALA
SEQRES   9 A  296  ASP ASP ASP ALA ASP ASP SER ALA PRO HIS GLU THR ALA
SEQRES  10 A  296  PHE LYS ARG LEU LEU THR ASN ASP GLY SER ASN GLY GLU
SEQRES  11 A  296  SER GLY GLU SER SER GLN SER ILE ASN ASP ALA ALA THR
SEQRES  12 A  296  ARG TYR MET THR ASP GLU TYR ARG GLN PHE PRO THR ARG
SEQRES  13 A  296  ASN GLY ALA GLN ARG ALA LEU HIS ARG VAL VAL THR LEU
SEQRES  14 A  296  LEU ALA ALA GLY ARG PRO VAL LEU THR HIS CYS PHE ALA
SEQRES  15 A  296  GLY LYS ASP ARG THR GLY PHE VAL VAL ALA LEU VAL LEU
SEQRES  16 A  296  GLU ALA VAL GLY LEU ASP ARG ASP VAL ILE VAL ALA ASP
SEQRES  17 A  296  TYR LEU ARG SER ASN ASP SER VAL PRO GLN LEU ARG ALA
SEQRES  18 A  296  ARG ILE SER GLU MET ILE GLN GLN ARG PHE ASP THR GLU
SEQRES  19 A  296  LEU ALA PRO GLU VAL VAL THR PHE THR LYS ALA ARG LEU
SEQRES  20 A  296  SER ASP GLY VAL LEU GLY VAL ARG ALA GLU TYR LEU ALA
SEQRES  21 A  296  ALA ALA ARG GLN THR ILE ASP GLU THR TYR GLY SER LEU
SEQRES  22 A  296  GLY GLY TYR LEU ARG ASP ALA GLY ILE SER GLN ALA THR
SEQRES  23 A  296  VAL ASN ARG MET ARG GLY VAL LEU LEU GLY
HET    PO4  A 277       5
HETNAM     PO4 PHOSPHATE ION
FORMUL   2  PO4    O4 P 3-
FORMUL   3  HOH   *264(H2 O)
HELIX    1   1 ALA A   16  THR A   18  5                                   3
HELIX    2   2 ASP A   37  GLY A   48  1                                  12
HELIX    3   3 SER A   57  GLY A   65  1                                   9
HELIX    4   4 ASN A  119  PHE A  133  1                                  15
HELIX    5   5 PRO A  134  ARG A  136  5                                   3
HELIX    6   6 GLY A  138  ALA A  152  1                                  15
HELIX    7   7 ASP A  165  VAL A  178  1                                  14
HELIX    8   8 ASP A  181  ARG A  191  1                                  11
HELIX    9   9 SER A  192  ASP A  194  5                                   3
HELIX   10  10 SER A  195  GLN A  209  1                                  15
HELIX   11  11 ALA A  216  ALA A  225  1                                  10
HELIX   12  12 SER A  228  GLY A  233  1                                   6
HELIX   13  13 ARG A  235  GLY A  251  1                                  17
HELIX   14  14 SER A  252  ALA A  260  1                                   9
HELIX   15  15 SER A  263  LEU A  275  1                                  13
SHEET    1   A 5 ARG A  13  ASP A  14  0
SHEET    2   A 5 LEU A  27  SER A  30 -1  O  ARG A  29   N  ARG A  13
SHEET    3   A 5 VAL A 156  HIS A 159  1  O  VAL A 156   N  PHE A  28
SHEET    4   A 5 ASP A  51  ASP A  54  1  N  ALA A  51   O  LEU A 157
SHEET    5   A 5 ASP A  74  LEU A  77  1  O  HIS A  74   N  VAL A  52
SITE   *** AC1  9 LEU A  83  CYS A 160  PHE A 161  ALA A 162
SITE   *** AC1  9 GLY A 163  LYS A 164  ASP A 165  ARG A 166
SITE   *** AC1  9 GLU A 218
CRYST1  113.068  113.068   53.292  90.00  90.00  90.00 I 41          8
ORIGX1      1.000000  0.000000  0.000000        0.00000
ORIGX2      0.000000  1.000000  0.000000        0.00000
ORIGX3      0.000000  0.000000  1.000000        0.00000
SCALE1      0.008844  0.000000  0.000000        0.00000
SCALE2      0.000000  0.008844  0.000000        0.00000
SCALE3      0.000000  0.000000  0.018765        0.00000
ATOM      1  N   ARG A   4       7.511  46.981  14.258  1.00 46.91           N
ATOM      2  CA  ARG A   4       7.057  47.032  12.837  1.00 47.14           C
ATOM      3  C   ARG A   4       7.149  48.454  12.261  1.00 44.77           C
ATOM      4  O   ARG A   4       7.798  48.643  11.247  1.00 45.20           O
ATOM      5  CB  ARG A   4       5.613  46.509  12.682  1.00 47.77           C
ATOM      6  CG  ARG A   4       5.282  45.235  13.472  1.00 52.79           C
ATOM      7  CD  ARG A   4       4.921  43.958  12.663  1.00 58.16           C
ATOM      8  NE  ARG A   4       4.877  44.193  11.216  1.00 63.64           N
ATOM      9  CZ  ARG A   4       5.947  44.408  10.439  1.00 67.41           C
ATOM     10  NH1 ARG A   4       7.176  44.420  10.954  1.00 68.79           N
ATOM     11  NH2 ARG A   4       5.785  44.627   9.133  1.00 68.95           N
ATOM      0  HA  ARG A   4       7.735  46.377  12.271  1.00 47.14           H
ATOM      0  HB2 ARG A   4       4.919  47.303  12.994  1.00 47.77           H
ATOM      0  HB3 ARG A   4       5.424  46.317  11.615  1.00 47.77           H
ATOM      0  HG2 ARG A   4       6.146  44.998  14.111  1.00 52.79           H
ATOM      0  HG3 ARG A   4       4.439  45.461  14.142  1.00 52.79           H
ATOM      0  HD2 ARG A   4       5.659  43.172  12.879  1.00 58.16           H
ATOM      0  HD3 ARG A   4       3.943  43.582  12.998  1.00 58.16           H
ATOM      0  HE  ARG A   4       3.979  44.193  10.775  1.00 63.64           H
ATOM      0 HH11 ARG A   4       7.309  44.267  11.933  1.00 68.79           H
ATOM      0 HH12 ARG A   4       7.965  44.582  10.361  1.00 68.79           H
ATOM      0 HH21 ARG A   4       4.867  44.630   8.737  1.00 68.95           H
ATOM      0 HH22 ARG A   4       6.582  44.788   8.550  1.00 68.95           H
ATOM     12  N   GLU A   5       6.489  49.425  12.914  1.00 42.64           N
ATOM     13  CA  GLU A   5       6.285  50.786  12.396  1.00 40.70           C
ATOM     14  C   GLU A   5       7.010  51.885  13.188  1.00 37.71           C
ATOM     15  O   GLU A   5       7.249  51.776  14.392  1.00 37.47           O
ATOM     16  CB  GLU A   5       4.775  51.134  12.383  1.00 41.69           C
ATOM     17  CG  GLU A   5       3.932  50.296  11.422  1.00 44.73           C
ATOM     18  CD  GLU A   5       4.140  50.666   9.954  1.00 49.40           C
ATOM     19  OE1 GLU A   5       4.507  51.827   9.648  1.00 50.99           O
ATOM     20  OE2 GLU A   5       3.938  49.789   9.079  1.00 54.37           O
ATOM      0  H   GLU A   5       6.083  49.285  13.817  1.00 42.64           H
ATOM      0  HA  GLU A   5       6.714  50.769  11.383  1.00 40.70           H
ATOM      0  HB2 GLU A   5       4.376  51.011  13.401  1.00 41.69           H
ATOM      0  HB3 GLU A   5       4.660  52.196  12.119  1.00 41.69           H
ATOM      0  HG2 GLU A   5       4.176  49.233  11.563  1.00 44.73           H
ATOM      0  HG3 GLU A   5       2.869  50.418  11.676  1.00 44.73           H
ATOM     21  N   LEU A   6       7.297  52.974  12.490  1.00 34.71           N
ATOM     22  CA  LEU A   6       7.928  54.158  13.057  1.00 32.83           C
ATOM     23  C   LEU A   6       7.124  55.354  12.548  1.00 32.42           C
ATOM     24  O   LEU A   6       7.421  55.925  11.503  1.00 31.01           O
ATOM     25  CB  LEU A   6       9.391  54.265  12.608  1.00 32.60           C
ATOM     26  CG  LEU A   6      10.179  55.463  13.111  1.00 30.47           C
ATOM     27  CD1 LEU A   6      10.149  55.453  14.651  1.00 33.03           C
ATOM     28  CD2 LEU A   6      11.634  55.474  12.576  1.00 30.34           C
ATOM      0  H   LEU A   6       7.098  53.060  11.514  1.00 34.71           H
ATOM      0  HA  LEU A   6       7.934  54.115  14.156  1.00 32.83           H
ATOM      0  HB2 LEU A   6       9.915  53.352  12.928  1.00 32.60           H
ATOM      0  HB3 LEU A   6       9.411  54.279  11.508  1.00 32.60           H
ATOM      0  HG  LEU A   6       9.711  56.384  12.733  1.00 30.47           H
ATOM      0 HD11 LEU A   6      10.715  56.314  15.035  1.00 33.03           H
ATOM      0 HD12 LEU A   6       9.107  55.515  14.998  1.00 33.03           H
ATOM      0 HD13 LEU A   6      10.603  54.522  15.021  1.00 33.03           H
ATOM      0 HD21 LEU A   6      12.162  56.357  12.966  1.00 30.34           H
ATOM      0 HD22 LEU A   6      12.153  54.562  12.905  1.00 30.34           H
ATOM      0 HD23 LEU A   6      11.621  55.512  11.477  1.00 30.34           H
ATOM     29  N   PRO A   7       6.021  55.686  13.228  1.00 31.97           N
ATOM     30  CA  PRO A   7       5.071  56.656  12.662  1.00 31.54           C
ATOM     31  C   PRO A   7       5.654  58.019  12.286  1.00 29.40           C
ATOM     32  O   PRO A   7       6.359  58.672  13.062  1.00 31.00           O
ATOM     33  CB  PRO A   7       3.963  56.730  13.741  1.00 31.52           C
ATOM     34  CG  PRO A   7       4.012  55.430  14.379  1.00 32.79           C
ATOM     35  CD  PRO A   7       5.514  55.095  14.483  1.00 32.60           C
ATOM      0  HA  PRO A   7       4.705  56.327  11.678  1.00 31.54           H
ATOM      0  HB2 PRO A   7       4.154  57.540  14.460  1.00 31.52           H
ATOM      0  HB3 PRO A   7       2.977  56.923  13.294  1.00 31.52           H
ATOM      0  HG2 PRO A   7       3.540  55.455  15.372  1.00 32.79           H
ATOM      0  HG3 PRO A   7       3.475  54.675  13.786  1.00 32.79           H
ATOM      0  HD2 PRO A   7       5.980  55.544  15.373  1.00 32.60           H
ATOM      0  HD3 PRO A   7       5.696  54.012  14.536  1.00 32.60           H
ATOM     36  N   GLY A   8       5.386  58.417  11.036  1.00 28.81           N
ATOM     37  CA  GLY A   8       5.916  59.617  10.412  1.00 28.14           C
ATOM     38  C   GLY A   8       7.143  59.366   9.540  1.00 26.94           C
ATOM     39  O   GLY A   8       7.557  60.229   8.751  1.00 26.16           O
ATOM      0  H   GLY A   8       4.784  57.898  10.429  1.00 28.81           H
ATOM      0  HA2 GLY A   8       5.129  60.078   9.797  1.00 28.14           H
ATOM      0  HA3 GLY A   8       6.177  60.342  11.197  1.00 28.14           H
ATOM     40  N   ALA A   9       7.683  58.159   9.650  1.00 26.13           N
ATOM     41  CA  ALA A   9       8.750  57.696   8.757  1.00 25.16           C
ATOM     42  C   ALA A   9       8.313  56.419   8.034  1.00 25.14           C
ATOM     43  O   ALA A   9       7.221  55.876   8.276  1.00 25.57           O
ATOM     44  CB  ALA A   9      10.038  57.470   9.546  1.00 25.41           C
ATOM      0  H   ALA A   9       7.406  57.489  10.338  1.00 26.13           H
ATOM      0  HA  ALA A   9       8.947  58.469   7.999  1.00 25.16           H
ATOM      0  HB1 ALA A   9      10.830  57.123   8.865  1.00 25.41           H
ATOM      0  HB2 ALA A   9      10.349  58.413  10.019  1.00 25.41           H
ATOM      0  HB3 ALA A   9       9.864  56.711  10.323  1.00 25.41           H
ATOM     45  N   TRP A  10       9.132  55.968   7.091  1.00 24.79           N
ATOM     46  CA  TRP A  10       8.801  54.772   6.341  1.00 23.84           C
ATOM     47  C   TRP A  10      10.106  53.977   6.084  1.00 23.68           C
ATOM     48  O   TRP A  10      11.196  54.413   6.461  1.00 21.87           O
ATOM     49  CB  TRP A  10       8.093  55.130   5.023  1.00 23.84           C
ATOM     50  CG  TRP A  10       8.914  55.811   3.994  1.00 21.18           C
ATOM     51  CD1 TRP A  10       9.502  55.245   2.912  1.00 23.12           C
ATOM     52  CD2 TRP A  10       9.276  57.199   3.966  1.00 23.18           C
ATOM     53  NE1 TRP A  10      10.195  56.191   2.193  1.00 23.94           N
ATOM     54  CE2 TRP A  10      10.049  57.406   2.829  1.00 24.73           C
ATOM     55  CE3 TRP A  10       8.976  58.314   4.790  1.00 25.02           C
ATOM     56  CZ2 TRP A  10      10.585  58.649   2.506  1.00 24.98           C
ATOM     57  CZ3 TRP A  10       9.511  59.554   4.437  1.00 24.23           C
ATOM     58  CH2 TRP A  10      10.275  59.704   3.315  1.00 23.25           C
ATOM      0  H   TRP A  10       9.998  56.399   6.838  1.00 24.79           H
ATOM      0  HA  TRP A  10       8.103  54.149   6.919  1.00 23.84           H
ATOM      0  HB2 TRP A  10       7.692  54.204   4.585  1.00 23.84           H
ATOM      0  HB3 TRP A  10       7.233  55.774   5.258  1.00 23.84           H
ATOM      0  HD1 TRP A  10       9.435  54.180   2.646  1.00 23.12           H
ATOM      0  HE1 TRP A  10      10.715  56.026   1.355  1.00 23.94           H
ATOM      0  HE3 TRP A  10       8.340  58.205   5.681  1.00 25.02           H
ATOM      0  HZ2 TRP A  10      11.236  58.777   1.629  1.00 24.98           H
ATOM      0  HZ3 TRP A  10       9.313  60.428   5.075  1.00 24.23           H
ATOM      0  HH2 TRP A  10      10.652  60.704   3.056  1.00 23.25           H
TER    1859
HETATM 2117  O   HOH A 530      14.129  75.372   1.869  1.00 42.52           O
HETATM 2118  O   HOH A 531      16.760  75.823   5.378  1.00 55.47           O
HETATM 2119  O   HOH A 532      17.376  76.181  -1.370  1.00 58.56           O
HETATM 2120  O   HOH A 533      29.999  39.710  23.377  1.00 65.34           O
HETATM 2121  O   HOH A 534       5.061  66.928  20.580  1.00 53.64           O
HETATM 2122  O   HOH A 535      31.453  64.317  11.742  1.00 57.21           O
HETATM 2123  O   HOH A 536      33.870  40.890  21.690  1.00 49.33           O
HETATM 2124  O   HOH A 537      12.870  61.651  25.404  1.00 60.53           O
HETATM 2125  O   HOH A 538       1.073  55.236   2.188  1.00 56.32           O
HETATM 2126  O   HOH A 539       5.912  53.669  23.394  1.00 76.65           O
HETATM 2127  O   HOH A 540      15.986  47.456 -16.281  1.00 62.61           O
HETATM 2128  O   HOH A 541      16.397  56.900  23.573  1.00 58.46           O
CONECT 1860 1861 1862 1863 1864
CONECT 1861 1860
CONECT 1862 1860
CONECT 1863 1860
CONECT 1864 1860
END
"""

  result_pdb_str = """\
CRYST1  113.068  113.068   53.292  90.00  90.00  90.00 I 41
SCALE1      0.008844  0.000000  0.000000        0.00000
SCALE2      0.000000  0.008844  0.000000        0.00000
SCALE3      0.000000  0.000000  0.018765        0.00000
ATOM      1  N   ARG A   4       7.511  46.981  14.258  1.00 46.91           N
ATOM      2  CA  ARG A   4       7.057  47.032  12.837  1.00 47.14           C
ATOM      3  C   ARG A   4       7.149  48.454  12.261  1.00 44.77           C
ATOM      4  O   ARG A   4       7.798  48.643  11.247  1.00 45.20           O
ATOM      5  CB  ARG A   4       5.613  46.509  12.682  1.00 47.77           C
ATOM      6  CG  ARG A   4       5.282  45.235  13.472  1.00 52.79           C
ATOM      7  CD  ARG A   4       4.921  43.958  12.663  1.00 58.16           C
ATOM      8  NE  ARG A   4       4.877  44.193  11.216  1.00 63.64           N
ATOM      9  CZ  ARG A   4       5.947  44.408  10.439  1.00 67.41           C
ATOM     10  NH1 ARG A   4       7.176  44.420  10.954  1.00 68.79           N
ATOM     11  NH2 ARG A   4       5.785  44.627   9.133  1.00 68.95           N
ATOM     12  HA  ARG A   4       7.735  46.377  12.271  1.00 47.14           H
ATOM     13  HB2 ARG A   4       4.919  47.303  12.994  1.00 47.77           H
ATOM     14  HB3 ARG A   4       5.424  46.317  11.615  1.00 47.77           H
ATOM     15  HG2 ARG A   4       6.146  44.998  14.111  1.00 52.79           H
ATOM     16  HG3 ARG A   4       4.439  45.461  14.142  1.00 52.79           H
ATOM     17  HD2 ARG A   4       5.659  43.172  12.879  1.00 58.16           H
ATOM     18  HD3 ARG A   4       3.943  43.582  12.998  1.00 58.16           H
ATOM     19  HE  ARG A   4       3.979  44.193  10.775  1.00 63.64           H
ATOM     20 HH11 ARG A   4       7.309  44.267  11.933  1.00 68.79           H
ATOM     21 HH12 ARG A   4       7.965  44.582  10.361  1.00 68.79           H
ATOM     22 HH21 ARG A   4       4.867  44.630   8.737  1.00 68.95           H
ATOM     23 HH22 ARG A   4       6.582  44.788   8.550  1.00 68.95           H
ATOM     24  N   GLU A   5       6.489  49.425  12.914  1.00 42.64           N
ATOM     25  CA  GLU A   5       6.285  50.786  12.396  1.00 40.70           C
ATOM     26  C   GLU A   5       7.010  51.885  13.188  1.00 37.71           C
ATOM     27  O   GLU A   5       7.249  51.776  14.392  1.00 37.47           O
ATOM     28  CB  GLU A   5       4.775  51.134  12.383  1.00 41.69           C
ATOM     29  CG  GLU A   5       3.932  50.296  11.422  1.00 44.73           C
ATOM     30  CD  GLU A   5       4.140  50.666   9.954  1.00 49.40           C
ATOM     31  OE1 GLU A   5       4.507  51.827   9.648  1.00 50.99           O
ATOM     32  OE2 GLU A   5       3.938  49.789   9.079  1.00 54.37           O
ATOM     33  H   GLU A   5       6.083  49.285  13.817  1.00 42.64           H
ATOM     34  HA  GLU A   5       6.714  50.769  11.383  1.00 40.70           H
ATOM     35  HB2 GLU A   5       4.376  51.011  13.401  1.00 41.69           H
ATOM     36  HB3 GLU A   5       4.660  52.196  12.119  1.00 41.69           H
ATOM     37  HG2 GLU A   5       4.176  49.233  11.563  1.00 44.73           H
ATOM     38  HG3 GLU A   5       2.869  50.418  11.676  1.00 44.73           H
ATOM     39  N   LEU A   6       7.297  52.974  12.490  1.00 34.71           N
ATOM     40  CA  LEU A   6       7.928  54.158  13.057  1.00 32.83           C
ATOM     41  C   LEU A   6       7.124  55.354  12.548  1.00 32.42           C
ATOM     42  O   LEU A   6       7.421  55.925  11.503  1.00 31.01           O
ATOM     43  CB  LEU A   6       9.391  54.265  12.608  1.00 32.60           C
ATOM     44  CG  LEU A   6      10.179  55.463  13.111  1.00 30.47           C
ATOM     45  CD1 LEU A   6      10.149  55.453  14.651  1.00 33.03           C
ATOM     46  CD2 LEU A   6      11.634  55.474  12.576  1.00 30.34           C
ATOM     47  H   LEU A   6       7.098  53.060  11.514  1.00 34.71           H
ATOM     48  HA  LEU A   6       7.934  54.115  14.156  1.00 32.83           H
ATOM     49  HB2 LEU A   6       9.915  53.352  12.928  1.00 32.60           H
ATOM     50  HB3 LEU A   6       9.411  54.279  11.508  1.00 32.60           H
ATOM     51  HG  LEU A   6       9.711  56.384  12.733  1.00 30.47           H
ATOM     52 HD11 LEU A   6      10.715  56.314  15.035  1.00 33.03           H
ATOM     53 HD12 LEU A   6       9.107  55.515  14.998  1.00 33.03           H
ATOM     54 HD13 LEU A   6      10.603  54.522  15.021  1.00 33.03           H
ATOM     55 HD21 LEU A   6      12.162  56.357  12.966  1.00 30.34           H
ATOM     56 HD22 LEU A   6      12.153  54.562  12.905  1.00 30.34           H
ATOM     57 HD23 LEU A   6      11.621  55.512  11.477  1.00 30.34           H
ATOM     58  N   PRO A   7       6.021  55.686  13.228  1.00 31.97           N
ATOM     59  CA  PRO A   7       5.071  56.656  12.662  1.00 31.54           C
ATOM     60  C   PRO A   7       5.654  58.019  12.286  1.00 29.40           C
ATOM     61  O   PRO A   7       6.359  58.672  13.062  1.00 31.00           O
ATOM     62  CB  PRO A   7       3.963  56.730  13.741  1.00 31.52           C
ATOM     63  CG  PRO A   7       4.012  55.430  14.379  1.00 32.79           C
ATOM     64  CD  PRO A   7       5.514  55.095  14.483  1.00 32.60           C
ATOM     65  HA  PRO A   7       4.705  56.327  11.678  1.00 31.54           H
ATOM     66  HB2 PRO A   7       4.154  57.540  14.460  1.00 31.52           H
ATOM     67  HB3 PRO A   7       2.977  56.923  13.294  1.00 31.52           H
ATOM     68  HG2 PRO A   7       3.540  55.455  15.372  1.00 32.79           H
ATOM     69  HG3 PRO A   7       3.475  54.675  13.786  1.00 32.79           H
ATOM     70  HD2 PRO A   7       5.980  55.544  15.373  1.00 32.60           H
ATOM     71  HD3 PRO A   7       5.696  54.012  14.536  1.00 32.60           H
ATOM     72  N   GLY A   8       5.386  58.417  11.036  1.00 28.81           N
ATOM     73  CA  GLY A   8       5.916  59.617  10.412  1.00 28.14           C
ATOM     74  C   GLY A   8       7.143  59.366   9.540  1.00 26.94           C
ATOM     75  O   GLY A   8       7.557  60.229   8.751  1.00 26.16           O
ATOM     76  H   GLY A   8       4.784  57.898  10.429  1.00 28.81           H
ATOM     77  HA2 GLY A   8       5.129  60.078   9.797  1.00 28.14           H
ATOM     78  HA3 GLY A   8       6.177  60.342  11.197  1.00 28.14           H
ATOM     79  N   ALA A   9       7.683  58.159   9.650  1.00 26.13           N
ATOM     80  CA  ALA A   9       8.750  57.696   8.757  1.00 25.16           C
ATOM     81  C   ALA A   9       8.313  56.419   8.034  1.00 25.14           C
ATOM     82  O   ALA A   9       7.221  55.876   8.276  1.00 25.57           O
ATOM     83  CB  ALA A   9      10.038  57.470   9.546  1.00 25.41           C
ATOM     84  H   ALA A   9       7.406  57.489  10.338  1.00 26.13           H
ATOM     85  HA  ALA A   9       8.947  58.469   7.999  1.00 25.16           H
ATOM     86  HB1 ALA A   9      10.830  57.123   8.865  1.00 25.41           H
ATOM     87  HB2 ALA A   9      10.349  58.413  10.019  1.00 25.41           H
ATOM     88  HB3 ALA A   9       9.864  56.711  10.323  1.00 25.41           H
ATOM     89  N   TRP A  10       9.132  55.968   7.091  1.00 24.79           N
ATOM     90  CA  TRP A  10       8.801  54.772   6.341  1.00 23.84           C
ATOM     91  C   TRP A  10      10.106  53.977   6.084  1.00 23.68           C
ATOM     92  O   TRP A  10      11.196  54.413   6.461  1.00 21.87           O
ATOM     93  CB  TRP A  10       8.093  55.130   5.023  1.00 23.84           C
ATOM     94  CG  TRP A  10       8.914  55.811   3.994  1.00 21.18           C
ATOM     95  CD1 TRP A  10       9.502  55.245   2.912  1.00 23.12           C
ATOM     96  CD2 TRP A  10       9.276  57.199   3.966  1.00 23.18           C
ATOM     97  NE1 TRP A  10      10.195  56.191   2.193  1.00 23.94           N
ATOM     98  CE2 TRP A  10      10.049  57.406   2.829  1.00 24.73           C
ATOM     99  CE3 TRP A  10       8.976  58.314   4.790  1.00 25.02           C
ATOM    100  CZ2 TRP A  10      10.585  58.649   2.506  1.00 24.98           C
ATOM    101  CZ3 TRP A  10       9.511  59.554   4.437  1.00 24.23           C
ATOM    102  CH2 TRP A  10      10.275  59.704   3.315  1.00 23.25           C
ATOM    103  H   TRP A  10       9.998  56.399   6.838  1.00 24.79           H
ATOM    104  HA  TRP A  10       8.103  54.149   6.919  1.00 23.84           H
ATOM    105  HB2 TRP A  10       7.692  54.204   4.585  1.00 23.84           H
ATOM    106  HB3 TRP A  10       7.233  55.774   5.258  1.00 23.84           H
ATOM    107  HD1 TRP A  10       9.435  54.180   2.646  1.00 23.12           H
ATOM    108  HE1 TRP A  10      10.715  56.026   1.355  1.00 23.94           H
ATOM    109  HE3 TRP A  10       8.340  58.205   5.681  1.00 25.02           H
ATOM    110  HZ2 TRP A  10      11.236  58.777   1.629  1.00 24.98           H
ATOM    111  HZ3 TRP A  10       9.313  60.428   5.075  1.00 24.23           H
ATOM    112  HH2 TRP A  10      10.652  60.704   3.056  1.00 23.25           H
TER
HETATM  113  O   HOH A 530      14.129  75.372   1.869  1.00 42.52           O
HETATM  114  O   HOH A 531      16.760  75.823   5.378  1.00 55.47           O
HETATM  115  O   HOH A 532      17.376  76.181  -1.370  1.00 58.56           O
HETATM  116  O   HOH A 533      29.999  39.710  23.377  1.00 65.34           O
HETATM  117  O   HOH A 534       5.061  66.928  20.580  1.00 53.64           O
HETATM  118  O   HOH A 535      31.453  64.317  11.742  1.00 57.21           O
HETATM  119  O   HOH A 536      33.870  40.890  21.690  1.00 49.33           O
HETATM  120  O   HOH A 537      12.870  61.651  25.404  1.00 60.53           O
HETATM  121  O   HOH A 538       1.073  55.236   2.188  1.00 56.32           O
HETATM  122  O   HOH A 539       5.912  53.669  23.394  1.00 76.65           O
HETATM  123  O   HOH A 540      15.986  47.456 -16.281  1.00 62.61           O
HETATM  124  O   HOH A 541      16.397  56.900  23.573  1.00 58.46           O
END
"""

  in_f = open("%s.pdb" % prefix, 'w')
  in_f.write(input_pdb_str)
  in_f.close()
  cmd = " ".join([
      "iotbx.pdb.sort_atoms",
      "%s.pdb" % prefix,
      ])
  print(cmd)
  assert not easy_run.call(cmd)
  assert os.path.isfile("%s_sorted.pdb" % prefix)
  out_f = open("%s_sorted.pdb" % prefix, 'r')
  out_str = out_f.read()
  assert not show_diff(result_pdb_str, out_str)
  out_f.close()

if (__name__ == "__main__"):
  t0 = time.time()
  exercise_1()
  print("Time: %6.4f"%(time.time()-t0))
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_split_data_cif.py
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

from libtbx import easy_run
import iotbx.cif
from libtbx.test_utils import approx_equal, show_diff
from six.moves import cStringIO as StringIO
import iotbx.mtz
import os

sf_5r82 = """\
data_r5r82sf
#
_audit.revision_id     1_0
_audit.creation_date   2020-03-11
_audit.update_record   "Initial release"
#
_cell.entry_id      5r82
_cell.length_a      112.665
_cell.length_b      52.848
_cell.length_c      44.468
_cell.angle_alpha   90.000
_cell.angle_beta    102.966
_cell.angle_gamma   90.000
#
_diffrn.id        1
_diffrn.details   "data from final refinement with ligand, final.mtz"
_diffrn.crystal_id 1
#
_diffrn_radiation_wavelength.id           1
_diffrn_radiation_wavelength.wavelength   0.9126
#
_entry.id   5r82
#
_exptl_crystal.id   1
#
_reflns_scale.group_code   1
#
_symmetry.entry_id               5r82
_symmetry.space_group_name_H-M   "C 1 2 1"
_symmetry.Int_Tables_number      5
#
loop_
_refln.crystal_id
_refln.wavelength_id
_refln.scale_group_code
_refln.index_h
_refln.index_k
_refln.index_l
_refln.status
_refln.F_meas_au
_refln.F_meas_sigma_au
_refln.F_calc_au
_refln.phase_calc
_refln.pdbx_FWT
_refln.pdbx_PHWT
_refln.pdbx_DELFWT
_refln.pdbx_DELPHWT
_refln.fom
1 1 1 -86 0  8  o ?       ?     14.57   0.00   8.89    0.00   0.00    0.00   0.00
1 1 1 -85 1  3  o ?       ?     74.69   159.82 45.89   159.75 0.00    0.00   0.00
1 1 1 -85 1  4  o ?       ?     18.89   136.18 11.62   136.53 0.00    0.00   0.00
1 1 1 -85 1  5  o ?       ?     40.54   44.81  24.89   44.97  0.00    0.00   0.00
1 1 1 -85 1  6  o ?       ?     14.55   265.49 8.91    267.15 0.00    0.00   0.00
1 1 1 -85 1  7  o ?       ?     38.21   15.80  23.59   15.42  0.00    0.00   0.00
1 1 1 -85 1  8  o ?       ?     47.35   181.29 29.24   181.19 0.00    0.00   0.00
1 1 1 -85 1  9  o 56.21   26.85 38.50   89.75  41.26   89.77  17.50   89.77  0.58
1 1 1 -85 1  10 o 65.09   31.91 27.40   104.11 36.22   104.55 19.20   104.55 0.41
1 1 1 -85 1  11 o 54.28   26.34 24.33   27.77  29.23   27.86  14.13   27.86  0.41
1 1 1 -85 1  12 o 58.89   28.38 21.26   158.09 27.96   158.29 14.93   158.29 0.35
1 1 1 -85 3  4  o ?       ?     16.70   93.70  10.28   93.61  0.00    0.00   0.00
1 1 1 -85 3  5  o ?       ?     18.82   319.51 11.62   319.61 0.00    0.00   0.00
1 1 1 -85 3  6  o ?       ?     9.64    143.57 6.02    143.97 0.00    0.00   0.00
1 1 1 -85 3  7  o ?       ?     34.35   260.46 21.18   260.07 0.00    0.00   0.00
1 1 1 -85 3  8  o ?       ?     30.57   8.43   18.77   8.70   0.00    0.00   0.00
1 1 1 -85 3  9  o 66.81   31.32 64.85   81.01  57.84   80.86  17.89   80.86  0.73
1 1 1 -85 3  10 o 59.74   28.33 64.04   132.52 49.17   132.36 9.69    132.36 0.74
1 1 1 -85 3  11 o 50.02   24.64 5.34    93.51  6.70    95.13  3.34    95.13  0.10
1 1 1 -85 5  5  o ?       ?     29.69   339.80 18.22   340.06 0.00    0.00   0.00
1 1 1 -85 5  6  o ?       ?     52.33   264.97 32.14   265.05 0.00    0.00   0.00
1 1 1 -85 5  7  o ?       ?     63.54   232.41 39.02   232.26 0.00    0.00   0.00
1 1 1 -85 5  8  o ?       ?     25.64   55.65  15.80   55.84  0.00    0.00   0.00
1 1 1 -85 5  9  o 44.64   22.72 27.71   201.58 23.51   202.12 6.57    202.12 0.45
1 1 1 -85 5  10 o ?       ?     48.38   118.56 29.58   118.56 0.00    0.00   0.00
1 1 1 -84 0  1  o ?       ?     3.94    180.00 2.34    180.00 0.00    0.00   0.00
1 1 1 -84 0  2  o ?       ?     9.64    180.00 5.88    180.00 0.00    0.00   0.00
1 1 1 -84 0  3  o ?       ?     57.42   180.00 35.50   180.00 0.00    0.00   0.00
1 1 1 -84 0  4  o ?       ?     5.23    0.00   3.15    0.00   0.00    0.00   0.00
1 1 1 -84 0  5  o ?       ?     3.86    180.00 2.39    180.00 0.00    0.00   0.00
1 1 1 -84 0  6  o ?       ?     21.93   0.00   13.65   0.00   0.00    0.00   0.00
1 1 1 -84 0  7  o ?       ?     7.45    0.00   4.61    0.00   0.00    0.00   0.00
1 1 1 -84 0  8  o 73.12   45.70 7.69    0.00   15.82   0.00   11.03   0.00   0.14
#
data_r5r82Asf
#
_cell.entry_id      5r82
_cell.length_a      112.665
_cell.length_b      52.848
_cell.length_c      44.468
_cell.angle_alpha   90.000
_cell.angle_beta    102.966
_cell.angle_gamma   90.000
#
_diffrn.id        1
_diffrn.details   "data from original reflections, data.mtz"
_diffrn.crystal_id 1
#
_diffrn_radiation_wavelength.id           1
_diffrn_radiation_wavelength.wavelength   0.9126
#
_entry.id   5r82
#
_exptl_crystal.id   1
#
_reflns_scale.group_code   1
#
_symmetry.entry_id               5r82
_symmetry.space_group_name_H-M   "C 1 2 1"
_symmetry.Int_Tables_number      5
#
loop_
_refln.crystal_id
_refln.wavelength_id
_refln.scale_group_code
_refln.index_h
_refln.index_k
_refln.index_l
_refln.status
_refln.F_meas_au
_refln.F_meas_sigma_au
1 1 1 -86 0  7  o ?      ?
1 1 1 -86 0  8  o ?      ?
1 1 1 -85 1  3  o ?      ?
1 1 1 -85 1  4  o ?      ?
1 1 1 -85 1  5  o ?      ?
1 1 1 -85 1  6  o ?      ?
1 1 1 -85 1  7  o ?      ?
1 1 1 -85 1  8  o ?      ?
1 1 1 -85 1  9  o 1.28   0.61
1 1 1 -85 1  10 o 1.47   0.72
1 1 1 -85 1  11 o 1.21   0.59
1 1 1 -85 1  12 o 1.30   0.63
1 1 1 -85 3  4  o ?      ?
1 1 1 -85 3  5  o ?      ?
1 1 1 -85 3  6  o ?      ?
1 1 1 -85 3  7  o ?      ?
1 1 1 -85 3  8  o ?      ?
1 1 1 -85 3  9  o 1.53   0.72
1 1 1 -85 3  10 o 1.35   0.64
1 1 1 -85 3  11 o 1.12   0.55
1 1 1 -85 3  12 o ?      ?
1 1 1 -85 5  5  o ?      ?
1 1 1 -85 5  6  o ?      ?
1 1 1 -85 5  7  o ?      ?
1 1 1 -85 5  8  o ?      ?
1 1 1 -85 5  9  o 1.02   0.52
1 1 1 -85 5  10 o ?      ?
1 1 1 -84 0  1  o ?      ?
1 1 1 -84 0  2  o ?      ?
1 1 1 -84 0  3  o ?      ?
1 1 1 -84 0  4  o ?      ?
1 1 1 -84 0  5  o ?      ?
1 1 1 -84 0  6  o ?      ?
1 1 1 -84 0  7  o ?      ?
1 1 1 -84 0  8  o 1.71   1.07
#
data_r5r82Bsf
#
_cell.entry_id      5r82
_cell.length_a      112.665
_cell.length_b      52.848
_cell.length_c      44.468
_cell.angle_alpha   90.000
_cell.angle_beta    102.970
_cell.angle_gamma   90.000
#
_diffrn.id        1
_diffrn.details   "data for ligand evidence map (PanDDA event map), event_map_1.mtz"
_diffrn.crystal_id 1
#
_diffrn_radiation_wavelength.id           1
_diffrn_radiation_wavelength.wavelength   0.9126
#
_entry.id   5r82
#
_exptl_crystal.id   1
#
_reflns_scale.group_code   1
#
_symmetry.entry_id               5r82
_symmetry.space_group_name_H-M   "P 1"
_symmetry.Int_Tables_number      1
#
loop_
_refln.crystal_id
_refln.wavelength_id
_refln.scale_group_code
_refln.index_h
_refln.index_k
_refln.index_l
_refln.status
_refln.F_meas_au
_refln.F_meas_sigma_au
_refln.pdbx_PHWT
1 1 1 -85 -6  7  o 183.35   1.00 42.48
1 1 1 -85 -6  8  o 204.28   1.00 118.73
1 1 1 -85 -5  5  o 408.51   1.00 26.47
1 1 1 -85 -5  6  o 368.34   1.00 -17.28
1 1 1 -85 -5  7  o 105.28   1.00 -108.00
1 1 1 -85 -5  8  o 447.04   1.00 49.71
1 1 1 -85 -5  9  o 151.27   1.00 76.05
1 1 1 -85 -5  10 o 177.73   1.00 -11.88
1 1 1 -85 -4  4  o 176.60   1.00 137.96
1 1 1 -85 -4  5  o 94.48    1.00 45.34
1 1 1 -85 -4  6  o 269.47   1.00 3.56
1 1 1 -85 -4  7  o 146.26   1.00 103.92
1 1 1 -85 -4  8  o 251.33   1.00 152.35
1 1 1 -85 -4  9  o 189.51   1.00 -158.44
1 1 1 -85 -4  10 o 340.08   1.00 50.25
1 1 1 -85 -4  11 o 85.03    1.00 42.71
1 1 1 -85 -3  4  o 458.44   1.00 -148.81
1 1 1 -85 -3  5  o 928.82   1.00 25.99
1 1 1 -85 -3  6  o 266.68   1.00 -145.70
1 1 1 -85 -3  7  o 524.04   1.00 20.59
1 1 1 -85 -3  8  o 824.38   1.00 126.20
1 1 1 -85 -3  9  o 334.69   1.00 -9.45
1 1 1 -85 -3  10 o 367.92   1.00 -34.78
1 1 1 -85 -3  11 o 622.58   1.00 74.86
1 1 1 -85 -2  3  o 197.98   1.00 -127.10
1 1 1 -85 -2  4  o 140.13   1.00 -111.56
#
#END OF REFLECTIONS
"""

sf_5r82_mtz_results = {'r5r82sf': """\
Title: phenix.cif_as_mtz
Space group symbol from file: C2
Space group number from file: 5
Space group from matrices: C 1 2 1 (No. 5)
Point group symbol from file: 2
Number of crystals: 2
Number of Miller indices: 33
Resolution range: 1.34113 1.30997
History:
Crystal 1:
  Name: HKL_base
  Project: HKL_base
  Id: 0
  Unit cell: (112.665, 52.848, 44.468, 90, 102.966, 90)
  Number of datasets: 1
  Dataset 1:
    Name: HKL_base
    Id: 0
    Wavelength: 0
    Number of columns: 0
Crystal 2:
  Name: crystal_0
  Project: project_0
  Id: 2
  Unit cell: (112.665, 52.848, 44.468, 90, 102.966, 90)
  Number of datasets: 1
  Dataset 1:
    Name: dataset
    Id: 1
    Wavelength: 0.9126
    Number of columns: 13
    label        #valid  %valid     min    max type
    H                33 100.00%  -86.00 -84.00 H: index h,k,l
    K                33 100.00%    0.00   5.00 H: index h,k,l
    L                33 100.00%    1.00  12.00 H: index h,k,l
    R-free-flags     33 100.00%    1.00   1.00 I: integer
    FOBS              9  27.27%   44.64  73.12 F: amplitude
    SIGFOBS           9  27.27%   22.72  45.70 Q: standard deviation
    FC               33 100.00%    3.86  74.69 F: amplitude
    PHIFC            33 100.00% -178.71 180.00 P: phase angle in degrees
    FWT              33 100.00%    2.34  57.84 F: amplitude
    PHWT             33 100.00% -178.81 180.00 P: phase angle in degrees
    DELFWT           33 100.00%    0.00  19.20 F: amplitude
    PHDELWT          33 100.00% -157.88 158.29 P: phase angle in degrees
    FOM              33 100.00%    0.00   0.74 F: amplitude
""",
'r5r82Asf':
"""Title: phenix.cif_as_mtz
Space group symbol from file: C2
Space group number from file: 5
Space group from matrices: C 1 2 1 (No. 5)
Point group symbol from file: 2
Number of crystals: 2
Number of Miller indices: 35
Resolution range: 1.34113 1.3096
History:
Crystal 1:
  Name: HKL_base
  Project: HKL_base
  Id: 0
  Unit cell: (112.665, 52.848, 44.468, 90, 102.966, 90)
  Number of datasets: 1
  Dataset 1:
    Name: HKL_base
    Id: 0
    Wavelength: 0
    Number of columns: 0
Crystal 2:
  Name: crystal_0
  Project: project_0
  Id: 2
  Unit cell: (112.665, 52.848, 44.468, 90, 102.966, 90)
  Number of datasets: 1
  Dataset 1:
    Name: dataset
    Id: 1
    Wavelength: 0.9126
    Number of columns: 6
    label        #valid  %valid    min    max type
    H                35 100.00% -86.00 -84.00 H: index h,k,l
    K                35 100.00%   0.00   5.00 H: index h,k,l
    L                35 100.00%   1.00  12.00 H: index h,k,l
    R-free-flags     35 100.00%   1.00   1.00 I: integer
    FOBS              9  25.71%   1.02   1.71 F: amplitude
    SIGFOBS           9  25.71%   0.52   1.07 Q: standard deviation
""", 'r5r82Bsf': """\
Title: phenix.cif_as_mtz
Space group symbol from file: P1
Space group number from file: 1
Space group from matrices: P 1 (No. 1)
Point group symbol from file: 1
Number of crystals: 2
Number of Miller indices: 26
Resolution range: 1.3216 1.31054
History:
Crystal 1:
  Name: HKL_base
  Project: HKL_base
  Id: 0
  Unit cell: (112.665, 52.848, 44.468, 90, 102.97, 90)
  Number of datasets: 1
  Dataset 1:
    Name: HKL_base
    Id: 0
    Wavelength: 0
    Number of columns: 0
Crystal 2:
  Name: crystal_0
  Project: project_0
  Id: 2
  Unit cell: (112.665, 52.848, 44.468, 90, 102.97, 90)
  Number of datasets: 1
  Dataset 1:
    Name: dataset
    Id: 1
    Wavelength: 0.9126
    Number of columns: 7
    label        #valid  %valid     min    max type
    H                26 100.00%  -85.00 -85.00 H: index h,k,l
    K                26 100.00%   -6.00  -2.00 H: index h,k,l
    L                26 100.00%    3.00  11.00 H: index h,k,l
    R-free-flags     26 100.00%    1.00   1.00 I: integer
    FOBS             26 100.00%   85.03 928.82 F: amplitude
    SIGFOBS          26 100.00%    1.00   1.00 Q: standard deviation
    PHWT             26 100.00% -158.44 152.35 P: phase angle in degrees
"""}

def tst_1(prefix="tst_split_data_cif_1"):
  with open(prefix+'.cif', 'w') as f:
    f.write(sf_5r82)
  easy_run.fully_buffered('iotbx.split_data_cif %s.cif' % prefix)
  original_model = iotbx.cif.reader(input_string=sf_5r82).model()
  block_names = original_model.keys()
  for bn in block_names:
    assert os.path.isfile('%s.cif_%s_000.mtz' % (prefix, bn))
    assert os.path.isfile('%s.cif_%s_000.cif' % (prefix, bn))

  # testing output cif
  for bn in block_names:
    m = iotbx.cif.reader(file_path='%s.cif_%s_000.cif' % (prefix, bn)).model()
    for k in original_model[bn].keys():
      assert approx_equal(m[bn][k], original_model[bn][k])

  # testing output mtz
  for bn in block_names:
    mtz_obj = iotbx.mtz.object('%s.cif_%s_000.mtz' % (prefix, bn))
    # print('working with', '%s.cif_%s_000.mtz' % (prefix, bn))
    strio = StringIO()
    mtz_obj.show_summary(out=strio)
    # mtz_obj.show_column_data(out=strio)
    val = strio.getvalue()
    assert not show_diff(val, sf_5r82_mtz_results[bn])






if __name__ == '__main__':
  tst_1()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_split_models.py
from __future__ import absolute_import, division, print_function

import os
import iotbx.pdb
from libtbx import easy_run
from libtbx.test_utils import approx_equal


def exercise():
  if (os.path.isfile("multi_model_1.pdb")):
    os.remove("multi_model_1.pdb")
  if (os.path.isfile("multi_model_2.pdb")):
    os.remove("multi_model_2.pdb")
  f = open("multi_model.pdb", "w")
  f.write("""\
CRYST1    1.000    1.000    1.000  90.00  90.00  90.00 P 1           1
ORIGX1      1.000000  0.000000  0.000000        0.00000
ORIGX2      0.000000  1.000000  0.000000        0.00000
ORIGX3      0.000000  0.000000  1.000000        0.00000
SCALE1      1.000000  0.000000  0.000000        0.00000
SCALE2      0.000000  1.000000  0.000000        0.00000
SCALE3      0.000000  0.000000  1.000000        0.00000
MODEL        1
ATOM      1  N   GLY P  -1     -22.866  -2.627  15.217  1.00  0.00           N
ATOM      2  CA  GLY P  -1     -22.714  -3.068  16.621  1.00  0.00           C
ATOM      3  C   GLY P  -1     -21.276  -3.457  16.936  1.00  0.00           C
ATOM      4  O   GLY P  -1     -20.538  -3.887  16.047  1.00  0.00           O
ATOM      5  H1  GLY P  -1     -22.583  -3.364  14.590  1.00  0.00           H
ATOM      6  H2  GLY P  -1     -22.293  -1.817  15.040  1.00  0.00           H
ATOM      7  H3  GLY P  -1     -23.828  -2.392  15.027  1.00  0.00           H
ATOM      8  HA2 GLY P  -1     -23.016  -2.261  17.288  1.00  0.00           H
ATOM      9  HA3 GLY P  -1     -23.352  -3.933  16.803  1.00  0.00           H
ENDMDL
MODEL        2
ATOM      1  N   GLY P  -1       7.889 -28.444  15.733  1.00  0.00           N
ATOM      2  CA  GLY P  -1       7.573 -27.021  15.481  1.00  0.00           C
ATOM      3  C   GLY P  -1       6.614 -26.458  16.523  1.00  0.00           C
ATOM      4  O   GLY P  -1       5.922 -27.210  17.215  1.00  0.00           O
ATOM      5  H1  GLY P  -1       8.513 -28.794  15.023  1.00  0.00           H
ATOM      6  H2  GLY P  -1       7.043 -28.994  15.722  1.00  0.00           H
ATOM      7  H3  GLY P  -1       8.329 -28.551  16.633  1.00  0.00           H
ATOM      8  HA2 GLY P  -1       8.492 -26.437  15.501  1.00  0.00           H
ATOM      9  HA3 GLY P  -1       7.112 -26.918  14.499  1.00  0.00           H
ENDMDL
END""")
  f.close()
  out = easy_run.fully_buffered("iotbx.pdb.split_models multi_model.pdb")
  assert (len(out.stdout_lines) == 2) and (len(out.stderr_lines) == 0)
  assert (os.path.isfile("multi_model_1.pdb") and
          os.path.isfile("multi_model_2.pdb"))
  sites = []
  for file in ["multi_model_1.pdb", "multi_model_2.pdb"] :
    pdb_in = iotbx.pdb.input(file)
    h = pdb_in.construct_hierarchy()
    assert (len(h.models()) == 1)
    sites.append(h.atoms().extract_xyz())
  assert approx_equal(sites[0].rms_difference(sites[1]), 38.9216638)

if (__name__ == "__main__"):
  exercise()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_symmetry.py
from __future__ import absolute_import, division, print_function

import iotbx.symmetry
from cctbx import sgtbx, uctbx
from libtbx.test_utils import Exception_expected
from libtbx.utils import Sorry
from six.moves import cStringIO as StringIO

def exercise():
  m = iotbx.symmetry.manager(prefer_pdb_space_group=True)
  (uc_mismatch, sg_mismatch) = m.add_reflections_file(
    file_name="data.mtz",
    space_group=sgtbx.space_group_info("P222"),
    unit_cell=uctbx.unit_cell("50 60 70 90 90 90"))
  assert (m.get_current_as_strings() == ('P 2 2 2', '50 60 70 90 90 90'))
  (uc_mismatch, sg_mismatch) = m.add_pdb_file(
    file_name="model.pdb",
    space_group=sgtbx.space_group_info("P212121"),
    unit_cell=uctbx.unit_cell("50 60 70 90 90 90"))
  assert (not (uc_mismatch or sg_mismatch))
  (uc_mismatch, sg_mismatch) = m.add_pdb_file(
    file_name="reference_model.pdb",
    space_group=sgtbx.space_group_info("P63"),
    unit_cell=uctbx.unit_cell("40 40 75 90 90 120"))
  assert ((uc_mismatch, sg_mismatch) == (True, True))
  assert (m.get_current_as_strings() == ('P 21 21 21', '50 60 70 90 90 90'))
  (uc_mismatch, sg_mismatch) = m.add_reflections_file(
    file_name="data_neutron.mtz",
    space_group=sgtbx.space_group_info("P222"),
    unit_cell=uctbx.unit_cell("50.1 60 70.1 90 90 90"))
  assert (not (uc_mismatch or sg_mismatch))
  (uc_mismatch, sg_mismatch) = m.add_reflections_file(
    file_name="data_rfree.hkl",
    space_group=None,
    unit_cell=None)
  assert (not (uc_mismatch or sg_mismatch))
  assert (m.get_current_as_strings() == ('P 21 21 21', '50 60 70 90 90 90'))
  assert (m.check_cell_compatibility("phenix.refine"))
  symm_choices = m.get_symmetry_choices()
  assert (symm_choices.space_group_files == [('model.pdb', 'P 21 21 21'),
    ('reference_model.pdb', 'P 63'), ('data.mtz', 'P 2 2 2'),
    ('data_neutron.mtz', 'P 2 2 2')])
  assert (symm_choices.unit_cell_files == [
    ('model.pdb', '(50, 60, 70, 90, 90, 90)'),
    ('reference_model.pdb', '(40, 40, 75, 90, 90, 120)'),
    ('data.mtz', '(50, 60, 70, 90, 90, 90)'),
    ('data_neutron.mtz', '(50.1, 60, 70.1, 90, 90, 90)')])
  m.set_current_as_strings("P63", "50 60 70 90 90 90")
  try :
    m.check_cell_compatibility(
      program_name="phenix.refine",
      raise_error_if_incomplete=True)
  except Sorry :
    pass
  else :
    raise Exception_expected
  out = StringIO()
  m.show(out=out)
  assert (out.getvalue() == """\
model.pdb: (50, 60, 70, 90, 90, 90) P 21 21 21
reference_model.pdb: (40, 40, 75, 90, 90, 120) P 63
data.mtz: (50, 60, 70, 90, 90, 90) P 2 2 2
data_neutron.mtz: (50.1, 60, 70.1, 90, 90, 90) P 2 2 2
data_rfree.hkl: None None
""")

if (__name__ == "__main__"):
  exercise()
  print("OK")


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_wildcard.py
from __future__ import absolute_import, division, print_function
from iotbx import wildcard

def exercise():
  assert wildcard.is_match(string="", pattern="")
  assert wildcard.is_match("", "*")
  assert wildcard.is_match("a", "?")
  assert wildcard.is_match("a", "[a-z]")
  assert wildcard.is_match("wildcard", "wi*card")
  assert not wildcard.is_match("wildcard", "wi*cart")
  assert wildcard.is_match("wildcard", "wi*c*d")
  assert not wildcard.is_match("wildcard", "wi*z*d")
  assert wildcard.is_match("wildcard", "w*c??d")
  assert not wildcard.is_match("wildcard", "w*d??d")
  assert wildcard.is_match("wildcard", "w*c[a]?d")
  assert not wildcard.is_match("wildcard", "w*c[^a]?d")
  assert not wildcard.is_match("wild*ard", r"wild\*ard")
  assert wildcard.is_match("wild*ard", r"wild\*ard", escape_char='\\')
  assert wildcard.is_match("wild*ard", r"wild\**", escape_char='\\')
  assert wildcard.is_match(
    r"\*?[^a-z]", r"\\\*\?\[\^\a\-\z\]", escape_char='\\')
  assert not wildcard.is_match(
    r"\*?[^a-z]", r"\\\*\?\[\^\a\-\z\]")
  print("OK")

if (__name__ == "__main__"):
  exercise()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/tst_xray_scale.py
from __future__ import absolute_import, division, print_function
import iotbx.pdb
from cctbx import crystal
from libtbx.test_utils import approx_equal
import mmtbx.model
from six.moves import range

cif_str="""
data_5JUP
#
_atom_sites.entry_id                    5JUP
_atom_sites.fract_transf_matrix[1][1]   1.000000
_atom_sites.fract_transf_matrix[1][2]   0.000000
_atom_sites.fract_transf_matrix[1][3]   0.000000
_atom_sites.fract_transf_matrix[2][1]   0.000000
_atom_sites.fract_transf_matrix[2][2]   1.000000
_atom_sites.fract_transf_matrix[2][3]   0.000000
_atom_sites.fract_transf_matrix[3][1]   0.000000
_atom_sites.fract_transf_matrix[3][2]   0.000000
_atom_sites.fract_transf_matrix[3][3]   1.000000
_atom_sites.fract_transf_vector[1]      0.00000
_atom_sites.fract_transf_vector[2]      0.00000
_atom_sites.fract_transf_vector[3]      0.00000
#
loop_
_atom_type.symbol
C
MG
N
O
P
S
#
loop_
_atom_site.group_PDB
_atom_site.id
_atom_site.type_symbol
_atom_site.label_atom_id
_atom_site.label_alt_id
_atom_site.label_comp_id
_atom_site.label_asym_id
_atom_site.label_entity_id
_atom_site.label_seq_id
_atom_site.pdbx_PDB_ins_code
_atom_site.Cartn_x
_atom_site.Cartn_y
_atom_site.Cartn_z
_atom_site.occupancy
_atom_site.B_iso_or_equiv
_atom_site.auth_seq_id
_atom_site.auth_comp_id
_atom_site.auth_asym_id
_atom_site.auth_atom_id
_atom_site.pdbx_PDB_model_num
ATOM   9      C  "C3'" . U   A  1  1    ? 175.229 258.091 229.127 1.00 113.67 1    U   A  "C3'" 1
ATOM   7      C  "C4'" . U   A  1  1    ? 175.388 257.913 227.616 1.00 113.21 1    U   A  "C4'" 1
ATOM   6      C  "C5'" . U   A  1  1    ? 174.124 257.916 226.769 1.00 114.11 1    U   A  "C5'" 1
ATOM   10     O  "O3'" . U   A  1  1    ? 176.253 257.344 229.761 1.00 112.89 1    U   A  "O3'" 1
ATOM   8      O  "O4'" . U   A  1  1    ? 176.291 258.974 227.185 1.00 112.70 1    U   A  "O4'" 1
ATOM   5      O  "O5'" . U   A  1  1    ? 173.735 259.270 226.430 1.00 115.09 1    U   A  "O5'" 1
ATOM   3      O  OP1   . U   A  1  1    ? 174.056 259.302 223.918 1.00 117.16 1    U   A  OP1   1
ATOM   4      O  OP2   . U   A  1  1    ? 172.661 261.090 225.058 1.00 104.87 1    U   A  OP2   1
ATOM   1      O  OP3   . U   A  1  1    ? 171.796 258.709 224.899 1.00 116.23 1    U   A  OP3   1
ATOM   2      P  P     . U   A  1  1    ? 173.022 259.610 224.994 1.00 116.34 1    U   A  P     1
#
"""

def run(prefix="tst_iotbx_tst_xray_scale_1"):
  """
  Exercise obtaining exactly the same xray structure from pdb and cif.
  Caveate is SCALE records (fract_transf_matrix). In pdb they explicitly
  suppressed when crystal_symmetry is supplied, see
  iotbx/pdb/__init__.py:939 (def xray_structure_simple):
  if(crystal_symmetry is not None): self._scale_matrix = None
  """
  fo = open("%s.cif" % prefix,"w")
  print(cif_str, file=fo)
  fo.close()
  # crystal symmetry from map
  cs = crystal.symmetry((419., 419., 419., 90.0, 90.0, 90.0), 1)
  # xrs from mmCIF
  cif_inp = iotbx.pdb.input(file_name="%s.cif" % prefix)
  # print "======== doing xrs from cif =============="
  xrs_cif = cif_inp.xray_structure_simple(crystal_symmetry = cs)
  # xrs from PDB
  cif_inp.construct_hierarchy().write_pdb_file(prefix+".pdb")
  pdb_inp = iotbx.pdb.input(file_name="%s.pdb" % prefix)
  # print "======== doing xrs from pdb =============="
  xrs_pdb = pdb_inp.xray_structure_simple(crystal_symmetry = cs)
  #
  for i in range(len(xrs_cif.sites_cart())):
    assert approx_equal(xrs_cif.sites_cart()[i], xrs_pdb.sites_cart()[i])
  print("OK")

def run2(prefix="iotbx_tst_xray_scale_2"):
  """ same as run(), but using mmtbx.model.
  Not clear why it is failing... Need to ask Pavel to look together."""
  cs = crystal.symmetry((419., 419., 419., 90.0, 90.0, 90.0), 1)
  model_cif = mmtbx.model.manager(
      model_input = iotbx.pdb.input(lines=cif_str.split("\n"), source_info=None),
      crystal_symmetry=cs)
  xrs_cif = model_cif.get_xray_structure()
  txt_pdb = model_cif.model_as_pdb()
  model_pdb = mmtbx.model.manager(
      model_input = iotbx.pdb.input(lines=txt_pdb.split("\n"), source_info=None),
      crystal_symmetry=cs)
  xrs_pdb = model_pdb.get_xray_structure()
  for i in range(len(xrs_cif.sites_cart())):
    assert approx_equal(xrs_cif.sites_cart()[i], xrs_pdb.sites_cart()[i])
  print("OK")

if (__name__ == "__main__"):
  run()
  run2()


 *******************************************************************************


 *******************************************************************************
iotbx/regression/utils.py
from __future__ import absolute_import, division, print_function
from cctbx.development import random_structure
from cctbx import miller
from cctbx.array_family import flex
import random
from six.moves import range

def random_f_calc(space_group_info, n_scatterers, d_min, anomalous_flag,
                  verbose=0):
  if (anomalous_flag and space_group_info.group().is_centric()):
    return None
  structure = random_structure.xray_structure(
    space_group_info,
    elements=["const"]*n_scatterers,
    volume_per_atom=500,
    min_distance=2.,
    general_positions_only=True)
  if (0 or verbose):
    structure.show_summary().show_scatterers()
  f_calc = structure.structure_factors(
    d_min=d_min, anomalous_flag=anomalous_flag).f_calc()
  f_calc = miller.array(
    miller_set=f_calc,
    data=f_calc.data()/flex.mean(flex.abs(f_calc.data())))
  if (f_calc.anomalous_flag()):
    selection = flex.bool(f_calc.indices().size(), True)
    for i in range(f_calc.indices().size()//10):
      j = random.randrange(f_calc.indices().size())
      selection[j] = False
    f_calc = f_calc.select(selection)
  return f_calc


 *******************************************************************************
